// Generated by VSCode Snippet Builder v0.0.0.13 by Edgemeal © 2019
// Donate: https://www.paypal.me/Edgemeal
//
// ReaScript API for Lua only
// Source: ReaScript API v6.74/win64
// Created: samedi 4 février 2023

{

	"AddMediaItemToTrack lua": {
	"prefix": "reaper.AddMediaItemToTrack",
	"scope": "lua",
	"body": "reaper.AddMediaItemToTrack(${1:tr})$0",
	"description": "creates a new media item.\n\n"
	},

	"AddProjectMarker lua": {
	"prefix": "reaper.AddProjectMarker",
	"scope": "lua",
	"body": "reaper.AddProjectMarker(${1:proj}, ${2:isrgn}, ${3:pos}, ${4:rgnend}, ${5:name}, ${6:wantidx})$0",
	"description": "Returns the index of the created marker/region, or -1 on failure. Supply wantidx>=0 if you want a particular index number, but you'll get a different index number a region and wantidx is already in use.\n\n"
	},

	"AddProjectMarker2 lua": {
	"prefix": "reaper.AddProjectMarker2",
	"scope": "lua",
	"body": "reaper.AddProjectMarker2(${1:proj}, ${2:isrgn}, ${3:pos}, ${4:rgnend}, ${5:name}, ${6:wantidx}, ${7:color})$0",
	"description": "Returns the index of the created marker/region, or -1 on failure. Supply wantidx>=0 if you want a particular index number, but you'll get a different index number a region and wantidx is already in use. color should be 0 (default color), or ColorToNative(r,g,b)|0x1000000\n\n"
	},

	"AddRemoveReaScript lua": {
	"prefix": "reaper.AddRemoveReaScript",
	"scope": "lua",
	"body": "reaper.AddRemoveReaScript(${1:add}, ${2:sectionID}, ${3:scriptfn}, ${4:commit})$0",
	"description": "Add a ReaScript (return the new command ID, or 0 if failed) or remove a ReaScript (return >0 on success). Use commit==true when adding/removing a single script. When bulk adding/removing n scripts, you can optimize the n-1 first calls with commit==false and commit==true for the last call.\n\n"
	},

	"AddTakeToMediaItem lua": {
	"prefix": "reaper.AddTakeToMediaItem",
	"scope": "lua",
	"body": "reaper.AddTakeToMediaItem(${1:item})$0",
	"description": "creates a new take in an item\n\n"
	},

	"AddTempoTimeSigMarker lua": {
	"prefix": "reaper.AddTempoTimeSigMarker",
	"scope": "lua",
	"body": "reaper.AddTempoTimeSigMarker(${1:proj}, ${2:timepos}, ${3:bpm}, ${4:timesig_num}, ${5:timesig_denom}, ${6:lineartempochange})$0",
	"description": "Deprecated. Use SetTempoTimeSigMarker with ptidx=-1.\n\n"
	},

	"adjustZoom lua": {
	"prefix": "reaper.adjustZoom",
	"scope": "lua",
	"body": "reaper.adjustZoom(${1:amt}, ${2:forceset}, ${3:doupd}, ${4:centermode})$0",
	"description": "forceset=0,doupd=true,centermode=-1 for default\n\n"
	},

	"AnyTrackSolo lua": {
	"prefix": "reaper.AnyTrackSolo",
	"scope": "lua",
	"body": "reaper.AnyTrackSolo(${1:proj})$0",
	"description": ""
	},

	"APIExists lua": {
	"prefix": "reaper.APIExists",
	"scope": "lua",
	"body": "reaper.APIExists(${1:function_name})$0",
	"description": "Returns true if function_name exists in the REAPER API\n\n"
	},

	"APITest lua": {
	"prefix": "reaper.APITest",
	"scope": "lua",
	"body": "reaper.APITest()\n\n",
	"description": "Displays a message window if the API was successfully called.\n\n"
	},

	"ApplyNudge lua": {
	"prefix": "reaper.ApplyNudge",
	"scope": "lua",
	"body": "reaper.ApplyNudge(${1:project}, ${2:nudgeflag}, ${3:nudgewhat}, ${4:nudgeunits}, ${5:value}, ${6:reverse}, ${7:copies})$0",
	"description": "nudgeflag: &1=set to value (otherwise nudge by value), &2=snap\nnudgewhat: 0=position, 1=left trim, 2=left edge, 3=right edge, 4=contents, 5=duplicate, 6=edit cursor\nnudgeunit: 0=ms, 1=seconds, 2=grid, 3=256th notes, ..., 15=whole notes, 16=measures.beats (1.15 = 1 measure + 1.5 beats), 17=samples, 18=frames, 19=pixels, 20=item lengths, 21=item selections\nvalue: amount to nudge by, or value to set to\nreverse: in nudge mode, nudges left (otherwise ignored)\ncopies: in nudge duplicate mode, number of copies (otherwise ignored)\n\n"
	},

	"ArmCommand lua": {
	"prefix": "reaper.ArmCommand",
	"scope": "lua",
	"body": "reaper.ArmCommand(${1:cmd}, ${2:sectionname})$0",
	"description": "arms a command (or disarms if 0 passed) in section sectionname (empty string for main)\n\n"
	},

	"Audio_Init lua": {
	"prefix": "reaper.Audio_Init",
	"scope": "lua",
	"body": "reaper.Audio_Init()\n\n",
	"description": "open all audio and MIDI devices, if not open\n\n"
	},

	"Audio_IsPreBuffer lua": {
	"prefix": "reaper.Audio_IsPreBuffer",
	"scope": "lua",
	"body": "reaper.Audio_IsPreBuffer()\n\n",
	"description": "is in pre-buffer? threadsafe\n\n"
	},

	"Audio_IsRunning lua": {
	"prefix": "reaper.Audio_IsRunning",
	"scope": "lua",
	"body": "reaper.Audio_IsRunning()\n\n",
	"description": "is audio running at all? threadsafe\n\n"
	},

	"Audio_Quit lua": {
	"prefix": "reaper.Audio_Quit",
	"scope": "lua",
	"body": "reaper.Audio_Quit()\n\n",
	"description": "close all audio and MIDI devices, if open\n\n"
	},

	"AudioAccessorStateChanged lua": {
	"prefix": "reaper.AudioAccessorStateChanged",
	"scope": "lua",
	"body": "reaper.AudioAccessorStateChanged(${1:accessor})$0",
	"description": "Returns true if the underlying samples (track or media item take) have changed, but does not update the audio accessor, so the user can selectively call AudioAccessorValidateState only when needed. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, GetAudioAccessorEndTime, GetAudioAccessorSamples.\n\n"
	},

	"AudioAccessorUpdate lua": {
	"prefix": "reaper.AudioAccessorUpdate",
	"scope": "lua",
	"body": "reaper.AudioAccessorUpdate(${1:accessor})$0",
	"description": "Force the accessor to reload its state from the underlying track or media item take. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples.\n\n"
	},

	"AudioAccessorValidateState lua": {
	"prefix": "reaper.AudioAccessorValidateState",
	"scope": "lua",
	"body": "reaper.AudioAccessorValidateState(${1:accessor})$0",
	"description": "Validates the current state of the audio accessor -- must ONLY call this from the main thread. Returns true if the state changed.\n\n"
	},

	"BypassFxAllTracks lua": {
	"prefix": "reaper.BypassFxAllTracks",
	"scope": "lua",
	"body": "reaper.BypassFxAllTracks(${1:bypass})$0",
	"description": "-1 = bypass all if not all bypassed,otherwise unbypass all\n\n"
	},

	"CalcMediaSrcLoudness lua": {
	"prefix": "reaper.CalcMediaSrcLoudness",
	"scope": "lua",
	"body": "reaper.CalcMediaSrcLoudness(${1:mediasource})$0",
	"description": "Calculates loudness statistics of media via dry run render. Statistics will be displayed to the user; call GetSetProjectInfo_String('RENDER_STATS') to retrieve via API. Returns 1 if loudness was calculated successfully, -1 if user canceled the dry run render.\n\n"
	},

	"CalculateNormalization lua": {
	"prefix": "reaper.CalculateNormalization",
	"scope": "lua",
	"body": "reaper.CalculateNormalization(${1:source}, ${2:normalizeTo}, ${3:normalizeTarget}, ${4:normalizeStart}, ${5:normalizeEnd})$0",
	"description": "Calculate normalize adjustment for source media. normalizeTo: 0=LUFS-I, 1=RMS-I, 2=peak, 3=true peak, 4=LUFS-M max, 5=LUFS-S max. normalizeTarget: dBFS or LUFS value. normalizeStart, normalizeEnd: time bounds within source media for normalization calculation. If normalizationStart=0 and normalizationEnd=0, the full duration of the media will be used for the calculation.\n\n"
	},

	"ClearAllRecArmed lua": {
	"prefix": "reaper.ClearAllRecArmed",
	"scope": "lua",
	"body": "reaper.ClearAllRecArmed()\n\n",
	"description": ""
	},

	"ClearConsole lua": {
	"prefix": "reaper.ClearConsole",
	"scope": "lua",
	"body": "reaper.ClearConsole()\n\n",
	"description": "Clear the ReaScript console. See ShowConsoleMsg\n\n"
	},

	"ClearPeakCache lua": {
	"prefix": "reaper.ClearPeakCache",
	"scope": "lua",
	"body": "reaper.ClearPeakCache()\n\n",
	"description": "resets the global peak caches\n\n"
	},

	"ColorFromNative lua": {
	"prefix": "reaper.ColorFromNative",
	"scope": "lua",
	"body": "r, g, b = reaper.ColorFromNative(${1:col})$0",
	"description": "Extract RGB values from an OS dependent color. See ColorToNative.\n\n"
	},

	"ColorToNative lua": {
	"prefix": "reaper.ColorToNative",
	"scope": "lua",
	"body": "reaper.ColorToNative(${1:r}, ${2:g}, ${3:b})$0",
	"description": "Make an OS dependent color from RGB values (e.g. RGB() macro on Windows). r,g and b are in [0..255]. See ColorFromNative.\n\n"
	},

	"CountActionShortcuts lua": {
	"prefix": "reaper.CountActionShortcuts",
	"scope": "lua",
	"body": "reaper.CountActionShortcuts(${1:section}, ${2:cmdID})$0",
	"description": "Returns the number of shortcuts that exist for the given command ID.\nsee GetActionShortcutDesc, DeleteActionShortcut, DoActionShortcutDialog.\n\n"
	},

	"CountAutomationItems lua": {
	"prefix": "reaper.CountAutomationItems",
	"scope": "lua",
	"body": "reaper.CountAutomationItems(${1:env})$0",
	"description": "Returns the number of automation items on this envelope. See GetSetAutomationItemInfo\n\n"
	},

	"CountEnvelopePoints lua": {
	"prefix": "reaper.CountEnvelopePoints",
	"scope": "lua",
	"body": "reaper.CountEnvelopePoints(${1:envelope})$0",
	"description": "Returns the number of points in the envelope. See CountEnvelopePointsEx.\n\n"
	},

	"CountEnvelopePointsEx lua": {
	"prefix": "reaper.CountEnvelopePointsEx",
	"scope": "lua",
	"body": "reaper.CountEnvelopePointsEx(${1:envelope}, ${2:autoitem_idx})$0",
	"description": "Returns the number of points in the envelope.\nautoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\nFor automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.\nSee GetEnvelopePointEx, SetEnvelopePointEx, InsertEnvelopePointEx, DeleteEnvelopePointEx.\n\n"
	},

	"CountMediaItems lua": {
	"prefix": "reaper.CountMediaItems",
	"scope": "lua",
	"body": "reaper.CountMediaItems(${1:proj})$0",
	"description": "count the number of items in the project (proj=0 for active project)\n\n"
	},

	"CountProjectMarkers lua": {
	"prefix": "reaper.CountProjectMarkers",
	"scope": "lua",
	"body": "retval, num_markers, num_regions = reaper.CountProjectMarkers(${1:proj})$0",
	"description": "num_markersOut and num_regionsOut may be NULL.\n\n"
	},

	"CountSelectedMediaItems lua": {
	"prefix": "reaper.CountSelectedMediaItems",
	"scope": "lua",
	"body": "reaper.CountSelectedMediaItems(${1:proj})$0",
	"description": "count the number of selected items in the project (proj=0 for active project)\n\n"
	},

	"CountSelectedTracks lua": {
	"prefix": "reaper.CountSelectedTracks",
	"scope": "lua",
	"body": "reaper.CountSelectedTracks(${1:proj})$0",
	"description": "Count the number of selected tracks in the project (proj=0 for active project). This function ignores the master track, see CountSelectedTracks2.\n\n"
	},

	"CountSelectedTracks2 lua": {
	"prefix": "reaper.CountSelectedTracks2",
	"scope": "lua",
	"body": "reaper.CountSelectedTracks2(${1:proj}, ${2:wantmaster})$0",
	"description": "Count the number of selected tracks in the project (proj=0 for active project).\n\n"
	},

	"CountTakeEnvelopes lua": {
	"prefix": "reaper.CountTakeEnvelopes",
	"scope": "lua",
	"body": "reaper.CountTakeEnvelopes(${1:take})$0",
	"description": "See GetTakeEnvelope\n\n"
	},

	"CountTakes lua": {
	"prefix": "reaper.CountTakes",
	"scope": "lua",
	"body": "reaper.CountTakes(${1:item})$0",
	"description": "count the number of takes in the item\n\n"
	},

	"CountTCPFXParms lua": {
	"prefix": "reaper.CountTCPFXParms",
	"scope": "lua",
	"body": "reaper.CountTCPFXParms(${1:project}, ${2:track})$0",
	"description": "Count the number of FX parameter knobs displayed on the track control panel.\n\n"
	},

	"CountTempoTimeSigMarkers lua": {
	"prefix": "reaper.CountTempoTimeSigMarkers",
	"scope": "lua",
	"body": "reaper.CountTempoTimeSigMarkers(${1:proj})$0",
	"description": "Count the number of tempo/time signature markers in the project. See GetTempoTimeSigMarker, SetTempoTimeSigMarker, AddTempoTimeSigMarker.\n\n"
	},

	"CountTrackEnvelopes lua": {
	"prefix": "reaper.CountTrackEnvelopes",
	"scope": "lua",
	"body": "reaper.CountTrackEnvelopes(${1:track})$0",
	"description": "see GetTrackEnvelope\n\n"
	},

	"CountTrackMediaItems lua": {
	"prefix": "reaper.CountTrackMediaItems",
	"scope": "lua",
	"body": "reaper.CountTrackMediaItems(${1:track})$0",
	"description": "count the number of items in the track\n\n"
	},

	"CountTracks lua": {
	"prefix": "reaper.CountTracks",
	"scope": "lua",
	"body": "reaper.CountTracks(${1:proj})$0",
	"description": "count the number of tracks in the project (proj=0 for active project)\n\n"
	},

	"CreateNewMIDIItemInProj lua": {
	"prefix": "reaper.CreateNewMIDIItemInProj",
	"scope": "lua",
	"body": "reaper.CreateNewMIDIItemInProj(${1:track}, ${2:starttime}, ${3:endtime}, ${4:optional_qnIn})$0",
	"description": "Create a new MIDI media item, containing no MIDI events. Time is in seconds unless qn is set.\n\n"
	},

	"CreateTakeAudioAccessor lua": {
	"prefix": "reaper.CreateTakeAudioAccessor",
	"scope": "lua",
	"body": "reaper.CreateTakeAudioAccessor(${1:take})$0",
	"description": "Create an audio accessor object for this take. Must only call from the main thread. See CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples.\n\n"
	},

	"CreateTrackAudioAccessor lua": {
	"prefix": "reaper.CreateTrackAudioAccessor",
	"scope": "lua",
	"body": "reaper.CreateTrackAudioAccessor(${1:track})$0",
	"description": "Create an audio accessor object for this track. Must only call from the main thread. See CreateTakeAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples.\n\n"
	},

	"CreateTrackSend lua": {
	"prefix": "reaper.CreateTrackSend",
	"scope": "lua",
	"body": "reaper.CreateTrackSend(${1:tr}, ${2:desttrIn})$0",
	"description": "Create a send/receive (desttrInOptional!=NULL), or a hardware output (desttrInOptional==NULL) with default properties, return >=0 on success (== new send/receive index). See RemoveTrackSend, GetSetTrackSendInfo, GetTrackSendInfo_Value, SetTrackSendInfo_Value.\n\n"
	},

	"CSurf_FlushUndo lua": {
	"prefix": "reaper.CSurf_FlushUndo",
	"scope": "lua",
	"body": "reaper.CSurf_FlushUndo(${1:force})$0",
	"description": "call this to force flushing of the undo states after using CSurf_On*Change()\n\n"
	},

	"CSurf_GetTouchState lua": {
	"prefix": "reaper.CSurf_GetTouchState",
	"scope": "lua",
	"body": "reaper.CSurf_GetTouchState(${1:trackid}, ${2:isPan})$0",
	"description": ""
	},

	"CSurf_GoEnd lua": {
	"prefix": "reaper.CSurf_GoEnd",
	"scope": "lua",
	"body": "reaper.CSurf_GoEnd()\n\n",
	"description": ""
	},

	"CSurf_GoStart lua": {
	"prefix": "reaper.CSurf_GoStart",
	"scope": "lua",
	"body": "reaper.CSurf_GoStart()\n\n",
	"description": ""
	},

	"CSurf_NumTracks lua": {
	"prefix": "reaper.CSurf_NumTracks",
	"scope": "lua",
	"body": "reaper.CSurf_NumTracks(${1:mcpView})$0",
	"description": ""
	},

	"CSurf_OnArrow lua": {
	"prefix": "reaper.CSurf_OnArrow",
	"scope": "lua",
	"body": "reaper.CSurf_OnArrow(${1:whichdir}, ${2:wantzoom})$0",
	"description": ""
	},

	"CSurf_OnFwd lua": {
	"prefix": "reaper.CSurf_OnFwd",
	"scope": "lua",
	"body": "reaper.CSurf_OnFwd(${1:seekplay})$0",
	"description": ""
	},

	"CSurf_OnFXChange lua": {
	"prefix": "reaper.CSurf_OnFXChange",
	"scope": "lua",
	"body": "reaper.CSurf_OnFXChange(${1:trackid}, ${2:en})$0",
	"description": ""
	},

	"CSurf_OnInputMonitorChange lua": {
	"prefix": "reaper.CSurf_OnInputMonitorChange",
	"scope": "lua",
	"body": "reaper.CSurf_OnInputMonitorChange(${1:trackid}, ${2:monitor})$0",
	"description": ""
	},

	"CSurf_OnInputMonitorChangeEx lua": {
	"prefix": "reaper.CSurf_OnInputMonitorChangeEx",
	"scope": "lua",
	"body": "reaper.CSurf_OnInputMonitorChangeEx(${1:trackid}, ${2:monitor}, ${3:allowgang})$0",
	"description": ""
	},

	"CSurf_OnMuteChange lua": {
	"prefix": "reaper.CSurf_OnMuteChange",
	"scope": "lua",
	"body": "reaper.CSurf_OnMuteChange(${1:trackid}, ${2:mute})$0",
	"description": ""
	},

	"CSurf_OnMuteChangeEx lua": {
	"prefix": "reaper.CSurf_OnMuteChangeEx",
	"scope": "lua",
	"body": "reaper.CSurf_OnMuteChangeEx(${1:trackid}, ${2:mute}, ${3:allowgang})$0",
	"description": ""
	},

	"CSurf_OnPanChange lua": {
	"prefix": "reaper.CSurf_OnPanChange",
	"scope": "lua",
	"body": "reaper.CSurf_OnPanChange(${1:trackid}, ${2:pan}, ${3:relative})$0",
	"description": ""
	},

	"CSurf_OnPanChangeEx lua": {
	"prefix": "reaper.CSurf_OnPanChangeEx",
	"scope": "lua",
	"body": "reaper.CSurf_OnPanChangeEx(${1:trackid}, ${2:pan}, ${3:relative}, ${4:allowGang})$0",
	"description": ""
	},

	"CSurf_OnPause lua": {
	"prefix": "reaper.CSurf_OnPause",
	"scope": "lua",
	"body": "reaper.CSurf_OnPause()\n\n",
	"description": ""
	},

	"CSurf_OnPlay lua": {
	"prefix": "reaper.CSurf_OnPlay",
	"scope": "lua",
	"body": "reaper.CSurf_OnPlay()\n\n",
	"description": ""
	},

	"CSurf_OnPlayRateChange lua": {
	"prefix": "reaper.CSurf_OnPlayRateChange",
	"scope": "lua",
	"body": "reaper.CSurf_OnPlayRateChange(${1:playrate})$0",
	"description": ""
	},

	"CSurf_OnRecArmChange lua": {
	"prefix": "reaper.CSurf_OnRecArmChange",
	"scope": "lua",
	"body": "reaper.CSurf_OnRecArmChange(${1:trackid}, ${2:recarm})$0",
	"description": ""
	},

	"CSurf_OnRecArmChangeEx lua": {
	"prefix": "reaper.CSurf_OnRecArmChangeEx",
	"scope": "lua",
	"body": "reaper.CSurf_OnRecArmChangeEx(${1:trackid}, ${2:recarm}, ${3:allowgang})$0",
	"description": ""
	},

	"CSurf_OnRecord lua": {
	"prefix": "reaper.CSurf_OnRecord",
	"scope": "lua",
	"body": "reaper.CSurf_OnRecord()\n\n",
	"description": ""
	},

	"CSurf_OnRecvPanChange lua": {
	"prefix": "reaper.CSurf_OnRecvPanChange",
	"scope": "lua",
	"body": "reaper.CSurf_OnRecvPanChange(${1:trackid}, ${2:recv_index}, ${3:pan}, ${4:relative})$0",
	"description": ""
	},

	"CSurf_OnRecvVolumeChange lua": {
	"prefix": "reaper.CSurf_OnRecvVolumeChange",
	"scope": "lua",
	"body": "reaper.CSurf_OnRecvVolumeChange(${1:trackid}, ${2:recv_index}, ${3:volume}, ${4:relative})$0",
	"description": ""
	},

	"CSurf_OnRew lua": {
	"prefix": "reaper.CSurf_OnRew",
	"scope": "lua",
	"body": "reaper.CSurf_OnRew(${1:seekplay})$0",
	"description": ""
	},

	"CSurf_OnRewFwd lua": {
	"prefix": "reaper.CSurf_OnRewFwd",
	"scope": "lua",
	"body": "reaper.CSurf_OnRewFwd(${1:seekplay}, ${2:dir})$0",
	"description": ""
	},

	"CSurf_OnScroll lua": {
	"prefix": "reaper.CSurf_OnScroll",
	"scope": "lua",
	"body": "reaper.CSurf_OnScroll(${1:xdir}, ${2:ydir})$0",
	"description": ""
	},

	"CSurf_OnSelectedChange lua": {
	"prefix": "reaper.CSurf_OnSelectedChange",
	"scope": "lua",
	"body": "reaper.CSurf_OnSelectedChange(${1:trackid}, ${2:selected})$0",
	"description": ""
	},

	"CSurf_OnSendPanChange lua": {
	"prefix": "reaper.CSurf_OnSendPanChange",
	"scope": "lua",
	"body": "reaper.CSurf_OnSendPanChange(${1:trackid}, ${2:send_index}, ${3:pan}, ${4:relative})$0",
	"description": ""
	},

	"CSurf_OnSendVolumeChange lua": {
	"prefix": "reaper.CSurf_OnSendVolumeChange",
	"scope": "lua",
	"body": "reaper.CSurf_OnSendVolumeChange(${1:trackid}, ${2:send_index}, ${3:volume}, ${4:relative})$0",
	"description": ""
	},

	"CSurf_OnSoloChange lua": {
	"prefix": "reaper.CSurf_OnSoloChange",
	"scope": "lua",
	"body": "reaper.CSurf_OnSoloChange(${1:trackid}, ${2:solo})$0",
	"description": ""
	},

	"CSurf_OnSoloChangeEx lua": {
	"prefix": "reaper.CSurf_OnSoloChangeEx",
	"scope": "lua",
	"body": "reaper.CSurf_OnSoloChangeEx(${1:trackid}, ${2:solo}, ${3:allowgang})$0",
	"description": ""
	},

	"CSurf_OnStop lua": {
	"prefix": "reaper.CSurf_OnStop",
	"scope": "lua",
	"body": "reaper.CSurf_OnStop()\n\n",
	"description": ""
	},

	"CSurf_OnTempoChange lua": {
	"prefix": "reaper.CSurf_OnTempoChange",
	"scope": "lua",
	"body": "reaper.CSurf_OnTempoChange(${1:bpm})$0",
	"description": ""
	},

	"CSurf_OnTrackSelection lua": {
	"prefix": "reaper.CSurf_OnTrackSelection",
	"scope": "lua",
	"body": "reaper.CSurf_OnTrackSelection(${1:trackid})$0",
	"description": ""
	},

	"CSurf_OnVolumeChange lua": {
	"prefix": "reaper.CSurf_OnVolumeChange",
	"scope": "lua",
	"body": "reaper.CSurf_OnVolumeChange(${1:trackid}, ${2:volume}, ${3:relative})$0",
	"description": ""
	},

	"CSurf_OnVolumeChangeEx lua": {
	"prefix": "reaper.CSurf_OnVolumeChangeEx",
	"scope": "lua",
	"body": "reaper.CSurf_OnVolumeChangeEx(${1:trackid}, ${2:volume}, ${3:relative}, ${4:allowGang})$0",
	"description": ""
	},

	"CSurf_OnWidthChange lua": {
	"prefix": "reaper.CSurf_OnWidthChange",
	"scope": "lua",
	"body": "reaper.CSurf_OnWidthChange(${1:trackid}, ${2:width}, ${3:relative})$0",
	"description": ""
	},

	"CSurf_OnWidthChangeEx lua": {
	"prefix": "reaper.CSurf_OnWidthChangeEx",
	"scope": "lua",
	"body": "reaper.CSurf_OnWidthChangeEx(${1:trackid}, ${2:width}, ${3:relative}, ${4:allowGang})$0",
	"description": ""
	},

	"CSurf_OnZoom lua": {
	"prefix": "reaper.CSurf_OnZoom",
	"scope": "lua",
	"body": "reaper.CSurf_OnZoom(${1:xdir}, ${2:ydir})$0",
	"description": ""
	},

	"CSurf_ResetAllCachedVolPanStates lua": {
	"prefix": "reaper.CSurf_ResetAllCachedVolPanStates",
	"scope": "lua",
	"body": "reaper.CSurf_ResetAllCachedVolPanStates()\n\n",
	"description": ""
	},

	"CSurf_ScrubAmt lua": {
	"prefix": "reaper.CSurf_ScrubAmt",
	"scope": "lua",
	"body": "reaper.CSurf_ScrubAmt(${1:amt})$0",
	"description": ""
	},

	"CSurf_SetAutoMode lua": {
	"prefix": "reaper.CSurf_SetAutoMode",
	"scope": "lua",
	"body": "reaper.CSurf_SetAutoMode(${1:mode}, ${2:ignoresurf})$0",
	"description": ""
	},

	"CSurf_SetPlayState lua": {
	"prefix": "reaper.CSurf_SetPlayState",
	"scope": "lua",
	"body": "reaper.CSurf_SetPlayState(${1:play}, ${2:pause}, ${3:rec}, ${4:ignoresurf})$0",
	"description": ""
	},

	"CSurf_SetRepeatState lua": {
	"prefix": "reaper.CSurf_SetRepeatState",
	"scope": "lua",
	"body": "reaper.CSurf_SetRepeatState(${1:rep}, ${2:ignoresurf})$0",
	"description": ""
	},

	"CSurf_SetSurfaceMute lua": {
	"prefix": "reaper.CSurf_SetSurfaceMute",
	"scope": "lua",
	"body": "reaper.CSurf_SetSurfaceMute(${1:trackid}, ${2:mute}, ${3:ignoresurf})$0",
	"description": ""
	},

	"CSurf_SetSurfacePan lua": {
	"prefix": "reaper.CSurf_SetSurfacePan",
	"scope": "lua",
	"body": "reaper.CSurf_SetSurfacePan(${1:trackid}, ${2:pan}, ${3:ignoresurf})$0",
	"description": ""
	},

	"CSurf_SetSurfaceRecArm lua": {
	"prefix": "reaper.CSurf_SetSurfaceRecArm",
	"scope": "lua",
	"body": "reaper.CSurf_SetSurfaceRecArm(${1:trackid}, ${2:recarm}, ${3:ignoresurf})$0",
	"description": ""
	},

	"CSurf_SetSurfaceSelected lua": {
	"prefix": "reaper.CSurf_SetSurfaceSelected",
	"scope": "lua",
	"body": "reaper.CSurf_SetSurfaceSelected(${1:trackid}, ${2:selected}, ${3:ignoresurf})$0",
	"description": ""
	},

	"CSurf_SetSurfaceSolo lua": {
	"prefix": "reaper.CSurf_SetSurfaceSolo",
	"scope": "lua",
	"body": "reaper.CSurf_SetSurfaceSolo(${1:trackid}, ${2:solo}, ${3:ignoresurf})$0",
	"description": ""
	},

	"CSurf_SetSurfaceVolume lua": {
	"prefix": "reaper.CSurf_SetSurfaceVolume",
	"scope": "lua",
	"body": "reaper.CSurf_SetSurfaceVolume(${1:trackid}, ${2:volume}, ${3:ignoresurf})$0",
	"description": ""
	},

	"CSurf_SetTrackListChange lua": {
	"prefix": "reaper.CSurf_SetTrackListChange",
	"scope": "lua",
	"body": "reaper.CSurf_SetTrackListChange()\n\n",
	"description": ""
	},

	"CSurf_TrackFromID lua": {
	"prefix": "reaper.CSurf_TrackFromID",
	"scope": "lua",
	"body": "reaper.CSurf_TrackFromID(${1:idx}, ${2:mcpView})$0",
	"description": ""
	},

	"CSurf_TrackToID lua": {
	"prefix": "reaper.CSurf_TrackToID",
	"scope": "lua",
	"body": "reaper.CSurf_TrackToID(${1:track}, ${2:mcpView})$0",
	"description": ""
	},

	"DB2SLIDER lua": {
	"prefix": "reaper.DB2SLIDER",
	"scope": "lua",
	"body": "reaper.DB2SLIDER(${1:x})$0",
	"description": ""
	},

	"DeleteActionShortcut lua": {
	"prefix": "reaper.DeleteActionShortcut",
	"scope": "lua",
	"body": "reaper.DeleteActionShortcut(${1:section}, ${2:cmdID}, ${3:shortcutidx})$0",
	"description": "Delete the specific shortcut for the given command ID.\nSee CountActionShortcuts, GetActionShortcutDesc, DoActionShortcutDialog.\n\n"
	},

	"DeleteEnvelopePointEx lua": {
	"prefix": "reaper.DeleteEnvelopePointEx",
	"scope": "lua",
	"body": "reaper.DeleteEnvelopePointEx(${1:envelope}, ${2:autoitem_idx}, ${3:ptidx})$0",
	"description": "Delete an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done.\nautoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\nFor automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.\nSee CountEnvelopePointsEx, GetEnvelopePointEx, SetEnvelopePointEx, InsertEnvelopePointEx.\n\n"
	},

	"DeleteEnvelopePointRange lua": {
	"prefix": "reaper.DeleteEnvelopePointRange",
	"scope": "lua",
	"body": "reaper.DeleteEnvelopePointRange(${1:envelope}, ${2:time_start}, ${3:time_end})$0",
	"description": "Delete a range of envelope points. See DeleteEnvelopePointRangeEx, DeleteEnvelopePointEx.\n\n"
	},

	"DeleteEnvelopePointRangeEx lua": {
	"prefix": "reaper.DeleteEnvelopePointRangeEx",
	"scope": "lua",
	"body": "reaper.DeleteEnvelopePointRangeEx(${1:envelope}, ${2:autoitem_idx}, ${3:time_start}, ${4:time_end})$0",
	"description": "Delete a range of envelope points. autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\n\n"
	},

	"DeleteExtState lua": {
	"prefix": "reaper.DeleteExtState",
	"scope": "lua",
	"body": "reaper.DeleteExtState(${1:section}, ${2:key}, ${3:persist})$0",
	"description": "Delete the extended state value for a specific section and key. persist=true means the value should remain deleted the next time REAPER is opened. See SetExtState, GetExtState, HasExtState.\n\n"
	},

	"DeleteProjectMarker lua": {
	"prefix": "reaper.DeleteProjectMarker",
	"scope": "lua",
	"body": "reaper.DeleteProjectMarker(${1:proj}, ${2:markrgnindexnumber}, ${3:isrgn})$0",
	"description": "Delete a marker.  proj==NULL for the active project.\n\n"
	},

	"DeleteProjectMarkerByIndex lua": {
	"prefix": "reaper.DeleteProjectMarkerByIndex",
	"scope": "lua",
	"body": "reaper.DeleteProjectMarkerByIndex(${1:proj}, ${2:markrgnidx})$0",
	"description": "Differs from DeleteProjectMarker only in that markrgnidx is 0 for the first marker/region, 1 for the next, etc (see EnumProjectMarkers3), rather than representing the displayed marker/region ID number (see SetProjectMarker4).\n\n"
	},

	"DeleteTakeMarker lua": {
	"prefix": "reaper.DeleteTakeMarker",
	"scope": "lua",
	"body": "reaper.DeleteTakeMarker(${1:take}, ${2:idx})$0",
	"description": "Delete a take marker. Note that idx will change for all following take markers. See GetNumTakeMarkers, GetTakeMarker, SetTakeMarker\n\n"
	},

	"DeleteTakeStretchMarkers lua": {
	"prefix": "reaper.DeleteTakeStretchMarkers",
	"scope": "lua",
	"body": "reaper.DeleteTakeStretchMarkers(${1:take}, ${2:idx}, ${3:optional_countIn})$0",
	"description": "Deletes one or more stretch markers. Returns number of stretch markers deleted.\n\n"
	},

	"DeleteTempoTimeSigMarker lua": {
	"prefix": "reaper.DeleteTempoTimeSigMarker",
	"scope": "lua",
	"body": "reaper.DeleteTempoTimeSigMarker(${1:project}, ${2:markerindex})$0",
	"description": "Delete a tempo/time signature marker.\n\n"
	},

	"DeleteTrack lua": {
	"prefix": "reaper.DeleteTrack",
	"scope": "lua",
	"body": "reaper.DeleteTrack(${1:tr})$0",
	"description": "deletes a track\n\n"
	},

	"DeleteTrackMediaItem lua": {
	"prefix": "reaper.DeleteTrackMediaItem",
	"scope": "lua",
	"body": "reaper.DeleteTrackMediaItem(${1:tr}, ${2:it})$0",
	"description": ""
	},

	"DestroyAudioAccessor lua": {
	"prefix": "reaper.DestroyAudioAccessor",
	"scope": "lua",
	"body": "reaper.DestroyAudioAccessor(${1:accessor})$0",
	"description": "Destroy an audio accessor. Must only call from the main thread. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples. \n\n"
	},

	"DoActionShortcutDialog lua": {
	"prefix": "reaper.DoActionShortcutDialog",
	"scope": "lua",
	"body": "reaper.DoActionShortcutDialog(${1:hwnd}, ${2:section}, ${3:cmdID}, ${4:shortcutidx})$0",
	"description": "Open the action shortcut dialog to edit or add a shortcut for the given command ID. If (shortcutidx >= 0 && shortcutidx < CountActionShortcuts()), that specific shortcut will be replaced, otherwise a new shortcut will be added.\nSee CountActionShortcuts, GetActionShortcutDesc, DeleteActionShortcut.\n\n"
	},

	"Dock_UpdateDockID lua": {
	"prefix": "reaper.Dock_UpdateDockID",
	"scope": "lua",
	"body": "reaper.Dock_UpdateDockID(${1:ident_str}, ${2:whichDock})$0",
	"description": "updates preference for docker window ident_str to be in dock whichDock on next open\n\n"
	},

	"DockGetPosition lua": {
	"prefix": "reaper.DockGetPosition",
	"scope": "lua",
	"body": "reaper.DockGetPosition(${1:whichDock})$0",
	"description": "-1=not found, 0=bottom, 1=left, 2=top, 3=right, 4=floating\n\n"
	},

	"DockIsChildOfDock lua": {
	"prefix": "reaper.DockIsChildOfDock",
	"scope": "lua",
	"body": "retval, isFloatingDocker = reaper.DockIsChildOfDock(${1:hwnd})$0",
	"description": "returns dock index that contains hwnd, or -1\n\n"
	},

	"DockWindowActivate lua": {
	"prefix": "reaper.DockWindowActivate",
	"scope": "lua",
	"body": "reaper.DockWindowActivate(${1:hwnd})$0",
	"description": ""
	},

	"DockWindowAdd lua": {
	"prefix": "reaper.DockWindowAdd",
	"scope": "lua",
	"body": "reaper.DockWindowAdd(${1:hwnd}, ${2:name}, ${3:pos}, ${4:allowShow})$0",
	"description": ""
	},

	"DockWindowAddEx lua": {
	"prefix": "reaper.DockWindowAddEx",
	"scope": "lua",
	"body": "reaper.DockWindowAddEx(${1:hwnd}, ${2:name}, ${3:identstr}, ${4:allowShow})$0",
	"description": ""
	},

	"DockWindowRefresh lua": {
	"prefix": "reaper.DockWindowRefresh",
	"scope": "lua",
	"body": "reaper.DockWindowRefresh()\n\n",
	"description": ""
	},

	"DockWindowRefreshForHWND lua": {
	"prefix": "reaper.DockWindowRefreshForHWND",
	"scope": "lua",
	"body": "reaper.DockWindowRefreshForHWND(${1:hwnd})$0",
	"description": ""
	},

	"DockWindowRemove lua": {
	"prefix": "reaper.DockWindowRemove",
	"scope": "lua",
	"body": "reaper.DockWindowRemove(${1:hwnd})$0",
	"description": ""
	},

	"EditTempoTimeSigMarker lua": {
	"prefix": "reaper.EditTempoTimeSigMarker",
	"scope": "lua",
	"body": "reaper.EditTempoTimeSigMarker(${1:project}, ${2:markerindex})$0",
	"description": "Open the tempo/time signature marker editor dialog.\n\n"
	},

	"EnsureNotCompletelyOffscreen lua": {
	"prefix": "reaper.EnsureNotCompletelyOffscreen",
	"scope": "lua",
	"body": "integerr.left,  integerr.top,  integerr.right,  integerr.bot = reaper.EnsureNotCompletelyOffscreen(${1:integerr.left}, ${2:integerr.top}, ${3:integerr.right}, ${4:integerr.bot})$0",
	"description": "call with a saved window rect for your window and it'll correct any positioning info.\n\n"
	},

	"EnumerateFiles lua": {
	"prefix": "reaper.EnumerateFiles",
	"scope": "lua",
	"body": "reaper.EnumerateFiles(${1:path}, ${2:fileindex})$0",
	"description": "List the files in the 'path' directory. Returns NULL/nil when all files have been listed. Use fileindex = -1 to force re-read of directory (invalidate cache). See EnumerateSubdirectories\n\n"
	},

	"EnumerateSubdirectories lua": {
	"prefix": "reaper.EnumerateSubdirectories",
	"scope": "lua",
	"body": "reaper.EnumerateSubdirectories(${1:path}, ${2:subdirindex})$0",
	"description": "List the subdirectories in the 'path' directory. Use subdirindex = -1 to force re-read of directory (invalidate cache). Returns NULL/nil when all subdirectories have been listed. See EnumerateFiles\n\n"
	},

	"EnumPitchShiftModes lua": {
	"prefix": "reaper.EnumPitchShiftModes",
	"scope": "lua",
	"body": "retval, str = reaper.EnumPitchShiftModes(${1:mode})$0",
	"description": "Start querying modes at 0, returns FALSE when no more modes possible, sets strOut to NULL if a mode is currently unsupported\n\n"
	},

	"EnumPitchShiftSubModes lua": {
	"prefix": "reaper.EnumPitchShiftSubModes",
	"scope": "lua",
	"body": "reaper.EnumPitchShiftSubModes(${1:mode}, ${2:submode})$0",
	"description": "Returns submode name, or NULL\n\n"
	},

	"EnumProjectMarkers lua": {
	"prefix": "reaper.EnumProjectMarkers",
	"scope": "lua",
	"body": "retval, isrgn, pos, rgnend, name, markrgnindexnumber = reaper.EnumProjectMarkers(${1:idx})$0",
	"description": ""
	},

	"EnumProjectMarkers2 lua": {
	"prefix": "reaper.EnumProjectMarkers2",
	"scope": "lua",
	"body": "retval, isrgn, pos, rgnend, name, markrgnindexnumber = reaper.EnumProjectMarkers2(${1:proj}, ${2:idx})$0",
	"description": ""
	},

	"EnumProjectMarkers3 lua": {
	"prefix": "reaper.EnumProjectMarkers3",
	"scope": "lua",
	"body": "retval, isrgn, pos, rgnend, name, markrgnindexnumber, color = reaper.EnumProjectMarkers3(${1:proj}, ${2:idx})$0",
	"description": ""
	},

	"EnumProjects lua": {
	"prefix": "reaper.EnumProjects",
	"scope": "lua",
	"body": "retval, optional_projfn = reaper.EnumProjects(${1:idx})$0",
	"description": "idx=-1 for current project,projfn can be NULL if not interested in filename. use idx 0x40000000 for currently rendering project, if any.\n\n"
	},

	"EnumProjExtState lua": {
	"prefix": "reaper.EnumProjExtState",
	"scope": "lua",
	"body": "retval, optional_key, optional_val = reaper.EnumProjExtState(${1:proj}, ${2:extname}, ${3:idx})$0",
	"description": "Enumerate the data stored with the project for a specific extname. Returns false when there is no more data. See SetProjExtState, GetProjExtState.\n\n"
	},

	"EnumRegionRenderMatrix lua": {
	"prefix": "reaper.EnumRegionRenderMatrix",
	"scope": "lua",
	"body": "reaper.EnumRegionRenderMatrix(${1:proj}, ${2:regionindex}, ${3:rendertrack})$0",
	"description": "Enumerate which tracks will be rendered within this region when using the region render matrix. When called with rendertrack==0, the function returns the first track that will be rendered (which may be the master track); rendertrack==1 will return the next track rendered, and so on. The function returns NULL when there are no more tracks that will be rendered within this region.\n\n"
	},

	"EnumTrackMIDIProgramNames lua": {
	"prefix": "reaper.EnumTrackMIDIProgramNames",
	"scope": "lua",
	"body": "retval, programName = reaper.EnumTrackMIDIProgramNames(${1:track}, ${2:programNumber}, ${3:programName})$0",
	"description": "returns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated\n\n"
	},

	"EnumTrackMIDIProgramNamesEx lua": {
	"prefix": "reaper.EnumTrackMIDIProgramNamesEx",
	"scope": "lua",
	"body": "retval, programName = reaper.EnumTrackMIDIProgramNamesEx(${1:proj}, ${2:track}, ${3:programNumber}, ${4:programName})$0",
	"description": "returns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated\n\n"
	},

	"Envelope_Evaluate lua": {
	"prefix": "reaper.Envelope_Evaluate",
	"scope": "lua",
	"body": "retval, value, dVdS, ddVdS, dddVdS = reaper.Envelope_Evaluate(${1:envelope}, ${2:time}, ${3:samplerate}, ${4:samplesRequested})$0",
	"description": "Get the effective envelope value at a given time position. samplesRequested is how long the caller expects until the next call to Envelope_Evaluate (often, the buffer block size). The return value is how many samples beyond that time position that the returned values are valid. dVdS is the change in value per sample (first derivative), ddVdS is the second derivative, dddVdS is the third derivative. See GetEnvelopeScalingMode.\n\n"
	},

	"Envelope_FormatValue lua": {
	"prefix": "reaper.Envelope_FormatValue",
	"scope": "lua",
	"body": "buf = reaper.Envelope_FormatValue(${1:env}, ${2:value})$0",
	"description": "Formats the value of an envelope to a user-readable form\n\n"
	},

	"Envelope_GetParentTake lua": {
	"prefix": "reaper.Envelope_GetParentTake",
	"scope": "lua",
	"body": "retval, index, index2 = reaper.Envelope_GetParentTake(${1:env})$0",
	"description": "If take envelope, gets the take from the envelope. If FX, indexOut set to FX index, index2Out set to parameter index, otherwise -1.\n\n"
	},

	"Envelope_GetParentTrack lua": {
	"prefix": "reaper.Envelope_GetParentTrack",
	"scope": "lua",
	"body": "retval, index, index2 = reaper.Envelope_GetParentTrack(${1:env})$0",
	"description": "If track envelope, gets the track from the envelope. If FX, indexOut set to FX index, index2Out set to parameter index, otherwise -1.\n\n"
	},

	"Envelope_SortPoints lua": {
	"prefix": "reaper.Envelope_SortPoints",
	"scope": "lua",
	"body": "reaper.Envelope_SortPoints(${1:envelope})$0",
	"description": "Sort envelope points by time. See SetEnvelopePoint, InsertEnvelopePoint.\n\n"
	},

	"Envelope_SortPointsEx lua": {
	"prefix": "reaper.Envelope_SortPointsEx",
	"scope": "lua",
	"body": "reaper.Envelope_SortPointsEx(${1:envelope}, ${2:autoitem_idx})$0",
	"description": "Sort envelope points by time. autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See SetEnvelopePoint, InsertEnvelopePoint.\n\n"
	},

	"ExecProcess lua": {
	"prefix": "reaper.ExecProcess",
	"scope": "lua",
	"body": "reaper.ExecProcess(${1:cmdline}, ${2:timeoutmsec})$0",
	"description": "Executes command line, returns NULL on total failure, otherwise the return value, a newline, and then the output of the command. If timeoutmsec is 0, command will be allowed to run indefinitely (recommended for large amounts of returned output). timeoutmsec is -1 for no wait/terminate, -2 for no wait and minimize\n\n"
	},

	"file_exists lua": {
	"prefix": "reaper.file_exists",
	"scope": "lua",
	"body": "reaper.file_exists(${1:path})$0",
	"description": "returns true if path points to a valid, readable file\n\n"
	},

	"FindTempoTimeSigMarker lua": {
	"prefix": "reaper.FindTempoTimeSigMarker",
	"scope": "lua",
	"body": "reaper.FindTempoTimeSigMarker(${1:project}, ${2:time})$0",
	"description": "Find the tempo/time signature marker that falls at or before this time position (the marker that is in effect as of this time position).\n\n"
	},

	"format_timestr lua": {
	"prefix": "reaper.format_timestr",
	"scope": "lua",
	"body": "buf = reaper.format_timestr(${1:tpos}, ${2:buf})$0",
	"description": "Format tpos (which is time in seconds) as hh:mm:ss.sss. See format_timestr_pos, format_timestr_len.\n\n"
	},

	"format_timestr_len lua": {
	"prefix": "reaper.format_timestr_len",
	"scope": "lua",
	"body": "buf = reaper.format_timestr_len(${1:tpos}, ${2:buf}, ${3:offset}, ${4:modeoverride})$0",
	"description": "time formatting mode overrides: -1=proj default.\n0=time\n1=measures.beats + time\n2=measures.beats\n3=seconds\n4=samples\n5=h:m:s:f\noffset is start of where the length will be calculated from\n\n"
	},

	"format_timestr_pos lua": {
	"prefix": "reaper.format_timestr_pos",
	"scope": "lua",
	"body": "buf = reaper.format_timestr_pos(${1:tpos}, ${2:buf}, ${3:modeoverride})$0",
	"description": "time formatting mode overrides: -1=proj default.\n0=time\n1=measures.beats + time\n2=measures.beats\n3=seconds\n4=samples\n5=h:m:s:f\n"
	},

	"genGuid lua": {
	"prefix": "reaper.genGuid",
	"scope": "lua",
	"body": "gGUID = reaper.genGuid(${1:gGUID})$0",
	"description": ""
	},

	"get_config_var_string lua": {
	"prefix": "reaper.get_config_var_string",
	"scope": "lua",
	"body": "retval, buf = reaper.get_config_var_string(${1:name})$0",
	"description": "gets ini configuration variable value as string\n\n"
	},

	"get_ini_file lua": {
	"prefix": "reaper.get_ini_file",
	"scope": "lua",
	"body": "reaper.get_ini_file()\n\n",
	"description": "Get reaper.ini full filename.\n\n"
	},

	"GetActionShortcutDesc lua": {
	"prefix": "reaper.GetActionShortcutDesc",
	"scope": "lua",
	"body": "retval, desc = reaper.GetActionShortcutDesc(${1:section}, ${2:cmdID}, ${3:shortcutidx})$0",
	"description": "Get the text description of a specific shortcut for the given command ID.\nSee CountActionShortcuts,DeleteActionShortcut,DoActionShortcutDialog.\n\n"
	},

	"GetActiveTake lua": {
	"prefix": "reaper.GetActiveTake",
	"scope": "lua",
	"body": "reaper.GetActiveTake(${1:item})$0",
	"description": "get the active take in this item\n\n"
	},

	"GetAllProjectPlayStates lua": {
	"prefix": "reaper.GetAllProjectPlayStates",
	"scope": "lua",
	"body": "reaper.GetAllProjectPlayStates(${1:ignoreProject})$0",
	"description": "returns the bitwise OR of all project play states (1=playing, 2=pause, 4=recording)\n\n"
	},

	"GetAppVersion lua": {
	"prefix": "reaper.GetAppVersion",
	"scope": "lua",
	"body": "reaper.GetAppVersion()\n\n",
	"description": "Returns app version which may include an OS/arch signifier, such as: '6.17' (windows 32-bit), '6.17/x64' (windows 64-bit), '6.17/OSX64' (macOS 64-bit Intel), '6.17/OSX' (macOS 32-bit), '6.17/macOS-arm64', '6.17/linux-x86_64', '6.17/linux-i686', '6.17/linux-aarch64', '6.17/linux-armv7l', etc\n\n"
	},

	"GetArmedCommand lua": {
	"prefix": "reaper.GetArmedCommand",
	"scope": "lua",
	"body": "retval, sec = reaper.GetArmedCommand()\n\n",
	"description": "gets the currently armed command and section name (returns 0 if nothing armed). section name is empty-string for main section.\n\n"
	},

	"GetAudioAccessorEndTime lua": {
	"prefix": "reaper.GetAudioAccessorEndTime",
	"scope": "lua",
	"body": "reaper.GetAudioAccessorEndTime(${1:accessor})$0",
	"description": "Get the end time of the audio that can be returned from this accessor. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorSamples.\n\n"
	},

	"GetAudioAccessorHash lua": {
	"prefix": "reaper.GetAudioAccessorHash",
	"scope": "lua",
	"body": "hashNeed128 = reaper.GetAudioAccessorHash(${1:accessor}, ${2:hashNeed128})$0",
	"description": "Deprecated. See AudioAccessorStateChanged instead.\n\n"
	},

	"GetAudioAccessorSamples lua": {
	"prefix": "reaper.GetAudioAccessorSamples",
	"scope": "lua",
	"body": "reaper.GetAudioAccessorSamples(${1:accessor}, ${2:samplerate}, ${3:numchannels}, ${4:starttime_sec}, ${5:numsamplesperchannel}, ${6:samplebuffer})$0",
	"description": "Get a block of samples from the audio accessor. Samples are extracted immediately pre-FX, and returned interleaved (first sample of first channel, first sample of second channel...). Returns 0 if no audio, 1 if audio, -1 on error. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime.\nThis function has special handling in Python, and only returns two objects, the API function return value, and the sample buffer. Example usage:\naa = RPR_CreateTrackAudioAccessor(tr)\nbuf = list([0]*2*1024) # 2 channels, 1024 samples each, initialized to zero\npos = 0.0\n(ret, buf) = GetAudioAccessorSamples(aa, 44100, 2, pos, 1024, buf)\n# buf now holds the first 2*1024 audio samples from the track.\n# typically GetAudioAccessorSamples() would be called within a loop, increasing pos each time.\n"
	},

	"GetAudioAccessorStartTime lua": {
	"prefix": "reaper.GetAudioAccessorStartTime",
	"scope": "lua",
	"body": "reaper.GetAudioAccessorStartTime(${1:accessor})$0",
	"description": "Get the start time of the audio that can be returned from this accessor. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorEndTime, GetAudioAccessorSamples.\n\n"
	},

	"GetAudioDeviceInfo lua": {
	"prefix": "reaper.GetAudioDeviceInfo",
	"scope": "lua",
	"body": "retval, desc = reaper.GetAudioDeviceInfo(${1:attribute})$0",
	"description": "get information about the currently open audio device. attribute can be MODE, IDENT_IN, IDENT_OUT, BSIZE, SRATE, BPS. returns false if unknown attribute or device not open.\n\n"
	},

	"GetConfigWantsDock lua": {
	"prefix": "reaper.GetConfigWantsDock",
	"scope": "lua",
	"body": "reaper.GetConfigWantsDock(${1:ident_str})$0",
	"description": "gets the dock ID desired by ident_str, if any\n\n"
	},

	"GetCurrentProjectInLoadSave lua": {
	"prefix": "reaper.GetCurrentProjectInLoadSave",
	"scope": "lua",
	"body": "reaper.GetCurrentProjectInLoadSave()\n\n",
	"description": "returns current project if in load/save (usually only used from project_config_extension_t)\n\n"
	},

	"GetCursorContext lua": {
	"prefix": "reaper.GetCursorContext",
	"scope": "lua",
	"body": "reaper.GetCursorContext()\n\n",
	"description": "return the current cursor context: 0 if track panels, 1 if items, 2 if envelopes, otherwise unknown\n\n"
	},

	"GetCursorContext2 lua": {
	"prefix": "reaper.GetCursorContext2",
	"scope": "lua",
	"body": "reaper.GetCursorContext2(${1:want_last_valid})$0",
	"description": "0 if track panels, 1 if items, 2 if envelopes, otherwise unknown (unlikely when want_last_valid is true)\n\n"
	},

	"GetCursorPosition lua": {
	"prefix": "reaper.GetCursorPosition",
	"scope": "lua",
	"body": "reaper.GetCursorPosition()\n\n",
	"description": "edit cursor position\n\n"
	},

	"GetCursorPositionEx lua": {
	"prefix": "reaper.GetCursorPositionEx",
	"scope": "lua",
	"body": "reaper.GetCursorPositionEx(${1:proj})$0",
	"description": "edit cursor position\n\n"
	},

	"GetDisplayedMediaItemColor lua": {
	"prefix": "reaper.GetDisplayedMediaItemColor",
	"scope": "lua",
	"body": "reaper.GetDisplayedMediaItemColor(${1:item})$0",
	"description": "see GetDisplayedMediaItemColor2.\n\n"
	},

	"GetDisplayedMediaItemColor2 lua": {
	"prefix": "reaper.GetDisplayedMediaItemColor2",
	"scope": "lua",
	"body": "reaper.GetDisplayedMediaItemColor2(${1:item}, ${2:take})$0",
	"description": "Returns the custom take, item, or track color that is used (according to the user preference) to color the media item. The returned color is OS dependent|0x01000000 (i.e. ColorToNative(r,g,b)|0x01000000), so a return of zero means 'no color', not black.\n\n"
	},

	"GetEnvelopeInfo_Value lua": {
	"prefix": "reaper.GetEnvelopeInfo_Value",
	"scope": "lua",
	"body": "reaper.GetEnvelopeInfo_Value(${1:env}, ${2:parmname})$0",
	"description": "Gets an envelope numerical-value attribute:\nI_TCPY : int : Y offset of envelope relative to parent track (may be separate lane or overlap with track contents)\nI_TCPH : int : visible height of envelope\nI_TCPY_USED : int : Y offset of envelope relative to parent track, exclusive of padding\nI_TCPH_USED : int : visible height of envelope, exclusive of padding\nP_TRACK : MediaTrack * : parent track pointer (if any)\nP_DESTTRACK : MediaTrack * : destination track pointer, if on a send\nP_ITEM : MediaItem * : parent item pointer (if any)\nP_TAKE : MediaItem_Take * : parent take pointer (if any)\nI_SEND_IDX : int : 1-based index of send in P_TRACK, or 0 if not a send\nI_HWOUT_IDX : int : 1-based index of hardware output in P_TRACK or 0 if not a hardware output\nI_RECV_IDX : int : 1-based index of receive in P_DESTTRACK or 0 if not a send/receive\n"
	},

	"GetEnvelopeName lua": {
	"prefix": "reaper.GetEnvelopeName",
	"scope": "lua",
	"body": "retval, buf = reaper.GetEnvelopeName(${1:env})$0",
	"description": ""
	},

	"GetEnvelopePoint lua": {
	"prefix": "reaper.GetEnvelopePoint",
	"scope": "lua",
	"body": "retval, time, value, shape, tension, selected = reaper.GetEnvelopePoint(${1:envelope}, ${2:ptidx})$0",
	"description": "Get the attributes of an envelope point. See GetEnvelopePointEx.\n\n"
	},

	"GetEnvelopePointByTime lua": {
	"prefix": "reaper.GetEnvelopePointByTime",
	"scope": "lua",
	"body": "reaper.GetEnvelopePointByTime(${1:envelope}, ${2:time})$0",
	"description": "Returns the envelope point at or immediately prior to the given time position. See GetEnvelopePointByTimeEx.\n\n"
	},

	"GetEnvelopePointByTimeEx lua": {
	"prefix": "reaper.GetEnvelopePointByTimeEx",
	"scope": "lua",
	"body": "reaper.GetEnvelopePointByTimeEx(${1:envelope}, ${2:autoitem_idx}, ${3:time})$0",
	"description": "Returns the envelope point at or immediately prior to the given time position.\nautoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\nFor automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.\nSee GetEnvelopePointEx, SetEnvelopePointEx, InsertEnvelopePointEx, DeleteEnvelopePointEx.\n\n"
	},

	"GetEnvelopePointEx lua": {
	"prefix": "reaper.GetEnvelopePointEx",
	"scope": "lua",
	"body": "retval, time, value, shape, tension, selected = reaper.GetEnvelopePointEx(${1:envelope}, ${2:autoitem_idx}, ${3:ptidx})$0",
	"description": "Get the attributes of an envelope point.\nautoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\nFor automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.\nSee CountEnvelopePointsEx, SetEnvelopePointEx, InsertEnvelopePointEx, DeleteEnvelopePointEx.\n\n"
	},

	"GetEnvelopeScalingMode lua": {
	"prefix": "reaper.GetEnvelopeScalingMode",
	"scope": "lua",
	"body": "reaper.GetEnvelopeScalingMode(${1:env})$0",
	"description": "Returns the envelope scaling mode: 0=no scaling, 1=fader scaling. All API functions deal with raw envelope point values, to convert raw from/to scaled values see ScaleFromEnvelopeMode, ScaleToEnvelopeMode.\n\n"
	},

	"GetEnvelopeStateChunk lua": {
	"prefix": "reaper.GetEnvelopeStateChunk",
	"scope": "lua",
	"body": "retval, str = reaper.GetEnvelopeStateChunk(${1:env}, ${2:str}, ${3:isundo})$0",
	"description": "Gets the RPPXML state of an envelope, returns true if successful. Undo flag is a performance/caching hint.\n\n"
	},

	"GetEnvelopeUIState lua": {
	"prefix": "reaper.GetEnvelopeUIState",
	"scope": "lua",
	"body": "reaper.GetEnvelopeUIState(${1:env})$0",
	"description": "gets information on the UI state of an envelope: returns &1 if automation/modulation is playing back, &2 if automation is being actively written, &4 if the envelope recently had an effective automation mode change\n\n"
	},

	"GetExePath lua": {
	"prefix": "reaper.GetExePath",
	"scope": "lua",
	"body": "reaper.GetExePath()\n\n",
	"description": "returns path of REAPER.exe (not including EXE), i.e. C:\Program Files\REAPER\n\n"
	},

	"GetExtState lua": {
	"prefix": "reaper.GetExtState",
	"scope": "lua",
	"body": "reaper.GetExtState(${1:section}, ${2:key})$0",
	"description": "Get the extended state value for a specific section and key. See SetExtState, DeleteExtState, HasExtState.\n\n"
	},

	"GetFocusedFX lua": {
	"prefix": "reaper.GetFocusedFX",
	"scope": "lua",
	"body": "retval, tracknumber, itemnumber, fxnumber = reaper.GetFocusedFX()\n\n",
	"description": "This function is deprecated (returns GetFocusedFX2()&3), see GetFocusedFX2.\n\n"
	},

	"GetFocusedFX2 lua": {
	"prefix": "reaper.GetFocusedFX2",
	"scope": "lua",
	"body": "retval, tracknumber, itemnumber, fxnumber = reaper.GetFocusedFX2()\n\n",
	"description": "Return value has 1 set if track FX, 2 if take/item FX, 4 set if FX is no longer focused but still open. tracknumber==0 means the master track, 1 means track 1, etc. itemnumber is zero-based (or -1 if not an item). For interpretation of fxnumber, see GetLastTouchedFX.\n\n"
	},

	"GetFreeDiskSpaceForRecordPath lua": {
	"prefix": "reaper.GetFreeDiskSpaceForRecordPath",
	"scope": "lua",
	"body": "reaper.GetFreeDiskSpaceForRecordPath(${1:proj}, ${2:pathidx})$0",
	"description": "returns free disk space in megabytes, pathIdx 0 for normal, 1 for alternate.\n\n"
	},

	"GetFXEnvelope lua": {
	"prefix": "reaper.GetFXEnvelope",
	"scope": "lua",
	"body": "reaper.GetFXEnvelope(${1:track}, ${2:fxindex}, ${3:parameterindex}, ${4:create})$0",
	"description": "Returns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created.\n\n"
	},

	"GetGlobalAutomationOverride lua": {
	"prefix": "reaper.GetGlobalAutomationOverride",
	"scope": "lua",
	"body": "reaper.GetGlobalAutomationOverride()\n\n",
	"description": "return -1=no override, 0=trim/read, 1=read, 2=touch, 3=write, 4=latch, 5=bypass\n\n"
	},

	"GetHZoomLevel lua": {
	"prefix": "reaper.GetHZoomLevel",
	"scope": "lua",
	"body": "reaper.GetHZoomLevel()\n\n",
	"description": "returns pixels/second\n\n"
	},

	"GetInputActivityLevel lua": {
	"prefix": "reaper.GetInputActivityLevel",
	"scope": "lua",
	"body": "reaper.GetInputActivityLevel(${1:input_id})$0",
	"description": "returns approximate input level if available, 0-511 mono inputs, |1024 for stereo pairs, 4096+devidx*32 for MIDI devices\n\n"
	},

	"GetInputChannelName lua": {
	"prefix": "reaper.GetInputChannelName",
	"scope": "lua",
	"body": "reaper.GetInputChannelName(${1:channelIndex})$0",
	"description": ""
	},

	"GetInputOutputLatency lua": {
	"prefix": "reaper.GetInputOutputLatency",
	"scope": "lua",
	"body": "inputlatency, outputLatency = reaper.GetInputOutputLatency()\n\n",
	"description": "Gets the audio device input/output latency in samples\n\n"
	},

	"GetItemEditingTime2 lua": {
	"prefix": "reaper.GetItemEditingTime2",
	"scope": "lua",
	"body": "number, which_item, flags = reaper.GetItemEditingTime2()\n\n",
	"description": "returns time of relevant edit, set which_item to the pcm_source (if applicable), flags (if specified) will be set to 1 for edge resizing, 2 for fade change, 4 for item move, 8 for item slip edit (edit cursor time or start of item)\n\n"
	},

	"GetItemFromPoint lua": {
	"prefix": "reaper.GetItemFromPoint",
	"scope": "lua",
	"body": "MediaItem, take = reaper.GetItemFromPoint(${1:screen_x}, ${2:screen_y}, ${3:allow_locked})$0",
	"description": "Returns the first item at the screen coordinates specified. If allow_locked is false, locked items are ignored. If takeOutOptional specified, returns the take hit. See GetThingFromPoint.\n\n"
	},

	"GetItemProjectContext lua": {
	"prefix": "reaper.GetItemProjectContext",
	"scope": "lua",
	"body": "reaper.GetItemProjectContext(${1:item})$0",
	"description": ""
	},

	"GetItemStateChunk lua": {
	"prefix": "reaper.GetItemStateChunk",
	"scope": "lua",
	"body": "retval, str = reaper.GetItemStateChunk(${1:item}, ${2:str}, ${3:isundo})$0",
	"description": "Gets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint.\n\n"
	},

	"GetLastColorThemeFile lua": {
	"prefix": "reaper.GetLastColorThemeFile",
	"scope": "lua",
	"body": "reaper.GetLastColorThemeFile()\n\n",
	"description": ""
	},

	"GetLastMarkerAndCurRegion lua": {
	"prefix": "reaper.GetLastMarkerAndCurRegion",
	"scope": "lua",
	"body": "markeridx, regionidx = reaper.GetLastMarkerAndCurRegion(${1:proj}, ${2:time})$0",
	"description": "Get the last project marker before time, and/or the project region that includes time. markeridx and regionidx are returned not necessarily as the displayed marker/region index, but as the index that can be passed to EnumProjectMarkers. Either or both of markeridx and regionidx may be NULL. See EnumProjectMarkers.\n\n"
	},

	"GetLastTouchedFX lua": {
	"prefix": "reaper.GetLastTouchedFX",
	"scope": "lua",
	"body": "retval, tracknumber, fxnumber, paramnumber = reaper.GetLastTouchedFX()\n\n",
	"description": "Returns true if the last touched FX parameter is valid, false otherwise. The low word of tracknumber is the 1-based track index -- 0 means the master track, 1 means track 1, etc. If the high word of tracknumber is nonzero, it refers to the 1-based item index (1 is the first item on the track, etc). For track FX, the low 24 bits of fxnumber refer to the FX index in the chain, and if the next 8 bits are 01, then the FX is record FX. For item FX, the low word defines the FX index in the chain, and the high word defines the take number.\n\n"
	},

	"GetLastTouchedTrack lua": {
	"prefix": "reaper.GetLastTouchedTrack",
	"scope": "lua",
	"body": "reaper.GetLastTouchedTrack()\n\n",
	"description": ""
	},

	"GetMainHwnd lua": {
	"prefix": "reaper.GetMainHwnd",
	"scope": "lua",
	"body": "reaper.GetMainHwnd()\n\n",
	"description": ""
	},

	"GetMasterMuteSoloFlags lua": {
	"prefix": "reaper.GetMasterMuteSoloFlags",
	"scope": "lua",
	"body": "reaper.GetMasterMuteSoloFlags()\n\n",
	"description": "&1=master mute,&2=master solo. This is deprecated as you can just query the master track as well.\n\n"
	},

	"GetMasterTrack lua": {
	"prefix": "reaper.GetMasterTrack",
	"scope": "lua",
	"body": "reaper.GetMasterTrack(${1:proj})$0",
	"description": ""
	},

	"GetMasterTrackVisibility lua": {
	"prefix": "reaper.GetMasterTrackVisibility",
	"scope": "lua",
	"body": "reaper.GetMasterTrackVisibility()\n\n",
	"description": "returns &1 if the master track is visible in the TCP, &2 if NOT visible in the mixer. See SetMasterTrackVisibility.\n\n"
	},

	"GetMaxMidiInputs lua": {
	"prefix": "reaper.GetMaxMidiInputs",
	"scope": "lua",
	"body": "reaper.GetMaxMidiInputs()\n\n",
	"description": "returns max dev for midi inputs/outputs\n\n"
	},

	"GetMaxMidiOutputs lua": {
	"prefix": "reaper.GetMaxMidiOutputs",
	"scope": "lua",
	"body": "reaper.GetMaxMidiOutputs()\n\n",
	"description": ""
	},

	"GetMediaFileMetadata lua": {
	"prefix": "reaper.GetMediaFileMetadata",
	"scope": "lua",
	"body": "retval, buf = reaper.GetMediaFileMetadata(${1:mediaSource}, ${2:identifier})$0",
	"description": "Get text-based metadata from a media file for a given identifier. Call with identifier='' to list all identifiers contained in the file, separated by newlines. May return '[Binary data]' for metadata that REAPER doesn't handle.\n\n"
	},

	"GetMediaItem lua": {
	"prefix": "reaper.GetMediaItem",
	"scope": "lua",
	"body": "reaper.GetMediaItem(${1:proj}, ${2:itemidx})$0",
	"description": "get an item from a project by item count (zero-based) (proj=0 for active project)\n\n"
	},

	"GetMediaItem_Track lua": {
	"prefix": "reaper.GetMediaItem_Track",
	"scope": "lua",
	"body": "reaper.GetMediaItem_Track(${1:item})$0",
	"description": "Get parent track of media item\n\n"
	},

	"GetMediaItemInfo_Value lua": {
	"prefix": "reaper.GetMediaItemInfo_Value",
	"scope": "lua",
	"body": "reaper.GetMediaItemInfo_Value(${1:item}, ${2:parmname})$0",
	"description": "Get media item numerical-value attributes.\nB_MUTE : bool * : muted (item solo overrides). setting this value will clear C_MUTE_SOLO.\nB_MUTE_ACTUAL : bool * : muted (ignores solo). setting this value will not affect C_MUTE_SOLO.\nC_MUTE_SOLO : char * : solo override (-1=soloed, 0=no override, 1=unsoloed). note that this API does not automatically unsolo other items when soloing (nor clear the unsolos when clearing the last soloed item), it must be done by the caller via action or via this API.\nB_LOOPSRC : bool * : loop source\nB_ALLTAKESPLAY : bool * : all takes play\nB_UISEL : bool * : selected in arrange view\nC_BEATATTACHMODE : char * : item timebase, -1=track or project default, 1=beats (position, length, rate), 2=beats (position only). for auto-stretch timebase: C_BEATATTACHMODE=1, C_AUTOSTRETCH=1\nC_AUTOSTRETCH: : char * : auto-stretch at project tempo changes, 1=enabled, requires C_BEATATTACHMODE=1\nC_LOCK : char * : locked, &1=locked\nD_VOL : double * : item volume,  0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc\nD_POSITION : double * : item position in seconds\nD_LENGTH : double * : item length in seconds\nD_SNAPOFFSET : double * : item snap offset in seconds\nD_FADEINLEN : double * : item manual fadein length in seconds\nD_FADEOUTLEN : double * : item manual fadeout length in seconds\nD_FADEINDIR : double * : item fadein curvature, -1..1\nD_FADEOUTDIR : double * : item fadeout curvature, -1..1\nD_FADEINLEN_AUTO : double * : item auto-fadein length in seconds, -1=no auto-fadein\nD_FADEOUTLEN_AUTO : double * : item auto-fadeout length in seconds, -1=no auto-fadeout\nC_FADEINSHAPE : int * : fadein shape, 0..6, 0=linear\nC_FADEOUTSHAPE : int * : fadeout shape, 0..6, 0=linear\nI_GROUPID : int * : group ID, 0=no group\nI_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)\nI_LASTH : int * : height in pixels (read-only)\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color\nI_CURTAKE : int * : active take number\nIP_ITEMNUMBER : int : item number on this track (read-only, returns the item number directly)\nF_FREEMODE_Y : float * : free item positioning Y-position, 0=top of track, 1=bottom of track (will never be 1)\nF_FREEMODE_H : float * : free item positioning height, 0=no height, 1=full height of track (will never be 0)\nP_TRACK : MediaTrack * : (read-only)\n"
	},

	"GetMediaItemNumTakes lua": {
	"prefix": "reaper.GetMediaItemNumTakes",
	"scope": "lua",
	"body": "reaper.GetMediaItemNumTakes(${1:item})$0",
	"description": ""
	},

	"GetMediaItemTake lua": {
	"prefix": "reaper.GetMediaItemTake",
	"scope": "lua",
	"body": "reaper.GetMediaItemTake(${1:item}, ${2:tk})$0",
	"description": ""
	},

	"GetMediaItemTake_Item lua": {
	"prefix": "reaper.GetMediaItemTake_Item",
	"scope": "lua",
	"body": "reaper.GetMediaItemTake_Item(${1:take})$0",
	"description": "Get parent item of media item take\n\n"
	},

	"GetMediaItemTake_Peaks lua": {
	"prefix": "reaper.GetMediaItemTake_Peaks",
	"scope": "lua",
	"body": "reaper.GetMediaItemTake_Peaks(${1:take}, ${2:peakrate}, ${3:starttime}, ${4:numchannels}, ${5:numsamplesperchannel}, ${6:want_extra_type}, ${7:buf})$0",
	"description": "Gets block of peak samples to buf. Note that the peak samples are interleaved, but in two or three blocks (maximums, then minimums, then extra). Return value has 20 bits of returned sample count, then 4 bits of output_mode (0xf00000), then a bit to signify whether extra_type was available (0x1000000). extra_type can be 115 ('s') for spectral information, which will return peak samples as integers with the low 15 bits frequency, next 14 bits tonality.\n\n"
	},

	"GetMediaItemTake_Source lua": {
	"prefix": "reaper.GetMediaItemTake_Source",
	"scope": "lua",
	"body": "reaper.GetMediaItemTake_Source(${1:take})$0",
	"description": "Get media source of media item take\n\n"
	},

	"GetMediaItemTake_Track lua": {
	"prefix": "reaper.GetMediaItemTake_Track",
	"scope": "lua",
	"body": "reaper.GetMediaItemTake_Track(${1:take})$0",
	"description": "Get parent track of media item take\n\n"
	},

	"GetMediaItemTakeByGUID lua": {
	"prefix": "reaper.GetMediaItemTakeByGUID",
	"scope": "lua",
	"body": "reaper.GetMediaItemTakeByGUID(${1:project}, ${2:guidGUID})$0",
	"description": ""
	},

	"GetMediaItemTakeInfo_Value lua": {
	"prefix": "reaper.GetMediaItemTakeInfo_Value",
	"scope": "lua",
	"body": "reaper.GetMediaItemTakeInfo_Value(${1:take}, ${2:parmname})$0",
	"description": "Get media item take numerical-value attributes.\nD_STARTOFFS : double * : start offset in source media, in seconds\nD_VOL : double * : take volume, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc, negative if take polarity is flipped\nD_PAN : double * : take pan, -1..1\nD_PANLAW : double * : take pan law, -1=default, 0.5=-6dB, 1.0=+0dB, etc\nD_PLAYRATE : double * : take playback rate, 0.5=half speed, 1=normal, 2=double speed, etc\nD_PITCH : double * : take pitch adjustment in semitones, -12=one octave down, 0=normal, +12=one octave up, etc\nB_PPITCH : bool * : preserve pitch when changing playback rate\nI_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)\nI_LASTH : int * : height in pixels (read-only)\nI_CHANMODE : int * : channel mode, 0=normal, 1=reverse stereo, 2=downmix, 3=left, 4=right\nI_PITCHMODE : int * : pitch shifter mode, -1=projext default, otherwise high 2 bytes=shifter, low 2 bytes=parameter\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color\nIP_TAKENUMBER : int : take number (read-only, returns the take number directly)\nP_TRACK : pointer to MediaTrack (read-only)\nP_ITEM : pointer to MediaItem (read-only)\nP_SOURCE : PCM_source *. Note that if setting this, you should first retrieve the old source, set the new, THEN delete the old.\n"
	},

	"GetMediaItemTrack lua": {
	"prefix": "reaper.GetMediaItemTrack",
	"scope": "lua",
	"body": "reaper.GetMediaItemTrack(${1:item})$0",
	"description": ""
	},

	"GetMediaSourceFileName lua": {
	"prefix": "reaper.GetMediaSourceFileName",
	"scope": "lua",
	"body": "filenamebuf = reaper.GetMediaSourceFileName(${1:source})$0",
	"description": "Copies the media source filename to filenamebuf. Note that in-project MIDI media sources have no associated filename. See GetMediaSourceParent.\n\n"
	},

	"GetMediaSourceLength lua": {
	"prefix": "reaper.GetMediaSourceLength",
	"scope": "lua",
	"body": "retval, lengthIsQN = reaper.GetMediaSourceLength(${1:source})$0",
	"description": "Returns the length of the source media. If the media source is beat-based, the length will be in quarter notes, otherwise it will be in seconds.\n\n"
	},

	"GetMediaSourceNumChannels lua": {
	"prefix": "reaper.GetMediaSourceNumChannels",
	"scope": "lua",
	"body": "reaper.GetMediaSourceNumChannels(${1:source})$0",
	"description": "Returns the number of channels in the source media.\n\n"
	},

	"GetMediaSourceParent lua": {
	"prefix": "reaper.GetMediaSourceParent",
	"scope": "lua",
	"body": "reaper.GetMediaSourceParent(${1:src})$0",
	"description": "Returns the parent source, or NULL if src is the root source. This can be used to retrieve the parent properties of sections or reversed sources for example.\n\n"
	},

	"GetMediaSourceSampleRate lua": {
	"prefix": "reaper.GetMediaSourceSampleRate",
	"scope": "lua",
	"body": "reaper.GetMediaSourceSampleRate(${1:source})$0",
	"description": "Returns the sample rate. MIDI source media will return zero.\n\n"
	},

	"GetMediaSourceType lua": {
	"prefix": "reaper.GetMediaSourceType",
	"scope": "lua",
	"body": "typebuf = reaper.GetMediaSourceType(${1:source})$0",
	"description": "copies the media source type ('WAV', 'MIDI', etc) to typebuf\n\n"
	},

	"GetMediaTrackInfo_Value lua": {
	"prefix": "reaper.GetMediaTrackInfo_Value",
	"scope": "lua",
	"body": "reaper.GetMediaTrackInfo_Value(${1:tr}, ${2:parmname})$0",
	"description": "Get track numerical-value attributes.\nB_MUTE : bool * : muted\nB_PHASE : bool * : track phase inverted\nB_RECMON_IN_EFFECT : bool * : record monitoring in effect (current audio-thread playback state, read-only)\nIP_TRACKNUMBER : int : track number 1-based, 0=not found, -1=master track (read-only, returns the int directly)\nI_SOLO : int * : soloed, 0=not soloed, 1=soloed, 2=soloed in place, 5=safe soloed, 6=safe soloed in place\nB_SOLO_DEFEAT : bool * : when set, if anything else is soloed and this track is not muted, this track acts soloed\nI_FXEN : int * : fx enabled, 0=bypassed, !0=fx active\nI_RECARM : int * : record armed, 0=not record armed, 1=record armed\nI_RECINPUT : int * : record input, <0=no input. if 4096 set, input is MIDI and low 5 bits represent channel (0=all, 1-16=only chan), next 6 bits represent physical input (63=all, 62=VKB). If 4096 is not set, low 10 bits (0..1023) are input start channel (ReaRoute/Loopback start at 512). If 2048 is set, input is multichannel input (using track channel count), or if 1024 is set, input is stereo input, otherwise input is mono.\nI_RECMODE : int * : record mode, 0=input, 1=stereo out, 2=none, 3=stereo out w/latency compensation, 4=midi output, 5=mono out, 6=mono out w/ latency compensation, 7=midi overdub, 8=midi replace\nI_RECMODE_FLAGS : int * : record mode flags, &3=output recording mode (0=post fader, 1=pre-fx, 2=post-fx/pre-fader)\nI_RECMON : int * : record monitoring, 0=off, 1=normal, 2=not when playing (tape style)\nI_RECMONITEMS : int * : monitor items while recording, 0=off, 1=on\nB_AUTO_RECARM : bool * : automatically set record arm when selected (does not immediately affect recarm state, script should set directly if desired)\nI_VUMODE : int * : track vu mode, &1:disabled, &30==0:stereo peaks, &30==2:multichannel peaks, &30==4:stereo RMS, &30==8:combined RMS, &30==12:LUFS-M, &30==16:LUFS-S (readout=max), &30==20:LUFS-S (readout=current), &32:LUFS calculation on channels 1+2 only\nI_AUTOMODE : int * : track automation mode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch\nI_NCHAN : int * : number of track channels, 2-64, even numbers only\nI_SELECTED : int * : track selected, 0=unselected, 1=selected\nI_WNDH : int * : current TCP window height in pixels including envelopes (read-only)\nI_TCPH : int * : current TCP window height in pixels not including envelopes (read-only)\nI_TCPY : int * : current TCP window Y-position in pixels relative to top of arrange view (read-only)\nI_MCPX : int * : current MCP X-position in pixels relative to mixer container (read-only)\nI_MCPY : int * : current MCP Y-position in pixels relative to mixer container (read-only)\nI_MCPW : int * : current MCP width in pixels (read-only)\nI_MCPH : int * : current MCP height in pixels (read-only)\nI_FOLDERDEPTH : int * : folder depth change, 0=normal, 1=track is a folder parent, -1=track is the last in the innermost folder, -2=track is the last in the innermost and next-innermost folders, etc\nI_FOLDERCOMPACT : int * : folder compacted state (only valid on folders), 0=normal, 1=small, 2=tiny children\nI_MIDIHWOUT : int * : track midi hardware output index, <0=disabled, low 5 bits are which channels (0=all, 1-16), next 5 bits are output device index (0-31)\nI_PERFFLAGS : int * : track performance flags, &1=no media buffering, &2=no anticipative FX\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color\nI_HEIGHTOVERRIDE : int * : custom height override for TCP window, 0 for none, otherwise size in pixels\nB_HEIGHTLOCK : bool * : track height lock (must set I_HEIGHTOVERRIDE before locking)\nD_VOL : double * : trim volume of track, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc\nD_PAN : double * : trim pan of track, -1..1\nD_WIDTH : double * : width of track, -1..1\nD_DUALPANL : double * : dualpan position 1, -1..1, only if I_PANMODE==6\nD_DUALPANR : double * : dualpan position 2, -1..1, only if I_PANMODE==6\nI_PANMODE : int * : pan mode, 0=classic 3.x, 3=new balance, 5=stereo pan, 6=dual pan\nD_PANLAW : double * : pan law of track, <0=project default, 0.5=-6dB, 0.707..=-3dB, 1=+0dB, 1.414..=-3dB with gain compensation, 2=-6dB with gain compensation, etc\nI_PANLAW_FLAGS : int * : pan law flags, 0=sine taper, 1=hybrid taper with deprecated behavior when gain compensation enabled, 2=linear taper, 3=hybrid taper\nP_ENV:<envchunkname or P_ENV:{GUID... : TrackEnvelope * : (read-only) chunkname can be <VOLENV, <PANENV, etc; GUID is the stringified envelope GUID.\nB_SHOWINMIXER : bool * : track control panel visible in mixer (do not use on master track)\nB_SHOWINTCP : bool * : track control panel visible in arrange view (do not use on master track)\nB_MAINSEND : bool * : track sends audio to parent\nC_MAINSEND_OFFS : char * : channel offset of track send to parent\nC_MAINSEND_NCH : char * : channel count of track send to parent (0=use all child track channels, 1=use one channel only)\nI_FREEMODE : int * : 1=track free item positioning enabled, 2=track fixed lanes enabled (call UpdateTimeline() after changing)\nC_BEATATTACHMODE : char * : track timebase, -1=project default, 0=time, 1=beats (position, length, rate), 2=beats (position only)\nF_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0=minimum allowed, 1=maximum allowed)\nF_MCP_FXPARM_SCALE : float * : scale of fx parameter area in MCP (0=minimum allowed, 1=maximum allowed)\nF_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send total area (0=minimum allowed, 1=maximum allowed)\nF_TCP_FXPARM_SCALE : float * : scale of TCP parameter area when TCP FX are embedded (0=min allowed, default, 1=max allowed)\nI_PLAY_OFFSET_FLAG : int * : track media playback offset state, &1=bypassed, &2=offset value is measured in samples (otherwise measured in seconds)\nD_PLAY_OFFSET : double * : track media playback offset, units depend on I_PLAY_OFFSET_FLAG\nP_PARTRACK : MediaTrack * : parent track (read-only)\nP_PROJECT : ReaProject * : parent project (read-only)\n"
	},

	"GetMIDIInputName lua": {
	"prefix": "reaper.GetMIDIInputName",
	"scope": "lua",
	"body": "retval, nameout = reaper.GetMIDIInputName(${1:dev}, ${2:nameout})$0",
	"description": "returns true if device present\n\n"
	},

	"GetMIDIOutputName lua": {
	"prefix": "reaper.GetMIDIOutputName",
	"scope": "lua",
	"body": "retval, nameout = reaper.GetMIDIOutputName(${1:dev}, ${2:nameout})$0",
	"description": "returns true if device present\n\n"
	},

	"GetMixerScroll lua": {
	"prefix": "reaper.GetMixerScroll",
	"scope": "lua",
	"body": "reaper.GetMixerScroll()\n\n",
	"description": "Get the leftmost track visible in the mixer\n\n"
	},

	"GetMouseModifier lua": {
	"prefix": "reaper.GetMouseModifier",
	"scope": "lua",
	"body": "action = reaper.GetMouseModifier(${1:context}, ${2:modifier_flag})$0",
	"description": "Get the current mouse modifier assignment for a specific modifier key assignment, in a specific context.\naction will be filled in with the command ID number for a built-in mouse modifier\nor built-in REAPER command ID, or the custom action ID string.\nNote: the action string may have a space and 'c' or 'm' appended to it to specify command ID vs mouse modifier ID.\nSee SetMouseModifier for more information.\n"
	},

	"GetMousePosition lua": {
	"prefix": "reaper.GetMousePosition",
	"scope": "lua",
	"body": "x, y = reaper.GetMousePosition()\n\n",
	"description": "get mouse position in screen coordinates\n\n"
	},

	"GetNumAudioInputs lua": {
	"prefix": "reaper.GetNumAudioInputs",
	"scope": "lua",
	"body": "reaper.GetNumAudioInputs()\n\n",
	"description": "Return number of normal audio hardware inputs available\n\n"
	},

	"GetNumAudioOutputs lua": {
	"prefix": "reaper.GetNumAudioOutputs",
	"scope": "lua",
	"body": "reaper.GetNumAudioOutputs()\n\n",
	"description": "Return number of normal audio hardware outputs available\n\n"
	},

	"GetNumMIDIInputs lua": {
	"prefix": "reaper.GetNumMIDIInputs",
	"scope": "lua",
	"body": "reaper.GetNumMIDIInputs()\n\n",
	"description": "returns max number of real midi hardware inputs\n\n"
	},

	"GetNumMIDIOutputs lua": {
	"prefix": "reaper.GetNumMIDIOutputs",
	"scope": "lua",
	"body": "reaper.GetNumMIDIOutputs()\n\n",
	"description": "returns max number of real midi hardware outputs\n\n"
	},

	"GetNumTakeMarkers lua": {
	"prefix": "reaper.GetNumTakeMarkers",
	"scope": "lua",
	"body": "reaper.GetNumTakeMarkers(${1:take})$0",
	"description": "Returns number of take markers. See GetTakeMarker, SetTakeMarker, DeleteTakeMarker\n\n"
	},

	"GetNumTracks lua": {
	"prefix": "reaper.GetNumTracks",
	"scope": "lua",
	"body": "reaper.GetNumTracks()\n\n",
	"description": ""
	},

	"GetOS lua": {
	"prefix": "reaper.GetOS",
	"scope": "lua",
	"body": "reaper.GetOS()\n\n",
	"description": "Returns 'Win32', 'Win64', 'OSX32', 'OSX64', 'macOS-arm64', or 'Other'.\n\n"
	},

	"GetOutputChannelName lua": {
	"prefix": "reaper.GetOutputChannelName",
	"scope": "lua",
	"body": "reaper.GetOutputChannelName(${1:channelIndex})$0",
	"description": ""
	},

	"GetOutputLatency lua": {
	"prefix": "reaper.GetOutputLatency",
	"scope": "lua",
	"body": "reaper.GetOutputLatency()\n\n",
	"description": "returns output latency in seconds\n\n"
	},

	"GetParentTrack lua": {
	"prefix": "reaper.GetParentTrack",
	"scope": "lua",
	"body": "reaper.GetParentTrack(${1:track})$0",
	"description": ""
	},

	"GetPeakFileName lua": {
	"prefix": "reaper.GetPeakFileName",
	"scope": "lua",
	"body": "buf = reaper.GetPeakFileName(${1:fn})$0",
	"description": "get the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)\n\n"
	},

	"GetPeakFileNameEx lua": {
	"prefix": "reaper.GetPeakFileNameEx",
	"scope": "lua",
	"body": "buf = reaper.GetPeakFileNameEx(${1:fn}, ${2:buf}, ${3:forWrite})$0",
	"description": "get the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)\n\n"
	},

	"GetPeakFileNameEx2 lua": {
	"prefix": "reaper.GetPeakFileNameEx2",
	"scope": "lua",
	"body": "buf = reaper.GetPeakFileNameEx2(${1:fn}, ${2:buf}, ${3:forWrite}, ${4:peaksfileextension})$0",
	"description": "Like GetPeakFileNameEx, but you can specify peaksfileextension such as '.reapeaks'\n\n"
	},

	"GetPlayPosition lua": {
	"prefix": "reaper.GetPlayPosition",
	"scope": "lua",
	"body": "reaper.GetPlayPosition()\n\n",
	"description": "returns latency-compensated actual-what-you-hear position\n\n"
	},

	"GetPlayPosition2 lua": {
	"prefix": "reaper.GetPlayPosition2",
	"scope": "lua",
	"body": "reaper.GetPlayPosition2()\n\n",
	"description": "returns position of next audio block being processed\n\n"
	},

	"GetPlayPosition2Ex lua": {
	"prefix": "reaper.GetPlayPosition2Ex",
	"scope": "lua",
	"body": "reaper.GetPlayPosition2Ex(${1:proj})$0",
	"description": "returns position of next audio block being processed\n\n"
	},

	"GetPlayPositionEx lua": {
	"prefix": "reaper.GetPlayPositionEx",
	"scope": "lua",
	"body": "reaper.GetPlayPositionEx(${1:proj})$0",
	"description": "returns latency-compensated actual-what-you-hear position\n\n"
	},

	"GetPlayState lua": {
	"prefix": "reaper.GetPlayState",
	"scope": "lua",
	"body": "reaper.GetPlayState()\n\n",
	"description": "&1=playing, &2=paused, &4=is recording\n\n"
	},

	"GetPlayStateEx lua": {
	"prefix": "reaper.GetPlayStateEx",
	"scope": "lua",
	"body": "reaper.GetPlayStateEx(${1:proj})$0",
	"description": "&1=playing, &2=paused, &4=is recording\n\n"
	},

	"GetProjectLength lua": {
	"prefix": "reaper.GetProjectLength",
	"scope": "lua",
	"body": "reaper.GetProjectLength(${1:proj})$0",
	"description": "returns length of project (maximum of end of media item, markers, end of regions, tempo map\n\n"
	},

	"GetProjectName lua": {
	"prefix": "reaper.GetProjectName",
	"scope": "lua",
	"body": "buf = reaper.GetProjectName(${1:proj})$0",
	"description": ""
	},

	"GetProjectPath lua": {
	"prefix": "reaper.GetProjectPath",
	"scope": "lua",
	"body": "buf = reaper.GetProjectPath()\n\n",
	"description": "Get the project recording path.\n\n"
	},

	"GetProjectPathEx lua": {
	"prefix": "reaper.GetProjectPathEx",
	"scope": "lua",
	"body": "buf = reaper.GetProjectPathEx(${1:proj})$0",
	"description": "Get the project recording path.\n\n"
	},

	"GetProjectStateChangeCount lua": {
	"prefix": "reaper.GetProjectStateChangeCount",
	"scope": "lua",
	"body": "reaper.GetProjectStateChangeCount(${1:proj})$0",
	"description": "returns an integer that changes when the project state changes\n\n"
	},

	"GetProjectTimeOffset lua": {
	"prefix": "reaper.GetProjectTimeOffset",
	"scope": "lua",
	"body": "reaper.GetProjectTimeOffset(${1:proj}, ${2:rndframe})$0",
	"description": "Gets project time offset in seconds (project settings - project start time). If rndframe is true, the offset is rounded to a multiple of the project frame size.\n\n"
	},

	"GetProjectTimeSignature lua": {
	"prefix": "reaper.GetProjectTimeSignature",
	"scope": "lua",
	"body": "bpm, bpi = reaper.GetProjectTimeSignature()\n\n",
	"description": "deprecated\n\n"
	},

	"GetProjectTimeSignature2 lua": {
	"prefix": "reaper.GetProjectTimeSignature2",
	"scope": "lua",
	"body": "bpm, bpi = reaper.GetProjectTimeSignature2(${1:proj})$0",
	"description": "Gets basic time signature (beats per minute, numerator of time signature in bpi)\nthis does not reflect tempo envelopes but is purely what is set in the project settings.\n\n"
	},

	"GetProjExtState lua": {
	"prefix": "reaper.GetProjExtState",
	"scope": "lua",
	"body": "retval, val = reaper.GetProjExtState(${1:proj}, ${2:extname}, ${3:key})$0",
	"description": "Get the value previously associated with this extname and key, the last time the project was saved. See SetProjExtState, EnumProjExtState.\n\n"
	},

	"GetResourcePath lua": {
	"prefix": "reaper.GetResourcePath",
	"scope": "lua",
	"body": "reaper.GetResourcePath()\n\n",
	"description": "returns path where ini files are stored, other things are in subdirectories.\n\n"
	},

	"GetSelectedEnvelope lua": {
	"prefix": "reaper.GetSelectedEnvelope",
	"scope": "lua",
	"body": "reaper.GetSelectedEnvelope(${1:proj})$0",
	"description": "get the currently selected envelope, returns NULL/nil if no envelope is selected\n\n"
	},

	"GetSelectedMediaItem lua": {
	"prefix": "reaper.GetSelectedMediaItem",
	"scope": "lua",
	"body": "reaper.GetSelectedMediaItem(${1:proj}, ${2:selitem})$0",
	"description": "get a selected item by selected item count (zero-based) (proj=0 for active project)\n\n"
	},

	"GetSelectedTrack lua": {
	"prefix": "reaper.GetSelectedTrack",
	"scope": "lua",
	"body": "reaper.GetSelectedTrack(${1:proj}, ${2:seltrackidx})$0",
	"description": "Get a selected track from a project (proj=0 for active project) by selected track count (zero-based). This function ignores the master track, see GetSelectedTrack2.\n\n"
	},

	"GetSelectedTrack2 lua": {
	"prefix": "reaper.GetSelectedTrack2",
	"scope": "lua",
	"body": "reaper.GetSelectedTrack2(${1:proj}, ${2:seltrackidx}, ${3:wantmaster})$0",
	"description": "Get a selected track from a project (proj=0 for active project) by selected track count (zero-based).\n\n"
	},

	"GetSelectedTrackEnvelope lua": {
	"prefix": "reaper.GetSelectedTrackEnvelope",
	"scope": "lua",
	"body": "reaper.GetSelectedTrackEnvelope(${1:proj})$0",
	"description": "get the currently selected track envelope, returns NULL/nil if no envelope is selected\n\n"
	},

	"GetSet_ArrangeView2 lua": {
	"prefix": "reaper.GetSet_ArrangeView2",
	"scope": "lua",
	"body": "start_time, end_time = reaper.GetSet_ArrangeView2(${1:proj}, ${2:isSet}, ${3:screen_x_start}, ${4:screen_x_end}, ${5:start_time}, ${6:end_time})$0",
	"description": "Gets or sets the arrange view start/end time for screen coordinates. use screen_x_start=screen_x_end=0 to use the full arrange view's start/end time\n\n"
	},

	"GetSet_LoopTimeRange lua": {
	"prefix": "reaper.GetSet_LoopTimeRange",
	"scope": "lua",
	"body": "start, end = reaper.GetSet_LoopTimeRange(${1:isSet}, ${2:isLoop}, ${3:start}, ${4:end}, ${5:allowautoseek})$0",
	"description": ""
	},

	"GetSet_LoopTimeRange2 lua": {
	"prefix": "reaper.GetSet_LoopTimeRange2",
	"scope": "lua",
	"body": "start, end = reaper.GetSet_LoopTimeRange2(${1:proj}, ${2:isSet}, ${3:isLoop}, ${4:start}, ${5:end}, ${6:allowautoseek})$0",
	"description": ""
	},

	"GetSetAutomationItemInfo lua": {
	"prefix": "reaper.GetSetAutomationItemInfo",
	"scope": "lua",
	"body": "reaper.GetSetAutomationItemInfo(${1:env}, ${2:autoitem_idx}, ${3:desc}, ${4:value}, ${5:is_set})$0",
	"description": "Get or set automation item information. autoitem_idx=0 for the first automation item on an envelope, 1 for the second item, etc. desc can be any of the following:\nD_POOL_ID : double * : automation item pool ID (as an integer); edits are propagated to all other automation items that share a pool ID\nD_POSITION : double * : automation item timeline position in seconds\nD_LENGTH : double * : automation item length in seconds\nD_STARTOFFS : double * : automation item start offset in seconds\nD_PLAYRATE : double * : automation item playback rate\nD_BASELINE : double * : automation item baseline value in the range [0,1]\nD_AMPLITUDE : double * : automation item amplitude in the range [-1,1]\nD_LOOPSRC : double * : nonzero if the automation item contents are looped\nD_UISEL : double * : nonzero if the automation item is selected in the arrange view\nD_POOL_QNLEN : double * : automation item pooled source length in quarter notes (setting will affect all pooled instances)\n"
	},

	"GetSetAutomationItemInfo_String lua": {
	"prefix": "reaper.GetSetAutomationItemInfo_String",
	"scope": "lua",
	"body": "retval, valuestrNeedBig = reaper.GetSetAutomationItemInfo_String(${1:env}, ${2:autoitem_idx}, ${3:desc}, ${4:valuestrNeedBig}, ${5:is_set})$0",
	"description": "Get or set automation item information. autoitem_idx=0 for the first automation item on an envelope, 1 for the second item, etc. returns true on success. desc can be any of the following:\nP_POOL_NAME : char * : name of the underlying automation item pool\nP_POOL_EXT:xyz : char * : extension-specific persistent data\n"
	},

	"GetSetEnvelopeInfo_String lua": {
	"prefix": "reaper.GetSetEnvelopeInfo_String",
	"scope": "lua",
	"body": "retval, stringNeedBig = reaper.GetSetEnvelopeInfo_String(${1:env}, ${2:parmname}, ${3:stringNeedBig}, ${4:setNewValue})$0",
	"description": "Gets/sets an attribute string:\nP_EXT:xyz : char * : extension-specific persistent data\nGUID : GUID * : 16-byte GUID, can query only, not set. If using a _String() function, GUID is a string {xyz-...}.\n"
	},

	"GetSetEnvelopeState lua": {
	"prefix": "reaper.GetSetEnvelopeState",
	"scope": "lua",
	"body": "retval, str = reaper.GetSetEnvelopeState(${1:env}, ${2:str})$0",
	"description": "deprecated -- see SetEnvelopeStateChunk, GetEnvelopeStateChunk\n\n"
	},

	"GetSetEnvelopeState2 lua": {
	"prefix": "reaper.GetSetEnvelopeState2",
	"scope": "lua",
	"body": "retval, str = reaper.GetSetEnvelopeState2(${1:env}, ${2:str}, ${3:isundo})$0",
	"description": "deprecated -- see SetEnvelopeStateChunk, GetEnvelopeStateChunk\n\n"
	},

	"GetSetItemState lua": {
	"prefix": "reaper.GetSetItemState",
	"scope": "lua",
	"body": "retval, str = reaper.GetSetItemState(${1:item}, ${2:str})$0",
	"description": "deprecated -- see SetItemStateChunk, GetItemStateChunk\n\n"
	},

	"GetSetItemState2 lua": {
	"prefix": "reaper.GetSetItemState2",
	"scope": "lua",
	"body": "retval, str = reaper.GetSetItemState2(${1:item}, ${2:str}, ${3:isundo})$0",
	"description": "deprecated -- see SetItemStateChunk, GetItemStateChunk\n\n"
	},

	"GetSetMediaItemInfo_String lua": {
	"prefix": "reaper.GetSetMediaItemInfo_String",
	"scope": "lua",
	"body": "retval, stringNeedBig = reaper.GetSetMediaItemInfo_String(${1:item}, ${2:parmname}, ${3:stringNeedBig}, ${4:setNewValue})$0",
	"description": "Gets/sets an item attribute string:\nP_NOTES : char * : item note text (do not write to returned pointer, use setNewValue to update)\nP_EXT:xyz : char * : extension-specific persistent data\nGUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.\n"
	},

	"GetSetMediaItemTakeInfo_String lua": {
	"prefix": "reaper.GetSetMediaItemTakeInfo_String",
	"scope": "lua",
	"body": "retval, stringNeedBig = reaper.GetSetMediaItemTakeInfo_String(${1:tk}, ${2:parmname}, ${3:stringNeedBig}, ${4:setNewValue})$0",
	"description": "Gets/sets a take attribute string:\nP_NAME : char * : take name\nP_EXT:xyz : char * : extension-specific persistent data\nGUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.\n"
	},

	"GetSetMediaTrackInfo_String lua": {
	"prefix": "reaper.GetSetMediaTrackInfo_String",
	"scope": "lua",
	"body": "retval, stringNeedBig = reaper.GetSetMediaTrackInfo_String(${1:tr}, ${2:parmname}, ${3:stringNeedBig}, ${4:setNewValue})$0",
	"description": "Get or set track string attributes.\nP_NAME : char * : track name (on master returns NULL)\nP_ICON : const char * : track icon (full filename, or relative to resource_path/data/track_icons)\nP_MCP_LAYOUT : const char * : layout name\nP_RAZOREDITS : const char * : list of razor edit areas, as space-separated triples of start time, end time, and envelope GUID string.\nExample: '0.0 1.0 \'\' 0.0 1.0 '{xyz-...}'\nP_RAZOREDITS_EXT : const char * : list of razor edit areas, as comma-separated sets of space-separated tuples of start time, end time, optional envelope GUID string, optional fixed/fipm top y-position, optional fixed/fipm bottom y-position.\nExample: '0.0 1.0,0.0 1.0 '{xyz-...}',1.0 2.0 '' 0.25 0.5'\nP_TCP_LAYOUT : const char * : layout name\nP_EXT:xyz : char * : extension-specific persistent data\nP_UI_RECT:tcp.mute : char * : read-only, allows querying screen position + size of track WALTER elements (tcp.size queries screen position and size of entire TCP, etc).\nGUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.\n"
	},

	"GetSetProjectAuthor lua": {
	"prefix": "reaper.GetSetProjectAuthor",
	"scope": "lua",
	"body": "author = reaper.GetSetProjectAuthor(${1:proj}, ${2:set}, ${3:author})$0",
	"description": "deprecated, see GetSetProjectInfo_String with desc='PROJECT_AUTHOR'\n\n"
	},

	"GetSetProjectGrid lua": {
	"prefix": "reaper.GetSetProjectGrid",
	"scope": "lua",
	"body": "retval, optional_division, optional_swingmode, optional_swingamt = reaper.GetSetProjectGrid(${1:project}, ${2:set}, ${3:optional_division}, ${4:optional_swingmode}, ${5:optional_swingamt})$0",
	"description": "Get or set the arrange view grid division. 0.25=quarter note, 1.0/3.0=half note triplet, etc. swingmode can be 1 for swing enabled, swingamt is -1..1. swingmode can be 3 for measure-grid. Returns grid configuration flags\n\n"
	},

	"GetSetProjectInfo lua": {
	"prefix": "reaper.GetSetProjectInfo",
	"scope": "lua",
	"body": "reaper.GetSetProjectInfo(${1:project}, ${2:desc}, ${3:value}, ${4:is_set})$0",
	"description": "Get or set project information.\nRENDER_SETTINGS : &(1|2)=0:master mix, &1=stems+master mix, &2=stems only, &4=multichannel tracks to multichannel files, &8=use render matrix, &16=tracks with only mono media to mono files, &32=selected media items, &64=selected media items via master, &128=selected tracks via master, &256=embed transients if format supports, &512=embed metadata if format supports, &1024=embed take markers if format supports, &2048=2nd pass render\nRENDER_BOUNDSFLAG : 0=custom time bounds, 1=entire project, 2=time selection, 3=all project regions, 4=selected media items, 5=selected project regions, 6=all project markers, 7=selected project markers\nRENDER_CHANNELS : number of channels in rendered file\nRENDER_SRATE : sample rate of rendered file (or 0 for project sample rate)\nRENDER_STARTPOS : render start time when RENDER_BOUNDSFLAG=0\nRENDER_ENDPOS : render end time when RENDER_BOUNDSFLAG=0\nRENDER_TAILFLAG : apply render tail setting when rendering: &1=custom time bounds, &2=entire project, &4=time selection, &8=all project markers/regions, &16=selected media items, &32=selected project markers/regions\nRENDER_TAILMS : tail length in ms to render (only used if RENDER_BOUNDSFLAG and RENDER_TAILFLAG are set)\nRENDER_ADDTOPROJ : &1=add rendered files to project, &2=do not render files that are likely silent\nRENDER_DITHER : &1=dither, &2=noise shaping, &4=dither stems, &8=noise shaping on stems\nRENDER_NORMALIZE: &1=enable, (&14==0)=LUFS-I, (&14==2)=RMS, (&14==4)=peak, (&14==6)=true peak, (&14==8)=LUFS-M max, (&14==10)=LUFS-S max, &32=normalize stems to common gain based on master, &64=enable brickwall limit, &128=brickwall limit true peak, &256=only normalize files that are too loud, &512=apply fade-in, &1024=apply fade-out\nRENDER_NORMALIZE_TARGET: render normalization target as amplitude, so 0.5 means -6.02dB, 0.25 means -12.04dB, etc\nRENDER_BRICKWALL: render brickwall limit as amplitude, so 0.5 means -6.02dB, 0.25 means -12.04dB, etc\nRENDER_FADEIN: render fade-in (0.001 means 1 ms, requires RENDER_NORMALIZE&512)\nRENDER_FADEOUT: render fade-out (0.001 means 1 ms, requires RENDER_NORMALIZE&1024)\nRENDER_FADEINSHAPE: render fade-in shape\nRENDER_FADEOUTSHAPE: render fade-out shape\nPROJECT_SRATE : samplerate (ignored unless PROJECT_SRATE_USE set)\nPROJECT_SRATE_USE : set to 1 if project samplerate is used\n"
	},

	"GetSetProjectInfo_String lua": {
	"prefix": "reaper.GetSetProjectInfo_String",
	"scope": "lua",
	"body": "retval, valuestrNeedBig = reaper.GetSetProjectInfo_String(${1:project}, ${2:desc}, ${3:valuestrNeedBig}, ${4:is_set})$0",
	"description": "Get or set project information.\nPROJECT_NAME : project file name (read-only, is_set will be ignored)\nPROJECT_TITLE : title field from Project Settings/Notes dialog\nPROJECT_AUTHOR : author field from Project Settings/Notes dialog\nTRACK_GROUP_NAME:X : track group name, X should be 1..64\nMARKER_GUID:X : get the GUID (unique ID) of the marker or region with index X, where X is the index passed to EnumProjectMarkers, not necessarily the displayed number (read-only)\nMARKER_INDEX_FROM_GUID:{GUID} : get the GUID index of the marker or region with GUID {GUID} (read-only)\nRECORD_PATH : recording directory -- may be blank or a relative path, to get the effective path see GetProjectPathEx()\nRECORD_PATH_SECONDARY : secondary recording directory\nRENDER_FILE : render directory\nRENDER_PATTERN : render file name (may contain wildcards)\nRENDER_METADATA : get or set the metadata saved with the project (not metadata embedded in project media). Example, ID3 album name metadata: valuestr='ID3:TALB' to get, valuestr='ID3:TALB|my album name' to set. Call with valuestr='' and is_set=false to get a semicolon-separated list of defined project metadata identifiers.\nRENDER_TARGETS : semicolon separated list of files that would be written if the project is rendered using the most recent render settings\nRENDER_STATS : (read-only) semicolon separated list of statistics for the most recently rendered files. call with valuestr='XXX' to run an action (for example, '42437'=dry run render selected items) before returning statistics.\nRENDER_FORMAT : base64-encoded sink configuration (see project files, etc). Callers can also pass a simple 4-byte string (non-base64-encoded), e.g. 'evaw' or 'l3pm', to use default settings for that sink type.\nRENDER_FORMAT2 : base64-encoded secondary sink configuration. Callers can also pass a simple 4-byte string (non-base64-encoded), e.g. 'evaw' or 'l3pm', to use default settings for that sink type, or '' to disable secondary render.\nFormats available on this machine:\n'wave' 'aiff' 'caff' 'iso ' 'ddp ' 'flac' 'mp3l' 'oggv' 'OggS' 'FFMP' 'WMF ' 'GIF ' 'LCF ' 'wvpk' \n\n"
	},

	"GetSetProjectNotes lua": {
	"prefix": "reaper.GetSetProjectNotes",
	"scope": "lua",
	"body": "notes = reaper.GetSetProjectNotes(${1:proj}, ${2:set}, ${3:notes})$0",
	"description": "gets or sets project notes, notesNeedBig_sz is ignored when setting\n\n"
	},

	"GetSetRepeat lua": {
	"prefix": "reaper.GetSetRepeat",
	"scope": "lua",
	"body": "reaper.GetSetRepeat(${1:val})$0",
	"description": "-1 == query,0=clear,1=set,>1=toggle . returns new value\n\n"
	},

	"GetSetRepeatEx lua": {
	"prefix": "reaper.GetSetRepeatEx",
	"scope": "lua",
	"body": "reaper.GetSetRepeatEx(${1:proj}, ${2:val})$0",
	"description": "-1 == query,0=clear,1=set,>1=toggle . returns new value\n\n"
	},

	"GetSetTrackGroupMembership lua": {
	"prefix": "reaper.GetSetTrackGroupMembership",
	"scope": "lua",
	"body": "reaper.GetSetTrackGroupMembership(${1:tr}, ${2:groupname}, ${3:setmask}, ${4:setvalue})$0",
	"description": "Gets or modifies the group membership for a track. Returns group state prior to call (each bit represents one of the 32 group numbers). if setmask has bits set, those bits in setvalue will be applied to group. Group can be one of:\nMEDIA_EDIT_LEAD\nMEDIA_EDIT_FOLLOW\nVOLUME_LEAD\nVOLUME_FOLLOW\nVOLUME_VCA_LEAD\nVOLUME_VCA_FOLLOW\nPAN_LEAD\nPAN_FOLLOW\nWIDTH_LEAD\nWIDTH_FOLLOW\nMUTE_LEAD\nMUTE_FOLLOW\nSOLO_LEAD\nSOLO_FOLLOW\nRECARM_LEAD\nRECARM_FOLLOW\nPOLARITY_LEAD\nPOLARITY_FOLLOW\nAUTOMODE_LEAD\nAUTOMODE_FOLLOW\nVOLUME_REVERSE\nPAN_REVERSE\nWIDTH_REVERSE\nNO_LEAD_WHEN_FOLLOW\nVOLUME_VCA_FOLLOW_ISPREFX\nNote: REAPER v6.11 and earlier used _MASTER and _SLAVE rather than _LEAD and _FOLLOW, which is deprecated but still supported (scripts that must support v6.11 and earlier can use the deprecated strings).\n"
	},

	"GetSetTrackGroupMembershipHigh lua": {
	"prefix": "reaper.GetSetTrackGroupMembershipHigh",
	"scope": "lua",
	"body": "reaper.GetSetTrackGroupMembershipHigh(${1:tr}, ${2:groupname}, ${3:setmask}, ${4:setvalue})$0",
	"description": "Gets or modifies the group membership for a track. Returns group state prior to call (each bit represents one of the high 32 group numbers). if setmask has bits set, those bits in setvalue will be applied to group. Group can be one of:\nMEDIA_EDIT_LEAD\nMEDIA_EDIT_FOLLOW\nVOLUME_LEAD\nVOLUME_FOLLOW\nVOLUME_VCA_LEAD\nVOLUME_VCA_FOLLOW\nPAN_LEAD\nPAN_FOLLOW\nWIDTH_LEAD\nWIDTH_FOLLOW\nMUTE_LEAD\nMUTE_FOLLOW\nSOLO_LEAD\nSOLO_FOLLOW\nRECARM_LEAD\nRECARM_FOLLOW\nPOLARITY_LEAD\nPOLARITY_FOLLOW\nAUTOMODE_LEAD\nAUTOMODE_FOLLOW\nVOLUME_REVERSE\nPAN_REVERSE\nWIDTH_REVERSE\nNO_LEAD_WHEN_FOLLOW\nVOLUME_VCA_FOLLOW_ISPREFX\nNote: REAPER v6.11 and earlier used _MASTER and _SLAVE rather than _LEAD and _FOLLOW, which is deprecated but still supported (scripts that must support v6.11 and earlier can use the deprecated strings).\n"
	},

	"GetSetTrackSendInfo_String lua": {
	"prefix": "reaper.GetSetTrackSendInfo_String",
	"scope": "lua",
	"body": "retval, stringNeedBig = reaper.GetSetTrackSendInfo_String(${1:tr}, ${2:category}, ${3:sendidx}, ${4:parmname}, ${5:stringNeedBig}, ${6:setNewValue})$0",
	"description": "Gets/sets a send attribute string:\nP_EXT:xyz : char * : extension-specific persistent data\n"
	},

	"GetSetTrackState lua": {
	"prefix": "reaper.GetSetTrackState",
	"scope": "lua",
	"body": "retval, str = reaper.GetSetTrackState(${1:track}, ${2:str})$0",
	"description": "deprecated -- see SetTrackStateChunk, GetTrackStateChunk\n\n"
	},

	"GetSetTrackState2 lua": {
	"prefix": "reaper.GetSetTrackState2",
	"scope": "lua",
	"body": "retval, str = reaper.GetSetTrackState2(${1:track}, ${2:str}, ${3:isundo})$0",
	"description": "deprecated -- see SetTrackStateChunk, GetTrackStateChunk\n\n"
	},

	"GetSubProjectFromSource lua": {
	"prefix": "reaper.GetSubProjectFromSource",
	"scope": "lua",
	"body": "reaper.GetSubProjectFromSource(${1:src})$0",
	"description": ""
	},

	"GetTake lua": {
	"prefix": "reaper.GetTake",
	"scope": "lua",
	"body": "reaper.GetTake(${1:item}, ${2:takeidx})$0",
	"description": "get a take from an item by take count (zero-based)\n\n"
	},

	"GetTakeEnvelope lua": {
	"prefix": "reaper.GetTakeEnvelope",
	"scope": "lua",
	"body": "reaper.GetTakeEnvelope(${1:take}, ${2:envidx})$0",
	"description": ""
	},

	"GetTakeEnvelopeByName lua": {
	"prefix": "reaper.GetTakeEnvelopeByName",
	"scope": "lua",
	"body": "reaper.GetTakeEnvelopeByName(${1:take}, ${2:envname})$0",
	"description": ""
	},

	"GetTakeMarker lua": {
	"prefix": "reaper.GetTakeMarker",
	"scope": "lua",
	"body": "retval, name, optional_color = reaper.GetTakeMarker(${1:take}, ${2:idx})$0",
	"description": "Get information about a take marker. Returns the position in media item source time, or -1 if the take marker does not exist. See GetNumTakeMarkers, SetTakeMarker, DeleteTakeMarker\n\n"
	},

	"GetTakeName lua": {
	"prefix": "reaper.GetTakeName",
	"scope": "lua",
	"body": "reaper.GetTakeName(${1:take})$0",
	"description": "returns NULL if the take is not valid\n\n"
	},

	"GetTakeNumStretchMarkers lua": {
	"prefix": "reaper.GetTakeNumStretchMarkers",
	"scope": "lua",
	"body": "reaper.GetTakeNumStretchMarkers(${1:take})$0",
	"description": "Returns number of stretch markers in take\n\n"
	},

	"GetTakeStretchMarker lua": {
	"prefix": "reaper.GetTakeStretchMarker",
	"scope": "lua",
	"body": "retval, pos, optional_srcpos = reaper.GetTakeStretchMarker(${1:take}, ${2:idx})$0",
	"description": "Gets information on a stretch marker, idx is 0..n. Returns -1 if stretch marker not valid. posOut will be set to position in item, srcposOutOptional will be set to source media position. Returns index. if input index is -1, the following marker is found using position (or source position if position is -1). If position/source position are used to find marker position, their values are not updated.\n\n"
	},

	"GetTakeStretchMarkerSlope lua": {
	"prefix": "reaper.GetTakeStretchMarkerSlope",
	"scope": "lua",
	"body": "reaper.GetTakeStretchMarkerSlope(${1:take}, ${2:idx})$0",
	"description": "See SetTakeStretchMarkerSlope\n\n"
	},

	"GetTCPFXParm lua": {
	"prefix": "reaper.GetTCPFXParm",
	"scope": "lua",
	"body": "retval, fxindex, parmidx = reaper.GetTCPFXParm(${1:project}, ${2:track}, ${3:index})$0",
	"description": "Get information about a specific FX parameter knob (see CountTCPFXParms).\n\n"
	},

	"GetTempoMatchPlayRate lua": {
	"prefix": "reaper.GetTempoMatchPlayRate",
	"scope": "lua",
	"body": "retval, rate, targetlen = reaper.GetTempoMatchPlayRate(${1:source}, ${2:srcscale}, ${3:position}, ${4:mult})$0",
	"description": "finds the playrate and target length to insert this item stretched to a round power-of-2 number of bars, between 1/8 and 256\n\n"
	},

	"GetTempoTimeSigMarker lua": {
	"prefix": "reaper.GetTempoTimeSigMarker",
	"scope": "lua",
	"body": "retval, timepos, measurepos, beatpos, bpm, timesig_num, timesig_denom, lineartempo = reaper.GetTempoTimeSigMarker(${1:proj}, ${2:ptidx})$0",
	"description": "Get information about a tempo/time signature marker. See CountTempoTimeSigMarkers, SetTempoTimeSigMarker, AddTempoTimeSigMarker.\n\n"
	},

	"GetThemeColor lua": {
	"prefix": "reaper.GetThemeColor",
	"scope": "lua",
	"body": "reaper.GetThemeColor(${1:ini_key}, ${2:flags})$0",
	"description": "Returns the theme color specified, or -1 on failure. If the low bit of flags is set, the color as originally specified by the theme (before any transformations) is returned, otherwise the current (possibly transformed and modified) color is returned. See SetThemeColor for a list of valid ini_key.\n\n"
	},

	"GetThingFromPoint lua": {
	"prefix": "reaper.GetThingFromPoint",
	"scope": "lua",
	"body": "retval, info = reaper.GetThingFromPoint(${1:screen_x}, ${2:screen_y})$0",
	"description": "Hit tests a point in screen coordinates. Updates infoOut with information such as 'arrange', 'fx_chain', 'fx_0' (first FX in chain, floating). If a track panel is hit, string will begin with 'tcp' or 'mcp' or 'tcp.mute' etc (future versions may append additional information). May return NULL with valid info string to indicate non-track thing.\n\n"
	},

	"GetToggleCommandState lua": {
	"prefix": "reaper.GetToggleCommandState",
	"scope": "lua",
	"body": "reaper.GetToggleCommandState(${1:command_id})$0",
	"description": "See GetToggleCommandStateEx.\n\n"
	},

	"GetToggleCommandStateEx lua": {
	"prefix": "reaper.GetToggleCommandStateEx",
	"scope": "lua",
	"body": "reaper.GetToggleCommandStateEx(${1:section_id}, ${2:command_id})$0",
	"description": "For the main action context, the MIDI editor, or the media explorer, returns the toggle state of the action. 0=off, 1=on, -1=NA because the action does not have on/off states. For the MIDI editor, the action state for the most recently focused window will be returned.\n\n"
	},

	"GetTooltipWindow lua": {
	"prefix": "reaper.GetTooltipWindow",
	"scope": "lua",
	"body": "reaper.GetTooltipWindow()\n\n",
	"description": "gets a tooltip window,in case you want to ask it for font information. Can return NULL.\n\n"
	},

	"GetTrack lua": {
	"prefix": "reaper.GetTrack",
	"scope": "lua",
	"body": "reaper.GetTrack(${1:proj}, ${2:trackidx})$0",
	"description": "get a track from a project by track count (zero-based) (proj=0 for active project)\n\n"
	},

	"GetTrackAutomationMode lua": {
	"prefix": "reaper.GetTrackAutomationMode",
	"scope": "lua",
	"body": "reaper.GetTrackAutomationMode(${1:tr})$0",
	"description": "return the track mode, regardless of global override\n\n"
	},

	"GetTrackColor lua": {
	"prefix": "reaper.GetTrackColor",
	"scope": "lua",
	"body": "reaper.GetTrackColor(${1:track})$0",
	"description": "Returns the track custom color as OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). Black is returned as 0x1000000, no color setting is returned as 0.\n\n"
	},

	"GetTrackDepth lua": {
	"prefix": "reaper.GetTrackDepth",
	"scope": "lua",
	"body": "reaper.GetTrackDepth(${1:track})$0",
	"description": ""
	},

	"GetTrackEnvelope lua": {
	"prefix": "reaper.GetTrackEnvelope",
	"scope": "lua",
	"body": "reaper.GetTrackEnvelope(${1:track}, ${2:envidx})$0",
	"description": ""
	},

	"GetTrackEnvelopeByChunkName lua": {
	"prefix": "reaper.GetTrackEnvelopeByChunkName",
	"scope": "lua",
	"body": "reaper.GetTrackEnvelopeByChunkName(${1:tr}, ${2:cfgchunkname_or_guid})$0",
	"description": "Gets a built-in track envelope by configuration chunk name, like '<VOLENV', or GUID string, like '{B577250D-146F-B544-9B34-F24FBE488F1F}'.\n"
	},

	"GetTrackEnvelopeByName lua": {
	"prefix": "reaper.GetTrackEnvelopeByName",
	"scope": "lua",
	"body": "reaper.GetTrackEnvelopeByName(${1:track}, ${2:envname})$0",
	"description": ""
	},

	"GetTrackFromPoint lua": {
	"prefix": "reaper.GetTrackFromPoint",
	"scope": "lua",
	"body": "retval, optional_info = reaper.GetTrackFromPoint(${1:screen_x}, ${2:screen_y})$0",
	"description": "Returns the track from the screen coordinates specified. If the screen coordinates refer to a window associated to the track (such as FX), the track will be returned. infoOutOptional will be set to 1 if it is likely an envelope, 2 if it is likely a track FX. See GetThingFromPoint.\n\n"
	},

	"GetTrackGUID lua": {
	"prefix": "reaper.GetTrackGUID",
	"scope": "lua",
	"body": "GUID = reaper.GetTrackGUID(${1:tr})$0",
	"description": ""
	},

	"GetTrackMediaItem lua": {
	"prefix": "reaper.GetTrackMediaItem",
	"scope": "lua",
	"body": "reaper.GetTrackMediaItem(${1:tr}, ${2:itemidx})$0",
	"description": ""
	},

	"GetTrackMIDILyrics lua": {
	"prefix": "reaper.GetTrackMIDILyrics",
	"scope": "lua",
	"body": "retval, buf = reaper.GetTrackMIDILyrics(${1:track}, ${2:flag})$0",
	"description": "Get all MIDI lyrics on the track. Lyrics will be returned as one string with tabs between each word. flag&1: double tabs at the end of each measure and triple tabs when skipping measures, flag&2: each lyric is preceded by its beat position in the project (example with flag=2: '1.1.2\tLyric for measure 1 beat 2\t2.1.1\tLyric for measure 2 beat 1	'). See SetTrackMIDILyrics\n\n"
	},

	"GetTrackMIDINoteName lua": {
	"prefix": "reaper.GetTrackMIDINoteName",
	"scope": "lua",
	"body": "reaper.GetTrackMIDINoteName(${1:track}, ${2:pitch}, ${3:chan})$0",
	"description": "see GetTrackMIDINoteNameEx\n\n"
	},

	"GetTrackMIDINoteNameEx lua": {
	"prefix": "reaper.GetTrackMIDINoteNameEx",
	"scope": "lua",
	"body": "reaper.GetTrackMIDINoteNameEx(${1:proj}, ${2:track}, ${3:pitch}, ${4:chan})$0",
	"description": "Get note/CC name. pitch 128 for CC0 name, 129 for CC1 name, etc. See SetTrackMIDINoteNameEx\n\n"
	},

	"GetTrackMIDINoteRange lua": {
	"prefix": "reaper.GetTrackMIDINoteRange",
	"scope": "lua",
	"body": "note_lo, note_hi = reaper.GetTrackMIDINoteRange(${1:proj}, ${2:track})$0",
	"description": ""
	},

	"GetTrackName lua": {
	"prefix": "reaper.GetTrackName",
	"scope": "lua",
	"body": "retval, buf = reaper.GetTrackName(${1:track})$0",
	"description": "Returns 'MASTER' for master track, 'Track N' if track has no name.\n\n"
	},

	"GetTrackNumMediaItems lua": {
	"prefix": "reaper.GetTrackNumMediaItems",
	"scope": "lua",
	"body": "reaper.GetTrackNumMediaItems(${1:tr})$0",
	"description": ""
	},

	"GetTrackNumSends lua": {
	"prefix": "reaper.GetTrackNumSends",
	"scope": "lua",
	"body": "reaper.GetTrackNumSends(${1:tr}, ${2:category})$0",
	"description": "returns number of sends/receives/hardware outputs - category is <0 for receives, 0=sends, >0 for hardware outputs\n\n"
	},

	"GetTrackReceiveName lua": {
	"prefix": "reaper.GetTrackReceiveName",
	"scope": "lua",
	"body": "retval, buf = reaper.GetTrackReceiveName(${1:track}, ${2:recv_index})$0",
	"description": "See GetTrackSendName.\n\n"
	},

	"GetTrackReceiveUIMute lua": {
	"prefix": "reaper.GetTrackReceiveUIMute",
	"scope": "lua",
	"body": "retval, mute = reaper.GetTrackReceiveUIMute(${1:track}, ${2:recv_index})$0",
	"description": "See GetTrackSendUIMute.\n\n"
	},

	"GetTrackReceiveUIVolPan lua": {
	"prefix": "reaper.GetTrackReceiveUIVolPan",
	"scope": "lua",
	"body": "retval, volume, pan = reaper.GetTrackReceiveUIVolPan(${1:track}, ${2:recv_index})$0",
	"description": "See GetTrackSendUIVolPan.\n\n"
	},

	"GetTrackSendInfo_Value lua": {
	"prefix": "reaper.GetTrackSendInfo_Value",
	"scope": "lua",
	"body": "reaper.GetTrackSendInfo_Value(${1:tr}, ${2:category}, ${3:sendidx}, ${4:parmname})$0",
	"description": "Get send/receive/hardware output numerical-value attributes.\ncategory is <0 for receives, 0=sends, >0 for hardware outputs\nparameter names:\nB_MUTE : bool *\nB_PHASE : bool * : true to flip phase\nB_MONO : bool *\nD_VOL : double * : 1.0 = +0dB etc\nD_PAN : double * : -1..+1\nD_PANLAW : double * : 1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc\nI_SENDMODE : int * : 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx\nI_AUTOMODE : int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)\nI_SRCCHAN : int * : index,&1024=mono, -1 for none\nI_DSTCHAN : int * : index, &1024=mono, otherwise stereo pair, hwout:&512=rearoute\nI_MIDIFLAGS : int * : low 5 bits=source channel 0=all, 1-16, next 5 bits=dest channel, 0=orig, 1-16=chan\nP_DESTTRACK : MediaTrack * : destination track, only applies for sends/recvs (read-only)\nP_SRCTRACK : MediaTrack * : source track, only applies for sends/recvs (read-only)\nP_ENV:<envchunkname : TrackEnvelope * : call with :<VOLENV, :<PANENV, etc appended (read-only)\nSee CreateTrackSend, RemoveTrackSend, GetTrackNumSends.\n\n"
	},

	"GetTrackSendName lua": {
	"prefix": "reaper.GetTrackSendName",
	"scope": "lua",
	"body": "retval, buf = reaper.GetTrackSendName(${1:track}, ${2:send_index})$0",
	"description": "send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveName.\n\n"
	},

	"GetTrackSendUIMute lua": {
	"prefix": "reaper.GetTrackSendUIMute",
	"scope": "lua",
	"body": "retval, mute = reaper.GetTrackSendUIMute(${1:track}, ${2:send_index})$0",
	"description": "send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveUIMute.\n\n"
	},

	"GetTrackSendUIVolPan lua": {
	"prefix": "reaper.GetTrackSendUIVolPan",
	"scope": "lua",
	"body": "retval, volume, pan = reaper.GetTrackSendUIVolPan(${1:track}, ${2:send_index})$0",
	"description": "send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveUIVolPan.\n\n"
	},

	"GetTrackState lua": {
	"prefix": "reaper.GetTrackState",
	"scope": "lua",
	"body": "retval, flags = reaper.GetTrackState(${1:track})$0",
	"description": "Gets track state, returns track name.\nflags will be set to:\n&1=folder\n&2=selected\n&4=has fx enabled\n&8=muted\n&16=soloed\n&32=SIP'd (with &16)\n&64=rec armed\n&128=rec monitoring on\n&256=rec monitoring auto\n&512=hide from TCP\n&1024=hide from MCP\n\n"
	},

	"GetTrackStateChunk lua": {
	"prefix": "reaper.GetTrackStateChunk",
	"scope": "lua",
	"body": "retval, str = reaper.GetTrackStateChunk(${1:track}, ${2:str}, ${3:isundo})$0",
	"description": "Gets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint.\n\n"
	},

	"GetTrackUIMute lua": {
	"prefix": "reaper.GetTrackUIMute",
	"scope": "lua",
	"body": "retval, mute = reaper.GetTrackUIMute(${1:track})$0",
	"description": ""
	},

	"GetTrackUIPan lua": {
	"prefix": "reaper.GetTrackUIPan",
	"scope": "lua",
	"body": "retval, pan1, pan2, panmode = reaper.GetTrackUIPan(${1:track})$0",
	"description": ""
	},

	"GetTrackUIVolPan lua": {
	"prefix": "reaper.GetTrackUIVolPan",
	"scope": "lua",
	"body": "retval, volume, pan = reaper.GetTrackUIVolPan(${1:track})$0",
	"description": ""
	},

	"GetUnderrunTime lua": {
	"prefix": "reaper.GetUnderrunTime",
	"scope": "lua",
	"body": "audio_xrun, media_xrun, curtime = reaper.GetUnderrunTime()\n\n",
	"description": "retrieves the last timestamps of audio xrun (yellow-flash, if available), media xrun (red-flash), and the current time stamp (all milliseconds)\n\n"
	},

	"GetUserFileNameForRead lua": {
	"prefix": "reaper.GetUserFileNameForRead",
	"scope": "lua",
	"body": "retval, filenameNeed4096 = reaper.GetUserFileNameForRead(${1:filenameNeed4096}, ${2:title}, ${3:defext})$0",
	"description": "returns true if the user selected a valid file, false if the user canceled the dialog\n\n"
	},

	"GetUserInputs lua": {
	"prefix": "reaper.GetUserInputs",
	"scope": "lua",
	"body": "retval, retvals_csv = reaper.GetUserInputs(${1:title}, ${2:num_inputs}, ${3:captions_csv}, ${4:retvals_csv})$0",
	"description": "Get values from the user.\nIf a caption begins with *, for example '*password', the edit field will not display the input text.\nMaximum fields is 16. Values are returned as a comma-separated string. Returns false if the user canceled the dialog. You can supply special extra information via additional caption fields: extrawidth=XXX to increase text field width, separator=X to use a different separator for returned fields.\n\n"
	},

	"GoToMarker lua": {
	"prefix": "reaper.GoToMarker",
	"scope": "lua",
	"body": "reaper.GoToMarker(${1:proj}, ${2:marker_index}, ${3:use_timeline_order})$0",
	"description": "Go to marker. If use_timeline_order==true, marker_index 1 refers to the first marker on the timeline.  If use_timeline_order==false, marker_index 1 refers to the first marker with the user-editable index of 1.\n\n"
	},

	"GoToRegion lua": {
	"prefix": "reaper.GoToRegion",
	"scope": "lua",
	"body": "reaper.GoToRegion(${1:proj}, ${2:region_index}, ${3:use_timeline_order})$0",
	"description": "Seek to region after current region finishes playing (smooth seek). If use_timeline_order==true, region_index 1 refers to the first region on the timeline.  If use_timeline_order==false, region_index 1 refers to the first region with the user-editable index of 1.\n\n"
	},

	"GR_SelectColor lua": {
	"prefix": "reaper.GR_SelectColor",
	"scope": "lua",
	"body": "retval, color = reaper.GR_SelectColor(${1:hwnd})$0",
	"description": "Runs the system color chooser dialog.  Returns 0 if the user cancels the dialog.\n\n"
	},

	"GSC_mainwnd lua": {
	"prefix": "reaper.GSC_mainwnd",
	"scope": "lua",
	"body": "reaper.GSC_mainwnd(${1:t})$0",
	"description": "this is just like win32 GetSysColor() but can have overrides.\n\n"
	},

	"guidToString lua": {
	"prefix": "reaper.guidToString",
	"scope": "lua",
	"body": "destNeed64 = reaper.guidToString(${1:gGUID}, ${2:destNeed64})$0",
	"description": "dest should be at least 64 chars long to be safe\n\n"
	},

	"HasExtState lua": {
	"prefix": "reaper.HasExtState",
	"scope": "lua",
	"body": "reaper.HasExtState(${1:section}, ${2:key})$0",
	"description": "Returns true if there exists an extended state value for a specific section and key. See SetExtState, GetExtState, DeleteExtState.\n\n"
	},

	"HasTrackMIDIPrograms lua": {
	"prefix": "reaper.HasTrackMIDIPrograms",
	"scope": "lua",
	"body": "reaper.HasTrackMIDIPrograms(${1:track})$0",
	"description": "returns name of track plugin that is supplying MIDI programs,or NULL if there is none\n\n"
	},

	"HasTrackMIDIProgramsEx lua": {
	"prefix": "reaper.HasTrackMIDIProgramsEx",
	"scope": "lua",
	"body": "reaper.HasTrackMIDIProgramsEx(${1:proj}, ${2:track})$0",
	"description": "returns name of track plugin that is supplying MIDI programs,or NULL if there is none\n\n"
	},

	"Help_Set lua": {
	"prefix": "reaper.Help_Set",
	"scope": "lua",
	"body": "reaper.Help_Set(${1:helpstring}, ${2:is_temporary_help})$0",
	"description": ""
	},

	"image_resolve_fn lua": {
	"prefix": "reaper.image_resolve_fn",
	"scope": "lua",
	"body": "out = reaper.image_resolve_fn(${1:in}, ${2:out})$0",
	"description": ""
	},

	"InsertAutomationItem lua": {
	"prefix": "reaper.InsertAutomationItem",
	"scope": "lua",
	"body": "reaper.InsertAutomationItem(${1:env}, ${2:pool_id}, ${3:position}, ${4:length})$0",
	"description": "Insert a new automation item. pool_id < 0 collects existing envelope points into the automation item; if pool_id is >= 0 the automation item will be a new instance of that pool (which will be created as an empty instance if it does not exist). Returns the index of the item, suitable for passing to other automation item API functions. See GetSetAutomationItemInfo.\n\n"
	},

	"InsertEnvelopePoint lua": {
	"prefix": "reaper.InsertEnvelopePoint",
	"scope": "lua",
	"body": "reaper.InsertEnvelopePoint(${1:envelope}, ${2:time}, ${3:value}, ${4:shape}, ${5:tension}, ${6:selected}, ${7:optional_noSortIn})$0",
	"description": "Insert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. See InsertEnvelopePointEx.\n\n"
	},

	"InsertEnvelopePointEx lua": {
	"prefix": "reaper.InsertEnvelopePointEx",
	"scope": "lua",
	"body": "reaper.InsertEnvelopePointEx(${1:envelope}, ${2:autoitem_idx}, ${3:time}, ${4:value}, ${5:shape}, ${6:tension}, ${7:selected}, ${8:optional_noSortIn})$0",
	"description": "Insert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done.\nautoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\nFor automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.\nSee CountEnvelopePointsEx, GetEnvelopePointEx, SetEnvelopePointEx, DeleteEnvelopePointEx.\n\n"
	},

	"InsertMedia lua": {
	"prefix": "reaper.InsertMedia",
	"scope": "lua",
	"body": "reaper.InsertMedia(${1:file}, ${2:mode})$0",
	"description": "mode: 0=add to current track, 1=add new track, 3=add to selected items as takes, &4=stretch/loop to fit time sel, &8=try to match tempo 1x, &16=try to match tempo 0.5x, &32=try to match tempo 2x, &64=don't preserve pitch when matching tempo, &128=no loop/section if startpct/endpct set, &256=force loop regardless of global preference for looping imported items, &512=use high word as absolute track index if mode&3==0 or mode&2048, &1024=insert into reasamplomatic on a new track (add 1 to insert on last selected track), &2048=insert into open reasamplomatic instance (add 512 to use high word as absolute track index), &4096=move to source preferred position (BWF start offset), &8192=reverse\n\n"
	},

	"InsertMediaSection lua": {
	"prefix": "reaper.InsertMediaSection",
	"scope": "lua",
	"body": "reaper.InsertMediaSection(${1:file}, ${2:mode}, ${3:startpct}, ${4:endpct}, ${5:pitchshift})$0",
	"description": "See InsertMedia.\n\n"
	},

	"InsertTrackAtIndex lua": {
	"prefix": "reaper.InsertTrackAtIndex",
	"scope": "lua",
	"body": "reaper.InsertTrackAtIndex(${1:idx}, ${2:wantDefaults})$0",
	"description": "inserts a track at idx,of course this will be clamped to 0..GetNumTracks(). wantDefaults=TRUE for default envelopes/FX,otherwise no enabled fx/env\n\n"
	},

	"IsMediaExtension lua": {
	"prefix": "reaper.IsMediaExtension",
	"scope": "lua",
	"body": "reaper.IsMediaExtension(${1:ext}, ${2:wantOthers})$0",
	"description": "Tests a file extension (i.e. 'wav' or 'mid') to see if it's a media extension.\nIf wantOthers is set, then 'RPP', 'TXT' and other project-type formats will also pass.\n\n"
	},

	"IsMediaItemSelected lua": {
	"prefix": "reaper.IsMediaItemSelected",
	"scope": "lua",
	"body": "reaper.IsMediaItemSelected(${1:item})$0",
	"description": ""
	},

	"IsProjectDirty lua": {
	"prefix": "reaper.IsProjectDirty",
	"scope": "lua",
	"body": "reaper.IsProjectDirty(${1:proj})$0",
	"description": "Is the project dirty (needing save)? Always returns 0 if 'undo/prompt to save' is disabled in preferences.\n\n"
	},

	"IsTrackSelected lua": {
	"prefix": "reaper.IsTrackSelected",
	"scope": "lua",
	"body": "reaper.IsTrackSelected(${1:track})$0",
	"description": ""
	},

	"IsTrackVisible lua": {
	"prefix": "reaper.IsTrackVisible",
	"scope": "lua",
	"body": "reaper.IsTrackVisible(${1:track}, ${2:mixer})$0",
	"description": "If mixer==true, returns true if the track is visible in the mixer.  If mixer==false, returns true if the track is visible in the track control panel.\n\n"
	},

	"joystick_create lua": {
	"prefix": "reaper.joystick_create",
	"scope": "lua",
	"body": "reaper.joystick_create(${1:guidGUID})$0",
	"description": "creates a joystick device\n\n"
	},

	"joystick_destroy lua": {
	"prefix": "reaper.joystick_destroy",
	"scope": "lua",
	"body": "reaper.joystick_destroy(${1:device})$0",
	"description": "destroys a joystick device\n\n"
	},

	"joystick_enum lua": {
	"prefix": "reaper.joystick_enum",
	"scope": "lua",
	"body": "retval, optional_namestr = reaper.joystick_enum(${1:index})$0",
	"description": "enumerates installed devices, returns GUID as a string\n\n"
	},

	"joystick_getaxis lua": {
	"prefix": "reaper.joystick_getaxis",
	"scope": "lua",
	"body": "reaper.joystick_getaxis(${1:dev}, ${2:axis})$0",
	"description": "returns axis value (-1..1)\n\n"
	},

	"joystick_getbuttonmask lua": {
	"prefix": "reaper.joystick_getbuttonmask",
	"scope": "lua",
	"body": "reaper.joystick_getbuttonmask(${1:dev})$0",
	"description": "returns button pressed mask, 1=first button, 2=second...\n\n"
	},

	"joystick_getinfo lua": {
	"prefix": "reaper.joystick_getinfo",
	"scope": "lua",
	"body": "retval, optional_axes, optional_povs = reaper.joystick_getinfo(${1:dev})$0",
	"description": "returns button count\n\n"
	},

	"joystick_getpov lua": {
	"prefix": "reaper.joystick_getpov",
	"scope": "lua",
	"body": "reaper.joystick_getpov(${1:dev}, ${2:pov})$0",
	"description": "returns POV value (usually 0..655.35, or 655.35 on error)\n\n"
	},

	"joystick_update lua": {
	"prefix": "reaper.joystick_update",
	"scope": "lua",
	"body": "reaper.joystick_update(${1:dev})$0",
	"description": "Updates joystick state from hardware, returns true if successful (joystick_get* will not be valid until joystick_update() is called successfully)\n\n"
	},

	"kbd_enumerateActions lua": {
	"prefix": "reaper.kbd_enumerateActions",
	"scope": "lua",
	"body": "retval, name = reaper.kbd_enumerateActions(${1:section}, ${2:idx})$0",
	"description": ""
	},

	"kbd_getTextFromCmd lua": {
	"prefix": "reaper.kbd_getTextFromCmd",
	"scope": "lua",
	"body": "reaper.kbd_getTextFromCmd(${1:cmd}, ${2:section})$0",
	"description": ""
	},

	"LICE_ClipLine lua": {
	"prefix": "reaper.LICE_ClipLine",
	"scope": "lua",
	"body": "retval, pX1, pY1, pX2, pY2 = reaper.LICE_ClipLine(${1:pX1}, ${2:pY1}, ${3:pX2}, ${4:pY2}, ${5:xLo}, ${6:yLo}, ${7:xHi}, ${8:yHi})$0",
	"description": "Returns false if the line is entirely offscreen.\n\n"
	},

	"LocalizeString lua": {
	"prefix": "reaper.LocalizeString",
	"scope": "lua",
	"body": "reaper.LocalizeString(${1:src_string}, ${2:section}, ${3:flags})$0",
	"description": "Returns a localized version of src_string, in section section. flags can have 1 set to only localize if sprintf-style formatting matches the original.\n\n"
	},

	"Loop_OnArrow lua": {
	"prefix": "reaper.Loop_OnArrow",
	"scope": "lua",
	"body": "reaper.Loop_OnArrow(${1:project}, ${2:direction})$0",
	"description": "Move the loop selection left or right. Returns true if snap is enabled.\n\n"
	},

	"Main_OnCommand lua": {
	"prefix": "reaper.Main_OnCommand",
	"scope": "lua",
	"body": "reaper.Main_OnCommand(${1:command}, ${2:flag})$0",
	"description": "See Main_OnCommandEx.\n\n"
	},

	"Main_OnCommandEx lua": {
	"prefix": "reaper.Main_OnCommandEx",
	"scope": "lua",
	"body": "reaper.Main_OnCommandEx(${1:command}, ${2:flag}, ${3:proj})$0",
	"description": "Performs an action belonging to the main action section. To perform non-native actions (ReaScripts, custom or extension plugins' actions) safely, see NamedCommandLookup().\n\n"
	},

	"Main_openProject lua": {
	"prefix": "reaper.Main_openProject",
	"scope": "lua",
	"body": "reaper.Main_openProject(${1:name})$0",
	"description": "opens a project. will prompt the user to save unless name is prefixed with 'noprompt:'. If name is prefixed with 'template:', project file will be loaded as a template.\nIf passed a .RTrackTemplate file, adds the template to the existing project.\n\n"
	},

	"Main_SaveProject lua": {
	"prefix": "reaper.Main_SaveProject",
	"scope": "lua",
	"body": "reaper.Main_SaveProject(${1:proj}, ${2:forceSaveAsIn})$0",
	"description": "Save the project.\n\n"
	},

	"Main_SaveProjectEx lua": {
	"prefix": "reaper.Main_SaveProjectEx",
	"scope": "lua",
	"body": "reaper.Main_SaveProjectEx(${1:proj}, ${2:filename}, ${3:options})$0",
	"description": "Save the project. options: &1=save selected tracks as track template, &2=include media with track template, &4=include envelopes with track template. See Main_openProject, Main_SaveProject.\n\n"
	},

	"Main_UpdateLoopInfo lua": {
	"prefix": "reaper.Main_UpdateLoopInfo",
	"scope": "lua",
	"body": "reaper.Main_UpdateLoopInfo(${1:ignoremask})$0",
	"description": ""
	},

	"MarkProjectDirty lua": {
	"prefix": "reaper.MarkProjectDirty",
	"scope": "lua",
	"body": "reaper.MarkProjectDirty(${1:proj})$0",
	"description": "Marks project as dirty (needing save) if 'undo/prompt to save' is enabled in preferences.\n\n"
	},

	"MarkTrackItemsDirty lua": {
	"prefix": "reaper.MarkTrackItemsDirty",
	"scope": "lua",
	"body": "reaper.MarkTrackItemsDirty(${1:track}, ${2:item})$0",
	"description": "If track is supplied, item is ignored\n\n"
	},

	"Master_GetPlayRate lua": {
	"prefix": "reaper.Master_GetPlayRate",
	"scope": "lua",
	"body": "reaper.Master_GetPlayRate(${1:project})$0",
	"description": ""
	},

	"Master_GetPlayRateAtTime lua": {
	"prefix": "reaper.Master_GetPlayRateAtTime",
	"scope": "lua",
	"body": "reaper.Master_GetPlayRateAtTime(${1:time_s}, ${2:proj})$0",
	"description": ""
	},

	"Master_GetTempo lua": {
	"prefix": "reaper.Master_GetTempo",
	"scope": "lua",
	"body": "reaper.Master_GetTempo()\n\n",
	"description": ""
	},

	"Master_NormalizePlayRate lua": {
	"prefix": "reaper.Master_NormalizePlayRate",
	"scope": "lua",
	"body": "reaper.Master_NormalizePlayRate(${1:playrate}, ${2:isnormalized})$0",
	"description": "Convert play rate to/from a value between 0 and 1, representing the position on the project playrate slider.\n\n"
	},

	"Master_NormalizeTempo lua": {
	"prefix": "reaper.Master_NormalizeTempo",
	"scope": "lua",
	"body": "reaper.Master_NormalizeTempo(${1:bpm}, ${2:isnormalized})$0",
	"description": "Convert the tempo to/from a value between 0 and 1, representing bpm in the range of 40-296 bpm.\n\n"
	},

	"MB lua": {
	"prefix": "reaper.MB",
	"scope": "lua",
	"body": "reaper.MB(${1:msg}, ${2:title}, ${3:type})$0",
	"description": "type 0=OK,1=OKCANCEL,2=ABORTRETRYIGNORE,3=YESNOCANCEL,4=YESNO,5=RETRYCANCEL : ret 1=OK,2=CANCEL,3=ABORT,4=RETRY,5=IGNORE,6=YES,7=NO\n\n"
	},

	"MediaItemDescendsFromTrack lua": {
	"prefix": "reaper.MediaItemDescendsFromTrack",
	"scope": "lua",
	"body": "reaper.MediaItemDescendsFromTrack(${1:item}, ${2:track})$0",
	"description": "Returns 1 if the track holds the item, 2 if the track is a folder containing the track that holds the item, etc.\n\n"
	},

	"MIDI_CountEvts lua": {
	"prefix": "reaper.MIDI_CountEvts",
	"scope": "lua",
	"body": "retval, notecnt, ccevtcnt, textsyxevtcnt = reaper.MIDI_CountEvts(${1:take})$0",
	"description": "Count the number of notes, CC events, and text/sysex events in a given MIDI item.\n\n"
	},

	"MIDI_DeleteCC lua": {
	"prefix": "reaper.MIDI_DeleteCC",
	"scope": "lua",
	"body": "reaper.MIDI_DeleteCC(${1:take}, ${2:ccidx})$0",
	"description": "Delete a MIDI CC event.\n\n"
	},

	"MIDI_DeleteEvt lua": {
	"prefix": "reaper.MIDI_DeleteEvt",
	"scope": "lua",
	"body": "reaper.MIDI_DeleteEvt(${1:take}, ${2:evtidx})$0",
	"description": "Delete a MIDI event.\n\n"
	},

	"MIDI_DeleteNote lua": {
	"prefix": "reaper.MIDI_DeleteNote",
	"scope": "lua",
	"body": "reaper.MIDI_DeleteNote(${1:take}, ${2:noteidx})$0",
	"description": "Delete a MIDI note.\n\n"
	},

	"MIDI_DeleteTextSysexEvt lua": {
	"prefix": "reaper.MIDI_DeleteTextSysexEvt",
	"scope": "lua",
	"body": "reaper.MIDI_DeleteTextSysexEvt(${1:take}, ${2:textsyxevtidx})$0",
	"description": "Delete a MIDI text or sysex event.\n\n"
	},

	"MIDI_DisableSort lua": {
	"prefix": "reaper.MIDI_DisableSort",
	"scope": "lua",
	"body": "reaper.MIDI_DisableSort(${1:take})$0",
	"description": "Disable sorting for all MIDI insert, delete, get and set functions, until MIDI_Sort is called.\n\n"
	},

	"MIDI_EnumSelCC lua": {
	"prefix": "reaper.MIDI_EnumSelCC",
	"scope": "lua",
	"body": "reaper.MIDI_EnumSelCC(${1:take}, ${2:ccidx})$0",
	"description": "Returns the index of the next selected MIDI CC event after ccidx (-1 if there are no more selected events).\n\n"
	},

	"MIDI_EnumSelEvts lua": {
	"prefix": "reaper.MIDI_EnumSelEvts",
	"scope": "lua",
	"body": "reaper.MIDI_EnumSelEvts(${1:take}, ${2:evtidx})$0",
	"description": "Returns the index of the next selected MIDI event after evtidx (-1 if there are no more selected events).\n\n"
	},

	"MIDI_EnumSelNotes lua": {
	"prefix": "reaper.MIDI_EnumSelNotes",
	"scope": "lua",
	"body": "reaper.MIDI_EnumSelNotes(${1:take}, ${2:noteidx})$0",
	"description": "Returns the index of the next selected MIDI note after noteidx (-1 if there are no more selected events).\n\n"
	},

	"MIDI_EnumSelTextSysexEvts lua": {
	"prefix": "reaper.MIDI_EnumSelTextSysexEvts",
	"scope": "lua",
	"body": "reaper.MIDI_EnumSelTextSysexEvts(${1:take}, ${2:textsyxidx})$0",
	"description": "Returns the index of the next selected MIDI text/sysex event after textsyxidx (-1 if there are no more selected events).\n\n"
	},

	"MIDI_GetAllEvts lua": {
	"prefix": "reaper.MIDI_GetAllEvts",
	"scope": "lua",
	"body": "retval, buf = reaper.MIDI_GetAllEvts(${1:take})$0",
	"description": "Get all MIDI data. MIDI buffer is returned as a list of { int offset, char flag, int msglen, unsigned char msg[] }.\noffset: MIDI ticks from previous event\nflag: &1=selected &2=muted\nflag high 4 bits for CC shape: &16=linear, &32=slow start/end, &16|32=fast start, &64=fast end, &64|16=bezier\nmsg: the MIDI message.\nA meta-event of type 0xF followed by 'CCBZ ' and 5 more bytes represents bezier curve data for the previous MIDI event: 1 byte for the bezier type (usually 0) and 4 bytes for the bezier tension as a float.\nFor tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events.\nSee MIDI_SetAllEvts.\n\n"
	},

	"MIDI_GetCC lua": {
	"prefix": "reaper.MIDI_GetCC",
	"scope": "lua",
	"body": "retval, selected, muted, ppqpos, chanmsg, chan, msg2, msg3 = reaper.MIDI_GetCC(${1:take}, ${2:ccidx})$0",
	"description": "Get MIDI CC event properties.\n\n"
	},

	"MIDI_GetCCShape lua": {
	"prefix": "reaper.MIDI_GetCCShape",
	"scope": "lua",
	"body": "retval, shape, beztension = reaper.MIDI_GetCCShape(${1:take}, ${2:ccidx})$0",
	"description": "Get CC shape and bezier tension. See MIDI_GetCC, MIDI_SetCCShape\n\n"
	},

	"MIDI_GetEvt lua": {
	"prefix": "reaper.MIDI_GetEvt",
	"scope": "lua",
	"body": "retval, selected, muted, ppqpos, msg = reaper.MIDI_GetEvt(${1:take}, ${2:evtidx})$0",
	"description": "Get MIDI event properties.\n\n"
	},

	"MIDI_GetGrid lua": {
	"prefix": "reaper.MIDI_GetGrid",
	"scope": "lua",
	"body": "retval, optional_swing, optional_noteLen = reaper.MIDI_GetGrid(${1:take})$0",
	"description": "Returns the most recent MIDI editor grid size for this MIDI take, in QN. Swing is between 0 and 1. Note length is 0 if it follows the grid size.\n\n"
	},

	"MIDI_GetHash lua": {
	"prefix": "reaper.MIDI_GetHash",
	"scope": "lua",
	"body": "retval, hash = reaper.MIDI_GetHash(${1:take}, ${2:notesonly})$0",
	"description": "Get a string that only changes when the MIDI data changes. If notesonly==true, then the string changes only when the MIDI notes change. See MIDI_GetTrackHash\n\n"
	},

	"MIDI_GetNote lua": {
	"prefix": "reaper.MIDI_GetNote",
	"scope": "lua",
	"body": "retval, selected, muted, startppqpos, endppqpos, chan, pitch, vel = reaper.MIDI_GetNote(${1:take}, ${2:noteidx})$0",
	"description": "Get MIDI note properties.\n\n"
	},

	"MIDI_GetPPQPos_EndOfMeasure lua": {
	"prefix": "reaper.MIDI_GetPPQPos_EndOfMeasure",
	"scope": "lua",
	"body": "reaper.MIDI_GetPPQPos_EndOfMeasure(${1:take}, ${2:ppqpos})$0",
	"description": "Returns the MIDI tick (ppq) position corresponding to the end of the measure.\n\n"
	},

	"MIDI_GetPPQPos_StartOfMeasure lua": {
	"prefix": "reaper.MIDI_GetPPQPos_StartOfMeasure",
	"scope": "lua",
	"body": "reaper.MIDI_GetPPQPos_StartOfMeasure(${1:take}, ${2:ppqpos})$0",
	"description": "Returns the MIDI tick (ppq) position corresponding to the start of the measure.\n\n"
	},

	"MIDI_GetPPQPosFromProjQN lua": {
	"prefix": "reaper.MIDI_GetPPQPosFromProjQN",
	"scope": "lua",
	"body": "reaper.MIDI_GetPPQPosFromProjQN(${1:take}, ${2:projqn})$0",
	"description": "Returns the MIDI tick (ppq) position corresponding to a specific project time in quarter notes.\n\n"
	},

	"MIDI_GetPPQPosFromProjTime lua": {
	"prefix": "reaper.MIDI_GetPPQPosFromProjTime",
	"scope": "lua",
	"body": "reaper.MIDI_GetPPQPosFromProjTime(${1:take}, ${2:projtime})$0",
	"description": "Returns the MIDI tick (ppq) position corresponding to a specific project time in seconds.\n\n"
	},

	"MIDI_GetProjQNFromPPQPos lua": {
	"prefix": "reaper.MIDI_GetProjQNFromPPQPos",
	"scope": "lua",
	"body": "reaper.MIDI_GetProjQNFromPPQPos(${1:take}, ${2:ppqpos})$0",
	"description": "Returns the project time in quarter notes corresponding to a specific MIDI tick (ppq) position.\n\n"
	},

	"MIDI_GetProjTimeFromPPQPos lua": {
	"prefix": "reaper.MIDI_GetProjTimeFromPPQPos",
	"scope": "lua",
	"body": "reaper.MIDI_GetProjTimeFromPPQPos(${1:take}, ${2:ppqpos})$0",
	"description": "Returns the project time in seconds corresponding to a specific MIDI tick (ppq) position.\n\n"
	},

	"MIDI_GetRecentInputEvent lua": {
	"prefix": "reaper.MIDI_GetRecentInputEvent",
	"scope": "lua",
	"body": "retval, buf, ts, devIdx, projPos, projLoopCnt = reaper.MIDI_GetRecentInputEvent(${1:idx})$0",
	"description": "Gets a recent MIDI input event from the global history. idx=0 for the most recent event, which also latches to the latest MIDI event state (to get a more recent list, calling with idx=0 is necessary). idx=1 next most recent event, returns a non-zero sequence number for the event, or zero if no more events. tsOut will be set to the timestamp in samples relative to the current position (0 is current, -48000 is one second ago, etc). devIdxOut will have the low 16 bits set to the input device index, and 0x10000 will be set if device was enabled only for control. projPosOut will be set to project position in seconds if project was playing back at time of event, otherwise -1. Large SysEx events will not be included in this event list.\n\n"
	},

	"MIDI_GetScale lua": {
	"prefix": "reaper.MIDI_GetScale",
	"scope": "lua",
	"body": "retval, root, scale, name = reaper.MIDI_GetScale(${1:take})$0",
	"description": "Get the active scale in the media source, if any. root 0=C, 1=C#, etc. scale &0x1=root, &0x2=minor 2nd, &0x4=major 2nd, &0x8=minor 3rd, &0xF=fourth, etc.\n\n"
	},

	"MIDI_GetTextSysexEvt lua": {
	"prefix": "reaper.MIDI_GetTextSysexEvt",
	"scope": "lua",
	"body": "retval, optional_selected, optional_muted, optional_ppqpos, optional_type, optional_msg = reaper.MIDI_GetTextSysexEvt(${1:take}, ${2:textsyxevtidx}, ${3:optional_selected}, ${4:optional_muted}, ${5:optional_ppqpos}, ${6:optional_type}, ${7:optional_msg})$0",
	"description": "Get MIDI meta-event properties. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-14:MIDI text event types, 15=REAPER notation event. For all other meta-messages, type is returned as -2 and msg returned as all zeroes. See MIDI_GetEvt.\n\n"
	},

	"MIDI_GetTrackHash lua": {
	"prefix": "reaper.MIDI_GetTrackHash",
	"scope": "lua",
	"body": "retval, hash = reaper.MIDI_GetTrackHash(${1:track}, ${2:notesonly})$0",
	"description": "Get a string that only changes when the MIDI data changes. If notesonly==true, then the string changes only when the MIDI notes change. See MIDI_GetHash\n\n"
	},

	"midi_init lua": {
	"prefix": "reaper.midi_init",
	"scope": "lua",
	"body": "reaper.midi_init(${1:force_reinit_input}, ${2:force_reinit_output})$0",
	"description": "Opens MIDI devices as configured in preferences. force_reinit_input and force_reinit_output force a particular device index to close/re-open (pass -1 to not force any devices to reopen).\n\n"
	},

	"MIDI_InsertCC lua": {
	"prefix": "reaper.MIDI_InsertCC",
	"scope": "lua",
	"body": "reaper.MIDI_InsertCC(${1:take}, ${2:selected}, ${3:muted}, ${4:ppqpos}, ${5:chanmsg}, ${6:chan}, ${7:msg2}, ${8:msg3})$0",
	"description": "Insert a new MIDI CC event.\n\n"
	},

	"MIDI_InsertEvt lua": {
	"prefix": "reaper.MIDI_InsertEvt",
	"scope": "lua",
	"body": "reaper.MIDI_InsertEvt(${1:take}, ${2:selected}, ${3:muted}, ${4:ppqpos}, ${5:bytestr})$0",
	"description": "Insert a new MIDI event.\n\n"
	},

	"MIDI_InsertNote lua": {
	"prefix": "reaper.MIDI_InsertNote",
	"scope": "lua",
	"body": "reaper.MIDI_InsertNote(${1:take}, ${2:selected}, ${3:muted}, ${4:startppqpos}, ${5:endppqpos}, ${6:chan}, ${7:pitch}, ${8:vel}, ${9:optional_noSortIn})$0",
	"description": "Insert a new MIDI note. Set noSort if inserting multiple events, then call MIDI_Sort when done.\n\n"
	},

	"MIDI_InsertTextSysexEvt lua": {
	"prefix": "reaper.MIDI_InsertTextSysexEvt",
	"scope": "lua",
	"body": "reaper.MIDI_InsertTextSysexEvt(${1:take}, ${2:selected}, ${3:muted}, ${4:ppqpos}, ${5:type}, ${6:bytestr})$0",
	"description": "Insert a new MIDI text or sysex event. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-14:MIDI text event types, 15=REAPER notation event.\n\n"
	},

	"midi_reinit lua": {
	"prefix": "reaper.midi_reinit",
	"scope": "lua",
	"body": "reaper.midi_reinit()\n\n",
	"description": "Reset (close and re-open) all MIDI devices\n\n"
	},

	"MIDI_SelectAll lua": {
	"prefix": "reaper.MIDI_SelectAll",
	"scope": "lua",
	"body": "reaper.MIDI_SelectAll(${1:take}, ${2:select})$0",
	"description": "Select or deselect all MIDI content.\n\n"
	},

	"MIDI_SetAllEvts lua": {
	"prefix": "reaper.MIDI_SetAllEvts",
	"scope": "lua",
	"body": "reaper.MIDI_SetAllEvts(${1:take}, ${2:buf})$0",
	"description": "Set all MIDI data. MIDI buffer is passed in as a list of { int offset, char flag, int msglen, unsigned char msg[] }.\noffset: MIDI ticks from previous event\nflag: &1=selected &2=muted\nflag high 4 bits for CC shape: &16=linear, &32=slow start/end, &16|32=fast start, &64=fast end, &64|16=bezier\nmsg: the MIDI message.\nA meta-event of type 0xF followed by 'CCBZ ' and 5 more bytes represents bezier curve data for the previous MIDI event: 1 byte for the bezier type (usually 0) and 4 bytes for the bezier tension as a float.\nFor tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events.\nSee MIDI_GetAllEvts.\n\n"
	},

	"MIDI_SetCC lua": {
	"prefix": "reaper.MIDI_SetCC",
	"scope": "lua",
	"body": "reaper.MIDI_SetCC(${1:take}, ${2:ccidx}, ${3:optional_selectedIn}, ${4:optional_mutedIn}, ${5:optional_ppqposIn}, ${6:optional_chanmsgIn}, ${7:optional_chanIn}, ${8:optional_msg2In}, ${9:optional_msg3In}, ${10:optional_noSortIn})$0",
	"description": "Set MIDI CC event properties. Properties passed as NULL will not be set. set noSort if setting multiple events, then call MIDI_Sort when done.\n\n"
	},

	"MIDI_SetCCShape lua": {
	"prefix": "reaper.MIDI_SetCCShape",
	"scope": "lua",
	"body": "reaper.MIDI_SetCCShape(${1:take}, ${2:ccidx}, ${3:shape}, ${4:beztension}, ${5:optional_noSortIn})$0",
	"description": "Set CC shape and bezier tension. set noSort if setting multiple events, then call MIDI_Sort when done. See MIDI_SetCC, MIDI_GetCCShape\n\n"
	},

	"MIDI_SetEvt lua": {
	"prefix": "reaper.MIDI_SetEvt",
	"scope": "lua",
	"body": "reaper.MIDI_SetEvt(${1:take}, ${2:evtidx}, ${3:optional_selectedIn}, ${4:optional_mutedIn}, ${5:optional_ppqposIn}, ${6:optional_msg}, ${7:optional_noSortIn})$0",
	"description": "Set MIDI event properties. Properties passed as NULL will not be set.  set noSort if setting multiple events, then call MIDI_Sort when done.\n\n"
	},

	"MIDI_SetItemExtents lua": {
	"prefix": "reaper.MIDI_SetItemExtents",
	"scope": "lua",
	"body": "reaper.MIDI_SetItemExtents(${1:item}, ${2:startQN}, ${3:endQN})$0",
	"description": "Set the start/end positions of a media item that contains a MIDI take.\n\n"
	},

	"MIDI_SetNote lua": {
	"prefix": "reaper.MIDI_SetNote",
	"scope": "lua",
	"body": "reaper.MIDI_SetNote(${1:take}, ${2:noteidx}, ${3:optional_selectedIn}, ${4:optional_mutedIn}, ${5:optional_startppqposIn}, ${6:optional_endppqposIn}, ${7:optional_chanIn}, ${8:optional_pitchIn}, ${9:optional_velIn}, ${10:optional_noSortIn})$0",
	"description": "Set MIDI note properties. Properties passed as NULL (or negative values) will not be set. Set noSort if setting multiple events, then call MIDI_Sort when done. Setting multiple note start positions at once is done more safely by deleting and re-inserting the notes.\n\n"
	},

	"MIDI_SetTextSysexEvt lua": {
	"prefix": "reaper.MIDI_SetTextSysexEvt",
	"scope": "lua",
	"body": "reaper.MIDI_SetTextSysexEvt(${1:take}, ${2:textsyxevtidx}, ${3:optional_selectedIn}, ${4:optional_mutedIn}, ${5:optional_ppqposIn}, ${6:optional_typeIn}, ${7:optional_msg}, ${8:optional_noSortIn})$0",
	"description": "Set MIDI text or sysex event properties. Properties passed as NULL will not be set. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-14:MIDI text event types, 15=REAPER notation event. set noSort if setting multiple events, then call MIDI_Sort when done.\n\n"
	},

	"MIDI_Sort lua": {
	"prefix": "reaper.MIDI_Sort",
	"scope": "lua",
	"body": "reaper.MIDI_Sort(${1:take})$0",
	"description": "Sort MIDI events after multiple calls to MIDI_SetNote, MIDI_SetCC, etc.\n\n"
	},

	"MIDIEditor_EnumTakes lua": {
	"prefix": "reaper.MIDIEditor_EnumTakes",
	"scope": "lua",
	"body": "reaper.MIDIEditor_EnumTakes(${1:midieditor}, ${2:takeindex}, ${3:editable_only})$0",
	"description": "list the takes that are currently being edited in this MIDI editor, starting with the active take. See MIDIEditor_GetTake\n\n"
	},

	"MIDIEditor_GetActive lua": {
	"prefix": "reaper.MIDIEditor_GetActive",
	"scope": "lua",
	"body": "reaper.MIDIEditor_GetActive()\n\n",
	"description": "get a pointer to the focused MIDI editor window\nsee MIDIEditor_GetMode, MIDIEditor_OnCommand\n\n"
	},

	"MIDIEditor_GetMode lua": {
	"prefix": "reaper.MIDIEditor_GetMode",
	"scope": "lua",
	"body": "reaper.MIDIEditor_GetMode(${1:midieditor})$0",
	"description": "get the mode of a MIDI editor (0=piano roll, 1=event list, -1=invalid editor)\nsee MIDIEditor_GetActive, MIDIEditor_OnCommand\n\n"
	},

	"MIDIEditor_GetSetting_int lua": {
	"prefix": "reaper.MIDIEditor_GetSetting_int",
	"scope": "lua",
	"body": "reaper.MIDIEditor_GetSetting_int(${1:midieditor}, ${2:setting_desc})$0",
	"description": "Get settings from a MIDI editor. setting_desc can be:\nsnap_enabled: returns 0 or 1\nactive_note_row: returns 0-127\nlast_clicked_cc_lane: returns 0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207=off velocity, 0x208=notation events, 0x210=media item lane\ndefault_note_vel: returns 0-127\ndefault_note_chan: returns 0-15\ndefault_note_len: returns default length in MIDI ticks\nscale_enabled: returns 0-1\nscale_root: returns 0-12 (0=C)\nlist_cnt: if viewing list view, returns event count\nif setting_desc is unsupported, the function returns -1.\nSee MIDIEditor_SetSetting_int, MIDIEditor_GetActive, MIDIEditor_GetSetting_str\n"
	},

	"MIDIEditor_GetSetting_str lua": {
	"prefix": "reaper.MIDIEditor_GetSetting_str",
	"scope": "lua",
	"body": "retval, buf = reaper.MIDIEditor_GetSetting_str(${1:midieditor}, ${2:setting_desc})$0",
	"description": "Get settings from a MIDI editor. setting_desc can be:\nlast_clicked_cc_lane: returns text description ('velocity', 'pitch', etc)\nscale: returns the scale record, for example '102034050607' for a major scale\nlist_X: if viewing list view, returns string describing event at row X (0-based). String will have a list of key=value pairs, e.g. 'pos=4.0 len=4.0 offvel=127 msg=90317F'. pos/len times are in QN, len/offvel may not be present if event is not a note. other keys which may be present include pos_pq/len_pq, sel, mute, ccval14, ccshape, ccbeztension.\nif setting_desc is unsupported, the function returns false.\nSee MIDIEditor_GetActive, MIDIEditor_GetSetting_int\n"
	},

	"MIDIEditor_GetTake lua": {
	"prefix": "reaper.MIDIEditor_GetTake",
	"scope": "lua",
	"body": "reaper.MIDIEditor_GetTake(${1:midieditor})$0",
	"description": "get the take that is currently being edited in this MIDI editor. see MIDIEditor_EnumTakes\n\n"
	},

	"MIDIEditor_LastFocused_OnCommand lua": {
	"prefix": "reaper.MIDIEditor_LastFocused_OnCommand",
	"scope": "lua",
	"body": "reaper.MIDIEditor_LastFocused_OnCommand(${1:command_id}, ${2:islistviewcommand})$0",
	"description": "Send an action command to the last focused MIDI editor. Returns false if there is no MIDI editor open, or if the view mode (piano roll or event list) does not match the input.\nsee MIDIEditor_OnCommand\n\n"
	},

	"MIDIEditor_OnCommand lua": {
	"prefix": "reaper.MIDIEditor_OnCommand",
	"scope": "lua",
	"body": "reaper.MIDIEditor_OnCommand(${1:midieditor}, ${2:command_id})$0",
	"description": "Send an action command to a MIDI editor. Returns false if the supplied MIDI editor pointer is not valid (not an open MIDI editor).\nsee MIDIEditor_GetActive, MIDIEditor_LastFocused_OnCommand\n\n"
	},

	"MIDIEditor_SetSetting_int lua": {
	"prefix": "reaper.MIDIEditor_SetSetting_int",
	"scope": "lua",
	"body": "reaper.MIDIEditor_SetSetting_int(${1:midieditor}, ${2:setting_desc}, ${3:setting})$0",
	"description": "Set settings for a MIDI editor. setting_desc can be:\nactive_note_row: 0-127\nSee MIDIEditor_GetSetting_int\n"
	},

	"mkpanstr lua": {
	"prefix": "reaper.mkpanstr",
	"scope": "lua",
	"body": "strNeed64 = reaper.mkpanstr(${1:strNeed64}, ${2:pan})$0",
	"description": ""
	},

	"mkvolpanstr lua": {
	"prefix": "reaper.mkvolpanstr",
	"scope": "lua",
	"body": "strNeed64 = reaper.mkvolpanstr(${1:strNeed64}, ${2:vol}, ${3:pan})$0",
	"description": ""
	},

	"mkvolstr lua": {
	"prefix": "reaper.mkvolstr",
	"scope": "lua",
	"body": "strNeed64 = reaper.mkvolstr(${1:strNeed64}, ${2:vol})$0",
	"description": ""
	},

	"MoveEditCursor lua": {
	"prefix": "reaper.MoveEditCursor",
	"scope": "lua",
	"body": "reaper.MoveEditCursor(${1:adjamt}, ${2:dosel})$0",
	"description": ""
	},

	"MoveMediaItemToTrack lua": {
	"prefix": "reaper.MoveMediaItemToTrack",
	"scope": "lua",
	"body": "reaper.MoveMediaItemToTrack(${1:item}, ${2:desttr})$0",
	"description": "returns TRUE if move succeeded\n\n"
	},

	"MuteAllTracks lua": {
	"prefix": "reaper.MuteAllTracks",
	"scope": "lua",
	"body": "reaper.MuteAllTracks(${1:mute})$0",
	"description": ""
	},

	"my_getViewport lua": {
	"prefix": "reaper.my_getViewport",
	"scope": "lua",
	"body": "reaper.my_getViewport(${1:integerr.left}, ${2:integerr.top}, ${3:integerr.right}, ${4:integerr.bot}, ${5:sr.left}, ${6:sr.top}, ${7:sr.right}, ${8:sr.bot}, ${9:wantWorkArea})$0",
	"description": ""
	},

	"NamedCommandLookup lua": {
	"prefix": "reaper.NamedCommandLookup",
	"scope": "lua",
	"body": "reaper.NamedCommandLookup(${1:command_name})$0",
	"description": "Get the command ID number for named command that was registered by an extension such as '_SWS_ABOUT' or '_113088d11ae641c193a2b7ede3041ad5' for a ReaScript or a custom action.\n\n"
	},

	"OnPauseButton lua": {
	"prefix": "reaper.OnPauseButton",
	"scope": "lua",
	"body": "reaper.OnPauseButton()\n\n",
	"description": "direct way to simulate pause button hit\n\n"
	},

	"OnPauseButtonEx lua": {
	"prefix": "reaper.OnPauseButtonEx",
	"scope": "lua",
	"body": "reaper.OnPauseButtonEx(${1:proj})$0",
	"description": "direct way to simulate pause button hit\n\n"
	},

	"OnPlayButton lua": {
	"prefix": "reaper.OnPlayButton",
	"scope": "lua",
	"body": "reaper.OnPlayButton()\n\n",
	"description": "direct way to simulate play button hit\n\n"
	},

	"OnPlayButtonEx lua": {
	"prefix": "reaper.OnPlayButtonEx",
	"scope": "lua",
	"body": "reaper.OnPlayButtonEx(${1:proj})$0",
	"description": "direct way to simulate play button hit\n\n"
	},

	"OnStopButton lua": {
	"prefix": "reaper.OnStopButton",
	"scope": "lua",
	"body": "reaper.OnStopButton()\n\n",
	"description": "direct way to simulate stop button hit\n\n"
	},

	"OnStopButtonEx lua": {
	"prefix": "reaper.OnStopButtonEx",
	"scope": "lua",
	"body": "reaper.OnStopButtonEx(${1:proj})$0",
	"description": "direct way to simulate stop button hit\n\n"
	},

	"OpenColorThemeFile lua": {
	"prefix": "reaper.OpenColorThemeFile",
	"scope": "lua",
	"body": "reaper.OpenColorThemeFile(${1:fn})$0",
	"description": ""
	},

	"OpenMediaExplorer lua": {
	"prefix": "reaper.OpenMediaExplorer",
	"scope": "lua",
	"body": "reaper.OpenMediaExplorer(${1:mediafn}, ${2:play})$0",
	"description": "Opens mediafn in the Media Explorer, play=true will play the file immediately (or toggle playback if mediafn was already open), =false will just select it.\n\n"
	},

	"OscLocalMessageToHost lua": {
	"prefix": "reaper.OscLocalMessageToHost",
	"scope": "lua",
	"body": "reaper.OscLocalMessageToHost(${1:message}, ${2:optional_valueIn})$0",
	"description": "Send an OSC message directly to REAPER. The value argument may be NULL. The message will be matched against the default OSC patterns.\n\n"
	},

	"parse_timestr lua": {
	"prefix": "reaper.parse_timestr",
	"scope": "lua",
	"body": "reaper.parse_timestr(${1:buf})$0",
	"description": "Parse hh:mm:ss.sss time string, return time in seconds (or 0.0 on error). See parse_timestr_pos, parse_timestr_len.\n\n"
	},

	"parse_timestr_len lua": {
	"prefix": "reaper.parse_timestr_len",
	"scope": "lua",
	"body": "reaper.parse_timestr_len(${1:buf}, ${2:offset}, ${3:modeoverride})$0",
	"description": "time formatting mode overrides: -1=proj default.\n0=time\n1=measures.beats + time\n2=measures.beats\n3=seconds\n4=samples\n5=h:m:s:f\n"
	},

	"parse_timestr_pos lua": {
	"prefix": "reaper.parse_timestr_pos",
	"scope": "lua",
	"body": "reaper.parse_timestr_pos(${1:buf}, ${2:modeoverride})$0",
	"description": "Parse time string, time formatting mode overrides: -1=proj default.\n0=time\n1=measures.beats + time\n2=measures.beats\n3=seconds\n4=samples\n5=h:m:s:f\n"
	},

	"parsepanstr lua": {
	"prefix": "reaper.parsepanstr",
	"scope": "lua",
	"body": "reaper.parsepanstr(${1:str})$0",
	"description": ""
	},

	"PCM_Sink_Enum lua": {
	"prefix": "reaper.PCM_Sink_Enum",
	"scope": "lua",
	"body": "retval, descstr = reaper.PCM_Sink_Enum(${1:idx})$0",
	"description": ""
	},

	"PCM_Sink_GetExtension lua": {
	"prefix": "reaper.PCM_Sink_GetExtension",
	"scope": "lua",
	"body": "reaper.PCM_Sink_GetExtension(${1:data})$0",
	"description": ""
	},

	"PCM_Sink_ShowConfig lua": {
	"prefix": "reaper.PCM_Sink_ShowConfig",
	"scope": "lua",
	"body": "reaper.PCM_Sink_ShowConfig(${1:cfg}, ${2:hwndParent})$0",
	"description": ""
	},

	"PCM_Source_BuildPeaks lua": {
	"prefix": "reaper.PCM_Source_BuildPeaks",
	"scope": "lua",
	"body": "reaper.PCM_Source_BuildPeaks(${1:src}, ${2:mode})$0",
	"description": "Calls and returns PCM_source::PeaksBuild_Begin() if mode=0, PeaksBuild_Run() if mode=1, and PeaksBuild_Finish() if mode=2. Normal use is to call PCM_Source_BuildPeaks(src,0), and if that returns nonzero, call PCM_Source_BuildPeaks(src,1) periodically until it returns zero (it returns the percentage of the file remaining), then call PCM_Source_BuildPeaks(src,2) to finalize. If PCM_Source_BuildPeaks(src,0) returns zero, then no further action is necessary.\n\n"
	},

	"PCM_Source_CreateFromFile lua": {
	"prefix": "reaper.PCM_Source_CreateFromFile",
	"scope": "lua",
	"body": "reaper.PCM_Source_CreateFromFile(${1:filename})$0",
	"description": "See PCM_Source_CreateFromFileEx.\n\n"
	},

	"PCM_Source_CreateFromFileEx lua": {
	"prefix": "reaper.PCM_Source_CreateFromFileEx",
	"scope": "lua",
	"body": "reaper.PCM_Source_CreateFromFileEx(${1:filename}, ${2:forcenoMidiImp})$0",
	"description": "Create a PCM_source from filename, and override pref of MIDI files being imported as in-project MIDI events.\n\n"
	},

	"PCM_Source_CreateFromType lua": {
	"prefix": "reaper.PCM_Source_CreateFromType",
	"scope": "lua",
	"body": "reaper.PCM_Source_CreateFromType(${1:sourcetype})$0",
	"description": "Create a PCM_source from a 'type' (use this if you're going to load its state via LoadState/ProjectStateContext).\nValid types include 'WAVE', 'MIDI', or whatever plug-ins define as well.\n\n"
	},

	"PCM_Source_Destroy lua": {
	"prefix": "reaper.PCM_Source_Destroy",
	"scope": "lua",
	"body": "reaper.PCM_Source_Destroy(${1:src})$0",
	"description": "Deletes a PCM_source -- be sure that you remove any project reference before deleting a source\n\n"
	},

	"PCM_Source_GetPeaks lua": {
	"prefix": "reaper.PCM_Source_GetPeaks",
	"scope": "lua",
	"body": "reaper.PCM_Source_GetPeaks(${1:src}, ${2:peakrate}, ${3:starttime}, ${4:numchannels}, ${5:numsamplesperchannel}, ${6:want_extra_type}, ${7:buf})$0",
	"description": "Gets block of peak samples to buf. Note that the peak samples are interleaved, but in two or three blocks (maximums, then minimums, then extra). Return value has 20 bits of returned sample count, then 4 bits of output_mode (0xf00000), then a bit to signify whether extra_type was available (0x1000000). extra_type can be 115 ('s') for spectral information, which will return peak samples as integers with the low 15 bits frequency, next 14 bits tonality.\n\n"
	},

	"PCM_Source_GetSectionInfo lua": {
	"prefix": "reaper.PCM_Source_GetSectionInfo",
	"scope": "lua",
	"body": "retval, offs, len, rev = reaper.PCM_Source_GetSectionInfo(${1:src})$0",
	"description": "If a section/reverse block, retrieves offset/len/reverse. return true if success\n\n"
	},

	"PluginWantsAlwaysRunFx lua": {
	"prefix": "reaper.PluginWantsAlwaysRunFx",
	"scope": "lua",
	"body": "reaper.PluginWantsAlwaysRunFx(${1:amt})$0",
	"description": ""
	},

	"PreventUIRefresh lua": {
	"prefix": "reaper.PreventUIRefresh",
	"scope": "lua",
	"body": "reaper.PreventUIRefresh(${1:prevent_count})$0",
	"description": "adds prevent_count to the UI refresh prevention state; always add then remove the same amount, or major disfunction will occur\n\n"
	},

	"PromptForAction lua": {
	"prefix": "reaper.PromptForAction",
	"scope": "lua",
	"body": "reaper.PromptForAction(${1:session_mode}, ${2:init_id}, ${3:section_id})$0",
	"description": "Uses the action list to choose an action. Call with session_mode=1 to create a session (init_id will be the initial action to select, or 0), then poll with session_mode=0, checking return value for user-selected action (will return 0 if no action selected yet, or -1 if the action window is no longer available). When finished, call with session_mode=-1.\n\n"
	},

	"ReaScriptError lua": {
	"prefix": "reaper.ReaScriptError",
	"scope": "lua",
	"body": "reaper.ReaScriptError(${1:errmsg})$0",
	"description": "Causes REAPER to display the error message after the current ReaScript finishes. If called within a Lua context and errmsg has a ! prefix, script execution will be terminated.\n\n"
	},

	"RecursiveCreateDirectory lua": {
	"prefix": "reaper.RecursiveCreateDirectory",
	"scope": "lua",
	"body": "reaper.RecursiveCreateDirectory(${1:path}, ${2:ignored})$0",
	"description": "returns positive value on success, 0 on failure.\n\n"
	},

	"reduce_open_files lua": {
	"prefix": "reaper.reduce_open_files",
	"scope": "lua",
	"body": "reaper.reduce_open_files(${1:flags})$0",
	"description": "garbage-collects extra open files and closes them. if flags has 1 set, this is done incrementally (call this from a regular timer, if desired). if flags has 2 set, files are aggressively closed (they may need to be re-opened very soon). returns number of files closed by this call.\n\n"
	},

	"RefreshToolbar lua": {
	"prefix": "reaper.RefreshToolbar",
	"scope": "lua",
	"body": "reaper.RefreshToolbar(${1:command_id})$0",
	"description": "See RefreshToolbar2.\n\n"
	},

	"RefreshToolbar2 lua": {
	"prefix": "reaper.RefreshToolbar2",
	"scope": "lua",
	"body": "reaper.RefreshToolbar2(${1:section_id}, ${2:command_id})$0",
	"description": "Refresh the toolbar button states of a toggle action.\n\n"
	},

	"relative_fn lua": {
	"prefix": "reaper.relative_fn",
	"scope": "lua",
	"body": "out = reaper.relative_fn(${1:in}, ${2:out})$0",
	"description": "Makes a filename 'in' relative to the current project, if any.\n\n"
	},

	"RemoveTrackSend lua": {
	"prefix": "reaper.RemoveTrackSend",
	"scope": "lua",
	"body": "reaper.RemoveTrackSend(${1:tr}, ${2:category}, ${3:sendidx})$0",
	"description": "Remove a send/receive/hardware output, return true on success. category is <0 for receives, 0=sends, >0 for hardware outputs. See CreateTrackSend, GetSetTrackSendInfo, GetTrackSendInfo_Value, SetTrackSendInfo_Value, GetTrackNumSends.\n\n"
	},

	"RenderFileSection lua": {
	"prefix": "reaper.RenderFileSection",
	"scope": "lua",
	"body": "reaper.RenderFileSection(${1:source_filename}, ${2:target_filename}, ${3:start_percent}, ${4:end_percent}, ${5:playrate})$0",
	"description": "Not available while playing back.\n\n"
	},

	"ReorderSelectedTracks lua": {
	"prefix": "reaper.ReorderSelectedTracks",
	"scope": "lua",
	"body": "reaper.ReorderSelectedTracks(${1:beforeTrackIdx}, ${2:makePrevFolder})$0",
	"description": "Moves all selected tracks to immediately above track specified by index beforeTrackIdx, returns false if no tracks were selected. makePrevFolder=0 for normal, 1 = as child of track preceding track specified by beforeTrackIdx, 2 = if track preceding track specified by beforeTrackIdx is last track in folder, extend folder\n\n"
	},

	"Resample_EnumModes lua": {
	"prefix": "reaper.Resample_EnumModes",
	"scope": "lua",
	"body": "reaper.Resample_EnumModes(${1:mode})$0",
	"description": ""
	},

	"resolve_fn lua": {
	"prefix": "reaper.resolve_fn",
	"scope": "lua",
	"body": "out = reaper.resolve_fn(${1:in}, ${2:out})$0",
	"description": "See resolve_fn2.\n\n"
	},

	"resolve_fn2 lua": {
	"prefix": "reaper.resolve_fn2",
	"scope": "lua",
	"body": "out = reaper.resolve_fn2(${1:in}, ${2:out}, ${3:optional_checkSubDir})$0",
	"description": "Resolves a filename 'in' by using project settings etc. If no file found, out will be a copy of in.\n\n"
	},

	"ReverseNamedCommandLookup lua": {
	"prefix": "reaper.ReverseNamedCommandLookup",
	"scope": "lua",
	"body": "reaper.ReverseNamedCommandLookup(${1:command_id})$0",
	"description": "Get the named command for the given command ID. The returned string will not start with '_' (e.g. it will return 'SWS_ABOUT'), it will be NULL if command_id is a native action.\n\n"
	},

	"ScaleFromEnvelopeMode lua": {
	"prefix": "reaper.ScaleFromEnvelopeMode",
	"scope": "lua",
	"body": "reaper.ScaleFromEnvelopeMode(${1:scaling_mode}, ${2:val})$0",
	"description": "See GetEnvelopeScalingMode.\n\n"
	},

	"ScaleToEnvelopeMode lua": {
	"prefix": "reaper.ScaleToEnvelopeMode",
	"scope": "lua",
	"body": "reaper.ScaleToEnvelopeMode(${1:scaling_mode}, ${2:val})$0",
	"description": "See GetEnvelopeScalingMode.\n\n"
	},

	"SectionFromUniqueID lua": {
	"prefix": "reaper.SectionFromUniqueID",
	"scope": "lua",
	"body": "reaper.SectionFromUniqueID(${1:uniqueID})$0",
	"description": ""
	},

	"SelectAllMediaItems lua": {
	"prefix": "reaper.SelectAllMediaItems",
	"scope": "lua",
	"body": "reaper.SelectAllMediaItems(${1:proj}, ${2:selected})$0",
	"description": ""
	},

	"SelectProjectInstance lua": {
	"prefix": "reaper.SelectProjectInstance",
	"scope": "lua",
	"body": "reaper.SelectProjectInstance(${1:proj})$0",
	"description": ""
	},

	"SetActiveTake lua": {
	"prefix": "reaper.SetActiveTake",
	"scope": "lua",
	"body": "reaper.SetActiveTake(${1:take})$0",
	"description": "set this take active in this media item\n\n"
	},

	"SetAutomationMode lua": {
	"prefix": "reaper.SetAutomationMode",
	"scope": "lua",
	"body": "reaper.SetAutomationMode(${1:mode}, ${2:onlySel})$0",
	"description": "sets all or selected tracks to mode.\n\n"
	},

	"SetCurrentBPM lua": {
	"prefix": "reaper.SetCurrentBPM",
	"scope": "lua",
	"body": "reaper.SetCurrentBPM(${1:__proj}, ${2:bpm}, ${3:wantUndo})$0",
	"description": "set current BPM in project, set wantUndo=true to add undo point\n\n"
	},

	"SetCursorContext lua": {
	"prefix": "reaper.SetCursorContext",
	"scope": "lua",
	"body": "reaper.SetCursorContext(${1:mode}, ${2:envIn})$0",
	"description": "You must use this to change the focus programmatically. mode=0 to focus track panels, 1 to focus the arrange window, 2 to focus the arrange window and select env (or env==NULL to clear the current track/take envelope selection)\n\n"
	},

	"SetEditCurPos lua": {
	"prefix": "reaper.SetEditCurPos",
	"scope": "lua",
	"body": "reaper.SetEditCurPos(${1:time}, ${2:moveview}, ${3:seekplay})$0",
	"description": ""
	},

	"SetEditCurPos2 lua": {
	"prefix": "reaper.SetEditCurPos2",
	"scope": "lua",
	"body": "reaper.SetEditCurPos2(${1:proj}, ${2:time}, ${3:moveview}, ${4:seekplay})$0",
	"description": ""
	},

	"SetEnvelopePoint lua": {
	"prefix": "reaper.SetEnvelopePoint",
	"scope": "lua",
	"body": "reaper.SetEnvelopePoint(${1:envelope}, ${2:ptidx}, ${3:optional_timeIn}, ${4:optional_valueIn}, ${5:optional_shapeIn}, ${6:optional_tensionIn}, ${7:optional_selectedIn}, ${8:optional_noSortIn})$0",
	"description": "Set attributes of an envelope point. Values that are not supplied will be ignored. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. See SetEnvelopePointEx.\n\n"
	},

	"SetEnvelopePointEx lua": {
	"prefix": "reaper.SetEnvelopePointEx",
	"scope": "lua",
	"body": "reaper.SetEnvelopePointEx(${1:envelope}, ${2:autoitem_idx}, ${3:ptidx}, ${4:optional_timeIn}, ${5:optional_valueIn}, ${6:optional_shapeIn}, ${7:optional_tensionIn}, ${8:optional_selectedIn}, ${9:optional_noSortIn})$0",
	"description": "Set attributes of an envelope point. Values that are not supplied will be ignored. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done.\nautoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\nFor automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.\nSee CountEnvelopePointsEx, GetEnvelopePointEx, InsertEnvelopePointEx, DeleteEnvelopePointEx.\n\n"
	},

	"SetEnvelopeStateChunk lua": {
	"prefix": "reaper.SetEnvelopeStateChunk",
	"scope": "lua",
	"body": "reaper.SetEnvelopeStateChunk(${1:env}, ${2:str}, ${3:isundo})$0",
	"description": "Sets the RPPXML state of an envelope, returns true if successful. Undo flag is a performance/caching hint.\n\n"
	},

	"SetExtState lua": {
	"prefix": "reaper.SetExtState",
	"scope": "lua",
	"body": "reaper.SetExtState(${1:section}, ${2:key}, ${3:value}, ${4:persist})$0",
	"description": "Set the extended state value for a specific section and key. persist=true means the value should be stored and reloaded the next time REAPER is opened. See GetExtState, DeleteExtState, HasExtState.\n\n"
	},

	"SetGlobalAutomationOverride lua": {
	"prefix": "reaper.SetGlobalAutomationOverride",
	"scope": "lua",
	"body": "reaper.SetGlobalAutomationOverride(${1:mode})$0",
	"description": "mode: see GetGlobalAutomationOverride\n\n"
	},

	"SetItemStateChunk lua": {
	"prefix": "reaper.SetItemStateChunk",
	"scope": "lua",
	"body": "reaper.SetItemStateChunk(${1:item}, ${2:str}, ${3:isundo})$0",
	"description": "Sets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint.\n\n"
	},

	"SetMasterTrackVisibility lua": {
	"prefix": "reaper.SetMasterTrackVisibility",
	"scope": "lua",
	"body": "reaper.SetMasterTrackVisibility(${1:flag})$0",
	"description": "set &1 to show the master track in the TCP, &2 to HIDE in the mixer. Returns the previous visibility state. See GetMasterTrackVisibility.\n\n"
	},

	"SetMediaItemInfo_Value lua": {
	"prefix": "reaper.SetMediaItemInfo_Value",
	"scope": "lua",
	"body": "reaper.SetMediaItemInfo_Value(${1:item}, ${2:parmname}, ${3:newvalue})$0",
	"description": "Set media item numerical-value attributes.\nB_MUTE : bool * : muted (item solo overrides). setting this value will clear C_MUTE_SOLO.\nB_MUTE_ACTUAL : bool * : muted (ignores solo). setting this value will not affect C_MUTE_SOLO.\nC_MUTE_SOLO : char * : solo override (-1=soloed, 0=no override, 1=unsoloed). note that this API does not automatically unsolo other items when soloing (nor clear the unsolos when clearing the last soloed item), it must be done by the caller via action or via this API.\nB_LOOPSRC : bool * : loop source\nB_ALLTAKESPLAY : bool * : all takes play\nB_UISEL : bool * : selected in arrange view\nC_BEATATTACHMODE : char * : item timebase, -1=track or project default, 1=beats (position, length, rate), 2=beats (position only). for auto-stretch timebase: C_BEATATTACHMODE=1, C_AUTOSTRETCH=1\nC_AUTOSTRETCH: : char * : auto-stretch at project tempo changes, 1=enabled, requires C_BEATATTACHMODE=1\nC_LOCK : char * : locked, &1=locked\nD_VOL : double * : item volume,  0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc\nD_POSITION : double * : item position in seconds\nD_LENGTH : double * : item length in seconds\nD_SNAPOFFSET : double * : item snap offset in seconds\nD_FADEINLEN : double * : item manual fadein length in seconds\nD_FADEOUTLEN : double * : item manual fadeout length in seconds\nD_FADEINDIR : double * : item fadein curvature, -1..1\nD_FADEOUTDIR : double * : item fadeout curvature, -1..1\nD_FADEINLEN_AUTO : double * : item auto-fadein length in seconds, -1=no auto-fadein\nD_FADEOUTLEN_AUTO : double * : item auto-fadeout length in seconds, -1=no auto-fadeout\nC_FADEINSHAPE : int * : fadein shape, 0..6, 0=linear\nC_FADEOUTSHAPE : int * : fadeout shape, 0..6, 0=linear\nI_GROUPID : int * : group ID, 0=no group\nI_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)\nI_LASTH : int * : height in pixels (read-only)\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color\nI_CURTAKE : int * : active take number\nIP_ITEMNUMBER : int : item number on this track (read-only, returns the item number directly)\nF_FREEMODE_Y : float * : free item positioning Y-position, 0=top of track, 1=bottom of track (will never be 1)\nF_FREEMODE_H : float * : free item positioning height, 0=no height, 1=full height of track (will never be 0)\n"
	},

	"SetMediaItemLength lua": {
	"prefix": "reaper.SetMediaItemLength",
	"scope": "lua",
	"body": "reaper.SetMediaItemLength(${1:item}, ${2:length}, ${3:refreshUI})$0",
	"description": "Redraws the screen only if refreshUI == true.\nSee UpdateArrange().\n\n"
	},

	"SetMediaItemPosition lua": {
	"prefix": "reaper.SetMediaItemPosition",
	"scope": "lua",
	"body": "reaper.SetMediaItemPosition(${1:item}, ${2:position}, ${3:refreshUI})$0",
	"description": "Redraws the screen only if refreshUI == true.\nSee UpdateArrange().\n\n"
	},

	"SetMediaItemSelected lua": {
	"prefix": "reaper.SetMediaItemSelected",
	"scope": "lua",
	"body": "reaper.SetMediaItemSelected(${1:item}, ${2:selected})$0",
	"description": ""
	},

	"SetMediaItemTake_Source lua": {
	"prefix": "reaper.SetMediaItemTake_Source",
	"scope": "lua",
	"body": "reaper.SetMediaItemTake_Source(${1:take}, ${2:source})$0",
	"description": "Set media source of media item take. The old source will not be destroyed, it is the caller's responsibility to retrieve it and destroy it after. If source already exists in any project, it will be duplicated before being set. C/C++ code should not use this and instead use GetSetMediaItemTakeInfo() with P_SOURCE to manage ownership directly.\n\n"
	},

	"SetMediaItemTakeInfo_Value lua": {
	"prefix": "reaper.SetMediaItemTakeInfo_Value",
	"scope": "lua",
	"body": "reaper.SetMediaItemTakeInfo_Value(${1:take}, ${2:parmname}, ${3:newvalue})$0",
	"description": "Set media item take numerical-value attributes.\nD_STARTOFFS : double * : start offset in source media, in seconds\nD_VOL : double * : take volume, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc, negative if take polarity is flipped\nD_PAN : double * : take pan, -1..1\nD_PANLAW : double * : take pan law, -1=default, 0.5=-6dB, 1.0=+0dB, etc\nD_PLAYRATE : double * : take playback rate, 0.5=half speed, 1=normal, 2=double speed, etc\nD_PITCH : double * : take pitch adjustment in semitones, -12=one octave down, 0=normal, +12=one octave up, etc\nB_PPITCH : bool * : preserve pitch when changing playback rate\nI_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)\nI_LASTH : int * : height in pixels (read-only)\nI_CHANMODE : int * : channel mode, 0=normal, 1=reverse stereo, 2=downmix, 3=left, 4=right\nI_PITCHMODE : int * : pitch shifter mode, -1=projext default, otherwise high 2 bytes=shifter, low 2 bytes=parameter\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color\nIP_TAKENUMBER : int : take number (read-only, returns the take number directly)\n"
	},

	"SetMediaTrackInfo_Value lua": {
	"prefix": "reaper.SetMediaTrackInfo_Value",
	"scope": "lua",
	"body": "reaper.SetMediaTrackInfo_Value(${1:tr}, ${2:parmname}, ${3:newvalue})$0",
	"description": "Set track numerical-value attributes.\nB_MUTE : bool * : muted\nB_PHASE : bool * : track phase inverted\nB_RECMON_IN_EFFECT : bool * : record monitoring in effect (current audio-thread playback state, read-only)\nIP_TRACKNUMBER : int : track number 1-based, 0=not found, -1=master track (read-only, returns the int directly)\nI_SOLO : int * : soloed, 0=not soloed, 1=soloed, 2=soloed in place, 5=safe soloed, 6=safe soloed in place\nB_SOLO_DEFEAT : bool * : when set, if anything else is soloed and this track is not muted, this track acts soloed\nI_FXEN : int * : fx enabled, 0=bypassed, !0=fx active\nI_RECARM : int * : record armed, 0=not record armed, 1=record armed\nI_RECINPUT : int * : record input, <0=no input. if 4096 set, input is MIDI and low 5 bits represent channel (0=all, 1-16=only chan), next 6 bits represent physical input (63=all, 62=VKB). If 4096 is not set, low 10 bits (0..1023) are input start channel (ReaRoute/Loopback start at 512). If 2048 is set, input is multichannel input (using track channel count), or if 1024 is set, input is stereo input, otherwise input is mono.\nI_RECMODE : int * : record mode, 0=input, 1=stereo out, 2=none, 3=stereo out w/latency compensation, 4=midi output, 5=mono out, 6=mono out w/ latency compensation, 7=midi overdub, 8=midi replace\nI_RECMODE_FLAGS : int * : record mode flags, &3=output recording mode (0=post fader, 1=pre-fx, 2=post-fx/pre-fader)\nI_RECMON : int * : record monitoring, 0=off, 1=normal, 2=not when playing (tape style)\nI_RECMONITEMS : int * : monitor items while recording, 0=off, 1=on\nB_AUTO_RECARM : bool * : automatically set record arm when selected (does not immediately affect recarm state, script should set directly if desired)\nI_VUMODE : int * : track vu mode, &1:disabled, &30==0:stereo peaks, &30==2:multichannel peaks, &30==4:stereo RMS, &30==8:combined RMS, &30==12:LUFS-M, &30==16:LUFS-S (readout=max), &30==20:LUFS-S (readout=current), &32:LUFS calculation on channels 1+2 only\nI_AUTOMODE : int * : track automation mode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch\nI_NCHAN : int * : number of track channels, 2-64, even numbers only\nI_SELECTED : int * : track selected, 0=unselected, 1=selected\nI_WNDH : int * : current TCP window height in pixels including envelopes (read-only)\nI_TCPH : int * : current TCP window height in pixels not including envelopes (read-only)\nI_TCPY : int * : current TCP window Y-position in pixels relative to top of arrange view (read-only)\nI_MCPX : int * : current MCP X-position in pixels relative to mixer container (read-only)\nI_MCPY : int * : current MCP Y-position in pixels relative to mixer container (read-only)\nI_MCPW : int * : current MCP width in pixels (read-only)\nI_MCPH : int * : current MCP height in pixels (read-only)\nI_FOLDERDEPTH : int * : folder depth change, 0=normal, 1=track is a folder parent, -1=track is the last in the innermost folder, -2=track is the last in the innermost and next-innermost folders, etc\nI_FOLDERCOMPACT : int * : folder compacted state (only valid on folders), 0=normal, 1=small, 2=tiny children\nI_MIDIHWOUT : int * : track midi hardware output index, <0=disabled, low 5 bits are which channels (0=all, 1-16), next 5 bits are output device index (0-31)\nI_PERFFLAGS : int * : track performance flags, &1=no media buffering, &2=no anticipative FX\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color\nI_HEIGHTOVERRIDE : int * : custom height override for TCP window, 0 for none, otherwise size in pixels\nB_HEIGHTLOCK : bool * : track height lock (must set I_HEIGHTOVERRIDE before locking)\nD_VOL : double * : trim volume of track, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc\nD_PAN : double * : trim pan of track, -1..1\nD_WIDTH : double * : width of track, -1..1\nD_DUALPANL : double * : dualpan position 1, -1..1, only if I_PANMODE==6\nD_DUALPANR : double * : dualpan position 2, -1..1, only if I_PANMODE==6\nI_PANMODE : int * : pan mode, 0=classic 3.x, 3=new balance, 5=stereo pan, 6=dual pan\nD_PANLAW : double * : pan law of track, <0=project default, 0.5=-6dB, 0.707..=-3dB, 1=+0dB, 1.414..=-3dB with gain compensation, 2=-6dB with gain compensation, etc\nI_PANLAW_FLAGS : int * : pan law flags, 0=sine taper, 1=hybrid taper with deprecated behavior when gain compensation enabled, 2=linear taper, 3=hybrid taper\nP_ENV:<envchunkname or P_ENV:{GUID... : TrackEnvelope * : (read-only) chunkname can be <VOLENV, <PANENV, etc; GUID is the stringified envelope GUID.\nB_SHOWINMIXER : bool * : track control panel visible in mixer (do not use on master track)\nB_SHOWINTCP : bool * : track control panel visible in arrange view (do not use on master track)\nB_MAINSEND : bool * : track sends audio to parent\nC_MAINSEND_OFFS : char * : channel offset of track send to parent\nC_MAINSEND_NCH : char * : channel count of track send to parent (0=use all child track channels, 1=use one channel only)\nI_FREEMODE : int * : 1=track free item positioning enabled, 2=track fixed lanes enabled (call UpdateTimeline() after changing)\nC_BEATATTACHMODE : char * : track timebase, -1=project default, 0=time, 1=beats (position, length, rate), 2=beats (position only)\nF_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0=minimum allowed, 1=maximum allowed)\nF_MCP_FXPARM_SCALE : float * : scale of fx parameter area in MCP (0=minimum allowed, 1=maximum allowed)\nF_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send total area (0=minimum allowed, 1=maximum allowed)\nF_TCP_FXPARM_SCALE : float * : scale of TCP parameter area when TCP FX are embedded (0=min allowed, default, 1=max allowed)\nI_PLAY_OFFSET_FLAG : int * : track media playback offset state, &1=bypassed, &2=offset value is measured in samples (otherwise measured in seconds)\nD_PLAY_OFFSET : double * : track media playback offset, units depend on I_PLAY_OFFSET_FLAG\n"
	},

	"SetMIDIEditorGrid lua": {
	"prefix": "reaper.SetMIDIEditorGrid",
	"scope": "lua",
	"body": "reaper.SetMIDIEditorGrid(${1:project}, ${2:division})$0",
	"description": "Set the MIDI editor grid division. 0.25=quarter note, 1.0/3.0=half note tripet, etc.\n\n"
	},

	"SetMixerScroll lua": {
	"prefix": "reaper.SetMixerScroll",
	"scope": "lua",
	"body": "reaper.SetMixerScroll(${1:leftmosttrack})$0",
	"description": "Scroll the mixer so that leftmosttrack is the leftmost visible track. Returns the leftmost track after scrolling, which may be different from the passed-in track if there are not enough tracks to its right.\n\n"
	},

	"SetMouseModifier lua": {
	"prefix": "reaper.SetMouseModifier",
	"scope": "lua",
	"body": "reaper.SetMouseModifier(${1:context}, ${2:modifier_flag}, ${3:action})$0",
	"description": "Set the mouse modifier assignment for a specific modifier key assignment, in a specific context.\nContext is a string like 'MM_CTX_ITEM'. Find these strings by modifying an assignment in \nPreferences/Editing/Mouse Modifiers, then looking in reaper-mouse.ini.\nModifier flag is a number from 0 to 15: add 1 for shift, 2 for control, 4 for alt, 8 for win.\n(macOS: add 1 for shift, 2 for command, 4 for opt, 8 for control.)\nFor left-click and double-click contexts, the action can be any built-in command ID number\nor any custom action ID string. Find built-in command IDs in the REAPER actions window\n(enable 'show action IDs' in the context menu), and find custom action ID strings in reaper-kb.ini.\nFor built-in mouse modifier behaviors, find action IDs (which will be low numbers)\nby modifying an assignment in Preferences/Editing/Mouse Modifiers, then looking in reaper-mouse.ini.\nAssigning an action of -1 will reset that mouse modifier behavior to factory default.\nNote: the action string may have a space and 'c' or 'm' appended to it to specify command ID vs mouse modifier ID.\nSpecial case: SetMouseModifier(context, -1, -1) will reset the entire context to default.\nSpecial case: SetMouseModifier(-1, -1, -1) will reset all contexts to default.\nSee GetMouseModifier.\n"
	},

	"SetOnlyTrackSelected lua": {
	"prefix": "reaper.SetOnlyTrackSelected",
	"scope": "lua",
	"body": "reaper.SetOnlyTrackSelected(${1:track})$0",
	"description": "Set exactly one track selected, deselect all others\n\n"
	},

	"SetProjectGrid lua": {
	"prefix": "reaper.SetProjectGrid",
	"scope": "lua",
	"body": "reaper.SetProjectGrid(${1:project}, ${2:division})$0",
	"description": "Set the arrange view grid division. 0.25=quarter note, 1.0/3.0=half note triplet, etc.\n\n"
	},

	"SetProjectMarker lua": {
	"prefix": "reaper.SetProjectMarker",
	"scope": "lua",
	"body": "reaper.SetProjectMarker(${1:markrgnindexnumber}, ${2:isrgn}, ${3:pos}, ${4:rgnend}, ${5:name})$0",
	"description": ""
	},

	"SetProjectMarker2 lua": {
	"prefix": "reaper.SetProjectMarker2",
	"scope": "lua",
	"body": "reaper.SetProjectMarker2(${1:proj}, ${2:markrgnindexnumber}, ${3:isrgn}, ${4:pos}, ${5:rgnend}, ${6:name})$0",
	"description": ""
	},

	"SetProjectMarker3 lua": {
	"prefix": "reaper.SetProjectMarker3",
	"scope": "lua",
	"body": "reaper.SetProjectMarker3(${1:proj}, ${2:markrgnindexnumber}, ${3:isrgn}, ${4:pos}, ${5:rgnend}, ${6:name}, ${7:color})$0",
	"description": ""
	},

	"SetProjectMarker4 lua": {
	"prefix": "reaper.SetProjectMarker4",
	"scope": "lua",
	"body": "reaper.SetProjectMarker4(${1:proj}, ${2:markrgnindexnumber}, ${3:isrgn}, ${4:pos}, ${5:rgnend}, ${6:name}, ${7:color}, ${8:flags})$0",
	"description": "color should be 0 to not change, or ColorToNative(r,g,b)|0x1000000, flags&1 to clear name\n\n"
	},

	"SetProjectMarkerByIndex lua": {
	"prefix": "reaper.SetProjectMarkerByIndex",
	"scope": "lua",
	"body": "reaper.SetProjectMarkerByIndex(${1:proj}, ${2:markrgnidx}, ${3:isrgn}, ${4:pos}, ${5:rgnend}, ${6:IDnumber}, ${7:name}, ${8:color})$0",
	"description": "See SetProjectMarkerByIndex2.\n\n"
	},

	"SetProjectMarkerByIndex2 lua": {
	"prefix": "reaper.SetProjectMarkerByIndex2",
	"scope": "lua",
	"body": "reaper.SetProjectMarkerByIndex2(${1:proj}, ${2:markrgnidx}, ${3:isrgn}, ${4:pos}, ${5:rgnend}, ${6:IDnumber}, ${7:name}, ${8:color}, ${9:flags})$0",
	"description": "Differs from SetProjectMarker4 in that markrgnidx is 0 for the first marker/region, 1 for the next, etc (see EnumProjectMarkers3), rather than representing the displayed marker/region ID number (see SetProjectMarker3). Function will fail if attempting to set a duplicate ID number for a region (duplicate ID numbers for markers are OK). , flags&1 to clear name. If flags&2, markers will not be re-sorted, and after making updates, you MUST call SetProjectMarkerByIndex2 with markrgnidx=-1 and flags&2 to force re-sort/UI updates.\n\n"
	},

	"SetProjExtState lua": {
	"prefix": "reaper.SetProjExtState",
	"scope": "lua",
	"body": "reaper.SetProjExtState(${1:proj}, ${2:extname}, ${3:key}, ${4:value})$0",
	"description": "Save a key/value pair for a specific extension, to be restored the next time this specific project is loaded. Typically extname will be the name of a reascript or extension section. If key is NULL or '', all extended data for that extname will be deleted.  If val is NULL or '', the data previously associated with that key will be deleted. Returns the size of the state for this extname. See GetProjExtState, EnumProjExtState.\n\n"
	},

	"SetRegionRenderMatrix lua": {
	"prefix": "reaper.SetRegionRenderMatrix",
	"scope": "lua",
	"body": "reaper.SetRegionRenderMatrix(${1:proj}, ${2:regionindex}, ${3:track}, ${4:flag})$0",
	"description": "Add (flag > 0) or remove (flag < 0) a track from this region when using the region render matrix. If adding, flag==2 means force mono, flag==4 means force stereo, flag==N means force N/2 channels.\n\n"
	},

	"SetTakeMarker lua": {
	"prefix": "reaper.SetTakeMarker",
	"scope": "lua",
	"body": "reaper.SetTakeMarker(${1:take}, ${2:idx}, ${3:nameIn}, ${4:optional_srcposIn}, ${5:optional_colorIn})$0",
	"description": "Inserts or updates a take marker. If idx<0, a take marker will be added, otherwise an existing take marker will be updated. Returns the index of the new or updated take marker (which may change if srcPos is updated). See GetNumTakeMarkers, GetTakeMarker, DeleteTakeMarker\n\n"
	},

	"SetTakeStretchMarker lua": {
	"prefix": "reaper.SetTakeStretchMarker",
	"scope": "lua",
	"body": "reaper.SetTakeStretchMarker(${1:take}, ${2:idx}, ${3:pos}, ${4:optional_srcposIn})$0",
	"description": "Adds or updates a stretch marker. If idx<0, stretch marker will be added. If idx>=0, stretch marker will be updated. When adding, if srcposInOptional is omitted, source position will be auto-calculated. When updating a stretch marker, if srcposInOptional is omitted, srcpos will not be modified. Position/srcposition values will be constrained to nearby stretch markers. Returns index of stretch marker, or -1 if did not insert (or marker already existed at time).\n\n"
	},

	"SetTakeStretchMarkerSlope lua": {
	"prefix": "reaper.SetTakeStretchMarkerSlope",
	"scope": "lua",
	"body": "reaper.SetTakeStretchMarkerSlope(${1:take}, ${2:idx}, ${3:slope})$0",
	"description": "See GetTakeStretchMarkerSlope\n\n"
	},

	"SetTempoTimeSigMarker lua": {
	"prefix": "reaper.SetTempoTimeSigMarker",
	"scope": "lua",
	"body": "reaper.SetTempoTimeSigMarker(${1:proj}, ${2:ptidx}, ${3:timepos}, ${4:measurepos}, ${5:beatpos}, ${6:bpm}, ${7:timesig_num}, ${8:timesig_denom}, ${9:lineartempo})$0",
	"description": "Set parameters of a tempo/time signature marker. Provide either timepos (with measurepos=-1, beatpos=-1), or measurepos and beatpos (with timepos=-1). If timesig_num and timesig_denom are zero, the previous time signature will be used. ptidx=-1 will insert a new tempo/time signature marker. See CountTempoTimeSigMarkers, GetTempoTimeSigMarker, AddTempoTimeSigMarker.\n\n"
	},

	"SetThemeColor lua": {
	"prefix": "reaper.SetThemeColor",
	"scope": "lua",
	"body": "reaper.SetThemeColor(${1:ini_key}, ${2:color}, ${3:flags})$0",
	"description": "Temporarily updates the theme color to the color specified (or the theme default color if -1 is specified). Returns -1 on failure, otherwise returns the color (or transformed-color). Note that the UI is not updated by this, the caller should call UpdateArrange() etc as necessary. If the low bit of flags is set, any color transformations are bypassed. To read a value see GetThemeColor.\nCurrently valid ini_keys:"
	},

	"SetToggleCommandState lua": {
	"prefix": "reaper.SetToggleCommandState",
	"scope": "lua",
	"body": "reaper.SetToggleCommandState(${1:section_id}, ${2:command_id}, ${3:state})$0",
	"description": "Updates the toggle state of an action, returns true if succeeded. Only ReaScripts can have their toggle states changed programmatically. See RefreshToolbar2.\n\n"
	},

	"SetTrackAutomationMode lua": {
	"prefix": "reaper.SetTrackAutomationMode",
	"scope": "lua",
	"body": "reaper.SetTrackAutomationMode(${1:tr}, ${2:mode})$0",
	"description": ""
	},

	"SetTrackColor lua": {
	"prefix": "reaper.SetTrackColor",
	"scope": "lua",
	"body": "reaper.SetTrackColor(${1:track}, ${2:color})$0",
	"description": "Set the custom track color, color is OS dependent (i.e. ColorToNative(r,g,b). To unset the track color, see SetMediaTrackInfo_Value I_CUSTOMCOLOR\n\n"
	},

	"SetTrackMIDILyrics lua": {
	"prefix": "reaper.SetTrackMIDILyrics",
	"scope": "lua",
	"body": "reaper.SetTrackMIDILyrics(${1:track}, ${2:flag}, ${3:str})$0",
	"description": "Set all MIDI lyrics on the track. Lyrics will be stuffed into any MIDI items found in range. Flag is unused at present. str is passed in as beat position, tab, text, tab (example with flag=2: '1.1.2\tLyric for measure 1 beat 2\t2.1.1\tLyric for measure 2 beat 1	'). See GetTrackMIDILyrics\n\n"
	},

	"SetTrackMIDINoteName lua": {
	"prefix": "reaper.SetTrackMIDINoteName",
	"scope": "lua",
	"body": "reaper.SetTrackMIDINoteName(${1:track}, ${2:pitch}, ${3:chan}, ${4:name})$0",
	"description": "channel < 0 assigns these note names to all channels.\n\n"
	},

	"SetTrackMIDINoteNameEx lua": {
	"prefix": "reaper.SetTrackMIDINoteNameEx",
	"scope": "lua",
	"body": "reaper.SetTrackMIDINoteNameEx(${1:proj}, ${2:track}, ${3:pitch}, ${4:chan}, ${5:name})$0",
	"description": "channel < 0 assigns note name to all channels. pitch 128 assigns name for CC0, pitch 129 for CC1, etc.\n\n"
	},

	"SetTrackSelected lua": {
	"prefix": "reaper.SetTrackSelected",
	"scope": "lua",
	"body": "reaper.SetTrackSelected(${1:track}, ${2:selected})$0",
	"description": ""
	},

	"SetTrackSendInfo_Value lua": {
	"prefix": "reaper.SetTrackSendInfo_Value",
	"scope": "lua",
	"body": "reaper.SetTrackSendInfo_Value(${1:tr}, ${2:category}, ${3:sendidx}, ${4:parmname}, ${5:newvalue})$0",
	"description": "Set send/receive/hardware output numerical-value attributes, return true on success.\ncategory is <0 for receives, 0=sends, >0 for hardware outputs\nparameter names:\nB_MUTE : bool *\nB_PHASE : bool * : true to flip phase\nB_MONO : bool *\nD_VOL : double * : 1.0 = +0dB etc\nD_PAN : double * : -1..+1\nD_PANLAW : double * : 1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc\nI_SENDMODE : int * : 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx\nI_AUTOMODE : int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)\nI_SRCCHAN : int * : index,&1024=mono, -1 for none\nI_DSTCHAN : int * : index, &1024=mono, otherwise stereo pair, hwout:&512=rearoute\nI_MIDIFLAGS : int * : low 5 bits=source channel 0=all, 1-16, next 5 bits=dest channel, 0=orig, 1-16=chan\nSee CreateTrackSend, RemoveTrackSend, GetTrackNumSends.\n\n"
	},

	"SetTrackSendUIPan lua": {
	"prefix": "reaper.SetTrackSendUIPan",
	"scope": "lua",
	"body": "reaper.SetTrackSendUIPan(${1:track}, ${2:send_idx}, ${3:pan}, ${4:isend})$0",
	"description": "send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends. isend=1 for end of edit, -1 for an instant edit (such as reset), 0 for normal tweak.\n\n"
	},

	"SetTrackSendUIVol lua": {
	"prefix": "reaper.SetTrackSendUIVol",
	"scope": "lua",
	"body": "reaper.SetTrackSendUIVol(${1:track}, ${2:send_idx}, ${3:vol}, ${4:isend})$0",
	"description": "send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends. isend=1 for end of edit, -1 for an instant edit (such as reset), 0 for normal tweak.\n\n"
	},

	"SetTrackStateChunk lua": {
	"prefix": "reaper.SetTrackStateChunk",
	"scope": "lua",
	"body": "reaper.SetTrackStateChunk(${1:track}, ${2:str}, ${3:isundo})$0",
	"description": "Sets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint.\n\n"
	},

	"SetTrackUIInputMonitor lua": {
	"prefix": "reaper.SetTrackUIInputMonitor",
	"scope": "lua",
	"body": "reaper.SetTrackUIInputMonitor(${1:track}, ${2:monitor}, ${3:igngroupflags})$0",
	"description": "monitor: 0=no monitoring, 1=monitoring, 2=auto-monitoring. returns new value or -1 if error. igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging\n\n"
	},

	"SetTrackUIMute lua": {
	"prefix": "reaper.SetTrackUIMute",
	"scope": "lua",
	"body": "reaper.SetTrackUIMute(${1:track}, ${2:mute}, ${3:igngroupflags})$0",
	"description": "mute: <0 toggles, >0 sets mute, 0=unsets mute. returns new value or -1 if error. igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging\n\n"
	},

	"SetTrackUIPan lua": {
	"prefix": "reaper.SetTrackUIPan",
	"scope": "lua",
	"body": "reaper.SetTrackUIPan(${1:track}, ${2:pan}, ${3:relative}, ${4:done}, ${5:igngroupflags})$0",
	"description": "igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging\n\n"
	},

	"SetTrackUIPolarity lua": {
	"prefix": "reaper.SetTrackUIPolarity",
	"scope": "lua",
	"body": "reaper.SetTrackUIPolarity(${1:track}, ${2:polarity}, ${3:igngroupflags})$0",
	"description": "polarity (AKA phase): <0 toggles, 0=normal, >0=inverted. returns new value or -1 if error.igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging\n\n"
	},

	"SetTrackUIRecArm lua": {
	"prefix": "reaper.SetTrackUIRecArm",
	"scope": "lua",
	"body": "reaper.SetTrackUIRecArm(${1:track}, ${2:recarm}, ${3:igngroupflags})$0",
	"description": "recarm: <0 toggles, >0 sets recarm, 0=unsets recarm. returns new value or -1 if error. igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging\n\n"
	},

	"SetTrackUISolo lua": {
	"prefix": "reaper.SetTrackUISolo",
	"scope": "lua",
	"body": "reaper.SetTrackUISolo(${1:track}, ${2:solo}, ${3:igngroupflags})$0",
	"description": "solo: <0 toggles, 1 sets solo (default mode), 0=unsets solo, 2 sets solo (non-SIP), 4 sets solo (SIP). returns new value or -1 if error. igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging\n\n"
	},

	"SetTrackUIVolume lua": {
	"prefix": "reaper.SetTrackUIVolume",
	"scope": "lua",
	"body": "reaper.SetTrackUIVolume(${1:track}, ${2:volume}, ${3:relative}, ${4:done}, ${5:igngroupflags})$0",
	"description": "igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging\n\n"
	},

	"SetTrackUIWidth lua": {
	"prefix": "reaper.SetTrackUIWidth",
	"scope": "lua",
	"body": "reaper.SetTrackUIWidth(${1:track}, ${2:width}, ${3:relative}, ${4:done}, ${5:igngroupflags})$0",
	"description": "igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging\n\n"
	},

	"ShowActionList lua": {
	"prefix": "reaper.ShowActionList",
	"scope": "lua",
	"body": "reaper.ShowActionList(${1:section}, ${2:callerWnd})$0",
	"description": ""
	},

	"ShowConsoleMsg lua": {
	"prefix": "reaper.ShowConsoleMsg",
	"scope": "lua",
	"body": "reaper.ShowConsoleMsg(${1:msg})$0",
	"description": "Show a message to the user (also useful for debugging). Send \"\\n\" for newline, '' to clear the console. See ClearConsole\n\n"
	},

	"ShowMessageBox lua": {
	"prefix": "reaper.ShowMessageBox",
	"scope": "lua",
	"body": "reaper.ShowMessageBox(${1:msg}, ${2:title}, ${3:type})$0",
	"description": "type 0=OK,1=OKCANCEL,2=ABORTRETRYIGNORE,3=YESNOCANCEL,4=YESNO,5=RETRYCANCEL : ret 1=OK,2=CANCEL,3=ABORT,4=RETRY,5=IGNORE,6=YES,7=NO\n\n"
	},

	"ShowPopupMenu lua": {
	"prefix": "reaper.ShowPopupMenu",
	"scope": "lua",
	"body": "reaper.ShowPopupMenu(${1:name}, ${2:x}, ${3:y}, ${4:hwndParent}, ${5:ctx}, ${6:ctx2}, ${7:ctx3})$0",
	"description": "shows a context menu, valid names include: track_input, track_panel, track_area, track_routing, item, ruler, envelope, envelope_point, envelope_item. ctxOptional can be a track pointer for track_*, item pointer for item* (but is optional). for envelope_point, ctx2Optional has point index, ctx3Optional has item index (0=main envelope, 1=first AI). for envelope_item, ctx2Optional has AI index (1=first AI)\n\n"
	},

	"SLIDER2DB lua": {
	"prefix": "reaper.SLIDER2DB",
	"scope": "lua",
	"body": "reaper.SLIDER2DB(${1:y})$0",
	"description": ""
	},

	"SnapToGrid lua": {
	"prefix": "reaper.SnapToGrid",
	"scope": "lua",
	"body": "reaper.SnapToGrid(${1:project}, ${2:time_pos})$0",
	"description": ""
	},

	"SoloAllTracks lua": {
	"prefix": "reaper.SoloAllTracks",
	"scope": "lua",
	"body": "reaper.SoloAllTracks(${1:solo})$0",
	"description": "solo=2 for SIP\n\n"
	},

	"Splash_GetWnd lua": {
	"prefix": "reaper.Splash_GetWnd",
	"scope": "lua",
	"body": "reaper.Splash_GetWnd()\n\n",
	"description": "gets the splash window, in case you want to display a message over it. Returns NULL when the splash window is not displayed.\n\n"
	},

	"SplitMediaItem lua": {
	"prefix": "reaper.SplitMediaItem",
	"scope": "lua",
	"body": "reaper.SplitMediaItem(${1:item}, ${2:position})$0",
	"description": "the original item becomes the left-hand split, the function returns the right-hand split (or NULL if the split failed)\n\n"
	},

	"stringToGuid lua": {
	"prefix": "reaper.stringToGuid",
	"scope": "lua",
	"body": "gGUID = reaper.stringToGuid(${1:str}, ${2:gGUID})$0",
	"description": ""
	},

	"StuffMIDIMessage lua": {
	"prefix": "reaper.StuffMIDIMessage",
	"scope": "lua",
	"body": "reaper.StuffMIDIMessage(${1:mode}, ${2:msg1}, ${3:msg2}, ${4:msg3})$0",
	"description": "Stuffs a 3 byte MIDI message into either the Virtual MIDI Keyboard queue, or the MIDI-as-control input queue, or sends to a MIDI hardware output. mode=0 for VKB, 1 for control (actions map etc), 2 for VKB-on-current-channel; 16 for external MIDI device 0, 17 for external MIDI device 1, etc; see GetNumMIDIOutputs, GetMIDIOutputName.\n\n"
	},

	"TakeFX_AddByName lua": {
	"prefix": "reaper.TakeFX_AddByName",
	"scope": "lua",
	"body": "reaper.TakeFX_AddByName(${1:take}, ${2:fxname}, ${3:instantiate})$0",
	"description": "Adds or queries the position of a named FX in a take. See TrackFX_AddByName() for information on fxname and instantiate.\n\n"
	},

	"TakeFX_CopyToTake lua": {
	"prefix": "reaper.TakeFX_CopyToTake",
	"scope": "lua",
	"body": "reaper.TakeFX_CopyToTake(${1:src_take}, ${2:src_fx}, ${3:dest_take}, ${4:dest_fx}, ${5:is_move})$0",
	"description": "Copies (or moves) FX from src_take to dest_take. Can be used with src_take=dest_take to reorder.\n\n"
	},

	"TakeFX_CopyToTrack lua": {
	"prefix": "reaper.TakeFX_CopyToTrack",
	"scope": "lua",
	"body": "reaper.TakeFX_CopyToTrack(${1:src_take}, ${2:src_fx}, ${3:dest_track}, ${4:dest_fx}, ${5:is_move})$0",
	"description": "Copies (or moves) FX from src_take to dest_track. dest_fx can have 0x1000000 set to reference input FX.\n\n"
	},

	"TakeFX_Delete lua": {
	"prefix": "reaper.TakeFX_Delete",
	"scope": "lua",
	"body": "reaper.TakeFX_Delete(${1:take}, ${2:fx})$0",
	"description": "Remove a FX from take chain (returns true on success)\n\n"
	},

	"TakeFX_EndParamEdit lua": {
	"prefix": "reaper.TakeFX_EndParamEdit",
	"scope": "lua",
	"body": "reaper.TakeFX_EndParamEdit(${1:take}, ${2:fx}, ${3:param})$0",
	"description": ""
	},

	"TakeFX_FormatParamValue lua": {
	"prefix": "reaper.TakeFX_FormatParamValue",
	"scope": "lua",
	"body": "retval, buf = reaper.TakeFX_FormatParamValue(${1:take}, ${2:fx}, ${3:param}, ${4:val})$0",
	"description": "Note: only works with FX that support Cockos VST extensions.\n\n"
	},

	"TakeFX_FormatParamValueNormalized lua": {
	"prefix": "reaper.TakeFX_FormatParamValueNormalized",
	"scope": "lua",
	"body": "retval, buf = reaper.TakeFX_FormatParamValueNormalized(${1:take}, ${2:fx}, ${3:param}, ${4:value}, ${5:buf})$0",
	"description": "Note: only works with FX that support Cockos VST extensions.\n\n"
	},

	"TakeFX_GetChainVisible lua": {
	"prefix": "reaper.TakeFX_GetChainVisible",
	"scope": "lua",
	"body": "reaper.TakeFX_GetChainVisible(${1:take})$0",
	"description": "returns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected\n\n"
	},

	"TakeFX_GetCount lua": {
	"prefix": "reaper.TakeFX_GetCount",
	"scope": "lua",
	"body": "reaper.TakeFX_GetCount(${1:take})$0",
	"description": ""
	},

	"TakeFX_GetEnabled lua": {
	"prefix": "reaper.TakeFX_GetEnabled",
	"scope": "lua",
	"body": "reaper.TakeFX_GetEnabled(${1:take}, ${2:fx})$0",
	"description": "See TakeFX_SetEnabled\n\n"
	},

	"TakeFX_GetEnvelope lua": {
	"prefix": "reaper.TakeFX_GetEnvelope",
	"scope": "lua",
	"body": "reaper.TakeFX_GetEnvelope(${1:take}, ${2:fxindex}, ${3:parameterindex}, ${4:create})$0",
	"description": "Returns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created.\n\n"
	},

	"TakeFX_GetFloatingWindow lua": {
	"prefix": "reaper.TakeFX_GetFloatingWindow",
	"scope": "lua",
	"body": "reaper.TakeFX_GetFloatingWindow(${1:take}, ${2:index})$0",
	"description": "returns HWND of floating window for effect index, if any\n\n"
	},

	"TakeFX_GetFormattedParamValue lua": {
	"prefix": "reaper.TakeFX_GetFormattedParamValue",
	"scope": "lua",
	"body": "retval, buf = reaper.TakeFX_GetFormattedParamValue(${1:take}, ${2:fx}, ${3:param})$0",
	"description": ""
	},

	"TakeFX_GetFXGUID lua": {
	"prefix": "reaper.TakeFX_GetFXGUID",
	"scope": "lua",
	"body": "GUID = reaper.TakeFX_GetFXGUID(${1:take}, ${2:fx})$0",
	"description": ""
	},

	"TakeFX_GetFXName lua": {
	"prefix": "reaper.TakeFX_GetFXName",
	"scope": "lua",
	"body": "retval, buf = reaper.TakeFX_GetFXName(${1:take}, ${2:fx})$0",
	"description": ""
	},

	"TakeFX_GetIOSize lua": {
	"prefix": "reaper.TakeFX_GetIOSize",
	"scope": "lua",
	"body": "retval, inputPins, outputPins = reaper.TakeFX_GetIOSize(${1:take}, ${2:fx})$0",
	"description": "Gets the number of input/output pins for FX if available, returns plug-in type or -1 on error\n\n"
	},

	"TakeFX_GetNamedConfigParm lua": {
	"prefix": "reaper.TakeFX_GetNamedConfigParm",
	"scope": "lua",
	"body": "retval, buf = reaper.TakeFX_GetNamedConfigParm(${1:take}, ${2:fx}, ${3:parmname})$0",
	"description": "gets plug-in specific named configuration value (returns true on success). see TrackFX_GetNamedConfigParm\n\n"
	},

	"TakeFX_GetNumParams lua": {
	"prefix": "reaper.TakeFX_GetNumParams",
	"scope": "lua",
	"body": "reaper.TakeFX_GetNumParams(${1:take}, ${2:fx})$0",
	"description": ""
	},

	"TakeFX_GetOffline lua": {
	"prefix": "reaper.TakeFX_GetOffline",
	"scope": "lua",
	"body": "reaper.TakeFX_GetOffline(${1:take}, ${2:fx})$0",
	"description": "See TakeFX_SetOffline\n\n"
	},

	"TakeFX_GetOpen lua": {
	"prefix": "reaper.TakeFX_GetOpen",
	"scope": "lua",
	"body": "reaper.TakeFX_GetOpen(${1:take}, ${2:fx})$0",
	"description": "Returns true if this FX UI is open in the FX chain window or a floating window. See TakeFX_SetOpen\n\n"
	},

	"TakeFX_GetParam lua": {
	"prefix": "reaper.TakeFX_GetParam",
	"scope": "lua",
	"body": "retval, minval, maxval = reaper.TakeFX_GetParam(${1:take}, ${2:fx}, ${3:param})$0",
	"description": ""
	},

	"TakeFX_GetParameterStepSizes lua": {
	"prefix": "reaper.TakeFX_GetParameterStepSizes",
	"scope": "lua",
	"body": "retval, step, smallstep, largestep, istoggle = reaper.TakeFX_GetParameterStepSizes(${1:take}, ${2:fx}, ${3:param})$0",
	"description": ""
	},

	"TakeFX_GetParamEx lua": {
	"prefix": "reaper.TakeFX_GetParamEx",
	"scope": "lua",
	"body": "retval, minval, maxval, midval = reaper.TakeFX_GetParamEx(${1:take}, ${2:fx}, ${3:param})$0",
	"description": ""
	},

	"TakeFX_GetParamFromIdent lua": {
	"prefix": "reaper.TakeFX_GetParamFromIdent",
	"scope": "lua",
	"body": "reaper.TakeFX_GetParamFromIdent(${1:take}, ${2:fx}, ${3:ident_str})$0",
	"description": "gets the parameter index from an identifying string (:wet, :bypass, or a string returned from GetParamIdent), or -1 if unknown.\n\n"
	},

	"TakeFX_GetParamIdent lua": {
	"prefix": "reaper.TakeFX_GetParamIdent",
	"scope": "lua",
	"body": "retval, buf = reaper.TakeFX_GetParamIdent(${1:take}, ${2:fx}, ${3:param})$0",
	"description": "gets an identifying string for the parameter\n\n"
	},

	"TakeFX_GetParamName lua": {
	"prefix": "reaper.TakeFX_GetParamName",
	"scope": "lua",
	"body": "retval, buf = reaper.TakeFX_GetParamName(${1:take}, ${2:fx}, ${3:param})$0",
	"description": ""
	},

	"TakeFX_GetParamNormalized lua": {
	"prefix": "reaper.TakeFX_GetParamNormalized",
	"scope": "lua",
	"body": "reaper.TakeFX_GetParamNormalized(${1:take}, ${2:fx}, ${3:param})$0",
	"description": ""
	},

	"TakeFX_GetPinMappings lua": {
	"prefix": "reaper.TakeFX_GetPinMappings",
	"scope": "lua",
	"body": "retval, high32 = reaper.TakeFX_GetPinMappings(${1:take}, ${2:fx}, ${3:isoutput}, ${4:pin})$0",
	"description": "gets the effective channel mapping bitmask for a particular pin. high32Out will be set to the high 32 bits\n\n"
	},

	"TakeFX_GetPreset lua": {
	"prefix": "reaper.TakeFX_GetPreset",
	"scope": "lua",
	"body": "retval, presetname = reaper.TakeFX_GetPreset(${1:take}, ${2:fx})$0",
	"description": "Get the name of the preset currently showing in the REAPER dropdown, or the full path to a factory preset file for VST3 plug-ins (.vstpreset). Returns false if the current FX parameters do not exactly match the preset (in other words, if the user loaded the preset but moved the knobs afterward). See TakeFX_SetPreset.\n\n"
	},

	"TakeFX_GetPresetIndex lua": {
	"prefix": "reaper.TakeFX_GetPresetIndex",
	"scope": "lua",
	"body": "retval, numberOfPresets = reaper.TakeFX_GetPresetIndex(${1:take}, ${2:fx})$0",
	"description": "Returns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See TakeFX_SetPresetByIndex\n\n"
	},

	"TakeFX_GetUserPresetFilename lua": {
	"prefix": "reaper.TakeFX_GetUserPresetFilename",
	"scope": "lua",
	"body": "fn = reaper.TakeFX_GetUserPresetFilename(${1:take}, ${2:fx})$0",
	"description": ""
	},

	"TakeFX_NavigatePresets lua": {
	"prefix": "reaper.TakeFX_NavigatePresets",
	"scope": "lua",
	"body": "reaper.TakeFX_NavigatePresets(${1:take}, ${2:fx}, ${3:presetmove})$0",
	"description": "presetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc.\n\n"
	},

	"TakeFX_SetEnabled lua": {
	"prefix": "reaper.TakeFX_SetEnabled",
	"scope": "lua",
	"body": "reaper.TakeFX_SetEnabled(${1:take}, ${2:fx}, ${3:enabled})$0",
	"description": "See TakeFX_GetEnabled\n\n"
	},

	"TakeFX_SetNamedConfigParm lua": {
	"prefix": "reaper.TakeFX_SetNamedConfigParm",
	"scope": "lua",
	"body": "reaper.TakeFX_SetNamedConfigParm(${1:take}, ${2:fx}, ${3:parmname}, ${4:value})$0",
	"description": "gets plug-in specific named configuration value (returns true on success). see TrackFX_SetNamedConfigParm\n\n"
	},

	"TakeFX_SetOffline lua": {
	"prefix": "reaper.TakeFX_SetOffline",
	"scope": "lua",
	"body": "reaper.TakeFX_SetOffline(${1:take}, ${2:fx}, ${3:offline})$0",
	"description": "See TakeFX_GetOffline\n\n"
	},

	"TakeFX_SetOpen lua": {
	"prefix": "reaper.TakeFX_SetOpen",
	"scope": "lua",
	"body": "reaper.TakeFX_SetOpen(${1:take}, ${2:fx}, ${3:open})$0",
	"description": "Open this FX UI. See TakeFX_GetOpen\n\n"
	},

	"TakeFX_SetParam lua": {
	"prefix": "reaper.TakeFX_SetParam",
	"scope": "lua",
	"body": "reaper.TakeFX_SetParam(${1:take}, ${2:fx}, ${3:param}, ${4:val})$0",
	"description": ""
	},

	"TakeFX_SetParamNormalized lua": {
	"prefix": "reaper.TakeFX_SetParamNormalized",
	"scope": "lua",
	"body": "reaper.TakeFX_SetParamNormalized(${1:take}, ${2:fx}, ${3:param}, ${4:value})$0",
	"description": ""
	},

	"TakeFX_SetPinMappings lua": {
	"prefix": "reaper.TakeFX_SetPinMappings",
	"scope": "lua",
	"body": "reaper.TakeFX_SetPinMappings(${1:take}, ${2:fx}, ${3:isoutput}, ${4:pin}, ${5:low32bits}, ${6:hi32bits})$0",
	"description": "sets the channel mapping bitmask for a particular pin. returns false if unsupported (not all types of plug-ins support this capability)\n\n"
	},

	"TakeFX_SetPreset lua": {
	"prefix": "reaper.TakeFX_SetPreset",
	"scope": "lua",
	"body": "reaper.TakeFX_SetPreset(${1:take}, ${2:fx}, ${3:presetname})$0",
	"description": "Activate a preset with the name shown in the REAPER dropdown. Full paths to .vstpreset files are also supported for VST3 plug-ins. See TakeFX_GetPreset.\n\n"
	},

	"TakeFX_SetPresetByIndex lua": {
	"prefix": "reaper.TakeFX_SetPresetByIndex",
	"scope": "lua",
	"body": "reaper.TakeFX_SetPresetByIndex(${1:take}, ${2:fx}, ${3:idx})$0",
	"description": "Sets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See TakeFX_GetPresetIndex.\n\n"
	},

	"TakeFX_Show lua": {
	"prefix": "reaper.TakeFX_Show",
	"scope": "lua",
	"body": "reaper.TakeFX_Show(${1:take}, ${2:index}, ${3:showFlag})$0",
	"description": "showflag=0 for hidechain, =1 for show chain(index valid), =2 for hide floating window(index valid), =3 for show floating window (index valid)\n\n"
	},

	"TakeIsMIDI lua": {
	"prefix": "reaper.TakeIsMIDI",
	"scope": "lua",
	"body": "reaper.TakeIsMIDI(${1:take})$0",
	"description": "Returns true if the active take contains MIDI.\n\n"
	},

	"ThemeLayout_GetLayout lua": {
	"prefix": "reaper.ThemeLayout_GetLayout",
	"scope": "lua",
	"body": "retval, name = reaper.ThemeLayout_GetLayout(${1:section}, ${2:idx})$0",
	"description": "Gets theme layout information. section can be 'global' for global layout override, 'seclist' to enumerate a list of layout sections, otherwise a layout section such as 'mcp', 'tcp', 'trans', etc. idx can be -1 to query the current value, -2 to get the description of the section (if not global), -3 will return the current context DPI-scaling (256=normal, 512=retina, etc), or 0..x. returns false if failed.\n\n"
	},

	"ThemeLayout_GetParameter lua": {
	"prefix": "reaper.ThemeLayout_GetParameter",
	"scope": "lua",
	"body": "retval, optional_desc, optional_value, optional_defValue, optional_minValue, optional_maxValue = reaper.ThemeLayout_GetParameter(${1:wp})$0",
	"description": "returns theme layout parameter. return value is cfg-name, or nil/empty if out of range.\n\n"
	},

	"ThemeLayout_RefreshAll lua": {
	"prefix": "reaper.ThemeLayout_RefreshAll",
	"scope": "lua",
	"body": "reaper.ThemeLayout_RefreshAll()\n\n",
	"description": "Refreshes all layouts\n\n"
	},

	"ThemeLayout_SetLayout lua": {
	"prefix": "reaper.ThemeLayout_SetLayout",
	"scope": "lua",
	"body": "reaper.ThemeLayout_SetLayout(${1:section}, ${2:string_layout})$0",
	"description": "Sets theme layout override for a particular section -- section can be 'global' or 'mcp' etc. If setting global layout, prefix a ! to the layout string to clear any per-layout overrides. Returns false if failed.\n\n"
	},

	"ThemeLayout_SetParameter lua": {
	"prefix": "reaper.ThemeLayout_SetParameter",
	"scope": "lua",
	"body": "reaper.ThemeLayout_SetParameter(${1:wp}, ${2:value}, ${3:persist})$0",
	"description": "sets theme layout parameter to value. persist=true in order to have change loaded on next theme load. note that the caller should update layouts via ??? to make changes visible.\n\n"
	},

	"time_precise lua": {
	"prefix": "reaper.time_precise",
	"scope": "lua",
	"body": "reaper.time_precise()\n\n",
	"description": "Gets a precise system timestamp in seconds\n\n"
	},

	"TimeMap2_beatsToTime lua": {
	"prefix": "reaper.TimeMap2_beatsToTime",
	"scope": "lua",
	"body": "reaper.TimeMap2_beatsToTime(${1:proj}, ${2:tpos}, ${3:optional_measuresIn})$0",
	"description": "convert a beat position (or optionally a beats+measures if measures is non-NULL) to time.\n\n"
	},

	"TimeMap2_GetDividedBpmAtTime lua": {
	"prefix": "reaper.TimeMap2_GetDividedBpmAtTime",
	"scope": "lua",
	"body": "reaper.TimeMap2_GetDividedBpmAtTime(${1:proj}, ${2:time})$0",
	"description": "get the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)\n\n"
	},

	"TimeMap2_GetNextChangeTime lua": {
	"prefix": "reaper.TimeMap2_GetNextChangeTime",
	"scope": "lua",
	"body": "reaper.TimeMap2_GetNextChangeTime(${1:proj}, ${2:time})$0",
	"description": "when does the next time map (tempo or time sig) change occur\n\n"
	},

	"TimeMap2_QNToTime lua": {
	"prefix": "reaper.TimeMap2_QNToTime",
	"scope": "lua",
	"body": "reaper.TimeMap2_QNToTime(${1:proj}, ${2:qn})$0",
	"description": "converts project QN position to time.\n\n"
	},

	"TimeMap2_timeToBeats lua": {
	"prefix": "reaper.TimeMap2_timeToBeats",
	"scope": "lua",
	"body": "retval, optional_measures, optional_cml, optional_fullbeats, optional_cdenom = reaper.TimeMap2_timeToBeats(${1:proj}, ${2:tpos})$0",
	"description": "convert a time into beats.\nif measures is non-NULL, measures will be set to the measure count, return value will be beats since measure.\nif cml is non-NULL, will be set to current measure length in beats (i.e. time signature numerator)\nif fullbeats is non-NULL, and measures is non-NULL, fullbeats will get the full beat count (same value returned if measures is NULL).\nif cdenom is non-NULL, will be set to the current time signature denominator.\n\n"
	},

	"TimeMap2_timeToQN lua": {
	"prefix": "reaper.TimeMap2_timeToQN",
	"scope": "lua",
	"body": "reaper.TimeMap2_timeToQN(${1:proj}, ${2:tpos})$0",
	"description": "converts project time position to QN position.\n\n"
	},

	"TimeMap_curFrameRate lua": {
	"prefix": "reaper.TimeMap_curFrameRate",
	"scope": "lua",
	"body": "retval, dropFrame = reaper.TimeMap_curFrameRate(${1:proj})$0",
	"description": "Gets project framerate, and optionally whether it is drop-frame timecode\n\n"
	},

	"TimeMap_GetDividedBpmAtTime lua": {
	"prefix": "reaper.TimeMap_GetDividedBpmAtTime",
	"scope": "lua",
	"body": "reaper.TimeMap_GetDividedBpmAtTime(${1:time})$0",
	"description": "get the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)\n\n"
	},

	"TimeMap_GetMeasureInfo lua": {
	"prefix": "reaper.TimeMap_GetMeasureInfo",
	"scope": "lua",
	"body": "retval, qn_start, qn_end, timesig_num, timesig_denom, tempo = reaper.TimeMap_GetMeasureInfo(${1:proj}, ${2:measure})$0",
	"description": "Get the QN position and time signature information for the start of a measure. Return the time in seconds of the measure start.\n\n"
	},

	"TimeMap_GetMetronomePattern lua": {
	"prefix": "reaper.TimeMap_GetMetronomePattern",
	"scope": "lua",
	"body": "retval, pattern = reaper.TimeMap_GetMetronomePattern(${1:proj}, ${2:time}, ${3:pattern})$0",
	"description": "Fills in a string representing the active metronome pattern. For example, in a 7/8 measure divided 3+4, the pattern might be '1221222'. The length of the string is the time signature numerator, and the function returns the time signature denominator.\n\n"
	},

	"TimeMap_GetTimeSigAtTime lua": {
	"prefix": "reaper.TimeMap_GetTimeSigAtTime",
	"scope": "lua",
	"body": "timesig_num, timesig_denom, tempo = reaper.TimeMap_GetTimeSigAtTime(${1:proj}, ${2:time})$0",
	"description": "get the effective time signature and tempo\n\n"
	},

	"TimeMap_QNToMeasures lua": {
	"prefix": "reaper.TimeMap_QNToMeasures",
	"scope": "lua",
	"body": "retval, optional_qnMeasureStart, optional_qnMeasureEnd = reaper.TimeMap_QNToMeasures(${1:proj}, ${2:qn})$0",
	"description": "Find which measure the given QN position falls in.\n\n"
	},

	"TimeMap_QNToTime lua": {
	"prefix": "reaper.TimeMap_QNToTime",
	"scope": "lua",
	"body": "reaper.TimeMap_QNToTime(${1:qn})$0",
	"description": "converts project QN position to time.\n\n"
	},

	"TimeMap_QNToTime_abs lua": {
	"prefix": "reaper.TimeMap_QNToTime_abs",
	"scope": "lua",
	"body": "reaper.TimeMap_QNToTime_abs(${1:proj}, ${2:qn})$0",
	"description": "Converts project quarter note count (QN) to time. QN is counted from the start of the project, regardless of any partial measures. See TimeMap2_QNToTime\n\n"
	},

	"TimeMap_timeToQN lua": {
	"prefix": "reaper.TimeMap_timeToQN",
	"scope": "lua",
	"body": "reaper.TimeMap_timeToQN(${1:tpos})$0",
	"description": "converts project QN position to time.\n\n"
	},

	"TimeMap_timeToQN_abs lua": {
	"prefix": "reaper.TimeMap_timeToQN_abs",
	"scope": "lua",
	"body": "reaper.TimeMap_timeToQN_abs(${1:proj}, ${2:tpos})$0",
	"description": "Converts project time position to quarter note count (QN). QN is counted from the start of the project, regardless of any partial measures. See TimeMap2_timeToQN\n\n"
	},

	"ToggleTrackSendUIMute lua": {
	"prefix": "reaper.ToggleTrackSendUIMute",
	"scope": "lua",
	"body": "reaper.ToggleTrackSendUIMute(${1:track}, ${2:send_idx})$0",
	"description": "send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends.\n\n"
	},

	"Track_GetPeakHoldDB lua": {
	"prefix": "reaper.Track_GetPeakHoldDB",
	"scope": "lua",
	"body": "reaper.Track_GetPeakHoldDB(${1:track}, ${2:channel}, ${3:clear})$0",
	"description": "Returns meter hold state, in dB*0.01 (0 = +0dB, -0.01 = -1dB, 0.02 = +2dB, etc). If clear is set, clears the meter hold. If channel==1024 or channel==1025, returns loudness values if this is the master track or this track's VU meters are set to display loudness.\n\n"
	},

	"Track_GetPeakInfo lua": {
	"prefix": "reaper.Track_GetPeakInfo",
	"scope": "lua",
	"body": "reaper.Track_GetPeakInfo(${1:track}, ${2:channel})$0",
	"description": "Returns peak meter value (1.0=+0dB, 0.0=-inf) for channel. If channel==1024 or channel==1025, returns loudness values if this is the master track or this track's VU meters are set to display loudness.\n\n"
	},

	"TrackCtl_SetToolTip lua": {
	"prefix": "reaper.TrackCtl_SetToolTip",
	"scope": "lua",
	"body": "reaper.TrackCtl_SetToolTip(${1:fmt}, ${2:xpos}, ${3:ypos}, ${4:topmost})$0",
	"description": "displays tooltip at location, or removes if empty string\n\n"
	},

	"TrackFX_AddByName lua": {
	"prefix": "reaper.TrackFX_AddByName",
	"scope": "lua",
	"body": "reaper.TrackFX_AddByName(${1:track}, ${2:fxname}, ${3:recFX}, ${4:instantiate})$0",
	"description": "Adds or queries the position of a named FX from the track FX chain (recFX=false) or record input FX/monitoring FX (recFX=true, monitoring FX are on master track). Specify a negative value for instantiate to always create a new effect, 0 to only query the first instance of an effect, or a positive value to add an instance if one is not found. If instantiate is <= -1000, it is used for the insertion position (-1000 is first item in chain, -1001 is second, etc). fxname can have prefix to specify type: VST3:,VST2:,VST:,AU:,JS:, or DX:, or FXADD: which adds selected items from the currently-open FX browser, FXADD:2 to limit to 2 FX added, or FXADD:2e to only succeed if exactly 2 FX are selected. Returns -1 on failure or the new position in chain on success.\n\n"
	},

	"TrackFX_CopyToTake lua": {
	"prefix": "reaper.TrackFX_CopyToTake",
	"scope": "lua",
	"body": "reaper.TrackFX_CopyToTake(${1:src_track}, ${2:src_fx}, ${3:dest_take}, ${4:dest_fx}, ${5:is_move})$0",
	"description": "Copies (or moves) FX from src_track to dest_take. src_fx can have 0x1000000 set to reference input FX.\n\n"
	},

	"TrackFX_CopyToTrack lua": {
	"prefix": "reaper.TrackFX_CopyToTrack",
	"scope": "lua",
	"body": "reaper.TrackFX_CopyToTrack(${1:src_track}, ${2:src_fx}, ${3:dest_track}, ${4:dest_fx}, ${5:is_move})$0",
	"description": "Copies (or moves) FX from src_track to dest_track. Can be used with src_track=dest_track to reorder, FX indices have 0x1000000 set to reference input FX.\n\n"
	},

	"TrackFX_Delete lua": {
	"prefix": "reaper.TrackFX_Delete",
	"scope": "lua",
	"body": "reaper.TrackFX_Delete(${1:track}, ${2:fx})$0",
	"description": "Remove a FX from track chain (returns true on success)\n\n"
	},

	"TrackFX_EndParamEdit lua": {
	"prefix": "reaper.TrackFX_EndParamEdit",
	"scope": "lua",
	"body": "reaper.TrackFX_EndParamEdit(${1:track}, ${2:fx}, ${3:param})$0",
	"description": ""
	},

	"TrackFX_FormatParamValue lua": {
	"prefix": "reaper.TrackFX_FormatParamValue",
	"scope": "lua",
	"body": "retval, buf = reaper.TrackFX_FormatParamValue(${1:track}, ${2:fx}, ${3:param}, ${4:val})$0",
	"description": "Note: only works with FX that support Cockos VST extensions.\n\n"
	},

	"TrackFX_FormatParamValueNormalized lua": {
	"prefix": "reaper.TrackFX_FormatParamValueNormalized",
	"scope": "lua",
	"body": "retval, buf = reaper.TrackFX_FormatParamValueNormalized(${1:track}, ${2:fx}, ${3:param}, ${4:value}, ${5:buf})$0",
	"description": "Note: only works with FX that support Cockos VST extensions.\n\n"
	},

	"TrackFX_GetByName lua": {
	"prefix": "reaper.TrackFX_GetByName",
	"scope": "lua",
	"body": "reaper.TrackFX_GetByName(${1:track}, ${2:fxname}, ${3:instantiate})$0",
	"description": "Get the index of the first track FX insert that matches fxname. If the FX is not in the chain and instantiate is true, it will be inserted. See TrackFX_GetInstrument, TrackFX_GetEQ. Deprecated in favor of TrackFX_AddByName.\n\n"
	},

	"TrackFX_GetChainVisible lua": {
	"prefix": "reaper.TrackFX_GetChainVisible",
	"scope": "lua",
	"body": "reaper.TrackFX_GetChainVisible(${1:track})$0",
	"description": "returns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected\n\n"
	},

	"TrackFX_GetCount lua": {
	"prefix": "reaper.TrackFX_GetCount",
	"scope": "lua",
	"body": "reaper.TrackFX_GetCount(${1:track})$0",
	"description": ""
	},

	"TrackFX_GetEnabled lua": {
	"prefix": "reaper.TrackFX_GetEnabled",
	"scope": "lua",
	"body": "reaper.TrackFX_GetEnabled(${1:track}, ${2:fx})$0",
	"description": "See TrackFX_SetEnabled\n\n"
	},

	"TrackFX_GetEQ lua": {
	"prefix": "reaper.TrackFX_GetEQ",
	"scope": "lua",
	"body": "reaper.TrackFX_GetEQ(${1:track}, ${2:instantiate})$0",
	"description": "Get the index of ReaEQ in the track FX chain. If ReaEQ is not in the chain and instantiate is true, it will be inserted. See TrackFX_GetInstrument, TrackFX_GetByName.\n\n"
	},

	"TrackFX_GetEQBandEnabled lua": {
	"prefix": "reaper.TrackFX_GetEQBandEnabled",
	"scope": "lua",
	"body": "reaper.TrackFX_GetEQBandEnabled(${1:track}, ${2:fxidx}, ${3:bandtype}, ${4:bandidx})$0",
	"description": "Returns true if the EQ band is enabled.\nReturns false if the band is disabled, or if track/fxidx is not ReaEQ.\nBandtype: -1=master gain, 0=hipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass, 6=bandpass, 7=parallel bandpass.\nBandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.\nSee TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_SetEQParam, TrackFX_SetEQBandEnabled.\n\n"
	},

	"TrackFX_GetEQParam lua": {
	"prefix": "reaper.TrackFX_GetEQParam",
	"scope": "lua",
	"body": "retval, bandtype, bandidx, paramtype, normval = reaper.TrackFX_GetEQParam(${1:track}, ${2:fxidx}, ${3:paramidx})$0",
	"description": "Returns false if track/fxidx is not ReaEQ.\nBandtype: -1=master gain, 0=hipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass, 6=bandpass, 7=parallel bandpass.\nBandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.\nParamtype (ignored for master gain): 0=freq, 1=gain, 2=Q.\nSee TrackFX_GetEQ, TrackFX_SetEQParam, TrackFX_GetEQBandEnabled, TrackFX_SetEQBandEnabled.\n\n"
	},

	"TrackFX_GetFloatingWindow lua": {
	"prefix": "reaper.TrackFX_GetFloatingWindow",
	"scope": "lua",
	"body": "reaper.TrackFX_GetFloatingWindow(${1:track}, ${2:index})$0",
	"description": "returns HWND of floating window for effect index, if any\n\n"
	},

	"TrackFX_GetFormattedParamValue lua": {
	"prefix": "reaper.TrackFX_GetFormattedParamValue",
	"scope": "lua",
	"body": "retval, buf = reaper.TrackFX_GetFormattedParamValue(${1:track}, ${2:fx}, ${3:param})$0",
	"description": ""
	},

	"TrackFX_GetFXGUID lua": {
	"prefix": "reaper.TrackFX_GetFXGUID",
	"scope": "lua",
	"body": "GUID = reaper.TrackFX_GetFXGUID(${1:track}, ${2:fx})$0",
	"description": ""
	},

	"TrackFX_GetFXName lua": {
	"prefix": "reaper.TrackFX_GetFXName",
	"scope": "lua",
	"body": "retval, buf = reaper.TrackFX_GetFXName(${1:track}, ${2:fx})$0",
	"description": ""
	},

	"TrackFX_GetInstrument lua": {
	"prefix": "reaper.TrackFX_GetInstrument",
	"scope": "lua",
	"body": "reaper.TrackFX_GetInstrument(${1:track})$0",
	"description": "Get the index of the first track FX insert that is a virtual instrument, or -1 if none. See TrackFX_GetEQ, TrackFX_GetByName.\n\n"
	},

	"TrackFX_GetIOSize lua": {
	"prefix": "reaper.TrackFX_GetIOSize",
	"scope": "lua",
	"body": "retval, inputPins, outputPins = reaper.TrackFX_GetIOSize(${1:track}, ${2:fx})$0",
	"description": "Gets the number of input/output pins for FX if available, returns plug-in type or -1 on error\n\n"
	},

	"TrackFX_GetNamedConfigParm lua": {
	"prefix": "reaper.TrackFX_GetNamedConfigParm",
	"scope": "lua",
	"body": "retval, buf = reaper.TrackFX_GetNamedConfigParm(${1:track}, ${2:fx}, ${3:parmname})$0",
	"description": "gets plug-in specific named configuration value (returns true on success). \nSupported values for read:\npdc : PDC latency\nin_pin_X : name of input pin X\nout_pin_X : name of output pin X\nfx_type : type string\nfx_ident : type-specific identifier\nfx_name : pre-aliased name\nGainReduction_dB : [ReaComp + other supported compressors]\nvst_chunk[_program] : base64-encoded VST-specific chunk.\nclap_chunk : base64-encoded CLAP-specific chunk.\nparam.X.lfo.[active,dir,phase,speed,strength,temposync,free,shape] : parameter moduation LFO state\nparam.X.acs.[active,dir,strength,attack,release,dblo,dbhi,chan,stereo,x2,y2] : parameter modulation ACS state\nparam.X.plink.[active,scale,offset,effect,param,midi_bus,midi_chan,midi_msg,midi_msg2] : parameter link/MIDI link: set effect=-100 to support midi_*\nparam.X.mod.[active,baseline,visible] : parameter module global settings\nparam.X.learn.[midi1,midi2,osc] : first two bytes of MIDI message, or OSC string if set\nparam.X.learn.mode : absolution/relative mode flag (0: Absolute, 1: 127=-1,1=+1, 2: 63=-1, 65=+1, 3: 65=-1, 1=+1, 4: toggle if nonzero)\nparam.X.learn.flags : &1=selected track only, &2=soft takeover, &4=focused FX only, &8=LFO retrigger, &16=visible FX only\nBANDTYPEx, BANDENABLEDx : band configuration [ReaEQ]\nTHRESHOLD, CEILING, TRUEPEAK : [ReaLimit]\nNUMCHANNELS, NUMSPEAKERS, RESETCHANNELS : [ReaSurroundPan]\nITEMx : [ReaVerb] state configuration line, when writing should be followed by a write of DONE\nFILE, FILEx, -FILEx, +FILEx, -FILE* : [RS5k] file list, -/+ prefixes are write-only, when writing any, should be followed by a write of DONE\nMODE, RSMODE : [RS5k] general mode, resample mode\nVIDEO_CODE : [video processor] code\nforce_auto_bypass : 0 or 1 - force auto-bypass plug-in on silence\ninstance_oversample_shift : instance oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect\nchain_oversample_shift : chain oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect\nchain_pdc_mode : chain PDC mode (0=classic, 1=new-default, 2=ignore PDC, 3=hwcomp-master)\n"
	},

	"TrackFX_GetNumParams lua": {
	"prefix": "reaper.TrackFX_GetNumParams",
	"scope": "lua",
	"body": "reaper.TrackFX_GetNumParams(${1:track}, ${2:fx})$0",
	"description": ""
	},

	"TrackFX_GetOffline lua": {
	"prefix": "reaper.TrackFX_GetOffline",
	"scope": "lua",
	"body": "reaper.TrackFX_GetOffline(${1:track}, ${2:fx})$0",
	"description": "See TrackFX_SetOffline\n\n"
	},

	"TrackFX_GetOpen lua": {
	"prefix": "reaper.TrackFX_GetOpen",
	"scope": "lua",
	"body": "reaper.TrackFX_GetOpen(${1:track}, ${2:fx})$0",
	"description": "Returns true if this FX UI is open in the FX chain window or a floating window. See TrackFX_SetOpen\n\n"
	},

	"TrackFX_GetParam lua": {
	"prefix": "reaper.TrackFX_GetParam",
	"scope": "lua",
	"body": "retval, minval, maxval = reaper.TrackFX_GetParam(${1:track}, ${2:fx}, ${3:param})$0",
	"description": ""
	},

	"TrackFX_GetParameterStepSizes lua": {
	"prefix": "reaper.TrackFX_GetParameterStepSizes",
	"scope": "lua",
	"body": "retval, step, smallstep, largestep, istoggle = reaper.TrackFX_GetParameterStepSizes(${1:track}, ${2:fx}, ${3:param})$0",
	"description": ""
	},

	"TrackFX_GetParamEx lua": {
	"prefix": "reaper.TrackFX_GetParamEx",
	"scope": "lua",
	"body": "retval, minval, maxval, midval = reaper.TrackFX_GetParamEx(${1:track}, ${2:fx}, ${3:param})$0",
	"description": ""
	},

	"TrackFX_GetParamFromIdent lua": {
	"prefix": "reaper.TrackFX_GetParamFromIdent",
	"scope": "lua",
	"body": "reaper.TrackFX_GetParamFromIdent(${1:track}, ${2:fx}, ${3:ident_str})$0",
	"description": "gets the parameter index from an identifying string (:wet, :bypass, :delta, or a string returned from GetParamIdent), or -1 if unknown.\n\n"
	},

	"TrackFX_GetParamIdent lua": {
	"prefix": "reaper.TrackFX_GetParamIdent",
	"scope": "lua",
	"body": "retval, buf = reaper.TrackFX_GetParamIdent(${1:track}, ${2:fx}, ${3:param})$0",
	"description": "gets an identifying string for the parameter\n\n"
	},

	"TrackFX_GetParamName lua": {
	"prefix": "reaper.TrackFX_GetParamName",
	"scope": "lua",
	"body": "retval, buf = reaper.TrackFX_GetParamName(${1:track}, ${2:fx}, ${3:param})$0",
	"description": ""
	},

	"TrackFX_GetParamNormalized lua": {
	"prefix": "reaper.TrackFX_GetParamNormalized",
	"scope": "lua",
	"body": "reaper.TrackFX_GetParamNormalized(${1:track}, ${2:fx}, ${3:param})$0",
	"description": ""
	},

	"TrackFX_GetPinMappings lua": {
	"prefix": "reaper.TrackFX_GetPinMappings",
	"scope": "lua",
	"body": "retval, high32 = reaper.TrackFX_GetPinMappings(${1:tr}, ${2:fx}, ${3:isoutput}, ${4:pin})$0",
	"description": "gets the effective channel mapping bitmask for a particular pin. high32Out will be set to the high 32 bits\n\n"
	},

	"TrackFX_GetPreset lua": {
	"prefix": "reaper.TrackFX_GetPreset",
	"scope": "lua",
	"body": "retval, presetname = reaper.TrackFX_GetPreset(${1:track}, ${2:fx})$0",
	"description": "Get the name of the preset currently showing in the REAPER dropdown, or the full path to a factory preset file for VST3 plug-ins (.vstpreset). Returns false if the current FX parameters do not exactly match the preset (in other words, if the user loaded the preset but moved the knobs afterward). See TrackFX_SetPreset.\n\n"
	},

	"TrackFX_GetPresetIndex lua": {
	"prefix": "reaper.TrackFX_GetPresetIndex",
	"scope": "lua",
	"body": "retval, numberOfPresets = reaper.TrackFX_GetPresetIndex(${1:track}, ${2:fx})$0",
	"description": "Returns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See TrackFX_SetPresetByIndex\n\n"
	},

	"TrackFX_GetRecChainVisible lua": {
	"prefix": "reaper.TrackFX_GetRecChainVisible",
	"scope": "lua",
	"body": "reaper.TrackFX_GetRecChainVisible(${1:track})$0",
	"description": "returns index of effect visible in record input chain, or -1 for chain hidden, or -2 for chain visible but no effect selected\n\n"
	},

	"TrackFX_GetRecCount lua": {
	"prefix": "reaper.TrackFX_GetRecCount",
	"scope": "lua",
	"body": "reaper.TrackFX_GetRecCount(${1:track})$0",
	"description": "returns count of record input FX. To access record input FX, use a FX indices [0x1000000..0x1000000+n). On the master track, this accesses monitoring FX rather than record input FX.\n\n"
	},

	"TrackFX_GetUserPresetFilename lua": {
	"prefix": "reaper.TrackFX_GetUserPresetFilename",
	"scope": "lua",
	"body": "fn = reaper.TrackFX_GetUserPresetFilename(${1:track}, ${2:fx})$0",
	"description": ""
	},

	"TrackFX_NavigatePresets lua": {
	"prefix": "reaper.TrackFX_NavigatePresets",
	"scope": "lua",
	"body": "reaper.TrackFX_NavigatePresets(${1:track}, ${2:fx}, ${3:presetmove})$0",
	"description": "presetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc.\n\n"
	},

	"TrackFX_SetEnabled lua": {
	"prefix": "reaper.TrackFX_SetEnabled",
	"scope": "lua",
	"body": "reaper.TrackFX_SetEnabled(${1:track}, ${2:fx}, ${3:enabled})$0",
	"description": "See TrackFX_GetEnabled\n\n"
	},

	"TrackFX_SetEQBandEnabled lua": {
	"prefix": "reaper.TrackFX_SetEQBandEnabled",
	"scope": "lua",
	"body": "reaper.TrackFX_SetEQBandEnabled(${1:track}, ${2:fxidx}, ${3:bandtype}, ${4:bandidx}, ${5:enable})$0",
	"description": "Enable or disable a ReaEQ band.\nReturns false if track/fxidx is not ReaEQ.\nBandtype: -1=master gain, 0=hipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass, 6=bandpass, 7=parallel bandpass.\nBandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.\nSee TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_SetEQParam, TrackFX_GetEQBandEnabled.\n\n"
	},

	"TrackFX_SetEQParam lua": {
	"prefix": "reaper.TrackFX_SetEQParam",
	"scope": "lua",
	"body": "reaper.TrackFX_SetEQParam(${1:track}, ${2:fxidx}, ${3:bandtype}, ${4:bandidx}, ${5:paramtype}, ${6:val}, ${7:isnorm})$0",
	"description": "Returns false if track/fxidx is not ReaEQ. Targets a band matching bandtype.\nBandtype: -1=master gain, 0=hipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass, 6=bandpass, 7=parallel bandpass.\nBandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.\nParamtype (ignored for master gain): 0=freq, 1=gain, 2=Q.\nSee TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_GetEQBandEnabled, TrackFX_SetEQBandEnabled.\n\n"
	},

	"TrackFX_SetNamedConfigParm lua": {
	"prefix": "reaper.TrackFX_SetNamedConfigParm",
	"scope": "lua",
	"body": "reaper.TrackFX_SetNamedConfigParm(${1:track}, ${2:fx}, ${3:parmname}, ${4:value})$0",
	"description": "sets plug-in specific named configuration value (returns true on success).\nSupport values for write:\nvst_chunk[_program] : base64-encoded VST-specific chunk.\nclap_chunk : base64-encoded CLAP-specific chunk.\nparam.X.lfo.[active,dir,phase,speed,strength,temposync,free,shape] : parameter moduation LFO state\nparam.X.acs.[active,dir,strength,attack,release,dblo,dbhi,chan,stereo,x2,y2] : parameter modulation ACS state\nparam.X.plink.[active,scale,offset,effect,param,midi_bus,midi_chan,midi_msg,midi_msg2] : parameter link/MIDI link: set effect=-100 to support midi_*\nparam.X.mod.[active,baseline,visible] : parameter module global settings\nparam.X.learn.[midi1,midi2,osc] : first two bytes of MIDI message, or OSC string if set\nparam.X.learn.mode : absolution/relative mode flag (0: Absolute, 1: 127=-1,1=+1, 2: 63=-1, 65=+1, 3: 65=-1, 1=+1, 4: toggle if nonzero)\nparam.X.learn.flags : &1=selected track only, &2=soft takeover, &4=focused FX only, &8=LFO retrigger, &16=visible FX only\nBANDTYPEx, BANDENABLEDx : band configuration [ReaEQ]\nTHRESHOLD, CEILING, TRUEPEAK : [ReaLimit]\nNUMCHANNELS, NUMSPEAKERS, RESETCHANNELS : [ReaSurroundPan]\nITEMx : [ReaVerb] state configuration line, when writing should be followed by a write of DONE\nFILE, FILEx, -FILEx, +FILEx, -FILE* : [RS5k] file list, -/+ prefixes are write-only, when writing any, should be followed by a write of DONE\nMODE, RSMODE : [RS5k] general mode, resample mode\nVIDEO_CODE : [video processor] code\nforce_auto_bypass : 0 or 1 - force auto-bypass plug-in on silence\ninstance_oversample_shift : instance oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect\nchain_oversample_shift : chain oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect\nchain_pdc_mode : chain PDC mode (0=classic, 1=new-default, 2=ignore PDC, 3=hwcomp-master)\n"
	},

	"TrackFX_SetOffline lua": {
	"prefix": "reaper.TrackFX_SetOffline",
	"scope": "lua",
	"body": "reaper.TrackFX_SetOffline(${1:track}, ${2:fx}, ${3:offline})$0",
	"description": "See TrackFX_GetOffline\n\n"
	},

	"TrackFX_SetOpen lua": {
	"prefix": "reaper.TrackFX_SetOpen",
	"scope": "lua",
	"body": "reaper.TrackFX_SetOpen(${1:track}, ${2:fx}, ${3:open})$0",
	"description": "Open this FX UI. See TrackFX_GetOpen\n\n"
	},

	"TrackFX_SetParam lua": {
	"prefix": "reaper.TrackFX_SetParam",
	"scope": "lua",
	"body": "reaper.TrackFX_SetParam(${1:track}, ${2:fx}, ${3:param}, ${4:val})$0",
	"description": ""
	},

	"TrackFX_SetParamNormalized lua": {
	"prefix": "reaper.TrackFX_SetParamNormalized",
	"scope": "lua",
	"body": "reaper.TrackFX_SetParamNormalized(${1:track}, ${2:fx}, ${3:param}, ${4:value})$0",
	"description": ""
	},

	"TrackFX_SetPinMappings lua": {
	"prefix": "reaper.TrackFX_SetPinMappings",
	"scope": "lua",
	"body": "reaper.TrackFX_SetPinMappings(${1:tr}, ${2:fx}, ${3:isoutput}, ${4:pin}, ${5:low32bits}, ${6:hi32bits})$0",
	"description": "sets the channel mapping bitmask for a particular pin. returns false if unsupported (not all types of plug-ins support this capability)\n\n"
	},

	"TrackFX_SetPreset lua": {
	"prefix": "reaper.TrackFX_SetPreset",
	"scope": "lua",
	"body": "reaper.TrackFX_SetPreset(${1:track}, ${2:fx}, ${3:presetname})$0",
	"description": "Activate a preset with the name shown in the REAPER dropdown. Full paths to .vstpreset files are also supported for VST3 plug-ins. See TrackFX_GetPreset.\n\n"
	},

	"TrackFX_SetPresetByIndex lua": {
	"prefix": "reaper.TrackFX_SetPresetByIndex",
	"scope": "lua",
	"body": "reaper.TrackFX_SetPresetByIndex(${1:track}, ${2:fx}, ${3:idx})$0",
	"description": "Sets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See TrackFX_GetPresetIndex.\n\n"
	},

	"TrackFX_Show lua": {
	"prefix": "reaper.TrackFX_Show",
	"scope": "lua",
	"body": "reaper.TrackFX_Show(${1:track}, ${2:index}, ${3:showFlag})$0",
	"description": "showflag=0 for hidechain, =1 for show chain(index valid), =2 for hide floating window(index valid), =3 for show floating window (index valid)\n\n"
	},

	"TrackList_AdjustWindows lua": {
	"prefix": "reaper.TrackList_AdjustWindows",
	"scope": "lua",
	"body": "reaper.TrackList_AdjustWindows(${1:isMinor})$0",
	"description": ""
	},

	"TrackList_UpdateAllExternalSurfaces lua": {
	"prefix": "reaper.TrackList_UpdateAllExternalSurfaces",
	"scope": "lua",
	"body": "reaper.TrackList_UpdateAllExternalSurfaces()\n\n",
	"description": ""
	},

	"Undo_BeginBlock lua": {
	"prefix": "reaper.Undo_BeginBlock",
	"scope": "lua",
	"body": "reaper.Undo_BeginBlock()\n\n",
	"description": "call to start a new block\n\n"
	},

	"Undo_BeginBlock2 lua": {
	"prefix": "reaper.Undo_BeginBlock2",
	"scope": "lua",
	"body": "reaper.Undo_BeginBlock2(${1:proj})$0",
	"description": "call to start a new block\n\n"
	},

	"Undo_CanRedo2 lua": {
	"prefix": "reaper.Undo_CanRedo2",
	"scope": "lua",
	"body": "reaper.Undo_CanRedo2(${1:proj})$0",
	"description": "returns string of next action,if able,NULL if not\n\n"
	},

	"Undo_CanUndo2 lua": {
	"prefix": "reaper.Undo_CanUndo2",
	"scope": "lua",
	"body": "reaper.Undo_CanUndo2(${1:proj})$0",
	"description": "returns string of last action,if able,NULL if not\n\n"
	},

	"Undo_DoRedo2 lua": {
	"prefix": "reaper.Undo_DoRedo2",
	"scope": "lua",
	"body": "reaper.Undo_DoRedo2(${1:proj})$0",
	"description": "nonzero if success\n\n"
	},

	"Undo_DoUndo2 lua": {
	"prefix": "reaper.Undo_DoUndo2",
	"scope": "lua",
	"body": "reaper.Undo_DoUndo2(${1:proj})$0",
	"description": "nonzero if success\n\n"
	},

	"Undo_EndBlock lua": {
	"prefix": "reaper.Undo_EndBlock",
	"scope": "lua",
	"body": "reaper.Undo_EndBlock(${1:descchange}, ${2:extraflags})$0",
	"description": "call to end the block,with extra flags if any,and a description\n\n"
	},

	"Undo_EndBlock2 lua": {
	"prefix": "reaper.Undo_EndBlock2",
	"scope": "lua",
	"body": "reaper.Undo_EndBlock2(${1:proj}, ${2:descchange}, ${3:extraflags})$0",
	"description": "call to end the block,with extra flags if any,and a description\n\n"
	},

	"Undo_OnStateChange lua": {
	"prefix": "reaper.Undo_OnStateChange",
	"scope": "lua",
	"body": "reaper.Undo_OnStateChange(${1:descchange})$0",
	"description": "limited state change to items\n\n"
	},

	"Undo_OnStateChange2 lua": {
	"prefix": "reaper.Undo_OnStateChange2",
	"scope": "lua",
	"body": "reaper.Undo_OnStateChange2(${1:proj}, ${2:descchange})$0",
	"description": "limited state change to items\n\n"
	},

	"Undo_OnStateChange_Item lua": {
	"prefix": "reaper.Undo_OnStateChange_Item",
	"scope": "lua",
	"body": "reaper.Undo_OnStateChange_Item(${1:proj}, ${2:name}, ${3:item})$0",
	"description": ""
	},

	"Undo_OnStateChangeEx lua": {
	"prefix": "reaper.Undo_OnStateChangeEx",
	"scope": "lua",
	"body": "reaper.Undo_OnStateChangeEx(${1:descchange}, ${2:whichStates}, ${3:trackparm})$0",
	"description": "trackparm=-1 by default,or if updating one fx chain,you can specify track index\n\n"
	},

	"Undo_OnStateChangeEx2 lua": {
	"prefix": "reaper.Undo_OnStateChangeEx2",
	"scope": "lua",
	"body": "reaper.Undo_OnStateChangeEx2(${1:proj}, ${2:descchange}, ${3:whichStates}, ${4:trackparm})$0",
	"description": "trackparm=-1 by default,or if updating one fx chain,you can specify track index\n\n"
	},

	"UpdateArrange lua": {
	"prefix": "reaper.UpdateArrange",
	"scope": "lua",
	"body": "reaper.UpdateArrange()\n\n",
	"description": "Redraw the arrange view\n\n"
	},

	"UpdateItemInProject lua": {
	"prefix": "reaper.UpdateItemInProject",
	"scope": "lua",
	"body": "reaper.UpdateItemInProject(${1:item})$0",
	"description": ""
	},

	"UpdateTimeline lua": {
	"prefix": "reaper.UpdateTimeline",
	"scope": "lua",
	"body": "reaper.UpdateTimeline()\n\n",
	"description": "Redraw the arrange view and ruler\n\n"
	},

	"ValidatePtr lua": {
	"prefix": "reaper.ValidatePtr",
	"scope": "lua",
	"body": "reaper.ValidatePtr(${1:pointer}, ${2:ctypename})$0",
	"description": "see ValidatePtr2\n\n"
	},

	"ValidatePtr2 lua": {
	"prefix": "reaper.ValidatePtr2",
	"scope": "lua",
	"body": "reaper.ValidatePtr2(${1:proj}, ${2:pointer}, ${3:ctypename})$0",
	"description": "Return true if the pointer is a valid object of the right type in proj (proj is ignored if pointer is itself a project). Supported types are: ReaProject*, MediaTrack*, MediaItem*, MediaItem_Take*, TrackEnvelope* and PCM_source*.\n\n"
	},

	"ViewPrefs lua": {
	"prefix": "reaper.ViewPrefs",
	"scope": "lua",
	"body": "reaper.ViewPrefs(${1:page}, ${2:pageByName})$0",
	"description": "Opens the prefs to a page, use pageByName if page is 0.\n\n"
	},

	"BR_EnvAlloc lua": {
	"prefix": "reaper.BR_EnvAlloc",
	"scope": "lua",
	"body": "reaper.BR_EnvAlloc(${1:envelope}, ${2:takeEnvelopesUseProjectTime})$0",
	"description": "[BR] Allocate envelope object from track or take envelope pointer. Always call BR_EnvFree when done to release the object and commit changes if needed.\ntakeEnvelopesUseProjectTime: take envelope points' positions are counted from take position, not project start time. If you want to work with project time instead, pass this as true.\nFor further manipulation see BR_EnvCountPoints, BR_EnvDeletePoint, BR_EnvFind, BR_EnvFindNext, BR_EnvFindPrevious, BR_EnvGetParentTake, BR_EnvGetParentTrack, BR_EnvGetPoint, BR_EnvGetProperties, BR_EnvSetPoint, BR_EnvSetProperties, BR_EnvValueAtPos.\n\n"
	},

	"BR_EnvCountPoints lua": {
	"prefix": "reaper.BR_EnvCountPoints",
	"scope": "lua",
	"body": "reaper.BR_EnvCountPoints(${1:envelope})$0",
	"description": "[BR] Count envelope points in the envelope object allocated with BR_EnvAlloc.\n\n"
	},

	"BR_EnvDeletePoint lua": {
	"prefix": "reaper.BR_EnvDeletePoint",
	"scope": "lua",
	"body": "reaper.BR_EnvDeletePoint(${1:envelope}, ${2:id})$0",
	"description": "[BR] Delete envelope point by index (zero-based) in the envelope object allocated with BR_EnvAlloc. Returns true on success.\n\n"
	},

	"BR_EnvFind lua": {
	"prefix": "reaper.BR_EnvFind",
	"scope": "lua",
	"body": "reaper.BR_EnvFind(${1:envelope}, ${2:position}, ${3:delta})$0",
	"description": "[BR] Find envelope point at time position in the envelope object allocated with BR_EnvAlloc. Pass delta > 0 to search surrounding range - in that case the closest point to position within delta will be searched for. Returns envelope point id (zero-based) on success or -1 on failure.\n\n"
	},

	"BR_EnvFindNext lua": {
	"prefix": "reaper.BR_EnvFindNext",
	"scope": "lua",
	"body": "reaper.BR_EnvFindNext(${1:envelope}, ${2:position})$0",
	"description": "[BR] Find next envelope point after time position in the envelope object allocated with BR_EnvAlloc. Returns envelope point id (zero-based) on success or -1 on failure.\n\n"
	},

	"BR_EnvFindPrevious lua": {
	"prefix": "reaper.BR_EnvFindPrevious",
	"scope": "lua",
	"body": "reaper.BR_EnvFindPrevious(${1:envelope}, ${2:position})$0",
	"description": "[BR] Find previous envelope point before time position in the envelope object allocated with BR_EnvAlloc. Returns envelope point id (zero-based) on success or -1 on failure.\n\n"
	},

	"BR_EnvFree lua": {
	"prefix": "reaper.BR_EnvFree",
	"scope": "lua",
	"body": "reaper.BR_EnvFree(${1:envelope}, ${2:commit})$0",
	"description": "[BR] Free envelope object allocated with BR_EnvAlloc and commit changes if needed. Returns true if changes were committed successfully. Note that when envelope object wasn't modified nothing will get committed even if commit = true - in that case function returns false.\n\n"
	},

	"BR_EnvGetParentTake lua": {
	"prefix": "reaper.BR_EnvGetParentTake",
	"scope": "lua",
	"body": "reaper.BR_EnvGetParentTake(${1:envelope})$0",
	"description": "[BR] If envelope object allocated with BR_EnvAlloc is take envelope, returns parent media item take, otherwise NULL.\n\n"
	},

	"BR_EnvGetParentTrack lua": {
	"prefix": "reaper.BR_EnvGetParentTrack",
	"scope": "lua",
	"body": "reaper.BR_EnvGetParentTrack(${1:envelope})$0",
	"description": "[BR] Get parent track of envelope object allocated with BR_EnvAlloc. If take envelope, returns NULL.\n\n"
	},

	"BR_EnvGetPoint lua": {
	"prefix": "reaper.BR_EnvGetPoint",
	"scope": "lua",
	"body": "retval, position, value, shape, selected, bezier = reaper.BR_EnvGetPoint(${1:envelope}, ${2:id})$0",
	"description": "[BR] Get envelope point by id (zero-based) from the envelope object allocated with BR_EnvAlloc. Returns true on success.\n\n"
	},

	"BR_EnvGetProperties lua": {
	"prefix": "reaper.BR_EnvGetProperties",
	"scope": "lua",
	"body": "active, visible, armed, inLane, laneHeight, defaultShape, minValue, maxValue, centerValue, type, faderScaling, optional_automationItemsOptions = reaper.BR_EnvGetProperties(${1:envelope})$0",
	"description": "[BR] Get envelope properties for the envelope object allocated with BR_EnvAlloc.\nactive: true if envelope is active\nvisible: true if envelope is visible\narmed: true if envelope is armed\ninLane: true if envelope has it's own envelope lane\nlaneHeight: envelope lane override height. 0 for none, otherwise size in pixels\ndefaultShape: default point shape: 0->Linear, 1->Square, 2->Slow start/end, 3->Fast start, 4->Fast end, 5->Bezier\nminValue: minimum envelope value\nmaxValue: maximum envelope value\ntype: envelope type: 0->Volume, 1->Volume (Pre-FX), 2->Pan, 3->Pan (Pre-FX), 4->Width, 5->Width (Pre-FX), 6->Mute, 7->Pitch, 8->Playrate, 9->Tempo map, 10->Parameter\nfaderScaling: true if envelope uses fader scaling\nautomationItemsOptions: -1->project default, &1=0->don't attach to underl. env., &1->attach to underl. env. on right side,  &2->attach to underl. env. on both sides, &4: bypass underl. env.\n\n"
	},

	"BR_EnvSetPoint lua": {
	"prefix": "reaper.BR_EnvSetPoint",
	"scope": "lua",
	"body": "reaper.BR_EnvSetPoint(${1:envelope}, ${2:id}, ${3:position}, ${4:value}, ${5:shape}, ${6:selected}, ${7:bezier})$0",
	"description": "[BR] Set envelope point by id (zero-based) in the envelope object allocated with BR_EnvAlloc. To create point instead, pass id = -1. Note that if new point is inserted or existing point's time position is changed, points won't automatically get sorted. To do that, see BR_EnvSortPoints.\nReturns true on success.\n\n"
	},

	"BR_EnvSetProperties lua": {
	"prefix": "reaper.BR_EnvSetProperties",
	"scope": "lua",
	"body": "reaper.BR_EnvSetProperties(${1:envelope}, ${2:active}, ${3:visible}, ${4:armed}, ${5:inLane}, ${6:laneHeight}, ${7:defaultShape}, ${8:faderScaling}, ${9:optional_automationItemsOptionsIn})$0",
	"description": "[BR] Set envelope properties for the envelope object allocated with BR_EnvAlloc. For parameter description see BR_EnvGetProperties.\nSetting automationItemsOptions requires REAPER 5.979+.\n\n"
	},

	"BR_EnvSortPoints lua": {
	"prefix": "reaper.BR_EnvSortPoints",
	"scope": "lua",
	"body": "reaper.BR_EnvSortPoints(${1:envelope})$0",
	"description": "[BR] Sort envelope points by position. The only reason to call this is if sorted points are explicitly needed after editing them with BR_EnvSetPoint. Note that you do not have to call this before doing BR_EnvFree since it does handle unsorted points too.\n\n"
	},

	"BR_EnvValueAtPos lua": {
	"prefix": "reaper.BR_EnvValueAtPos",
	"scope": "lua",
	"body": "reaper.BR_EnvValueAtPos(${1:envelope}, ${2:position})$0",
	"description": "[BR] Get envelope value at time position for the envelope object allocated with BR_EnvAlloc.\n\n"
	},

	"BR_GetArrangeView lua": {
	"prefix": "reaper.BR_GetArrangeView",
	"scope": "lua",
	"body": "startTime, endTime = reaper.BR_GetArrangeView(${1:proj})$0",
	"description": "[BR] Deprecated, see GetSet_ArrangeView2 (REAPER v5.12pre4+) -- Get start and end time position of arrange view. To set arrange view instead, see BR_SetArrangeView.\n\n"
	},

	"BR_GetClosestGridDivision lua": {
	"prefix": "reaper.BR_GetClosestGridDivision",
	"scope": "lua",
	"body": "reaper.BR_GetClosestGridDivision(${1:position})$0",
	"description": "[BR] Get closest grid division to position. Note that this functions is different from SnapToGrid in two regards. SnapToGrid() needs snap enabled to work and this one works always. Secondly, grid divisions are different from grid lines because some grid lines may be hidden due to zoom level - this function ignores grid line visibility and always searches for the closest grid division at given position. For more grid division functions, see BR_GetNextGridDivision and BR_GetPrevGridDivision.\n\n"
	},

	"BR_GetCurrentTheme lua": {
	"prefix": "reaper.BR_GetCurrentTheme",
	"scope": "lua",
	"body": "themePath, themeName = reaper.BR_GetCurrentTheme()\n\n",
	"description": "[BR] Get current theme information. themePathOut is set to full theme path and themeNameOut is set to theme name excluding any path info and extension\n\n"
	},

	"BR_GetMediaItemByGUID lua": {
	"prefix": "reaper.BR_GetMediaItemByGUID",
	"scope": "lua",
	"body": "reaper.BR_GetMediaItemByGUID(${1:proj}, ${2:guidStringIn})$0",
	"description": "[BR] Get media item from GUID string. Note that the GUID must be enclosed in braces {}. To get item's GUID as a string, see BR_GetMediaItemGUID.\n\n"
	},

	"BR_GetMediaItemGUID lua": {
	"prefix": "reaper.BR_GetMediaItemGUID",
	"scope": "lua",
	"body": "guidString = reaper.BR_GetMediaItemGUID(${1:item})$0",
	"description": "[BR] Get media item GUID as a string (guidStringOut_sz should be at least 64). To get media item back from GUID string, see BR_GetMediaItemByGUID.\n\n"
	},

	"BR_GetMediaItemImageResource lua": {
	"prefix": "reaper.BR_GetMediaItemImageResource",
	"scope": "lua",
	"body": "retval, image, imageFlags = reaper.BR_GetMediaItemImageResource(${1:item})$0",
	"description": "[BR] Get currently loaded image resource and its flags for a given item. Returns false if there is no image resource set. To set image resource, see BR_SetMediaItemImageResource.\n\n"
	},

	"BR_GetMediaItemTakeGUID lua": {
	"prefix": "reaper.BR_GetMediaItemTakeGUID",
	"scope": "lua",
	"body": "guidString = reaper.BR_GetMediaItemTakeGUID(${1:take})$0",
	"description": "[BR] Get media item take GUID as a string (guidStringOut_sz should be at least 64). To get take from GUID string, see SNM_GetMediaItemTakeByGUID.\n\n"
	},

	"BR_GetMediaSourceProperties lua": {
	"prefix": "reaper.BR_GetMediaSourceProperties",
	"scope": "lua",
	"body": "retval, section, start, length, fade, reverse = reaper.BR_GetMediaSourceProperties(${1:take})$0",
	"description": "[BR] Get take media source properties as they appear in Item properties. Returns false if take can't have them (MIDI items etc.).\nTo set source properties, see BR_SetMediaSourceProperties.\n\n"
	},

	"BR_GetMediaTrackByGUID lua": {
	"prefix": "reaper.BR_GetMediaTrackByGUID",
	"scope": "lua",
	"body": "reaper.BR_GetMediaTrackByGUID(${1:proj}, ${2:guidStringIn})$0",
	"description": "[BR] Get media track from GUID string. Note that the GUID must be enclosed in braces {}. To get track's GUID as a string, see GetSetMediaTrackInfo_String.\n\n"
	},

	"BR_GetMediaTrackFreezeCount lua": {
	"prefix": "reaper.BR_GetMediaTrackFreezeCount",
	"scope": "lua",
	"body": "reaper.BR_GetMediaTrackFreezeCount(${1:track})$0",
	"description": "[BR] Get media track freeze count (if track isn't frozen at all, returns 0).\n\n"
	},

	"BR_GetMediaTrackGUID lua": {
	"prefix": "reaper.BR_GetMediaTrackGUID",
	"scope": "lua",
	"body": "guidString = reaper.BR_GetMediaTrackGUID(${1:track})$0",
	"description": "[BR] Deprecated, see GetSetMediaTrackInfo_String (v5.95+). Get media track GUID as a string (guidStringOut_sz should be at least 64). To get media track back from GUID string, see BR_GetMediaTrackByGUID.\n\n"
	},

	"BR_GetMediaTrackLayouts lua": {
	"prefix": "reaper.BR_GetMediaTrackLayouts",
	"scope": "lua",
	"body": "mcpLayoutName, tcpLayoutName = reaper.BR_GetMediaTrackLayouts(${1:track})$0",
	"description": "[BR] Deprecated, see GetSetMediaTrackInfo (REAPER v5.02+). Get media track layouts for MCP and TCP. Empty string ('') means that layout is set to the default layout. To set media track layouts, see BR_SetMediaTrackLayouts.\n\n"
	},

	"BR_GetMediaTrackSendInfo_Envelope lua": {
	"prefix": "reaper.BR_GetMediaTrackSendInfo_Envelope",
	"scope": "lua",
	"body": "reaper.BR_GetMediaTrackSendInfo_Envelope(${1:track}, ${2:category}, ${3:sendidx}, ${4:envelopeType})$0",
	"description": "[BR] Get track envelope for send/receive/hardware output.\ncategory is <0 for receives, 0=sends, >0 for hardware outputs\nsendidx is zero-based (see GetTrackNumSends to count track sends/receives/hardware outputs)\nenvelopeType determines which envelope is returned (0=volume, 1=pan, 2=mute)\nNote: To get or set other send attributes, see BR_GetSetTrackSendInfo and BR_GetMediaTrackSendInfo_Track.\n\n"
	},

	"BR_GetMediaTrackSendInfo_Track lua": {
	"prefix": "reaper.BR_GetMediaTrackSendInfo_Track",
	"scope": "lua",
	"body": "reaper.BR_GetMediaTrackSendInfo_Track(${1:track}, ${2:category}, ${3:sendidx}, ${4:trackType})$0",
	"description": "[BR] Get source or destination media track for send/receive.\ncategory is <0 for receives, 0=sends\nsendidx is zero-based (see GetTrackNumSends to count track sends/receives)\ntrackType determines which track is returned (0=source track, 1=destination track)\nNote: To get or set other send attributes, see BR_GetSetTrackSendInfo and BR_GetMediaTrackSendInfo_Envelope.\n\n"
	},

	"BR_GetMidiSourceLenPPQ lua": {
	"prefix": "reaper.BR_GetMidiSourceLenPPQ",
	"scope": "lua",
	"body": "reaper.BR_GetMidiSourceLenPPQ(${1:take})$0",
	"description": "[BR] Get MIDI take source length in PPQ. In case the take isn't MIDI, return value will be -1.\n\n"
	},

	"BR_GetMidiTakePoolGUID lua": {
	"prefix": "reaper.BR_GetMidiTakePoolGUID",
	"scope": "lua",
	"body": "retval, guidString = reaper.BR_GetMidiTakePoolGUID(${1:take})$0",
	"description": "[BR] Get MIDI take pool GUID as a string (guidStringOut_sz should be at least 64). Returns true if take is pooled.\n\n"
	},

	"BR_GetMidiTakeTempoInfo lua": {
	"prefix": "reaper.BR_GetMidiTakeTempoInfo",
	"scope": "lua",
	"body": "retval, ignoreProjTempo, bpm, num, den = reaper.BR_GetMidiTakeTempoInfo(${1:take})$0",
	"description": "[BR] Get 'ignore project tempo' information for MIDI take. Returns true if take can ignore project tempo (no matter if it's actually ignored), otherwise false.\n\n"
	},

	"BR_GetMouseCursorContext lua": {
	"prefix": "reaper.BR_GetMouseCursorContext",
	"scope": "lua",
	"body": "window, segment, details = reaper.BR_GetMouseCursorContext()\n\n",
	"description": "[BR] Get mouse cursor context. Each parameter returns information in a form of string as specified in the table below.\nTo get more info on stuff that was found under mouse cursor see BR_GetMouseCursorContext_Envelope, BR_GetMouseCursorContext_Item, BR_GetMouseCursorContext_MIDI, BR_GetMouseCursorContext_Position, BR_GetMouseCursorContext_Take, BR_GetMouseCursorContext_Track \n"
	},

	"BR_GetMouseCursorContext_Envelope lua": {
	"prefix": "reaper.BR_GetMouseCursorContext_Envelope",
	"scope": "lua",
	"body": "retval, takeEnvelope = reaper.BR_GetMouseCursorContext_Envelope()\n\n",
	"description": "[BR] Returns envelope that was captured with the last call to BR_GetMouseCursorContext. In case the envelope belongs to take, takeEnvelope will be true.\n\n"
	},

	"BR_GetMouseCursorContext_Item lua": {
	"prefix": "reaper.BR_GetMouseCursorContext_Item",
	"scope": "lua",
	"body": "reaper.BR_GetMouseCursorContext_Item()\n\n",
	"description": "[BR] Returns item under mouse cursor that was captured with the last call to BR_GetMouseCursorContext. Note that the function will return item even if mouse cursor is over some other track lane element like stretch marker or envelope. This enables for easier identification of items when you want to ignore elements within the item.\n\n"
	},

	"BR_GetMouseCursorContext_MIDI lua": {
	"prefix": "reaper.BR_GetMouseCursorContext_MIDI",
	"scope": "lua",
	"body": "retval, inlineEditor, noteRow, ccLane, ccLaneVal, ccLaneId = reaper.BR_GetMouseCursorContext_MIDI()\n\n",
	"description": "[BR] Returns midi editor under mouse cursor that was captured with the last call to BR_GetMouseCursorContext.\ninlineEditor: if mouse was captured in inline MIDI editor, this will be true (consequentially, returned MIDI editor will be NULL)\nnoteRow: note row or piano key under mouse cursor (0-127)\nccLane: CC lane under mouse cursor (CC0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207=off velocity, 0x208=notation events)\nccLaneVal: value in CC lane under mouse cursor (0-127 or 0-16383)\nccLaneId: lane position, counting from the top (0 based)\nNote: due to API limitations, if mouse is over inline MIDI editor with some note rows hidden, noteRow will be -1\n\n"
	},

	"BR_GetMouseCursorContext_Position lua": {
	"prefix": "reaper.BR_GetMouseCursorContext_Position",
	"scope": "lua",
	"body": "reaper.BR_GetMouseCursorContext_Position()\n\n",
	"description": "[BR] Returns project time position in arrange/ruler/midi editor that was captured with the last call to BR_GetMouseCursorContext.\n\n"
	},

	"BR_GetMouseCursorContext_StretchMarker lua": {
	"prefix": "reaper.BR_GetMouseCursorContext_StretchMarker",
	"scope": "lua",
	"body": "reaper.BR_GetMouseCursorContext_StretchMarker()\n\n",
	"description": "[BR] Returns id of a stretch marker under mouse cursor that was captured with the last call to BR_GetMouseCursorContext.\n\n"
	},

	"BR_GetMouseCursorContext_Take lua": {
	"prefix": "reaper.BR_GetMouseCursorContext_Take",
	"scope": "lua",
	"body": "reaper.BR_GetMouseCursorContext_Take()\n\n",
	"description": "[BR] Returns take under mouse cursor that was captured with the last call to BR_GetMouseCursorContext.\n\n"
	},

	"BR_GetMouseCursorContext_Track lua": {
	"prefix": "reaper.BR_GetMouseCursorContext_Track",
	"scope": "lua",
	"body": "reaper.BR_GetMouseCursorContext_Track()\n\n",
	"description": "[BR] Returns track under mouse cursor that was captured with the last call to BR_GetMouseCursorContext.\n\n"
	},

	"BR_GetNextGridDivision lua": {
	"prefix": "reaper.BR_GetNextGridDivision",
	"scope": "lua",
	"body": "reaper.BR_GetNextGridDivision(${1:position})$0",
	"description": "[BR] Get next grid division after the time position. For more grid divisions function, see BR_GetClosestGridDivision and BR_GetPrevGridDivision.\n\n"
	},

	"BR_GetPrevGridDivision lua": {
	"prefix": "reaper.BR_GetPrevGridDivision",
	"scope": "lua",
	"body": "reaper.BR_GetPrevGridDivision(${1:position})$0",
	"description": "[BR] Get previous grid division before the time position. For more grid division functions, see BR_GetClosestGridDivision and BR_GetNextGridDivision.\n\n"
	},

	"BR_GetSetTrackSendInfo lua": {
	"prefix": "reaper.BR_GetSetTrackSendInfo",
	"scope": "lua",
	"body": "reaper.BR_GetSetTrackSendInfo(${1:track}, ${2:category}, ${3:sendidx}, ${4:parmname}, ${5:setNewValue}, ${6:newValue})$0",
	"description": "[BR] Get or set send attributes.\ncategory is <0 for receives, 0=sends, >0 for hardware outputs\nsendidx is zero-based (see GetTrackNumSends to count track sends/receives/hardware outputs)\nTo set attribute, pass setNewValue as true\nList of possible parameters:\nB_MUTE : send mute state (1.0 if muted, otherwise 0.0)\nB_PHASE : send phase state (1.0 if phase is inverted, otherwise 0.0)\nB_MONO : send mono state (1.0 if send is set to mono, otherwise 0.0)\nD_VOL : send volume (1.0=+0dB etc...)\nD_PAN : send pan (-1.0=100%L, 0=center, 1.0=100%R)\nD_PANLAW : send pan law (1.0=+0.0db, 0.5=-6dB, -1.0=project default etc...)\nI_SENDMODE : send mode (0=post-fader, 1=pre-fx, 2=post-fx(deprecated), 3=post-fx)\nI_SRCCHAN : audio source starting channel index or -1 if audio send is disabled (&1024=mono...note that in that case, when reading index, you should do (index XOR 1024) to get starting channel index)\nI_DSTCHAN : audio destination starting channel index (&1024=mono (and in case of hardware output &512=rearoute)...note that in that case, when reading index, you should do (index XOR (1024 OR 512)) to get starting channel index)\nI_MIDI_SRCCHAN : source MIDI channel, -1 if MIDI send is disabled (0=all, 1-16)\nI_MIDI_DSTCHAN : destination MIDI channel, -1 if MIDI send is disabled (0=original, 1-16)\nI_MIDI_SRCBUS : source MIDI bus, -1 if MIDI send is disabled (0=all, otherwise bus index)\nI_MIDI_DSTBUS : receive MIDI bus, -1 if MIDI send is disabled (0=all, otherwise bus index)\nI_MIDI_LINK_VOLPAN : link volume/pan controls to MIDI\nNote: To get or set other send attributes, see BR_GetMediaTrackSendInfo_Envelope and BR_GetMediaTrackSendInfo_Track.\n\n"
	},

	"BR_GetTakeFXCount lua": {
	"prefix": "reaper.BR_GetTakeFXCount",
	"scope": "lua",
	"body": "reaper.BR_GetTakeFXCount(${1:take})$0",
	"description": "[BR] Returns FX count for supplied take\n\n"
	},

	"BR_IsMidiOpenInInlineEditor lua": {
	"prefix": "reaper.BR_IsMidiOpenInInlineEditor",
	"scope": "lua",
	"body": "reaper.BR_IsMidiOpenInInlineEditor(${1:take})$0",
	"description": "[SWS] Check if take has MIDI inline editor open and returns true or false.\n\n"
	},

	"BR_IsTakeMidi lua": {
	"prefix": "reaper.BR_IsTakeMidi",
	"scope": "lua",
	"body": "retval, inProjectMidi = reaper.BR_IsTakeMidi(${1:take})$0",
	"description": "[BR] Check if take is MIDI take, in case MIDI take is in-project MIDI source data, inProjectMidiOut will be true, otherwise false.\n\n"
	},

	"BR_ItemAtMouseCursor lua": {
	"prefix": "reaper.BR_ItemAtMouseCursor",
	"scope": "lua",
	"body": "retval, position = reaper.BR_ItemAtMouseCursor()\n\n",
	"description": "[BR] Get media item under mouse cursor. Position is mouse cursor position in arrange.\n\n"
	},

	"BR_MIDI_CCLaneRemove lua": {
	"prefix": "reaper.BR_MIDI_CCLaneRemove",
	"scope": "lua",
	"body": "reaper.BR_MIDI_CCLaneRemove(${1:midiEditor}, ${2:laneId})$0",
	"description": "[BR] Remove CC lane in midi editor. Top visible CC lane is laneId 0. Returns true on success\n\n"
	},

	"BR_MIDI_CCLaneReplace lua": {
	"prefix": "reaper.BR_MIDI_CCLaneReplace",
	"scope": "lua",
	"body": "reaper.BR_MIDI_CCLaneReplace(${1:midiEditor}, ${2:laneId}, ${3:newCC})$0",
	"description": "[BR] Replace CC lane in midi editor. Top visible CC lane is laneId 0. Returns true on success.\nValid CC lanes: CC0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207\n\n"
	},

	"BR_PositionAtMouseCursor lua": {
	"prefix": "reaper.BR_PositionAtMouseCursor",
	"scope": "lua",
	"body": "reaper.BR_PositionAtMouseCursor(${1:checkRuler})$0",
	"description": "[BR] Get position at mouse cursor. To check ruler along with arrange, pass checkRuler=true. Returns -1 if cursor is not over arrange/ruler.\n\n"
	},

	"BR_SetArrangeView lua": {
	"prefix": "reaper.BR_SetArrangeView",
	"scope": "lua",
	"body": "reaper.BR_SetArrangeView(${1:proj}, ${2:startTime}, ${3:endTime})$0",
	"description": "[BR] Deprecated, see GetSet_ArrangeView2 (REAPER v5.12pre4+) -- Set start and end time position of arrange view. To get arrange view instead, see BR_GetArrangeView.\n\n"
	},

	"BR_SetItemEdges lua": {
	"prefix": "reaper.BR_SetItemEdges",
	"scope": "lua",
	"body": "reaper.BR_SetItemEdges(${1:item}, ${2:startTime}, ${3:endTime})$0",
	"description": "[BR] Set item start and end edges' position - returns true in case of any changes\n\n"
	},

	"BR_SetMediaItemImageResource lua": {
	"prefix": "reaper.BR_SetMediaItemImageResource",
	"scope": "lua",
	"body": "reaper.BR_SetMediaItemImageResource(${1:item}, ${2:imageIn}, ${3:imageFlags})$0",
	"description": "[BR] Set image resource and its flags for a given item. To clear current image resource, pass imageIn as ''.\nimageFlags: &1=0: don't display image, &1: center / tile, &3: stretch, &5: full height (REAPER 5.974+).\nCan also be used to display existing text in empty items unstretched (pass imageIn = '', imageFlags = 0) or stretched (pass imageIn = ''. imageFlags = 3).\nTo get image resource, see BR_GetMediaItemImageResource.\n\n"
	},

	"BR_SetMediaSourceProperties lua": {
	"prefix": "reaper.BR_SetMediaSourceProperties",
	"scope": "lua",
	"body": "reaper.BR_SetMediaSourceProperties(${1:take}, ${2:section}, ${3:start}, ${4:length}, ${5:fade}, ${6:reverse})$0",
	"description": "[BR] Set take media source properties. Returns false if take can't have them (MIDI items etc.). Section parameters have to be valid only when passing section=true.\nTo get source properties, see BR_GetMediaSourceProperties.\n\n"
	},

	"BR_SetMediaTrackLayouts lua": {
	"prefix": "reaper.BR_SetMediaTrackLayouts",
	"scope": "lua",
	"body": "reaper.BR_SetMediaTrackLayouts(${1:track}, ${2:mcpLayoutNameIn}, ${3:tcpLayoutNameIn})$0",
	"description": "[BR] Deprecated, see GetSetMediaTrackInfo (REAPER v5.02+). Set media track layouts for MCP and TCP. To set default layout, pass empty string ('') as layout name. In case layouts were successfully set, returns true (if layouts are already set to supplied layout names, it will return false since no changes were made).\nTo get media track layouts, see BR_GetMediaTrackLayouts.\n\n"
	},

	"BR_SetMidiTakeTempoInfo lua": {
	"prefix": "reaper.BR_SetMidiTakeTempoInfo",
	"scope": "lua",
	"body": "reaper.BR_SetMidiTakeTempoInfo(${1:take}, ${2:ignoreProjTempo}, ${3:bpm}, ${4:num}, ${5:den})$0",
	"description": "[BR] Set 'ignore project tempo' information for MIDI take. Returns true in case the take was successfully updated.\n\n"
	},

	"BR_SetTakeSourceFromFile lua": {
	"prefix": "reaper.BR_SetTakeSourceFromFile",
	"scope": "lua",
	"body": "reaper.BR_SetTakeSourceFromFile(${1:take}, ${2:filenameIn}, ${3:inProjectData})$0",
	"description": "[BR] Set new take source from file. To import MIDI file as in-project source data pass inProjectData=true. Returns false if failed.\nAny take source properties from the previous source will be lost - to preserve them, see BR_SetTakeSourceFromFile2.\nNote: To set source from existing take, see SNM_GetSetSourceState2.\n\n"
	},

	"BR_SetTakeSourceFromFile2 lua": {
	"prefix": "reaper.BR_SetTakeSourceFromFile2",
	"scope": "lua",
	"body": "reaper.BR_SetTakeSourceFromFile2(${1:take}, ${2:filenameIn}, ${3:inProjectData}, ${4:keepSourceProperties})$0",
	"description": "[BR] Differs from BR_SetTakeSourceFromFile only that it can also preserve existing take media source properties.\n\n"
	},

	"BR_TakeAtMouseCursor lua": {
	"prefix": "reaper.BR_TakeAtMouseCursor",
	"scope": "lua",
	"body": "retval, position = reaper.BR_TakeAtMouseCursor()\n\n",
	"description": "[BR] Get take under mouse cursor. Position is mouse cursor position in arrange.\n\n"
	},

	"BR_TrackAtMouseCursor lua": {
	"prefix": "reaper.BR_TrackAtMouseCursor",
	"scope": "lua",
	"body": "retval, context, position = reaper.BR_TrackAtMouseCursor()\n\n",
	"description": "[BR] Get track under mouse cursor.\nContext signifies where the track was found: 0 = TCP, 1 = MCP, 2 = Arrange.\nPosition will hold mouse cursor position in arrange if applicable.\n\n"
	},

	"BR_TrackFX_GetFXModuleName lua": {
	"prefix": "reaper.BR_TrackFX_GetFXModuleName",
	"scope": "lua",
	"body": "retval, name = reaper.BR_TrackFX_GetFXModuleName(${1:track}, ${2:fx})$0",
	"description": "[BR] Deprecated, see TrackFX_GetNamedConfigParm/'fx_ident' (v6.37+). Get the exact name (like effect.dll, effect.vst3, etc...) of an FX.\n\n"
	},

	"BR_Win32_CB_FindString lua": {
	"prefix": "reaper.BR_Win32_CB_FindString",
	"scope": "lua",
	"body": "reaper.BR_Win32_CB_FindString(${1:comboBoxHwnd}, ${2:startId}, ${3:string})$0",
	"description": "[BR] Equivalent to win32 API ComboBox_FindString().\n\n"
	},

	"BR_Win32_CB_FindStringExact lua": {
	"prefix": "reaper.BR_Win32_CB_FindStringExact",
	"scope": "lua",
	"body": "reaper.BR_Win32_CB_FindStringExact(${1:comboBoxHwnd}, ${2:startId}, ${3:string})$0",
	"description": "[BR] Equivalent to win32 API ComboBox_FindStringExact().\n\n"
	},

	"BR_Win32_ClientToScreen lua": {
	"prefix": "reaper.BR_Win32_ClientToScreen",
	"scope": "lua",
	"body": "x, y = reaper.BR_Win32_ClientToScreen(${1:hwnd}, ${2:xIn}, ${3:yIn})$0",
	"description": "[BR] Equivalent to win32 API ClientToScreen().\n\n"
	},

	"BR_Win32_FindWindowEx lua": {
	"prefix": "reaper.BR_Win32_FindWindowEx",
	"scope": "lua",
	"body": "reaper.BR_Win32_FindWindowEx(${1:hwndParent}, ${2:hwndChildAfter}, ${3:className}, ${4:windowName}, ${5:searchClass}, ${6:searchName})$0",
	"description": "[BR] Equivalent to win32 API FindWindowEx(). Since ReaScript doesn't allow passing NULL (None in Python, nil in Lua etc...) parameters, to search by supplied class or name set searchClass and searchName accordingly. HWND parameters should be passed as either '0' to signify NULL or as string obtained from BR_Win32_HwndToString.\n\n"
	},

	"BR_Win32_GET_X_LPARAM lua": {
	"prefix": "reaper.BR_Win32_GET_X_LPARAM",
	"scope": "lua",
	"body": "reaper.BR_Win32_GET_X_LPARAM(${1:lParam})$0",
	"description": "[BR] Equivalent to win32 API GET_X_LPARAM().\n\n"
	},

	"BR_Win32_GET_Y_LPARAM lua": {
	"prefix": "reaper.BR_Win32_GET_Y_LPARAM",
	"scope": "lua",
	"body": "reaper.BR_Win32_GET_Y_LPARAM(${1:lParam})$0",
	"description": "[BR] Equivalent to win32 API GET_Y_LPARAM().\n\n"
	},

	"BR_Win32_GetConstant lua": {
	"prefix": "reaper.BR_Win32_GetConstant",
	"scope": "lua",
	"body": "reaper.BR_Win32_GetConstant(${1:constantName})$0",
	"description": "[BR] Returns various constants needed for BR_Win32 functions.\nSupported constants are:\nCB_ERR, CB_GETCOUNT, CB_GETCURSEL, CB_SETCURSEL\nEM_SETSEL\nGW_CHILD, GW_HWNDFIRST, GW_HWNDLAST, GW_HWNDNEXT, GW_HWNDPREV, GW_OWNER\nGWL_STYLE\nSW_HIDE, SW_MAXIMIZE, SW_SHOW, SW_SHOWMINIMIZED, SW_SHOWNA, SW_SHOWNOACTIVATE, SW_SHOWNORMAL\nSWP_FRAMECHANGED, SWP_FRAMECHANGED, SWP_NOMOVE, SWP_NOOWNERZORDER, SWP_NOSIZE, SWP_NOZORDER\nVK_DOWN, VK_UP\nWM_CLOSE, WM_KEYDOWN\nWS_MAXIMIZE, WS_OVERLAPPEDWINDOW\n\n"
	},

	"BR_Win32_GetCursorPos lua": {
	"prefix": "reaper.BR_Win32_GetCursorPos",
	"scope": "lua",
	"body": "retval, x, y = reaper.BR_Win32_GetCursorPos()\n\n",
	"description": "[BR] Equivalent to win32 API GetCursorPos().\n\n"
	},

	"BR_Win32_GetFocus lua": {
	"prefix": "reaper.BR_Win32_GetFocus",
	"scope": "lua",
	"body": "reaper.BR_Win32_GetFocus()\n\n",
	"description": "[BR] Equivalent to win32 API GetFocus().\n\n"
	},

	"BR_Win32_GetForegroundWindow lua": {
	"prefix": "reaper.BR_Win32_GetForegroundWindow",
	"scope": "lua",
	"body": "reaper.BR_Win32_GetForegroundWindow()\n\n",
	"description": "[BR] Equivalent to win32 API GetForegroundWindow().\n\n"
	},

	"BR_Win32_GetMainHwnd lua": {
	"prefix": "reaper.BR_Win32_GetMainHwnd",
	"scope": "lua",
	"body": "reaper.BR_Win32_GetMainHwnd()\n\n",
	"description": "[BR] Alternative to GetMainHwnd. REAPER seems to have problems with extensions using HWND type for exported functions so all BR_Win32 functions use void* instead of HWND type\n\n"
	},

	"BR_Win32_GetMixerHwnd lua": {
	"prefix": "reaper.BR_Win32_GetMixerHwnd",
	"scope": "lua",
	"body": "retval, isDocked = reaper.BR_Win32_GetMixerHwnd()\n\n",
	"description": "[BR] Get mixer window HWND. isDockedOut will be set to true if mixer is docked\n\n"
	},

	"BR_Win32_GetMonitorRectFromRect lua": {
	"prefix": "reaper.BR_Win32_GetMonitorRectFromRect",
	"scope": "lua",
	"body": "left, top, right, bottom = reaper.BR_Win32_GetMonitorRectFromRect(${1:workingAreaOnly}, ${2:leftIn}, ${3:topIn}, ${4:rightIn}, ${5:bottomIn})$0",
	"description": "[BR] Get coordinates for screen which is nearest to supplied coordinates. Pass workingAreaOnly as true to get screen coordinates excluding taskbar (or menu bar on OSX).\n\n"
	},

	"BR_Win32_GetParent lua": {
	"prefix": "reaper.BR_Win32_GetParent",
	"scope": "lua",
	"body": "reaper.BR_Win32_GetParent(${1:hwnd})$0",
	"description": "[BR] Equivalent to win32 API GetParent().\n\n"
	},

	"BR_Win32_GetPrivateProfileString lua": {
	"prefix": "reaper.BR_Win32_GetPrivateProfileString",
	"scope": "lua",
	"body": "retval, string = reaper.BR_Win32_GetPrivateProfileString(${1:sectionName}, ${2:keyName}, ${3:defaultString}, ${4:filePath})$0",
	"description": "[BR] Equivalent to win32 API GetPrivateProfileString(). For example, you can use this to get values from REAPER.ini.\n\n"
	},

	"BR_Win32_GetWindow lua": {
	"prefix": "reaper.BR_Win32_GetWindow",
	"scope": "lua",
	"body": "reaper.BR_Win32_GetWindow(${1:hwnd}, ${2:cmd})$0",
	"description": "[BR] Equivalent to win32 API GetWindow().\n\n"
	},

	"BR_Win32_GetWindowLong lua": {
	"prefix": "reaper.BR_Win32_GetWindowLong",
	"scope": "lua",
	"body": "reaper.BR_Win32_GetWindowLong(${1:hwnd}, ${2:index})$0",
	"description": "[BR] Equivalent to win32 API GetWindowLong().\n\n"
	},

	"BR_Win32_GetWindowRect lua": {
	"prefix": "reaper.BR_Win32_GetWindowRect",
	"scope": "lua",
	"body": "retval, left, top, right, bottom = reaper.BR_Win32_GetWindowRect(${1:hwnd})$0",
	"description": "[BR] Equivalent to win32 API GetWindowRect().\n\n"
	},

	"BR_Win32_GetWindowText lua": {
	"prefix": "reaper.BR_Win32_GetWindowText",
	"scope": "lua",
	"body": "retval, text = reaper.BR_Win32_GetWindowText(${1:hwnd})$0",
	"description": "[BR] Equivalent to win32 API GetWindowText().\n\n"
	},

	"BR_Win32_HIBYTE lua": {
	"prefix": "reaper.BR_Win32_HIBYTE",
	"scope": "lua",
	"body": "reaper.BR_Win32_HIBYTE(${1:value})$0",
	"description": "[BR] Equivalent to win32 API HIBYTE().\n\n"
	},

	"BR_Win32_HIWORD lua": {
	"prefix": "reaper.BR_Win32_HIWORD",
	"scope": "lua",
	"body": "reaper.BR_Win32_HIWORD(${1:value})$0",
	"description": "[BR] Equivalent to win32 API HIWORD().\n\n"
	},

	"BR_Win32_HwndToString lua": {
	"prefix": "reaper.BR_Win32_HwndToString",
	"scope": "lua",
	"body": "string = reaper.BR_Win32_HwndToString(${1:hwnd})$0",
	"description": "[BR] Convert HWND to string. To convert string back to HWND, see BR_Win32_StringToHwnd.\n\n"
	},

	"BR_Win32_IsWindow lua": {
	"prefix": "reaper.BR_Win32_IsWindow",
	"scope": "lua",
	"body": "reaper.BR_Win32_IsWindow(${1:hwnd})$0",
	"description": "[BR] Equivalent to win32 API IsWindow().\n\n"
	},

	"BR_Win32_IsWindowVisible lua": {
	"prefix": "reaper.BR_Win32_IsWindowVisible",
	"scope": "lua",
	"body": "reaper.BR_Win32_IsWindowVisible(${1:hwnd})$0",
	"description": "[BR] Equivalent to win32 API IsWindowVisible().\n\n"
	},

	"BR_Win32_LOBYTE lua": {
	"prefix": "reaper.BR_Win32_LOBYTE",
	"scope": "lua",
	"body": "reaper.BR_Win32_LOBYTE(${1:value})$0",
	"description": "[BR] Equivalent to win32 API LOBYTE().\n\n"
	},

	"BR_Win32_LOWORD lua": {
	"prefix": "reaper.BR_Win32_LOWORD",
	"scope": "lua",
	"body": "reaper.BR_Win32_LOWORD(${1:value})$0",
	"description": "[BR] Equivalent to win32 API LOWORD().\n\n"
	},

	"BR_Win32_MAKELONG lua": {
	"prefix": "reaper.BR_Win32_MAKELONG",
	"scope": "lua",
	"body": "reaper.BR_Win32_MAKELONG(${1:low}, ${2:high})$0",
	"description": "[BR] Equivalent to win32 API MAKELONG().\n\n"
	},

	"BR_Win32_MAKELPARAM lua": {
	"prefix": "reaper.BR_Win32_MAKELPARAM",
	"scope": "lua",
	"body": "reaper.BR_Win32_MAKELPARAM(${1:low}, ${2:high})$0",
	"description": "[BR] Equivalent to win32 API MAKELPARAM().\n\n"
	},

	"BR_Win32_MAKELRESULT lua": {
	"prefix": "reaper.BR_Win32_MAKELRESULT",
	"scope": "lua",
	"body": "reaper.BR_Win32_MAKELRESULT(${1:low}, ${2:high})$0",
	"description": "[BR] Equivalent to win32 API MAKELRESULT().\n\n"
	},

	"BR_Win32_MAKEWORD lua": {
	"prefix": "reaper.BR_Win32_MAKEWORD",
	"scope": "lua",
	"body": "reaper.BR_Win32_MAKEWORD(${1:low}, ${2:high})$0",
	"description": "[BR] Equivalent to win32 API MAKEWORD().\n\n"
	},

	"BR_Win32_MAKEWPARAM lua": {
	"prefix": "reaper.BR_Win32_MAKEWPARAM",
	"scope": "lua",
	"body": "reaper.BR_Win32_MAKEWPARAM(${1:low}, ${2:high})$0",
	"description": "[BR] Equivalent to win32 API MAKEWPARAM().\n\n"
	},

	"BR_Win32_MIDIEditor_GetActive lua": {
	"prefix": "reaper.BR_Win32_MIDIEditor_GetActive",
	"scope": "lua",
	"body": "reaper.BR_Win32_MIDIEditor_GetActive()\n\n",
	"description": "[BR] Alternative to MIDIEditor_GetActive. REAPER seems to have problems with extensions using HWND type for exported functions so all BR_Win32 functions use void* instead of HWND type.\n\n"
	},

	"BR_Win32_ScreenToClient lua": {
	"prefix": "reaper.BR_Win32_ScreenToClient",
	"scope": "lua",
	"body": "x, y = reaper.BR_Win32_ScreenToClient(${1:hwnd}, ${2:xIn}, ${3:yIn})$0",
	"description": "[BR] Equivalent to win32 API ClientToScreen().\n\n"
	},

	"BR_Win32_SendMessage lua": {
	"prefix": "reaper.BR_Win32_SendMessage",
	"scope": "lua",
	"body": "reaper.BR_Win32_SendMessage(${1:hwnd}, ${2:msg}, ${3:lParam}, ${4:wParam})$0",
	"description": "[BR] Equivalent to win32 API SendMessage().\n\n"
	},

	"BR_Win32_SetFocus lua": {
	"prefix": "reaper.BR_Win32_SetFocus",
	"scope": "lua",
	"body": "reaper.BR_Win32_SetFocus(${1:hwnd})$0",
	"description": "[BR] Equivalent to win32 API SetFocus().\n\n"
	},

	"BR_Win32_SetForegroundWindow lua": {
	"prefix": "reaper.BR_Win32_SetForegroundWindow",
	"scope": "lua",
	"body": "reaper.BR_Win32_SetForegroundWindow(${1:hwnd})$0",
	"description": "[BR] Equivalent to win32 API SetForegroundWindow().\n\n"
	},

	"BR_Win32_SetWindowLong lua": {
	"prefix": "reaper.BR_Win32_SetWindowLong",
	"scope": "lua",
	"body": "reaper.BR_Win32_SetWindowLong(${1:hwnd}, ${2:index}, ${3:newLong})$0",
	"description": "[BR] Equivalent to win32 API SetWindowLong().\n\n"
	},

	"BR_Win32_SetWindowPos lua": {
	"prefix": "reaper.BR_Win32_SetWindowPos",
	"scope": "lua",
	"body": "reaper.BR_Win32_SetWindowPos(${1:hwnd}, ${2:hwndInsertAfter}, ${3:x}, ${4:y}, ${5:width}, ${6:height}, ${7:flags})$0",
	"description": "[BR] Equivalent to win32 API SetWindowPos().\nhwndInsertAfter may be a string: 'HWND_BOTTOM', 'HWND_NOTOPMOST', 'HWND_TOP', 'HWND_TOPMOST' or a string obtained with BR_Win32_HwndToString.\n\n"
	},

	"BR_Win32_ShellExecute lua": {
	"prefix": "reaper.BR_Win32_ShellExecute",
	"scope": "lua",
	"body": "reaper.BR_Win32_ShellExecute(${1:operation}, ${2:file}, ${3:parameters}, ${4:directory}, ${5:showFlags})$0",
	"description": "[BR] Equivalent to win32 API ShellExecute() with HWND set to main window\n\n"
	},

	"BR_Win32_ShowWindow lua": {
	"prefix": "reaper.BR_Win32_ShowWindow",
	"scope": "lua",
	"body": "reaper.BR_Win32_ShowWindow(${1:hwnd}, ${2:cmdShow})$0",
	"description": "[BR] Equivalent to win32 API ShowWindow().\n\n"
	},

	"BR_Win32_StringToHwnd lua": {
	"prefix": "reaper.BR_Win32_StringToHwnd",
	"scope": "lua",
	"body": "reaper.BR_Win32_StringToHwnd(${1:string})$0",
	"description": "[BR] Convert string to HWND. To convert HWND back to string, see BR_Win32_HwndToString.\n\n"
	},

	"BR_Win32_WindowFromPoint lua": {
	"prefix": "reaper.BR_Win32_WindowFromPoint",
	"scope": "lua",
	"body": "reaper.BR_Win32_WindowFromPoint(${1:x}, ${2:y})$0",
	"description": "[BR] Equivalent to win32 API WindowFromPoint().\n\n"
	},

	"BR_Win32_WritePrivateProfileString lua": {
	"prefix": "reaper.BR_Win32_WritePrivateProfileString",
	"scope": "lua",
	"body": "reaper.BR_Win32_WritePrivateProfileString(${1:sectionName}, ${2:keyName}, ${3:value}, ${4:filePath})$0",
	"description": "[BR] Equivalent to win32 API WritePrivateProfileString(). For example, you can use this to write to REAPER.ini. You can pass an empty string as value to delete a key.\n\n"
	},

	"Blink_GetBeatAtTime lua": {
	"prefix": "reaper.Blink_GetBeatAtTime",
	"scope": "lua",
	"body": "reaper.Blink_GetBeatAtTime(${1:time}, ${2:quantum})$0",
	"description": "Get session beat value corresponding to given time for given quantum.\n\n"
	},

	"Blink_GetClockNow lua": {
	"prefix": "reaper.Blink_GetClockNow",
	"scope": "lua",
	"body": "reaper.Blink_GetClockNow()\n\n",
	"description": "Clock used by Blink.\n\n"
	},

	"Blink_GetEnabled lua": {
	"prefix": "reaper.Blink_GetEnabled",
	"scope": "lua",
	"body": "reaper.Blink_GetEnabled()\n\n",
	"description": "Is Blink currently enabled?\n\n"
	},

	"Blink_GetMaster lua": {
	"prefix": "reaper.Blink_GetMaster",
	"scope": "lua",
	"body": "reaper.Blink_GetMaster()\n\n",
	"description": "Is Blink Master?\n\n"
	},

	"Blink_GetNumPeers lua": {
	"prefix": "reaper.Blink_GetNumPeers",
	"scope": "lua",
	"body": "reaper.Blink_GetNumPeers()\n\n",
	"description": "How many peers are currently connected in Link session?\n\n"
	},

	"Blink_GetPhaseAtTime lua": {
	"prefix": "reaper.Blink_GetPhaseAtTime",
	"scope": "lua",
	"body": "reaper.Blink_GetPhaseAtTime(${1:time}, ${2:quantum})$0",
	"description": "Get session phase at given time for given quantum.\n\n"
	},

	"Blink_GetPlaying lua": {
	"prefix": "reaper.Blink_GetPlaying",
	"scope": "lua",
	"body": "reaper.Blink_GetPlaying()\n\n",
	"description": "Is transport playing?\n\n"
	},

	"Blink_GetPuppet lua": {
	"prefix": "reaper.Blink_GetPuppet",
	"scope": "lua",
	"body": "reaper.Blink_GetPuppet()\n\n",
	"description": "Is Blink Puppet?\n\n"
	},

	"Blink_GetQuantum lua": {
	"prefix": "reaper.Blink_GetQuantum",
	"scope": "lua",
	"body": "reaper.Blink_GetQuantum()\n\n",
	"description": "Get quantum.\n\n"
	},

	"Blink_GetStartStopSyncEnabled lua": {
	"prefix": "reaper.Blink_GetStartStopSyncEnabled",
	"scope": "lua",
	"body": "reaper.Blink_GetStartStopSyncEnabled()\n\n",
	"description": "Is start/stop synchronization enabled?\n\n"
	},

	"Blink_GetTempo lua": {
	"prefix": "reaper.Blink_GetTempo",
	"scope": "lua",
	"body": "reaper.Blink_GetTempo()\n\n",
	"description": "Tempo of timeline, in quarter note Beats Per Minute.\n\n"
	},

	"Blink_GetTimeAtBeat lua": {
	"prefix": "reaper.Blink_GetTimeAtBeat",
	"scope": "lua",
	"body": "reaper.Blink_GetTimeAtBeat(${1:beat}, ${2:quantum})$0",
	"description": "Get time at which given beat occurs for given quantum.\n\n"
	},

	"Blink_GetTimeForPlaying lua": {
	"prefix": "reaper.Blink_GetTimeForPlaying",
	"scope": "lua",
	"body": "reaper.Blink_GetTimeForPlaying()\n\n",
	"description": "Get time at which transport start/stop occurs.\n\n"
	},

	"Blink_GetVersion lua": {
	"prefix": "reaper.Blink_GetVersion",
	"scope": "lua",
	"body": "reaper.Blink_GetVersion()\n\n",
	"description": "Get Blink version.\n\n"
	},

	"Blink_SetBeatAtStartPlayingTimeRequest lua": {
	"prefix": "reaper.Blink_SetBeatAtStartPlayingTimeRequest",
	"scope": "lua",
	"body": "reaper.Blink_SetBeatAtStartPlayingTimeRequest(${1:beat}, ${2:quantum})$0",
	"description": "Convenience function to attempt to map given beat to time when transport is starting to play in context of given quantum. This function evaluates to a no-op if GetPlaying() equals false.\n\n"
	},

	"Blink_SetBeatAtTimeForce lua": {
	"prefix": "reaper.Blink_SetBeatAtTimeForce",
	"scope": "lua",
	"body": "reaper.Blink_SetBeatAtTimeForce(${1:bpm}, ${2:time}, ${3:quantum})$0",
	"description": "Rudely re-map beat/time relationship for all peers in Link session.\n\n"
	},

	"Blink_SetBeatAtTimeRequest lua": {
	"prefix": "reaper.Blink_SetBeatAtTimeRequest",
	"scope": "lua",
	"body": "reaper.Blink_SetBeatAtTimeRequest(${1:bpm}, ${2:time}, ${3:quantum})$0",
	"description": "Attempt to map given beat to given time in context of given quantum.\n\n"
	},

	"Blink_SetCaptureTransportCommands lua": {
	"prefix": "reaper.Blink_SetCaptureTransportCommands",
	"scope": "lua",
	"body": "reaper.Blink_SetCaptureTransportCommands(${1:enable})$0",
	"description": "Captures REAPER Transport commands and 'Tempo: Increase/Decrease current project tempo by 01 BPM' commands and broadcasts them into Link session. When used with Master or Puppet mode enabled, provides better integration between REAPER and Link session transport and tempos.\n\n"
	},

	"Blink_SetEnabled lua": {
	"prefix": "reaper.Blink_SetEnabled",
	"scope": "lua",
	"body": "reaper.Blink_SetEnabled(${1:enable})$0",
	"description": "Enable/disable Blink. In Blink methods transport, tempo and timeline refer to Link session, not local REAPER instance.\n\n"
	},

	"Blink_SetMaster lua": {
	"prefix": "reaper.Blink_SetMaster",
	"scope": "lua",
	"body": "reaper.Blink_SetMaster(${1:enable})$0",
	"description": "Set Blink as Master. Puppet needs to be enabled first. Same as Puppet, but possible beat offset is broadcast to Link session, effectively forcing local REAPER timeline on peers. Only one, if any, Blink should be Master in Link session.\n\n"
	},

	"Blink_SetPlaying lua": {
	"prefix": "reaper.Blink_SetPlaying",
	"scope": "lua",
	"body": "reaper.Blink_SetPlaying(${1:playing}, ${2:time})$0",
	"description": "Set if transport should be playing or stopped, taking effect at given time.\n\n"
	},

	"Blink_SetPlayingAndBeatAtTimeRequest lua": {
	"prefix": "reaper.Blink_SetPlayingAndBeatAtTimeRequest",
	"scope": "lua",
	"body": "reaper.Blink_SetPlayingAndBeatAtTimeRequest(${1:playing}, ${2:time}, ${3:beat}, ${4:quantum})$0",
	"description": "Convenience function to start or stop transport at given time and attempt to map given beat to this time in context of given quantum.\n\n"
	},

	"Blink_SetPuppet lua": {
	"prefix": "reaper.Blink_SetPuppet",
	"scope": "lua",
	"body": "reaper.Blink_SetPuppet(${1:enable})$0",
	"description": "Set Blink as Puppet. When enabled, Blink attempts to synchronize local REAPER tempo to Link session tempo by adjusting current active tempo/time signature marker, or broadcasts local REAPER tempo changes into Link session, and attempts to correct possible offset by adjusting REAPER playrate. Based on cumulative single beat phase since Link session transport start, regardless of quantum.\n\n"
	},

	"Blink_SetQuantum lua": {
	"prefix": "reaper.Blink_SetQuantum",
	"scope": "lua",
	"body": "reaper.Blink_SetQuantum(${1:quantum})$0",
	"description": "Set quantum. Usually this is set to length of one measure/bar in quarter notes.\n\n"
	},

	"Blink_SetStartStopSyncEnabled lua": {
	"prefix": "reaper.Blink_SetStartStopSyncEnabled",
	"scope": "lua",
	"body": "reaper.Blink_SetStartStopSyncEnabled(${1:enable})$0",
	"description": "Enable start/stop synchronization.\n\n"
	},

	"Blink_SetTempo lua": {
	"prefix": "reaper.Blink_SetTempo",
	"scope": "lua",
	"body": "reaper.Blink_SetTempo(${1:bpm})$0",
	"description": "Set timeline tempo to given bpm value.\n\n"
	},

	"Blink_SetTempoAtTime lua": {
	"prefix": "reaper.Blink_SetTempoAtTime",
	"scope": "lua",
	"body": "reaper.Blink_SetTempoAtTime(${1:bpm}, ${2:time})$0",
	"description": "Set tempo to given bpm value, taking effect at given time.\n\n"
	},

	"Blink_StartStop lua": {
	"prefix": "reaper.Blink_StartStop",
	"scope": "lua",
	"body": "reaper.Blink_StartStop()\n\n",
	"description": "Transport start/stop.\n\n"
	},

	"CF_CreatePreview lua": {
	"prefix": "reaper.CF_CreatePreview",
	"scope": "lua",
	"body": "reaper.CF_CreatePreview(${1:source})$0",
	"description": "Create a new preview object. Does not take ownership of the source (don't forget to destroy it unless it came from a take!). See CF_Preview_Play and the others CF_Preview_* functions.\nThe preview object is automatically destroyed at the end of a defer cycle if at least one of these conditions are met:\n- playback finished\n- playback was not started using CF_Preview_Play\n- the output track no longer exists\n\n"
	},

	"CF_EnumMediaSourceCues lua": {
	"prefix": "reaper.CF_EnumMediaSourceCues",
	"scope": "lua",
	"body": "retval, time, endTime, isRegion, name, isChapter = reaper.CF_EnumMediaSourceCues(${1:src}, ${2:index})$0",
	"description": "Enumerate the source's media cues. Returns the next index or 0 when finished.\n\n"
	},

	"CF_EnumSelectedFX lua": {
	"prefix": "reaper.CF_EnumSelectedFX",
	"scope": "lua",
	"body": "reaper.CF_EnumSelectedFX(${1:hwnd}, ${2:index})$0",
	"description": "Return the index of the next selected effect in the given FX chain. Start index should be -1. Returns -1 if there are no more selected effects.\n\n"
	},

	"CF_EnumerateActions lua": {
	"prefix": "reaper.CF_EnumerateActions",
	"scope": "lua",
	"body": "retval, name = reaper.CF_EnumerateActions(${1:section}, ${2:index})$0",
	"description": "Deprecated, see kbd_enumerateActions (v6.71+). Wrapper for the unexposed kbd_enumerateActions API function.\nMain=0, Main (alt recording)=100, MIDI Editor=32060, MIDI Event List Editor=32061, MIDI Inline Editor=32062, Media Explorer=32063\n\n"
	},

	"CF_ExportMediaSource lua": {
	"prefix": "reaper.CF_ExportMediaSource",
	"scope": "lua",
	"body": "reaper.CF_ExportMediaSource(${1:src}, ${2:fn})$0",
	"description": "Export the source to the given file (MIDI only).\n\n"
	},

	"CF_GetClipboard lua": {
	"prefix": "reaper.CF_GetClipboard",
	"scope": "lua",
	"body": "text = reaper.CF_GetClipboard()\n\n",
	"description": "Read the contents of the system clipboard.\n\n"
	},

	"CF_GetClipboardBig lua": {
	"prefix": "reaper.CF_GetClipboardBig",
	"scope": "lua",
	"body": "reaper.CF_GetClipboardBig(${1:output})$0",
	"description": "[DEPRECATED: Use CF_GetClipboard] Read the contents of the system clipboard. See SNM_CreateFastString and SNM_DeleteFastString.\n\n"
	},

	"CF_GetCommandText lua": {
	"prefix": "reaper.CF_GetCommandText",
	"scope": "lua",
	"body": "reaper.CF_GetCommandText(${1:section}, ${2:command})$0",
	"description": "Deprecated, see kbd_getTextFromCmd (v6.71+). Wrapper for the unexposed kbd_getTextFromCmd API function. See CF_EnumerateActions for common section IDs.\n\n"
	},

	"CF_GetCustomColor lua": {
	"prefix": "reaper.CF_GetCustomColor",
	"scope": "lua",
	"body": "reaper.CF_GetCustomColor(${1:index})$0",
	"description": "Get one of 16 SWS custom colors (0xBBGGRR on Windows, 0xRRGGBB everyhwere else). Index is zero-based.\n\n"
	},

	"CF_GetFocusedFXChain lua": {
	"prefix": "reaper.CF_GetFocusedFXChain",
	"scope": "lua",
	"body": "FxChain = reaper.CF_GetFocusedFXChain()\n\n",
	"description": "Return a handle to the currently focused FX chain window.\n\n"
	},

	"CF_GetMediaSourceBitDepth lua": {
	"prefix": "reaper.CF_GetMediaSourceBitDepth",
	"scope": "lua",
	"body": "reaper.CF_GetMediaSourceBitDepth(${1:src})$0",
	"description": "Returns the bit depth if available (0 otherwise).\n\n"
	},

	"CF_GetMediaSourceBitRate lua": {
	"prefix": "reaper.CF_GetMediaSourceBitRate",
	"scope": "lua",
	"body": "reaper.CF_GetMediaSourceBitRate(${1:src})$0",
	"description": "Returns the bit rate for WAVE (wav, aif) and streaming/variable formats (mp3, ogg, opus). REAPER v6.19 or later is required for non-WAVE formats.\n\n"
	},

	"CF_GetMediaSourceMetadata lua": {
	"prefix": "reaper.CF_GetMediaSourceMetadata",
	"scope": "lua",
	"body": "retval, out = reaper.CF_GetMediaSourceMetadata(${1:src}, ${2:name}, ${3:out})$0",
	"description": "Get the value of the given metadata field (eg. DESC, ORIG, ORIGREF, DATE, TIME, UMI, CODINGHISTORY for BWF).\n\n"
	},

	"CF_GetMediaSourceOnline lua": {
	"prefix": "reaper.CF_GetMediaSourceOnline",
	"scope": "lua",
	"body": "reaper.CF_GetMediaSourceOnline(${1:src})$0",
	"description": "Returns the online/offline status of the given source.\n\n"
	},

	"CF_GetMediaSourceRPP lua": {
	"prefix": "reaper.CF_GetMediaSourceRPP",
	"scope": "lua",
	"body": "retval, fn = reaper.CF_GetMediaSourceRPP(${1:src})$0",
	"description": "Get the project associated with this source (BWF, subproject...).\n\n"
	},

	"CF_GetSWSVersion lua": {
	"prefix": "reaper.CF_GetSWSVersion",
	"scope": "lua",
	"body": "version = reaper.CF_GetSWSVersion()\n\n",
	"description": "Return the current SWS version number.\n\n"
	},

	"CF_GetTakeFXChain lua": {
	"prefix": "reaper.CF_GetTakeFXChain",
	"scope": "lua",
	"body": "reaper.CF_GetTakeFXChain(${1:take})$0",
	"description": "Return a handle to the given take FX chain window. HACK: This temporarily renames the take in order to disambiguate the take FX chain window from similarily named takes.\n\n"
	},

	"CF_GetTrackFXChain lua": {
	"prefix": "reaper.CF_GetTrackFXChain",
	"scope": "lua",
	"body": "reaper.CF_GetTrackFXChain(${1:track})$0",
	"description": "Return a handle to the given track FX chain window.\n\n"
	},

	"CF_GetTrackFXChainEx lua": {
	"prefix": "reaper.CF_GetTrackFXChainEx",
	"scope": "lua",
	"body": "reaper.CF_GetTrackFXChainEx(${1:project}, ${2:track}, ${3:wantInputChain})$0",
	"description": "Return a handle to the given track FX chain window. Set wantInputChain to get the track's input/monitoring FX chain.\n\n"
	},

	"CF_LocateInExplorer lua": {
	"prefix": "reaper.CF_LocateInExplorer",
	"scope": "lua",
	"body": "reaper.CF_LocateInExplorer(${1:file})$0",
	"description": "Select the given file in explorer/finder.\n\n"
	},

	"CF_PCM_Source_SetSectionInfo lua": {
	"prefix": "reaper.CF_PCM_Source_SetSectionInfo",
	"scope": "lua",
	"body": "reaper.CF_PCM_Source_SetSectionInfo(${1:section}, ${2:source}, ${3:offset}, ${4:length}, ${5:reverse})$0",
	"description": "Give a section source created using PCM_Source_CreateFromType('SECTION'). Offset and length are ignored if 0. Negative length to subtract from the total length of the source.\n\n"
	},

	"CF_Preview_GetPeak lua": {
	"prefix": "reaper.CF_Preview_GetPeak",
	"scope": "lua",
	"body": "retval, peakvol = reaper.CF_Preview_GetPeak(${1:preview}, ${2:channel})$0",
	"description": "Read peak volume for channel 0 or 1. Only available when outputting to a hardware output (not through a track).\n\n"
	},

	"CF_Preview_GetValue lua": {
	"prefix": "reaper.CF_Preview_GetValue",
	"scope": "lua",
	"body": "retval, value = reaper.CF_Preview_GetValue(${1:preview}, ${2:name})$0",
	"description": "Supported attributes:\nB_LOOP         seek to the beginning when reaching the end of the source\nB_PPITCH       preserve pitch when changing playback rate\nD_FADEINLEN    lenght in seconds of playback fade in\nD_FADEOUTLEN   lenght in seconds of playback fade out\nD_LENGTH       (read only) length of the source * playback rate\nD_MEASUREALIGN >0 = wait until the next bar before starting playback (note: this causes playback to silently continue when project is paused and previewing through a track)\nD_PAN          playback pan\nD_PITCH        pitch adjustment in semitones\nD_PLAYRATE     playback rate\nD_POSITION     current playback position\nD_VOLUME       playback volume\nI_OUTCHAN      first hardware output channel (&1024=mono, reads -1 when playing through a track, see CF_Preview_SetOutputTrack)\nI_PITCHMODE    highest 16 bits=pitch shift mode (see EnumPitchShiftModes), lower 16 bits=pitch shift submode (see EnumPitchShiftSubModes)\n\n"
	},

	"CF_Preview_Play lua": {
	"prefix": "reaper.CF_Preview_Play",
	"scope": "lua",
	"body": "reaper.CF_Preview_Play(${1:preview})$0",
	"description": "Start playback of the configured preview object.\n\n"
	},

	"CF_Preview_SetOutputTrack lua": {
	"prefix": "reaper.CF_Preview_SetOutputTrack",
	"scope": "lua",
	"body": "reaper.CF_Preview_SetOutputTrack(${1:preview}, ${2:project}, ${3:track})$0",
	"description": ""
	},

	"CF_Preview_SetValue lua": {
	"prefix": "reaper.CF_Preview_SetValue",
	"scope": "lua",
	"body": "reaper.CF_Preview_SetValue(${1:preview}, ${2:name}, ${3:newValue})$0",
	"description": "See CF_Preview_GetValue.\n\n"
	},

	"CF_Preview_Stop lua": {
	"prefix": "reaper.CF_Preview_Stop",
	"scope": "lua",
	"body": "reaper.CF_Preview_Stop(${1:preview})$0",
	"description": "Stop and destroy a preview object.\n\n"
	},

	"CF_Preview_StopAll lua": {
	"prefix": "reaper.CF_Preview_StopAll",
	"scope": "lua",
	"body": "reaper.CF_Preview_StopAll()\n\n",
	"description": "Stop and destroy all currently active preview objects.\n\n"
	},

	"CF_SelectTrackFX lua": {
	"prefix": "reaper.CF_SelectTrackFX",
	"scope": "lua",
	"body": "reaper.CF_SelectTrackFX(${1:track}, ${2:index})$0",
	"description": "Set which track effect is active in the track's FX chain. The FX chain window does not have to be open.\n\n"
	},

	"CF_SetClipboard lua": {
	"prefix": "reaper.CF_SetClipboard",
	"scope": "lua",
	"body": "reaper.CF_SetClipboard(${1:str})$0",
	"description": "Write the given string into the system clipboard.\n\n"
	},

	"CF_SetCustomColor lua": {
	"prefix": "reaper.CF_SetCustomColor",
	"scope": "lua",
	"body": "reaper.CF_SetCustomColor(${1:index}, ${2:color})$0",
	"description": "Set one of 16 SWS custom colors (0xBBGGRR on Windows, 0xRRGGBB everyhwere else). Index is zero-based.\n\n"
	},

	"CF_SetMediaSourceOnline lua": {
	"prefix": "reaper.CF_SetMediaSourceOnline",
	"scope": "lua",
	"body": "reaper.CF_SetMediaSourceOnline(${1:src}, ${2:set})$0",
	"description": "Set the online/offline status of the given source (closes files when set=false).\n\n"
	},

	"CF_ShellExecute lua": {
	"prefix": "reaper.CF_ShellExecute",
	"scope": "lua",
	"body": "reaper.CF_ShellExecute(${1:file})$0",
	"description": "Open the given file or URL in the default application. See also CF_LocateInExplorer.\n\n"
	},

	"FNG_AddMidiNote lua": {
	"prefix": "reaper.FNG_AddMidiNote",
	"scope": "lua",
	"body": "reaper.FNG_AddMidiNote(${1:midiTake})$0",
	"description": "[FNG] Add MIDI note to MIDI take\n\n"
	},

	"FNG_AllocMidiTake lua": {
	"prefix": "reaper.FNG_AllocMidiTake",
	"scope": "lua",
	"body": "reaper.FNG_AllocMidiTake(${1:take})$0",
	"description": "[FNG] Allocate a RprMidiTake from a take pointer. Returns a NULL pointer if the take is not an in-project MIDI take\n\n"
	},

	"FNG_CountMidiNotes lua": {
	"prefix": "reaper.FNG_CountMidiNotes",
	"scope": "lua",
	"body": "reaper.FNG_CountMidiNotes(${1:midiTake})$0",
	"description": "[FNG] Count of how many MIDI notes are in the MIDI take\n\n"
	},

	"FNG_FreeMidiTake lua": {
	"prefix": "reaper.FNG_FreeMidiTake",
	"scope": "lua",
	"body": "reaper.FNG_FreeMidiTake(${1:midiTake})$0",
	"description": "[FNG] Commit changes to MIDI take and free allocated memory\n\n"
	},

	"FNG_GetMidiNote lua": {
	"prefix": "reaper.FNG_GetMidiNote",
	"scope": "lua",
	"body": "reaper.FNG_GetMidiNote(${1:midiTake}, ${2:index})$0",
	"description": "[FNG] Get a MIDI note from a MIDI take at specified index\n\n"
	},

	"FNG_GetMidiNoteIntProperty lua": {
	"prefix": "reaper.FNG_GetMidiNoteIntProperty",
	"scope": "lua",
	"body": "reaper.FNG_GetMidiNoteIntProperty(${1:midiNote}, ${2:property})$0",
	"description": "[FNG] Get MIDI note property\n\n"
	},

	"FNG_SetMidiNoteIntProperty lua": {
	"prefix": "reaper.FNG_SetMidiNoteIntProperty",
	"scope": "lua",
	"body": "reaper.FNG_SetMidiNoteIntProperty(${1:midiNote}, ${2:property}, ${3:value})$0",
	"description": "[FNG] Set MIDI note property\n\n"
	},

	"Fab_Clear lua": {
	"prefix": "reaper.Fab_Clear",
	"scope": "lua",
	"body": "reaper.Fab_Clear(${1:optional_idStringIn})$0",
	"description": "Clears ReaFab control map, optionally based on matching idString. Returns true on success.\n\n"
	},

	"Fab_Do lua": {
	"prefix": "reaper.Fab_Do",
	"scope": "lua",
	"body": "reaper.Fab_Do(${1:command}, ${2:val})$0",
	"description": "Runs ReaFab actions/commands. First parameter (command) is ReaFab command number, e.g. 3 for 3rd encoder rotation. Second parameter (val) is MIDI CC Relative value. Value 1 is increment of 1, 127 is decrement of 1. 2 is inc 2, 126 is dec 2 and so on. For button press (commands 9-32) a value of 127 is recommended.\n\n"
	},

	"Fab_Dump lua": {
	"prefix": "reaper.Fab_Dump",
	"scope": "lua",
	"body": "reaper.Fab_Dump()\n\n",
	"description": "Dumps current control mapping into .lua file under ResourcePath/Scripts/reafab_dump-timestamp.lua\n\n"
	},

	"Fab_Get lua": {
	"prefix": "reaper.Fab_Get",
	"scope": "lua",
	"body": "retval, fx, param = reaper.Fab_Get(${1:command})$0",
	"description": "Returns target FX and parameter index for given ReaFab command in context of selected track and ReaFab FX index. Valid command range 1 ... 24. Returns false if no such command mapping is found. Returns param index -1 for ReaFab internal band change command.\n\n"
	},

	"Fab_Map lua": {
	"prefix": "reaper.Fab_Map",
	"scope": "lua",
	"body": "reaper.Fab_Map(${1:fxId}, ${2:command}, ${3:paramId}, ${4:control}, ${5:optional_bandsIn}, ${6:optional_stepIn}, ${7:optional_accelIn}, ${8:optional_minvalIn}, ${9:optional_maxvalIn})$0",
	"description": "Creates control mapping for ReaFab command.\nfxId e.g. 'ReaComp'.\ncommand 1-8 for encoders, 9-24 for buttons.\nparamId e.g. 'Ratio'.\ncontrol 1 = direct, 2 = band selector, 3 = cycle, 4 = invert, 5 = force toggle, 6 = force range, 7 = 5 and 6, 8 = force continuous.\nbands define, if target fx has multiple identical target bands. In this case, paramId must include 00 placeholder, e.g. 'Band 00 Gain'.\nstep overrides built-in default step of ~0.001 for continuous parameters.\naccel overrides built-in default control acceleration step of 1.0.\nminval & maxval override default detected target param value range.\nPrefixing paramId with '-' reverses direction; useful for creating separate next/previous mappings for bands or list type value navigation.\n\n"
	},

	"ImGui_AcceptDragDropPayload lua": {
	"prefix": "reaper.ImGui_AcceptDragDropPayload",
	"scope": "lua",
	"body": "retval, payload = reaper.ImGui_AcceptDragDropPayload(${1:ctx}, ${2:type}, ${3:payload}, ${4:optional_flagsIn})$0",
	"description": "Accept contents of a given type. If DragDropFlags_AcceptBeforeDelivery is set\nyou can peek into the payload before the mouse button is released.\n\n"
	},

	"ImGui_AcceptDragDropPayloadFiles lua": {
	"prefix": "reaper.ImGui_AcceptDragDropPayloadFiles",
	"scope": "lua",
	"body": "retval, count = reaper.ImGui_AcceptDragDropPayloadFiles(${1:ctx}, ${2:count}, ${3:optional_flagsIn})$0",
	"description": "Accept a list of dropped files. See AcceptDragDropPayload and GetDragDropPayloadFile.\n\n"
	},

	"ImGui_AcceptDragDropPayloadRGB lua": {
	"prefix": "reaper.ImGui_AcceptDragDropPayloadRGB",
	"scope": "lua",
	"body": "retval, rgb = reaper.ImGui_AcceptDragDropPayloadRGB(${1:ctx}, ${2:rgb}, ${3:optional_flagsIn})$0",
	"description": "Accept a RGB color. See AcceptDragDropPayload.\n\n"
	},

	"ImGui_AcceptDragDropPayloadRGBA lua": {
	"prefix": "reaper.ImGui_AcceptDragDropPayloadRGBA",
	"scope": "lua",
	"body": "retval, rgba = reaper.ImGui_AcceptDragDropPayloadRGBA(${1:ctx}, ${2:rgba}, ${3:optional_flagsIn})$0",
	"description": "Accept a RGBA color. See AcceptDragDropPayload.\n\n"
	},

	"ImGui_AlignTextToFramePadding lua": {
	"prefix": "reaper.ImGui_AlignTextToFramePadding",
	"scope": "lua",
	"body": "reaper.ImGui_AlignTextToFramePadding(${1:ctx})$0",
	"description": "Vertically align upcoming text baseline to StyleVar_FramePadding.y so that it\nwill align properly to regularly framed items (call if you have text on a line\nbefore a framed item).\n\n"
	},

	"ImGui_ArrowButton lua": {
	"prefix": "reaper.ImGui_ArrowButton",
	"scope": "lua",
	"body": "reaper.ImGui_ArrowButton(${1:ctx}, ${2:str_id}, ${3:dir})$0",
	"description": "Square button with an arrow shape. 'dir' is one of the Dir_* values\n\n"
	},

	"ImGui_Attach lua": {
	"prefix": "reaper.ImGui_Attach",
	"scope": "lua",
	"body": "reaper.ImGui_Attach(${1:ImGui_Context_obj})$0",
	"description": "Link the object's lifetime to the given context.\nObjects can be draw list splitters, fonts, images, list clippers, etc.\nCall Detach to let the object be garbage-collected after unuse again.\nList clipper objects may only be attached to the context they were created for.\nFonts are (currently) a special case: they must be attached to the context\nbefore usage. Furthermore, fonts may only be attached or detached immediately\nafter the context is created or before any other function calls modifying the\ncontext per defer cycle. See 'limitations' in the font API documentation.\n\n"
	},

	"ImGui_Begin lua": {
	"prefix": "reaper.ImGui_Begin",
	"scope": "lua",
	"body": "retval, optional_p_open = reaper.ImGui_Begin(${1:ctx}, ${2:name}, ${3:optional_p_open}, ${4:optional_flagsIn})$0",
	"description": "Push window to the stack and start appending to it.\n- Passing true to 'p_open' shows a window-closing widget in the upper-right\ncorner of the window, which clicking will set the boolean to false when returned.\n- You may append multiple times to the same window during the same frame by\ncalling Begin()/End() pairs multiple times. Some information such as 'flags'\nor 'p_open' will only be considered by the first call to Begin().\n- Begin() return false to indicate the window is collapsed or fully clipped,\nso you may early out and omit submitting anything to the window.\n\n"
	},

	"ImGui_BeginChild lua": {
	"prefix": "reaper.ImGui_BeginChild",
	"scope": "lua",
	"body": "reaper.ImGui_BeginChild(${1:ctx}, ${2:str_id}, ${3:optional_size_wIn}, ${4:optional_size_hIn}, ${5:optional_borderIn}, ${6:optional_flagsIn})$0",
	"description": "For each independent axis of 'size':\n- > 0.0: fixed size\n- = 0.0: use remaining host window size\n- < 0.0: use remaining window size minus abs(size)\n(Each axis can use a different mode, e.g. size = 0x400.)\nReturns false to indicate the window is collapsed or fully clipped, so you may early out and omit submitting anything to the window.\n\n"
	},

	"ImGui_BeginChildFrame lua": {
	"prefix": "reaper.ImGui_BeginChildFrame",
	"scope": "lua",
	"body": "reaper.ImGui_BeginChildFrame(${1:ctx}, ${2:str_id}, ${3:size_w}, ${4:size_h}, ${5:optional_flagsIn})$0",
	"description": "Helper to create a child window / scrolling region that looks like a normal\nwidget frame. See BeginChild.\n\n"
	},

	"ImGui_BeginCombo lua": {
	"prefix": "reaper.ImGui_BeginCombo",
	"scope": "lua",
	"body": "reaper.ImGui_BeginCombo(${1:ctx}, ${2:label}, ${3:preview_value}, ${4:optional_flagsIn})$0",
	"description": "The BeginCombo/EndCombo API allows you to manage your contents and selection\nstate however you want it, by creating e.g. Selectable items.\n\n"
	},

	"ImGui_BeginDisabled lua": {
	"prefix": "reaper.ImGui_BeginDisabled",
	"scope": "lua",
	"body": "reaper.ImGui_BeginDisabled(${1:ctx}, ${2:optional_disabledIn})$0",
	"description": "Disable all user interactions and dim items visuals\n(applying StyleVar_DisabledAlpha over current colors).\nBeginDisabled(false) essentially does nothing useful but is provided to\nfacilitate use of boolean expressions.\nIf you can avoid calling BeginDisabled(false)/EndDisabled() best to avoid it.\n\n"
	},

	"ImGui_BeginDragDropSource lua": {
	"prefix": "reaper.ImGui_BeginDragDropSource",
	"scope": "lua",
	"body": "reaper.ImGui_BeginDragDropSource(${1:ctx}, ${2:optional_flagsIn})$0",
	"description": "Call after submitting an item which may be dragged. when this return true,\nyou can call SetDragDropPayload() + EndDragDropSource()\nIf you stop calling BeginDragDropSource() the payload is preserved however\nit won't have a preview tooltip (we currently display a fallback '...' tooltip\nas replacement).\n\n"
	},

	"ImGui_BeginDragDropTarget lua": {
	"prefix": "reaper.ImGui_BeginDragDropTarget",
	"scope": "lua",
	"body": "reaper.ImGui_BeginDragDropTarget(${1:ctx})$0",
	"description": "Call after submitting an item that may receive a payload.\nIf this returns true, you can call AcceptDragDropPayload + EndDragDropTarget.\n\n"
	},

	"ImGui_BeginGroup lua": {
	"prefix": "reaper.ImGui_BeginGroup",
	"scope": "lua",
	"body": "reaper.ImGui_BeginGroup(${1:ctx})$0",
	"description": "Lock horizontal starting position. See EndGroup.\n\n"
	},

	"ImGui_BeginListBox lua": {
	"prefix": "reaper.ImGui_BeginListBox",
	"scope": "lua",
	"body": "reaper.ImGui_BeginListBox(${1:ctx}, ${2:label}, ${3:optional_size_wIn}, ${4:optional_size_hIn})$0",
	"description": "Open a framed scrolling region. This is essentially a thin wrapper to using\nBeginChild/EndChild with some stylistic changes.\nThe BeginListBox/EndListBox API allows you to manage your contents and selection\nstate however you want it, by creating e.g. Selectable or any items.\n- Choose frame width:\n- width  > 0.0: custom\n- width  < 0.0 or -FLT_MIN: right-align\n- width  = 0.0 (default): use current ItemWidth\n- Choose frame height:\n- height > 0.0: custom\n- height < 0.0 or -FLT_MIN: bottom-align\n- height = 0.0 (default): arbitrary default height which can fit ~7 items\nSee EndListBox.\n\n"
	},

	"ImGui_BeginMenu lua": {
	"prefix": "reaper.ImGui_BeginMenu",
	"scope": "lua",
	"body": "reaper.ImGui_BeginMenu(${1:ctx}, ${2:label}, ${3:optional_enabledIn})$0",
	"description": "Create a sub-menu entry. only call EndMenu if this returns true!\n\n"
	},

	"ImGui_BeginMenuBar lua": {
	"prefix": "reaper.ImGui_BeginMenuBar",
	"scope": "lua",
	"body": "reaper.ImGui_BeginMenuBar(${1:ctx})$0",
	"description": "Append to menu-bar of current window (requires WindowFlags_MenuBar flag set\non parent window). See EndMenuBar.\n\n"
	},

	"ImGui_BeginPopup lua": {
	"prefix": "reaper.ImGui_BeginPopup",
	"scope": "lua",
	"body": "reaper.ImGui_BeginPopup(${1:ctx}, ${2:str_id}, ${3:optional_flagsIn})$0",
	"description": "Query popup state, if open start appending into the window. Call EndPopup\nafterwards. WindowFlags* are forwarded to the window.\nReturn true if the popup is open, and you can start outputting to it.\n\n"
	},

	"ImGui_BeginPopupContextItem lua": {
	"prefix": "reaper.ImGui_BeginPopupContextItem",
	"scope": "lua",
	"body": "reaper.ImGui_BeginPopupContextItem(${1:ctx}, ${2:optional_str_idIn}, ${3:optional_popup_flagsIn})$0",
	"description": "This is a helper to handle the simplest case of associating one named popup\nto one given widget. You can pass a nil str_id to use the identifier of the last\nitem. This is essentially the same as calling OpenPopupOnItemClick + BeginPopup\nbut written to avoid computing the ID twice because BeginPopupContextXXX\nfunctions may be called very frequently.\nIf you want to use that on a non-interactive item such as Text you need to pass\nin an explicit ID here.\n\n"
	},

	"ImGui_BeginPopupContextWindow lua": {
	"prefix": "reaper.ImGui_BeginPopupContextWindow",
	"scope": "lua",
	"body": "reaper.ImGui_BeginPopupContextWindow(${1:ctx}, ${2:optional_str_idIn}, ${3:optional_popup_flagsIn})$0",
	"description": "Open+begin popup when clicked on current window.\n\n"
	},

	"ImGui_BeginPopupModal lua": {
	"prefix": "reaper.ImGui_BeginPopupModal",
	"scope": "lua",
	"body": "retval, optional_p_open = reaper.ImGui_BeginPopupModal(${1:ctx}, ${2:name}, ${3:optional_p_open}, ${4:optional_flagsIn})$0",
	"description": "Block every interaction behind the window, cannot be closed by user, add a\ndimming background, has a title bar. Return true if the modal is open, and you\ncan start outputting to it. See BeginPopup.\n\n"
	},

	"ImGui_BeginTabBar lua": {
	"prefix": "reaper.ImGui_BeginTabBar",
	"scope": "lua",
	"body": "reaper.ImGui_BeginTabBar(${1:ctx}, ${2:str_id}, ${3:optional_flagsIn})$0",
	"description": "Create and append into a TabBar.\n\n"
	},

	"ImGui_BeginTabItem lua": {
	"prefix": "reaper.ImGui_BeginTabItem",
	"scope": "lua",
	"body": "retval, optional_p_open = reaper.ImGui_BeginTabItem(${1:ctx}, ${2:label}, ${3:optional_p_open}, ${4:optional_flagsIn})$0",
	"description": "Create a Tab. Returns true if the Tab is selected.\nSet 'p_open' to true to enable the close button.\n\n"
	},

	"ImGui_BeginTable lua": {
	"prefix": "reaper.ImGui_BeginTable",
	"scope": "lua",
	"body": "reaper.ImGui_BeginTable(${1:ctx}, ${2:str_id}, ${3:column}, ${4:optional_flagsIn}, ${5:optional_outer_size_wIn}, ${6:optional_outer_size_hIn}, ${7:optional_inner_widthIn})$0",
	"description": ""
	},

	"ImGui_BeginTooltip lua": {
	"prefix": "reaper.ImGui_BeginTooltip",
	"scope": "lua",
	"body": "reaper.ImGui_BeginTooltip(${1:ctx})$0",
	"description": "Begin/append a tooltip window.\nTo create full-featured tooltip (with any kind of items).\n\n"
	},

	"ImGui_Bullet lua": {
	"prefix": "reaper.ImGui_Bullet",
	"scope": "lua",
	"body": "reaper.ImGui_Bullet(${1:ctx})$0",
	"description": "Draw a small circle + keep the cursor on the same line.\nAdvance cursor x position by GetTreeNodeToLabelSpacing,\nsame distance that TreeNode uses.\n\n"
	},

	"ImGui_BulletText lua": {
	"prefix": "reaper.ImGui_BulletText",
	"scope": "lua",
	"body": "reaper.ImGui_BulletText(${1:ctx}, ${2:text})$0",
	"description": "Shortcut for Bullet + Text.\n\n"
	},

	"ImGui_Button lua": {
	"prefix": "reaper.ImGui_Button",
	"scope": "lua",
	"body": "reaper.ImGui_Button(${1:ctx}, ${2:label}, ${3:optional_size_wIn}, ${4:optional_size_hIn})$0",
	"description": ""
	},

	"ImGui_ButtonFlags_MouseButtonLeft lua": {
	"prefix": "reaper.ImGui_ButtonFlags_MouseButtonLeft",
	"scope": "lua",
	"body": "reaper.ImGui_ButtonFlags_MouseButtonLeft()\n\n",
	"description": "React on left mouse button (default).\n\n"
	},

	"ImGui_ButtonFlags_MouseButtonMiddle lua": {
	"prefix": "reaper.ImGui_ButtonFlags_MouseButtonMiddle",
	"scope": "lua",
	"body": "reaper.ImGui_ButtonFlags_MouseButtonMiddle()\n\n",
	"description": "React on center mouse button.\n\n"
	},

	"ImGui_ButtonFlags_MouseButtonRight lua": {
	"prefix": "reaper.ImGui_ButtonFlags_MouseButtonRight",
	"scope": "lua",
	"body": "reaper.ImGui_ButtonFlags_MouseButtonRight()\n\n",
	"description": "React on right mouse button.\n\n"
	},

	"ImGui_ButtonFlags_None lua": {
	"prefix": "reaper.ImGui_ButtonFlags_None",
	"scope": "lua",
	"body": "reaper.ImGui_ButtonFlags_None()\n\n",
	"description": ""
	},

	"ImGui_CalcItemWidth lua": {
	"prefix": "reaper.ImGui_CalcItemWidth",
	"scope": "lua",
	"body": "reaper.ImGui_CalcItemWidth(${1:ctx})$0",
	"description": "Width of item given pushed settings and current cursor position.\nNOT necessarily the width of last item unlike most 'Item' functions.\n\n"
	},

	"ImGui_CalcTextSize lua": {
	"prefix": "reaper.ImGui_CalcTextSize",
	"scope": "lua",
	"body": "w, h = reaper.ImGui_CalcTextSize(${1:ctx}, ${2:text}, ${3:w}, ${4:h}, ${5:optional_hide_text_after_double_hashIn}, ${6:optional_wrap_widthIn})$0",
	"description": ""
	},

	"ImGui_Checkbox lua": {
	"prefix": "reaper.ImGui_Checkbox",
	"scope": "lua",
	"body": "retval, v = reaper.ImGui_Checkbox(${1:ctx}, ${2:label}, ${3:v})$0",
	"description": ""
	},

	"ImGui_CheckboxFlags lua": {
	"prefix": "reaper.ImGui_CheckboxFlags",
	"scope": "lua",
	"body": "retval, flags = reaper.ImGui_CheckboxFlags(${1:ctx}, ${2:label}, ${3:flags}, ${4:flags_value})$0",
	"description": ""
	},

	"ImGui_CloseCurrentPopup lua": {
	"prefix": "reaper.ImGui_CloseCurrentPopup",
	"scope": "lua",
	"body": "reaper.ImGui_CloseCurrentPopup(${1:ctx})$0",
	"description": "Manually close the popup we have begin-ed into.\nUse inside the BeginPopup/EndPopup scope to close manually.\nCloseCurrentPopup() is called by default by Selectable/MenuItem when activated.\n\n"
	},

	"ImGui_Col_Border lua": {
	"prefix": "reaper.ImGui_Col_Border",
	"scope": "lua",
	"body": "reaper.ImGui_Col_Border()\n\n",
	"description": ""
	},

	"ImGui_Col_BorderShadow lua": {
	"prefix": "reaper.ImGui_Col_BorderShadow",
	"scope": "lua",
	"body": "reaper.ImGui_Col_BorderShadow()\n\n",
	"description": ""
	},

	"ImGui_Col_Button lua": {
	"prefix": "reaper.ImGui_Col_Button",
	"scope": "lua",
	"body": "reaper.ImGui_Col_Button()\n\n",
	"description": ""
	},

	"ImGui_Col_ButtonActive lua": {
	"prefix": "reaper.ImGui_Col_ButtonActive",
	"scope": "lua",
	"body": "reaper.ImGui_Col_ButtonActive()\n\n",
	"description": ""
	},

	"ImGui_Col_ButtonHovered lua": {
	"prefix": "reaper.ImGui_Col_ButtonHovered",
	"scope": "lua",
	"body": "reaper.ImGui_Col_ButtonHovered()\n\n",
	"description": ""
	},

	"ImGui_Col_CheckMark lua": {
	"prefix": "reaper.ImGui_Col_CheckMark",
	"scope": "lua",
	"body": "reaper.ImGui_Col_CheckMark()\n\n",
	"description": ""
	},

	"ImGui_Col_ChildBg lua": {
	"prefix": "reaper.ImGui_Col_ChildBg",
	"scope": "lua",
	"body": "reaper.ImGui_Col_ChildBg()\n\n",
	"description": "Background of child windows.\n\n"
	},

	"ImGui_Col_DockingEmptyBg lua": {
	"prefix": "reaper.ImGui_Col_DockingEmptyBg",
	"scope": "lua",
	"body": "reaper.ImGui_Col_DockingEmptyBg()\n\n",
	"description": "Background color for empty node (e.g. CentralNode with no window docked into it).\n\n"
	},

	"ImGui_Col_DockingPreview lua": {
	"prefix": "reaper.ImGui_Col_DockingPreview",
	"scope": "lua",
	"body": "reaper.ImGui_Col_DockingPreview()\n\n",
	"description": "Preview overlay color when about to docking something.\n\n"
	},

	"ImGui_Col_DragDropTarget lua": {
	"prefix": "reaper.ImGui_Col_DragDropTarget",
	"scope": "lua",
	"body": "reaper.ImGui_Col_DragDropTarget()\n\n",
	"description": "Rectangle highlighting a drop target\n\n"
	},

	"ImGui_Col_FrameBg lua": {
	"prefix": "reaper.ImGui_Col_FrameBg",
	"scope": "lua",
	"body": "reaper.ImGui_Col_FrameBg()\n\n",
	"description": "Background of checkbox, radio button, plot, slider, text input.\n\n"
	},

	"ImGui_Col_FrameBgActive lua": {
	"prefix": "reaper.ImGui_Col_FrameBgActive",
	"scope": "lua",
	"body": "reaper.ImGui_Col_FrameBgActive()\n\n",
	"description": ""
	},

	"ImGui_Col_FrameBgHovered lua": {
	"prefix": "reaper.ImGui_Col_FrameBgHovered",
	"scope": "lua",
	"body": "reaper.ImGui_Col_FrameBgHovered()\n\n",
	"description": ""
	},

	"ImGui_Col_Header lua": {
	"prefix": "reaper.ImGui_Col_Header",
	"scope": "lua",
	"body": "reaper.ImGui_Col_Header()\n\n",
	"description": "Header* colors are used for CollapsingHeader, TreeNode, Selectable, MenuItem.\n\n"
	},

	"ImGui_Col_HeaderActive lua": {
	"prefix": "reaper.ImGui_Col_HeaderActive",
	"scope": "lua",
	"body": "reaper.ImGui_Col_HeaderActive()\n\n",
	"description": ""
	},

	"ImGui_Col_HeaderHovered lua": {
	"prefix": "reaper.ImGui_Col_HeaderHovered",
	"scope": "lua",
	"body": "reaper.ImGui_Col_HeaderHovered()\n\n",
	"description": ""
	},

	"ImGui_Col_MenuBarBg lua": {
	"prefix": "reaper.ImGui_Col_MenuBarBg",
	"scope": "lua",
	"body": "reaper.ImGui_Col_MenuBarBg()\n\n",
	"description": ""
	},

	"ImGui_Col_ModalWindowDimBg lua": {
	"prefix": "reaper.ImGui_Col_ModalWindowDimBg",
	"scope": "lua",
	"body": "reaper.ImGui_Col_ModalWindowDimBg()\n\n",
	"description": "Darken/colorize entire screen behind a modal window, when one is active.\n\n"
	},

	"ImGui_Col_NavHighlight lua": {
	"prefix": "reaper.ImGui_Col_NavHighlight",
	"scope": "lua",
	"body": "reaper.ImGui_Col_NavHighlight()\n\n",
	"description": "Gamepad/keyboard: current highlighted item.\n\n"
	},

	"ImGui_Col_NavWindowingDimBg lua": {
	"prefix": "reaper.ImGui_Col_NavWindowingDimBg",
	"scope": "lua",
	"body": "reaper.ImGui_Col_NavWindowingDimBg()\n\n",
	"description": "Darken/colorize entire screen behind the CTRL+TAB window list, when active.\n\n"
	},

	"ImGui_Col_NavWindowingHighlight lua": {
	"prefix": "reaper.ImGui_Col_NavWindowingHighlight",
	"scope": "lua",
	"body": "reaper.ImGui_Col_NavWindowingHighlight()\n\n",
	"description": "Highlight window when using CTRL+TAB.\n\n"
	},

	"ImGui_Col_PlotHistogram lua": {
	"prefix": "reaper.ImGui_Col_PlotHistogram",
	"scope": "lua",
	"body": "reaper.ImGui_Col_PlotHistogram()\n\n",
	"description": ""
	},

	"ImGui_Col_PlotHistogramHovered lua": {
	"prefix": "reaper.ImGui_Col_PlotHistogramHovered",
	"scope": "lua",
	"body": "reaper.ImGui_Col_PlotHistogramHovered()\n\n",
	"description": ""
	},

	"ImGui_Col_PlotLines lua": {
	"prefix": "reaper.ImGui_Col_PlotLines",
	"scope": "lua",
	"body": "reaper.ImGui_Col_PlotLines()\n\n",
	"description": ""
	},

	"ImGui_Col_PlotLinesHovered lua": {
	"prefix": "reaper.ImGui_Col_PlotLinesHovered",
	"scope": "lua",
	"body": "reaper.ImGui_Col_PlotLinesHovered()\n\n",
	"description": ""
	},

	"ImGui_Col_PopupBg lua": {
	"prefix": "reaper.ImGui_Col_PopupBg",
	"scope": "lua",
	"body": "reaper.ImGui_Col_PopupBg()\n\n",
	"description": "Background of popups, menus, tooltips windows.\n\n"
	},

	"ImGui_Col_ResizeGrip lua": {
	"prefix": "reaper.ImGui_Col_ResizeGrip",
	"scope": "lua",
	"body": "reaper.ImGui_Col_ResizeGrip()\n\n",
	"description": "Resize grip in lower-right and lower-left corners of windows.\n\n"
	},

	"ImGui_Col_ResizeGripActive lua": {
	"prefix": "reaper.ImGui_Col_ResizeGripActive",
	"scope": "lua",
	"body": "reaper.ImGui_Col_ResizeGripActive()\n\n",
	"description": ""
	},

	"ImGui_Col_ResizeGripHovered lua": {
	"prefix": "reaper.ImGui_Col_ResizeGripHovered",
	"scope": "lua",
	"body": "reaper.ImGui_Col_ResizeGripHovered()\n\n",
	"description": ""
	},

	"ImGui_Col_ScrollbarBg lua": {
	"prefix": "reaper.ImGui_Col_ScrollbarBg",
	"scope": "lua",
	"body": "reaper.ImGui_Col_ScrollbarBg()\n\n",
	"description": ""
	},

	"ImGui_Col_ScrollbarGrab lua": {
	"prefix": "reaper.ImGui_Col_ScrollbarGrab",
	"scope": "lua",
	"body": "reaper.ImGui_Col_ScrollbarGrab()\n\n",
	"description": ""
	},

	"ImGui_Col_ScrollbarGrabActive lua": {
	"prefix": "reaper.ImGui_Col_ScrollbarGrabActive",
	"scope": "lua",
	"body": "reaper.ImGui_Col_ScrollbarGrabActive()\n\n",
	"description": ""
	},

	"ImGui_Col_ScrollbarGrabHovered lua": {
	"prefix": "reaper.ImGui_Col_ScrollbarGrabHovered",
	"scope": "lua",
	"body": "reaper.ImGui_Col_ScrollbarGrabHovered()\n\n",
	"description": ""
	},

	"ImGui_Col_Separator lua": {
	"prefix": "reaper.ImGui_Col_Separator",
	"scope": "lua",
	"body": "reaper.ImGui_Col_Separator()\n\n",
	"description": ""
	},

	"ImGui_Col_SeparatorActive lua": {
	"prefix": "reaper.ImGui_Col_SeparatorActive",
	"scope": "lua",
	"body": "reaper.ImGui_Col_SeparatorActive()\n\n",
	"description": ""
	},

	"ImGui_Col_SeparatorHovered lua": {
	"prefix": "reaper.ImGui_Col_SeparatorHovered",
	"scope": "lua",
	"body": "reaper.ImGui_Col_SeparatorHovered()\n\n",
	"description": ""
	},

	"ImGui_Col_SliderGrab lua": {
	"prefix": "reaper.ImGui_Col_SliderGrab",
	"scope": "lua",
	"body": "reaper.ImGui_Col_SliderGrab()\n\n",
	"description": ""
	},

	"ImGui_Col_SliderGrabActive lua": {
	"prefix": "reaper.ImGui_Col_SliderGrabActive",
	"scope": "lua",
	"body": "reaper.ImGui_Col_SliderGrabActive()\n\n",
	"description": ""
	},

	"ImGui_Col_Tab lua": {
	"prefix": "reaper.ImGui_Col_Tab",
	"scope": "lua",
	"body": "reaper.ImGui_Col_Tab()\n\n",
	"description": "TabItem in a TabBar\n\n"
	},

	"ImGui_Col_TabActive lua": {
	"prefix": "reaper.ImGui_Col_TabActive",
	"scope": "lua",
	"body": "reaper.ImGui_Col_TabActive()\n\n",
	"description": ""
	},

	"ImGui_Col_TabHovered lua": {
	"prefix": "reaper.ImGui_Col_TabHovered",
	"scope": "lua",
	"body": "reaper.ImGui_Col_TabHovered()\n\n",
	"description": ""
	},

	"ImGui_Col_TabUnfocused lua": {
	"prefix": "reaper.ImGui_Col_TabUnfocused",
	"scope": "lua",
	"body": "reaper.ImGui_Col_TabUnfocused()\n\n",
	"description": ""
	},

	"ImGui_Col_TabUnfocusedActive lua": {
	"prefix": "reaper.ImGui_Col_TabUnfocusedActive",
	"scope": "lua",
	"body": "reaper.ImGui_Col_TabUnfocusedActive()\n\n",
	"description": ""
	},

	"ImGui_Col_TableBorderLight lua": {
	"prefix": "reaper.ImGui_Col_TableBorderLight",
	"scope": "lua",
	"body": "reaper.ImGui_Col_TableBorderLight()\n\n",
	"description": "Table inner borders (prefer using Alpha=1.0 here).\n\n"
	},

	"ImGui_Col_TableBorderStrong lua": {
	"prefix": "reaper.ImGui_Col_TableBorderStrong",
	"scope": "lua",
	"body": "reaper.ImGui_Col_TableBorderStrong()\n\n",
	"description": "Table outer and header borders (prefer using Alpha=1.0 here).\n\n"
	},

	"ImGui_Col_TableHeaderBg lua": {
	"prefix": "reaper.ImGui_Col_TableHeaderBg",
	"scope": "lua",
	"body": "reaper.ImGui_Col_TableHeaderBg()\n\n",
	"description": "Table header background.\n\n"
	},

	"ImGui_Col_TableRowBg lua": {
	"prefix": "reaper.ImGui_Col_TableRowBg",
	"scope": "lua",
	"body": "reaper.ImGui_Col_TableRowBg()\n\n",
	"description": "Table row background (even rows).\n\n"
	},

	"ImGui_Col_TableRowBgAlt lua": {
	"prefix": "reaper.ImGui_Col_TableRowBgAlt",
	"scope": "lua",
	"body": "reaper.ImGui_Col_TableRowBgAlt()\n\n",
	"description": "Table row background (odd rows).\n\n"
	},

	"ImGui_Col_Text lua": {
	"prefix": "reaper.ImGui_Col_Text",
	"scope": "lua",
	"body": "reaper.ImGui_Col_Text()\n\n",
	"description": ""
	},

	"ImGui_Col_TextDisabled lua": {
	"prefix": "reaper.ImGui_Col_TextDisabled",
	"scope": "lua",
	"body": "reaper.ImGui_Col_TextDisabled()\n\n",
	"description": ""
	},

	"ImGui_Col_TextSelectedBg lua": {
	"prefix": "reaper.ImGui_Col_TextSelectedBg",
	"scope": "lua",
	"body": "reaper.ImGui_Col_TextSelectedBg()\n\n",
	"description": ""
	},

	"ImGui_Col_TitleBg lua": {
	"prefix": "reaper.ImGui_Col_TitleBg",
	"scope": "lua",
	"body": "reaper.ImGui_Col_TitleBg()\n\n",
	"description": ""
	},

	"ImGui_Col_TitleBgActive lua": {
	"prefix": "reaper.ImGui_Col_TitleBgActive",
	"scope": "lua",
	"body": "reaper.ImGui_Col_TitleBgActive()\n\n",
	"description": ""
	},

	"ImGui_Col_TitleBgCollapsed lua": {
	"prefix": "reaper.ImGui_Col_TitleBgCollapsed",
	"scope": "lua",
	"body": "reaper.ImGui_Col_TitleBgCollapsed()\n\n",
	"description": ""
	},

	"ImGui_Col_WindowBg lua": {
	"prefix": "reaper.ImGui_Col_WindowBg",
	"scope": "lua",
	"body": "reaper.ImGui_Col_WindowBg()\n\n",
	"description": "Background of normal windows. See also WindowFlags_NoBackground.\n\n"
	},

	"ImGui_CollapsingHeader lua": {
	"prefix": "reaper.ImGui_CollapsingHeader",
	"scope": "lua",
	"body": "retval, p_visible = reaper.ImGui_CollapsingHeader(${1:ctx}, ${2:label}, ${3:p_visible}, ${4:optional_flagsIn})$0",
	"description": "Returns true when opened but do not indent nor push into the ID stack\n(because of the TreeNodeFlags_NoTreePushOnOpen flag).\nThis is basically the same as calling TreeNode(label, TreeNodeFlags_CollapsingHeader).\nYou can remove the _NoTreePushOnOpen flag if you want behavior closer to normal\nTreeNode.\nWhen 'visible' is provided: if 'true' display an additional small close button\non upper right of the header which will set the bool to false when clicked,\nif 'false' don't display the header.\n\n"
	},

	"ImGui_ColorButton lua": {
	"prefix": "reaper.ImGui_ColorButton",
	"scope": "lua",
	"body": "reaper.ImGui_ColorButton(${1:ctx}, ${2:desc_id}, ${3:col_rgba}, ${4:optional_flagsIn}, ${5:optional_size_wIn}, ${6:optional_size_hIn})$0",
	"description": "Display a color square/button, hover for details, return true when pressed.\nColor is in 0xRRGGBBAA or, if ColorEditFlags_NoAlpha is set, 0xRRGGBB.\n\n"
	},

	"ImGui_ColorConvertDouble4ToU32 lua": {
	"prefix": "reaper.ImGui_ColorConvertDouble4ToU32",
	"scope": "lua",
	"body": "reaper.ImGui_ColorConvertDouble4ToU32(${1:r}, ${2:g}, ${3:b}, ${4:a})$0",
	"description": "Pack 0..1 RGBA values into a 32-bit integer (0xRRGGBBAA).\n\n"
	},

	"ImGui_ColorConvertHSVtoRGB lua": {
	"prefix": "reaper.ImGui_ColorConvertHSVtoRGB",
	"scope": "lua",
	"body": "r, g, b = reaper.ImGui_ColorConvertHSVtoRGB(${1:h}, ${2:s}, ${3:v})$0",
	"description": "Convert HSV values (0..1) into RGB (0..1).\n\n"
	},

	"ImGui_ColorConvertNative lua": {
	"prefix": "reaper.ImGui_ColorConvertNative",
	"scope": "lua",
	"body": "reaper.ImGui_ColorConvertNative(${1:rgb})$0",
	"description": "Convert a native color coming from REAPER or 0xRRGGBB to native.\nThis swaps the red and blue channels on Windows.\n\n"
	},

	"ImGui_ColorConvertRGBtoHSV lua": {
	"prefix": "reaper.ImGui_ColorConvertRGBtoHSV",
	"scope": "lua",
	"body": "h, s, v = reaper.ImGui_ColorConvertRGBtoHSV(${1:r}, ${2:g}, ${3:b})$0",
	"description": "Convert RGB values (0..1) into HSV (0..1).\n\n"
	},

	"ImGui_ColorConvertU32ToDouble4 lua": {
	"prefix": "reaper.ImGui_ColorConvertU32ToDouble4",
	"scope": "lua",
	"body": "r, g, b, a = reaper.ImGui_ColorConvertU32ToDouble4(${1:rgba})$0",
	"description": "Unpack a 32-bit integer (0xRRGGBBAA) into separate RGBA values (0..1).\n\n"
	},

	"ImGui_ColorEdit3 lua": {
	"prefix": "reaper.ImGui_ColorEdit3",
	"scope": "lua",
	"body": "retval, col_rgb = reaper.ImGui_ColorEdit3(${1:ctx}, ${2:label}, ${3:col_rgb}, ${4:optional_flagsIn})$0",
	"description": "Color is in 0xXXRRGGBB. XX is ignored and will not be modified.\n\n"
	},

	"ImGui_ColorEdit4 lua": {
	"prefix": "reaper.ImGui_ColorEdit4",
	"scope": "lua",
	"body": "retval, col_rgba = reaper.ImGui_ColorEdit4(${1:ctx}, ${2:label}, ${3:col_rgba}, ${4:optional_flagsIn})$0",
	"description": "Color is in 0xRRGGBBAA or, if ColorEditFlags_NoAlpha is set, 0xXXRRGGBB\n(XX is ignored and will not be modified).\n\n"
	},

	"ImGui_ColorEditFlags_AlphaBar lua": {
	"prefix": "reaper.ImGui_ColorEditFlags_AlphaBar",
	"scope": "lua",
	"body": "reaper.ImGui_ColorEditFlags_AlphaBar()\n\n",
	"description": "ColorEdit, ColorPicker: show vertical alpha bar/gradient in picker.\n\n"
	},

	"ImGui_ColorEditFlags_AlphaPreview lua": {
	"prefix": "reaper.ImGui_ColorEditFlags_AlphaPreview",
	"scope": "lua",
	"body": "reaper.ImGui_ColorEditFlags_AlphaPreview()\n\n",
	"description": "ColorEdit, ColorPicker, ColorButton: display preview as a transparent color\nover a checkerboard, instead of opaque.\n\n"
	},

	"ImGui_ColorEditFlags_AlphaPreviewHalf lua": {
	"prefix": "reaper.ImGui_ColorEditFlags_AlphaPreviewHalf",
	"scope": "lua",
	"body": "reaper.ImGui_ColorEditFlags_AlphaPreviewHalf()\n\n",
	"description": "ColorEdit, ColorPicker, ColorButton: display half opaque / half checkerboard,\ninstead of opaque.\n\n"
	},

	"ImGui_ColorEditFlags_DisplayHSV lua": {
	"prefix": "reaper.ImGui_ColorEditFlags_DisplayHSV",
	"scope": "lua",
	"body": "reaper.ImGui_ColorEditFlags_DisplayHSV()\n\n",
	"description": "ColorEdit: override _display_ type to HSV. ColorPicker:\nselect any combination using one or more of RGB/HSV/Hex.\n\n"
	},

	"ImGui_ColorEditFlags_DisplayHex lua": {
	"prefix": "reaper.ImGui_ColorEditFlags_DisplayHex",
	"scope": "lua",
	"body": "reaper.ImGui_ColorEditFlags_DisplayHex()\n\n",
	"description": "ColorEdit: override _display_ type to Hex. ColorPicker:\nselect any combination using one or more of RGB/HSV/Hex.\n\n"
	},

	"ImGui_ColorEditFlags_DisplayRGB lua": {
	"prefix": "reaper.ImGui_ColorEditFlags_DisplayRGB",
	"scope": "lua",
	"body": "reaper.ImGui_ColorEditFlags_DisplayRGB()\n\n",
	"description": "ColorEdit: override _display_ type to RGB. ColorPicker:\nselect any combination using one or more of RGB/HSV/Hex.\n\n"
	},

	"ImGui_ColorEditFlags_Float lua": {
	"prefix": "reaper.ImGui_ColorEditFlags_Float",
	"scope": "lua",
	"body": "reaper.ImGui_ColorEditFlags_Float()\n\n",
	"description": "ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0.0..1.0\nfloats instead of 0..255 integers. No round-trip of value via integers.\n\n"
	},

	"ImGui_ColorEditFlags_InputHSV lua": {
	"prefix": "reaper.ImGui_ColorEditFlags_InputHSV",
	"scope": "lua",
	"body": "reaper.ImGui_ColorEditFlags_InputHSV()\n\n",
	"description": "ColorEdit, ColorPicker: input and output data in HSV format.\n\n"
	},

	"ImGui_ColorEditFlags_InputRGB lua": {
	"prefix": "reaper.ImGui_ColorEditFlags_InputRGB",
	"scope": "lua",
	"body": "reaper.ImGui_ColorEditFlags_InputRGB()\n\n",
	"description": "ColorEdit, ColorPicker: input and output data in RGB format.\n\n"
	},

	"ImGui_ColorEditFlags_NoAlpha lua": {
	"prefix": "reaper.ImGui_ColorEditFlags_NoAlpha",
	"scope": "lua",
	"body": "reaper.ImGui_ColorEditFlags_NoAlpha()\n\n",
	"description": "ColorEdit, ColorPicker, ColorButton: ignore Alpha component\n(will only read 3 components from the input pointer).\n\n"
	},

	"ImGui_ColorEditFlags_NoBorder lua": {
	"prefix": "reaper.ImGui_ColorEditFlags_NoBorder",
	"scope": "lua",
	"body": "reaper.ImGui_ColorEditFlags_NoBorder()\n\n",
	"description": "ColorButton: disable border (which is enforced by default).\n\n"
	},

	"ImGui_ColorEditFlags_NoDragDrop lua": {
	"prefix": "reaper.ImGui_ColorEditFlags_NoDragDrop",
	"scope": "lua",
	"body": "reaper.ImGui_ColorEditFlags_NoDragDrop()\n\n",
	"description": "ColorEdit: disable drag and drop target. ColorButton: disable drag and drop source.\n\n"
	},

	"ImGui_ColorEditFlags_NoInputs lua": {
	"prefix": "reaper.ImGui_ColorEditFlags_NoInputs",
	"scope": "lua",
	"body": "reaper.ImGui_ColorEditFlags_NoInputs()\n\n",
	"description": "ColorEdit, ColorPicker: disable inputs sliders/text widgets\n(e.g. to show only the small preview color square).\n\n"
	},

	"ImGui_ColorEditFlags_NoLabel lua": {
	"prefix": "reaper.ImGui_ColorEditFlags_NoLabel",
	"scope": "lua",
	"body": "reaper.ImGui_ColorEditFlags_NoLabel()\n\n",
	"description": "ColorEdit, ColorPicker: disable display of inline text label\n(the label is still forwarded to the tooltip and picker).\n\n"
	},

	"ImGui_ColorEditFlags_NoOptions lua": {
	"prefix": "reaper.ImGui_ColorEditFlags_NoOptions",
	"scope": "lua",
	"body": "reaper.ImGui_ColorEditFlags_NoOptions()\n\n",
	"description": "ColorEdit: disable toggling options menu when right-clicking on inputs/small preview.\n\n"
	},

	"ImGui_ColorEditFlags_NoPicker lua": {
	"prefix": "reaper.ImGui_ColorEditFlags_NoPicker",
	"scope": "lua",
	"body": "reaper.ImGui_ColorEditFlags_NoPicker()\n\n",
	"description": "ColorEdit: disable picker when clicking on color square.\n\n"
	},

	"ImGui_ColorEditFlags_NoSidePreview lua": {
	"prefix": "reaper.ImGui_ColorEditFlags_NoSidePreview",
	"scope": "lua",
	"body": "reaper.ImGui_ColorEditFlags_NoSidePreview()\n\n",
	"description": "ColorPicker: disable bigger color preview on right side of the picker,\nuse small color square preview instead.\n\n"
	},

	"ImGui_ColorEditFlags_NoSmallPreview lua": {
	"prefix": "reaper.ImGui_ColorEditFlags_NoSmallPreview",
	"scope": "lua",
	"body": "reaper.ImGui_ColorEditFlags_NoSmallPreview()\n\n",
	"description": "ColorEdit, ColorPicker: disable color square preview next to the inputs.\n(e.g. to show only the inputs).\n\n"
	},

	"ImGui_ColorEditFlags_NoTooltip lua": {
	"prefix": "reaper.ImGui_ColorEditFlags_NoTooltip",
	"scope": "lua",
	"body": "reaper.ImGui_ColorEditFlags_NoTooltip()\n\n",
	"description": "ColorEdit, ColorPicker, ColorButton: disable tooltip when hovering the preview.\n\n"
	},

	"ImGui_ColorEditFlags_None lua": {
	"prefix": "reaper.ImGui_ColorEditFlags_None",
	"scope": "lua",
	"body": "reaper.ImGui_ColorEditFlags_None()\n\n",
	"description": ""
	},

	"ImGui_ColorEditFlags_PickerHueBar lua": {
	"prefix": "reaper.ImGui_ColorEditFlags_PickerHueBar",
	"scope": "lua",
	"body": "reaper.ImGui_ColorEditFlags_PickerHueBar()\n\n",
	"description": "ColorPicker: bar for Hue, rectangle for Sat/Value.\n\n"
	},

	"ImGui_ColorEditFlags_PickerHueWheel lua": {
	"prefix": "reaper.ImGui_ColorEditFlags_PickerHueWheel",
	"scope": "lua",
	"body": "reaper.ImGui_ColorEditFlags_PickerHueWheel()\n\n",
	"description": "ColorPicker: wheel for Hue, triangle for Sat/Value.\n\n"
	},

	"ImGui_ColorEditFlags_Uint8 lua": {
	"prefix": "reaper.ImGui_ColorEditFlags_Uint8",
	"scope": "lua",
	"body": "reaper.ImGui_ColorEditFlags_Uint8()\n\n",
	"description": "ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0..255.\n\n"
	},

	"ImGui_ColorPicker3 lua": {
	"prefix": "reaper.ImGui_ColorPicker3",
	"scope": "lua",
	"body": "retval, col_rgb = reaper.ImGui_ColorPicker3(${1:ctx}, ${2:label}, ${3:col_rgb}, ${4:optional_flagsIn})$0",
	"description": "Color is in 0xXXRRGGBB. XX is ignored and will not be modified.\n\n"
	},

	"ImGui_ColorPicker4 lua": {
	"prefix": "reaper.ImGui_ColorPicker4",
	"scope": "lua",
	"body": "retval, col_rgba = reaper.ImGui_ColorPicker4(${1:ctx}, ${2:label}, ${3:col_rgba}, ${4:optional_flagsIn}, ${5:optional_ref_colIn})$0",
	"description": ""
	},

	"ImGui_Combo lua": {
	"prefix": "reaper.ImGui_Combo",
	"scope": "lua",
	"body": "retval, current_item = reaper.ImGui_Combo(${1:ctx}, ${2:label}, ${3:current_item}, ${4:items}, ${5:optional_popup_max_height_in_itemsIn})$0",
	"description": "Helper over BeginCombo/EndCombo for convenience purpose. Each item must be\nnull-terminated (requires REAPER v6.44 or newer for EEL and Lua).\n\n"
	},

	"ImGui_ComboFlags_HeightLarge lua": {
	"prefix": "reaper.ImGui_ComboFlags_HeightLarge",
	"scope": "lua",
	"body": "reaper.ImGui_ComboFlags_HeightLarge()\n\n",
	"description": "Max ~20 items visible.\n\n"
	},

	"ImGui_ComboFlags_HeightLargest lua": {
	"prefix": "reaper.ImGui_ComboFlags_HeightLargest",
	"scope": "lua",
	"body": "reaper.ImGui_ComboFlags_HeightLargest()\n\n",
	"description": "As many fitting items as possible.\n\n"
	},

	"ImGui_ComboFlags_HeightRegular lua": {
	"prefix": "reaper.ImGui_ComboFlags_HeightRegular",
	"scope": "lua",
	"body": "reaper.ImGui_ComboFlags_HeightRegular()\n\n",
	"description": "Max ~8 items visible (default).\n\n"
	},

	"ImGui_ComboFlags_HeightSmall lua": {
	"prefix": "reaper.ImGui_ComboFlags_HeightSmall",
	"scope": "lua",
	"body": "reaper.ImGui_ComboFlags_HeightSmall()\n\n",
	"description": "Max ~4 items visible. Tip: If you want your combo popup to be a specific size\nyou can use SetNextWindowSizeConstraints prior to calling BeginCombo.\n\n"
	},

	"ImGui_ComboFlags_NoArrowButton lua": {
	"prefix": "reaper.ImGui_ComboFlags_NoArrowButton",
	"scope": "lua",
	"body": "reaper.ImGui_ComboFlags_NoArrowButton()\n\n",
	"description": "Display on the preview box without the square arrow button.\n\n"
	},

	"ImGui_ComboFlags_NoPreview lua": {
	"prefix": "reaper.ImGui_ComboFlags_NoPreview",
	"scope": "lua",
	"body": "reaper.ImGui_ComboFlags_NoPreview()\n\n",
	"description": "Display only a square arrow button.\n\n"
	},

	"ImGui_ComboFlags_None lua": {
	"prefix": "reaper.ImGui_ComboFlags_None",
	"scope": "lua",
	"body": "reaper.ImGui_ComboFlags_None()\n\n",
	"description": ""
	},

	"ImGui_ComboFlags_PopupAlignLeft lua": {
	"prefix": "reaper.ImGui_ComboFlags_PopupAlignLeft",
	"scope": "lua",
	"body": "reaper.ImGui_ComboFlags_PopupAlignLeft()\n\n",
	"description": "Align the popup toward the left by default.\n\n"
	},

	"ImGui_Cond_Always lua": {
	"prefix": "reaper.ImGui_Cond_Always",
	"scope": "lua",
	"body": "reaper.ImGui_Cond_Always()\n\n",
	"description": "No condition (always set the variable).\n\n"
	},

	"ImGui_Cond_Appearing lua": {
	"prefix": "reaper.ImGui_Cond_Appearing",
	"scope": "lua",
	"body": "reaper.ImGui_Cond_Appearing()\n\n",
	"description": "Set the variable if the object/window is appearing after being\nhidden/inactive (or the first time).\n\n"
	},

	"ImGui_Cond_FirstUseEver lua": {
	"prefix": "reaper.ImGui_Cond_FirstUseEver",
	"scope": "lua",
	"body": "reaper.ImGui_Cond_FirstUseEver()\n\n",
	"description": "Set the variable if the object/window has no persistently saved data\n(no entry in .ini file).\n\n"
	},

	"ImGui_Cond_Once lua": {
	"prefix": "reaper.ImGui_Cond_Once",
	"scope": "lua",
	"body": "reaper.ImGui_Cond_Once()\n\n",
	"description": "Set the variable once per runtime session (only the first call will succeed).\n\n"
	},

	"ImGui_ConfigFlags_DockingEnable lua": {
	"prefix": "reaper.ImGui_ConfigFlags_DockingEnable",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigFlags_DockingEnable()\n\n",
	"description": "[BETA] Enable docking functionality.\n\n"
	},

	"ImGui_ConfigFlags_NavEnableKeyboard lua": {
	"prefix": "reaper.ImGui_ConfigFlags_NavEnableKeyboard",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigFlags_NavEnableKeyboard()\n\n",
	"description": "Master keyboard navigation enable flag.\n\n"
	},

	"ImGui_ConfigFlags_NavEnableSetMousePos lua": {
	"prefix": "reaper.ImGui_ConfigFlags_NavEnableSetMousePos",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigFlags_NavEnableSetMousePos()\n\n",
	"description": "Instruct navigation to move the mouse cursor.\n\n"
	},

	"ImGui_ConfigFlags_NavNoCaptureKeyboard lua": {
	"prefix": "reaper.ImGui_ConfigFlags_NavNoCaptureKeyboard",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigFlags_NavNoCaptureKeyboard()\n\n",
	"description": "Instruct navigation to not capture global keyboard input when\nConfigFlags_NavEnableKeyboard is set (see SetNextFrameWantCaptureKeyboard).\n\n"
	},

	"ImGui_ConfigFlags_NoMouse lua": {
	"prefix": "reaper.ImGui_ConfigFlags_NoMouse",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigFlags_NoMouse()\n\n",
	"description": "Instruct imgui to ignore mouse position/buttons.\n\n"
	},

	"ImGui_ConfigFlags_NoMouseCursorChange lua": {
	"prefix": "reaper.ImGui_ConfigFlags_NoMouseCursorChange",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigFlags_NoMouseCursorChange()\n\n",
	"description": "Instruct backend to not alter mouse cursor shape and visibility.\n\n"
	},

	"ImGui_ConfigFlags_NoSavedSettings lua": {
	"prefix": "reaper.ImGui_ConfigFlags_NoSavedSettings",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigFlags_NoSavedSettings()\n\n",
	"description": "Disable state restoration and persistence for the whole context.\n\n"
	},

	"ImGui_ConfigFlags_None lua": {
	"prefix": "reaper.ImGui_ConfigFlags_None",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigFlags_None()\n\n",
	"description": ""
	},

	"ImGui_ConfigVar_DockingNoSplit lua": {
	"prefix": "reaper.ImGui_ConfigVar_DockingNoSplit",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigVar_DockingNoSplit()\n\n",
	"description": "Simplified docking mode: disable window splitting, so docking is limited to\nmerging multiple windows together into tab-bars.\n\n"
	},

	"ImGui_ConfigVar_DockingTransparentPayload lua": {
	"prefix": "reaper.ImGui_ConfigVar_DockingTransparentPayload",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigVar_DockingTransparentPayload()\n\n",
	"description": "Make window or viewport transparent when docking and only display docking\nboxes on the target viewport.\n\n"
	},

	"ImGui_ConfigVar_DockingWithShift lua": {
	"prefix": "reaper.ImGui_ConfigVar_DockingWithShift",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigVar_DockingWithShift()\n\n",
	"description": "Enable docking with holding Shift key\n(reduce visual noise, allows dropping in wider space\n\n"
	},

	"ImGui_ConfigVar_DragClickToInputText lua": {
	"prefix": "reaper.ImGui_ConfigVar_DragClickToInputText",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigVar_DragClickToInputText()\n\n",
	"description": "Enable turning DragXXX widgets into text input with a simple mouse\nclick-release (without moving). Not desirable on devices without a keyboard.\n\n"
	},

	"ImGui_ConfigVar_Flags lua": {
	"prefix": "reaper.ImGui_ConfigVar_Flags",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigVar_Flags()\n\n",
	"description": "ConfigFlags_*\n\n"
	},

	"ImGui_ConfigVar_HoverDelayNormal lua": {
	"prefix": "reaper.ImGui_ConfigVar_HoverDelayNormal",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigVar_HoverDelayNormal()\n\n",
	"description": "Delay on hovering before IsItemHovered(HoveredFlags_DelayNormal) returns true.\n\n"
	},

	"ImGui_ConfigVar_HoverDelayShort lua": {
	"prefix": "reaper.ImGui_ConfigVar_HoverDelayShort",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigVar_HoverDelayShort()\n\n",
	"description": "Delay on hovering before IsItemHovered(HoveredFlags_DelayShort) returns true.\n\n"
	},

	"ImGui_ConfigVar_InputTextCursorBlink lua": {
	"prefix": "reaper.ImGui_ConfigVar_InputTextCursorBlink",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigVar_InputTextCursorBlink()\n\n",
	"description": "Enable blinking cursor (optional as some users consider it to be distracting).\n\n"
	},

	"ImGui_ConfigVar_InputTextEnterKeepActive lua": {
	"prefix": "reaper.ImGui_ConfigVar_InputTextEnterKeepActive",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigVar_InputTextEnterKeepActive()\n\n",
	"description": "Pressing Enter will keep item active and select contents (single-line only).\n\n"
	},

	"ImGui_ConfigVar_InputTrickleEventQueue lua": {
	"prefix": "reaper.ImGui_ConfigVar_InputTrickleEventQueue",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigVar_InputTrickleEventQueue()\n\n",
	"description": "Enable input queue trickling: some types of events submitted during the same\nframe (e.g. button down + up) will be spread over multiple frames, improving\ninteractions with low framerates.\n\n"
	},

	"ImGui_ConfigVar_KeyRepeatDelay lua": {
	"prefix": "reaper.ImGui_ConfigVar_KeyRepeatDelay",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigVar_KeyRepeatDelay()\n\n",
	"description": "When holding a key/button, time before it starts repeating, in seconds\n(for buttons in Repeat mode, etc.).\n\n"
	},

	"ImGui_ConfigVar_KeyRepeatRate lua": {
	"prefix": "reaper.ImGui_ConfigVar_KeyRepeatRate",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigVar_KeyRepeatRate()\n\n",
	"description": "When holding a key/button, rate at which it repeats, in seconds.\n\n"
	},

	"ImGui_ConfigVar_MacOSXBehaviors lua": {
	"prefix": "reaper.ImGui_ConfigVar_MacOSXBehaviors",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigVar_MacOSXBehaviors()\n\n",
	"description": "OS X style: Text editing cursor movement using Alt instead of Ctrl, Shortcuts\nusing Cmd/Super instead of Ctrl, Line/Text Start and End using Cmd+Arrows\ninstead of Home/End, Double click selects by word instead of selecting whole\ntext, Multi-selection in lists uses Cmd/Super instead of Ctrl.\n\n"
	},

	"ImGui_ConfigVar_MouseDoubleClickMaxDist lua": {
	"prefix": "reaper.ImGui_ConfigVar_MouseDoubleClickMaxDist",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigVar_MouseDoubleClickMaxDist()\n\n",
	"description": "Distance threshold to stay in to validate a double-click, in pixels.\n\n"
	},

	"ImGui_ConfigVar_MouseDoubleClickTime lua": {
	"prefix": "reaper.ImGui_ConfigVar_MouseDoubleClickTime",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigVar_MouseDoubleClickTime()\n\n",
	"description": "Time for a double-click, in seconds.\n\n"
	},

	"ImGui_ConfigVar_MouseDragThreshold lua": {
	"prefix": "reaper.ImGui_ConfigVar_MouseDragThreshold",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigVar_MouseDragThreshold()\n\n",
	"description": "Distance threshold before considering we are dragging.\n\n"
	},

	"ImGui_ConfigVar_ViewportsNoDecoration lua": {
	"prefix": "reaper.ImGui_ConfigVar_ViewportsNoDecoration",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigVar_ViewportsNoDecoration()\n\n",
	"description": "Disable default OS window decoration. Enabling decoration can create\nsubsequent issues at OS levels (e.g. minimum window size).\n\n"
	},

	"ImGui_ConfigVar_WindowsMoveFromTitleBarOnly lua": {
	"prefix": "reaper.ImGui_ConfigVar_WindowsMoveFromTitleBarOnly",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigVar_WindowsMoveFromTitleBarOnly()\n\n",
	"description": "Enable allowing to move windows only when clicking on their title bar.\nDoes not apply to windows without a title bar.\n\n"
	},

	"ImGui_ConfigVar_WindowsResizeFromEdges lua": {
	"prefix": "reaper.ImGui_ConfigVar_WindowsResizeFromEdges",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigVar_WindowsResizeFromEdges()\n\n",
	"description": "Enable resizing of windows from their edges and from the lower-left corner.\n\n"
	},

	"ImGui_CreateContext lua": {
	"prefix": "reaper.ImGui_CreateContext",
	"scope": "lua",
	"body": "reaper.ImGui_CreateContext(${1:label}, ${2:optional_config_flagsIn})$0",
	"description": "Create a new ReaImGui context.\nThe context will remain valid as long as it is used in each defer cycle.\nThe label is used for the tab text when windows are docked in REAPER\nand also as a unique identifier for storing settings.\n\n"
	},

	"ImGui_CreateDrawListSplitter lua": {
	"prefix": "reaper.ImGui_CreateDrawListSplitter",
	"scope": "lua",
	"body": "reaper.ImGui_CreateDrawListSplitter(${1:draw_list})$0",
	"description": ""
	},

	"ImGui_CreateFont lua": {
	"prefix": "reaper.ImGui_CreateFont",
	"scope": "lua",
	"body": "reaper.ImGui_CreateFont(${1:family_or_file}, ${2:size}, ${3:optional_flagsIn})$0",
	"description": "Load a font matching a font family name or from a font file.\nThe font will remain valid while it's attached to a context. See Attach.\nThe family name can be an installed font or one of the generic fonts:\nsans-serif, serif, monospace, cursive, fantasy.\nIf 'family_or_file' specifies a path to a font file (contains a / or \):\n- The first byte of 'flags' is used as the font index within the file\n- The font styles in 'flags' are simulated by the font renderer\n\n"
	},

	"ImGui_CreateImage lua": {
	"prefix": "reaper.ImGui_CreateImage",
	"scope": "lua",
	"body": "reaper.ImGui_CreateImage(${1:file}, ${2:optional_flagsIn})$0",
	"description": "The returned object is valid as long as it is used in each defer cycle\nunless attached to a context (see Attach).\n('flags' currently unused and reserved for future expansion)\n\n"
	},

	"ImGui_CreateImageFromMem lua": {
	"prefix": "reaper.ImGui_CreateImageFromMem",
	"scope": "lua",
	"body": "reaper.ImGui_CreateImageFromMem(${1:data})$0",
	"description": "Requires REAPER v6.44 or newer for EEL and Lua. Load from a file using\nCreateImage or explicitely specify data_sz if supporting older versions.\n\n"
	},

	"ImGui_CreateImageSet lua": {
	"prefix": "reaper.ImGui_CreateImageSet",
	"scope": "lua",
	"body": "ImGui_ImageSet = reaper.ImGui_CreateImageSet()\n\n",
	"description": ""
	},

	"ImGui_CreateListClipper lua": {
	"prefix": "reaper.ImGui_CreateListClipper",
	"scope": "lua",
	"body": "reaper.ImGui_CreateListClipper(${1:ctx})$0",
	"description": "The returned clipper object is only valid for the given context and is valid\nas long as it is used in each defer cycle unless attached (see Attach).\n\n"
	},

	"ImGui_CreateTextFilter lua": {
	"prefix": "reaper.ImGui_CreateTextFilter",
	"scope": "lua",
	"body": "reaper.ImGui_CreateTextFilter(${1:optional_default_filterIn})$0",
	"description": "Valid while used every frame unless attached to a context (see Attach).\n\n"
	},

	"ImGui_DebugTextEncoding lua": {
	"prefix": "reaper.ImGui_DebugTextEncoding",
	"scope": "lua",
	"body": "reaper.ImGui_DebugTextEncoding(${1:ctx}, ${2:text})$0",
	"description": "Helper tool to diagnose between text encoding issues and font loading issues.\nPass your UTF-8 string and verify that there are correct.\n\n"
	},

	"ImGui_DestroyContext lua": {
	"prefix": "reaper.ImGui_DestroyContext",
	"scope": "lua",
	"body": "reaper.ImGui_DestroyContext(${1:ctx})$0",
	"description": "Free the resources used by a context.\nCalling this function is usually not required as all ReaImGui objects are\nautomatically garbage-collected when unused.\n\n"
	},

	"ImGui_Detach lua": {
	"prefix": "reaper.ImGui_Detach",
	"scope": "lua",
	"body": "reaper.ImGui_Detach(${1:ImGui_Context_obj})$0",
	"description": "Unlink the object's lifetime. Unattached objects are automatically destroyed\nwhen left unused. You may check whether an object has been destroyed using\nValidatePtr.\n\n"
	},

	"ImGui_Dir_Down lua": {
	"prefix": "reaper.ImGui_Dir_Down",
	"scope": "lua",
	"body": "reaper.ImGui_Dir_Down()\n\n",
	"description": ""
	},

	"ImGui_Dir_Left lua": {
	"prefix": "reaper.ImGui_Dir_Left",
	"scope": "lua",
	"body": "reaper.ImGui_Dir_Left()\n\n",
	"description": ""
	},

	"ImGui_Dir_None lua": {
	"prefix": "reaper.ImGui_Dir_None",
	"scope": "lua",
	"body": "reaper.ImGui_Dir_None()\n\n",
	"description": ""
	},

	"ImGui_Dir_Right lua": {
	"prefix": "reaper.ImGui_Dir_Right",
	"scope": "lua",
	"body": "reaper.ImGui_Dir_Right()\n\n",
	"description": ""
	},

	"ImGui_Dir_Up lua": {
	"prefix": "reaper.ImGui_Dir_Up",
	"scope": "lua",
	"body": "reaper.ImGui_Dir_Up()\n\n",
	"description": ""
	},

	"ImGui_DragDouble lua": {
	"prefix": "reaper.ImGui_DragDouble",
	"scope": "lua",
	"body": "retval, v = reaper.ImGui_DragDouble(${1:ctx}, ${2:label}, ${3:v}, ${4:optional_v_speedIn}, ${5:optional_v_minIn}, ${6:optional_v_maxIn}, ${7:optional_formatIn}, ${8:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_DragDouble2 lua": {
	"prefix": "reaper.ImGui_DragDouble2",
	"scope": "lua",
	"body": "retval, v1, v2 = reaper.ImGui_DragDouble2(${1:ctx}, ${2:label}, ${3:v1}, ${4:v2}, ${5:optional_v_speedIn}, ${6:optional_v_minIn}, ${7:optional_v_maxIn}, ${8:optional_formatIn}, ${9:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_DragDouble3 lua": {
	"prefix": "reaper.ImGui_DragDouble3",
	"scope": "lua",
	"body": "retval, v1, v2, v3 = reaper.ImGui_DragDouble3(${1:ctx}, ${2:label}, ${3:v1}, ${4:v2}, ${5:v3}, ${6:optional_v_speedIn}, ${7:optional_v_minIn}, ${8:optional_v_maxIn}, ${9:optional_formatIn}, ${10:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_DragDouble4 lua": {
	"prefix": "reaper.ImGui_DragDouble4",
	"scope": "lua",
	"body": "retval, v1, v2, v3, v4 = reaper.ImGui_DragDouble4(${1:ctx}, ${2:label}, ${3:v1}, ${4:v2}, ${5:v3}, ${6:v4}, ${7:optional_v_speedIn}, ${8:optional_v_minIn}, ${9:optional_v_maxIn}, ${10:optional_formatIn}, ${11:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_DragDoubleN lua": {
	"prefix": "reaper.ImGui_DragDoubleN",
	"scope": "lua",
	"body": "reaper.ImGui_DragDoubleN(${1:ctx}, ${2:string_values}, ${3:optional_speedIn}, ${4:optional_minIn}, ${5:optional_maxIn}, ${6:optional_formatIn}, ${7:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_DragDropFlags_AcceptBeforeDelivery lua": {
	"prefix": "reaper.ImGui_DragDropFlags_AcceptBeforeDelivery",
	"scope": "lua",
	"body": "reaper.ImGui_DragDropFlags_AcceptBeforeDelivery()\n\n",
	"description": "AcceptDragDropPayload will returns true even before the mouse button is\nreleased. You can then check GetDragDropPayload/is_delivery to test if the\npayload needs to be delivered.\n\n"
	},

	"ImGui_DragDropFlags_AcceptNoDrawDefaultRect lua": {
	"prefix": "reaper.ImGui_DragDropFlags_AcceptNoDrawDefaultRect",
	"scope": "lua",
	"body": "reaper.ImGui_DragDropFlags_AcceptNoDrawDefaultRect()\n\n",
	"description": "Do not draw the default highlight rectangle when hovering over target.\n\n"
	},

	"ImGui_DragDropFlags_AcceptNoPreviewTooltip lua": {
	"prefix": "reaper.ImGui_DragDropFlags_AcceptNoPreviewTooltip",
	"scope": "lua",
	"body": "reaper.ImGui_DragDropFlags_AcceptNoPreviewTooltip()\n\n",
	"description": "Request hiding the BeginDragDropSource tooltip from the BeginDragDropTarget site.\n\n"
	},

	"ImGui_DragDropFlags_AcceptPeekOnly lua": {
	"prefix": "reaper.ImGui_DragDropFlags_AcceptPeekOnly",
	"scope": "lua",
	"body": "reaper.ImGui_DragDropFlags_AcceptPeekOnly()\n\n",
	"description": "For peeking ahead and inspecting the payload before delivery.\nEquivalent to DragDropFlags_AcceptBeforeDelivery |\nDragDropFlags_AcceptNoDrawDefaultRect.\n\n"
	},

	"ImGui_DragDropFlags_None lua": {
	"prefix": "reaper.ImGui_DragDropFlags_None",
	"scope": "lua",
	"body": "reaper.ImGui_DragDropFlags_None()\n\n",
	"description": ""
	},

	"ImGui_DragDropFlags_SourceAllowNullID lua": {
	"prefix": "reaper.ImGui_DragDropFlags_SourceAllowNullID",
	"scope": "lua",
	"body": "reaper.ImGui_DragDropFlags_SourceAllowNullID()\n\n",
	"description": "Allow items such as Text, Image that have no unique identifier to be used as\ndrag source, by manufacturing a temporary identifier based on their\nwindow-relative position. This is extremely unusual within the dear imgui\necosystem and so we made it explicit.\n\n"
	},

	"ImGui_DragDropFlags_SourceAutoExpirePayload lua": {
	"prefix": "reaper.ImGui_DragDropFlags_SourceAutoExpirePayload",
	"scope": "lua",
	"body": "reaper.ImGui_DragDropFlags_SourceAutoExpirePayload()\n\n",
	"description": "Automatically expire the payload if the source cease to be submitted\n(otherwise payloads are persisting while being dragged).\n\n"
	},

	"ImGui_DragDropFlags_SourceExtern lua": {
	"prefix": "reaper.ImGui_DragDropFlags_SourceExtern",
	"scope": "lua",
	"body": "reaper.ImGui_DragDropFlags_SourceExtern()\n\n",
	"description": "External source (from outside of dear imgui), won't attempt to read current\nitem/window info. Will always return true.\nOnly one Extern source can be active simultaneously.\n\n"
	},

	"ImGui_DragDropFlags_SourceNoDisableHover lua": {
	"prefix": "reaper.ImGui_DragDropFlags_SourceNoDisableHover",
	"scope": "lua",
	"body": "reaper.ImGui_DragDropFlags_SourceNoDisableHover()\n\n",
	"description": "By default, when dragging we clear data so that IsItemHovered will return\nfalse, to avoid subsequent user code submitting tooltips. This flag disables\nthis behavior so you can still call IsItemHovered on the source item.\n\n"
	},

	"ImGui_DragDropFlags_SourceNoHoldToOpenOthers lua": {
	"prefix": "reaper.ImGui_DragDropFlags_SourceNoHoldToOpenOthers",
	"scope": "lua",
	"body": "reaper.ImGui_DragDropFlags_SourceNoHoldToOpenOthers()\n\n",
	"description": "Disable the behavior that allows to open tree nodes and collapsing header by\nholding over them while dragging a source item.\n\n"
	},

	"ImGui_DragDropFlags_SourceNoPreviewTooltip lua": {
	"prefix": "reaper.ImGui_DragDropFlags_SourceNoPreviewTooltip",
	"scope": "lua",
	"body": "reaper.ImGui_DragDropFlags_SourceNoPreviewTooltip()\n\n",
	"description": "By default, a successful call to BeginDragDropSource opens a tooltip so you\ncan display a preview or description of the source contents.\nThis flag disables this behavior.\n\n"
	},

	"ImGui_DragFloatRange2 lua": {
	"prefix": "reaper.ImGui_DragFloatRange2",
	"scope": "lua",
	"body": "retval, v_current_min, v_current_max = reaper.ImGui_DragFloatRange2(${1:ctx}, ${2:label}, ${3:v_current_min}, ${4:v_current_max}, ${5:optional_v_speedIn}, ${6:optional_v_minIn}, ${7:optional_v_maxIn}, ${8:optional_formatIn}, ${9:optional_format_maxIn}, ${10:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_DragInt lua": {
	"prefix": "reaper.ImGui_DragInt",
	"scope": "lua",
	"body": "retval, v = reaper.ImGui_DragInt(${1:ctx}, ${2:label}, ${3:v}, ${4:optional_v_speedIn}, ${5:optional_v_minIn}, ${6:optional_v_maxIn}, ${7:optional_formatIn}, ${8:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_DragInt2 lua": {
	"prefix": "reaper.ImGui_DragInt2",
	"scope": "lua",
	"body": "retval, v1, v2 = reaper.ImGui_DragInt2(${1:ctx}, ${2:label}, ${3:v1}, ${4:v2}, ${5:optional_v_speedIn}, ${6:optional_v_minIn}, ${7:optional_v_maxIn}, ${8:optional_formatIn}, ${9:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_DragInt3 lua": {
	"prefix": "reaper.ImGui_DragInt3",
	"scope": "lua",
	"body": "retval, v1, v2, v3 = reaper.ImGui_DragInt3(${1:ctx}, ${2:label}, ${3:v1}, ${4:v2}, ${5:v3}, ${6:optional_v_speedIn}, ${7:optional_v_minIn}, ${8:optional_v_maxIn}, ${9:optional_formatIn}, ${10:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_DragInt4 lua": {
	"prefix": "reaper.ImGui_DragInt4",
	"scope": "lua",
	"body": "retval, v1, v2, v3, v4 = reaper.ImGui_DragInt4(${1:ctx}, ${2:label}, ${3:v1}, ${4:v2}, ${5:v3}, ${6:v4}, ${7:optional_v_speedIn}, ${8:optional_v_minIn}, ${9:optional_v_maxIn}, ${10:optional_formatIn}, ${11:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_DragIntRange2 lua": {
	"prefix": "reaper.ImGui_DragIntRange2",
	"scope": "lua",
	"body": "retval, v_current_min, v_current_max = reaper.ImGui_DragIntRange2(${1:ctx}, ${2:label}, ${3:v_current_min}, ${4:v_current_max}, ${5:optional_v_speedIn}, ${6:optional_v_minIn}, ${7:optional_v_maxIn}, ${8:optional_formatIn}, ${9:optional_format_maxIn}, ${10:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_DrawFlags_Closed lua": {
	"prefix": "reaper.ImGui_DrawFlags_Closed",
	"scope": "lua",
	"body": "reaper.ImGui_DrawFlags_Closed()\n\n",
	"description": "DrawList_PathStroke, DrawList_AddPolyline: specify that shape should be\nclosed (Important: this is always == 1 for legacy reason).\n\n"
	},

	"ImGui_DrawFlags_None lua": {
	"prefix": "reaper.ImGui_DrawFlags_None",
	"scope": "lua",
	"body": "reaper.ImGui_DrawFlags_None()\n\n",
	"description": ""
	},

	"ImGui_DrawFlags_RoundCornersAll lua": {
	"prefix": "reaper.ImGui_DrawFlags_RoundCornersAll",
	"scope": "lua",
	"body": "reaper.ImGui_DrawFlags_RoundCornersAll()\n\n",
	"description": ""
	},

	"ImGui_DrawFlags_RoundCornersBottom lua": {
	"prefix": "reaper.ImGui_DrawFlags_RoundCornersBottom",
	"scope": "lua",
	"body": "reaper.ImGui_DrawFlags_RoundCornersBottom()\n\n",
	"description": ""
	},

	"ImGui_DrawFlags_RoundCornersBottomLeft lua": {
	"prefix": "reaper.ImGui_DrawFlags_RoundCornersBottomLeft",
	"scope": "lua",
	"body": "reaper.ImGui_DrawFlags_RoundCornersBottomLeft()\n\n",
	"description": "DrawList_AddRect, DrawList_AddRectFilled, DrawList_PathRect: enable rounding\nbottom-left corner only (when rounding > 0.0, we default to all corners).\n\n"
	},

	"ImGui_DrawFlags_RoundCornersBottomRight lua": {
	"prefix": "reaper.ImGui_DrawFlags_RoundCornersBottomRight",
	"scope": "lua",
	"body": "reaper.ImGui_DrawFlags_RoundCornersBottomRight()\n\n",
	"description": "DrawList_AddRect, DrawList_AddRectFilled, DrawList_PathRect: enable rounding\nbottom-right corner only (when rounding > 0.0, we default to all corners).\n\n"
	},

	"ImGui_DrawFlags_RoundCornersLeft lua": {
	"prefix": "reaper.ImGui_DrawFlags_RoundCornersLeft",
	"scope": "lua",
	"body": "reaper.ImGui_DrawFlags_RoundCornersLeft()\n\n",
	"description": ""
	},

	"ImGui_DrawFlags_RoundCornersNone lua": {
	"prefix": "reaper.ImGui_DrawFlags_RoundCornersNone",
	"scope": "lua",
	"body": "reaper.ImGui_DrawFlags_RoundCornersNone()\n\n",
	"description": "DrawList_AddRect, DrawList_AddRectFilled, DrawList_PathRect: disable rounding\non all corners (when rounding > 0.0). This is NOT zero, NOT an implicit flag!.\n\n"
	},

	"ImGui_DrawFlags_RoundCornersRight lua": {
	"prefix": "reaper.ImGui_DrawFlags_RoundCornersRight",
	"scope": "lua",
	"body": "reaper.ImGui_DrawFlags_RoundCornersRight()\n\n",
	"description": ""
	},

	"ImGui_DrawFlags_RoundCornersTop lua": {
	"prefix": "reaper.ImGui_DrawFlags_RoundCornersTop",
	"scope": "lua",
	"body": "reaper.ImGui_DrawFlags_RoundCornersTop()\n\n",
	"description": ""
	},

	"ImGui_DrawFlags_RoundCornersTopLeft lua": {
	"prefix": "reaper.ImGui_DrawFlags_RoundCornersTopLeft",
	"scope": "lua",
	"body": "reaper.ImGui_DrawFlags_RoundCornersTopLeft()\n\n",
	"description": "DrawList_AddRect, DrawList_AddRectFilled, DrawList_PathRect: enable rounding\ntop-left corner only (when rounding > 0.0, we default to all corners).\n\n"
	},

	"ImGui_DrawFlags_RoundCornersTopRight lua": {
	"prefix": "reaper.ImGui_DrawFlags_RoundCornersTopRight",
	"scope": "lua",
	"body": "reaper.ImGui_DrawFlags_RoundCornersTopRight()\n\n",
	"description": "DrawList_AddRect, DrawList_AddRectFilled, DrawList_PathRect: enable rounding\ntop-right corner only (when rounding > 0.0, we default to all corners).\n\n"
	},

	"ImGui_DrawListSplitter_Clear lua": {
	"prefix": "reaper.ImGui_DrawListSplitter_Clear",
	"scope": "lua",
	"body": "reaper.ImGui_DrawListSplitter_Clear(${1:splitter})$0",
	"description": ""
	},

	"ImGui_DrawListSplitter_Merge lua": {
	"prefix": "reaper.ImGui_DrawListSplitter_Merge",
	"scope": "lua",
	"body": "reaper.ImGui_DrawListSplitter_Merge(${1:splitter})$0",
	"description": ""
	},

	"ImGui_DrawListSplitter_SetCurrentChannel lua": {
	"prefix": "reaper.ImGui_DrawListSplitter_SetCurrentChannel",
	"scope": "lua",
	"body": "reaper.ImGui_DrawListSplitter_SetCurrentChannel(${1:splitter}, ${2:channel_idx})$0",
	"description": ""
	},

	"ImGui_DrawListSplitter_Split lua": {
	"prefix": "reaper.ImGui_DrawListSplitter_Split",
	"scope": "lua",
	"body": "reaper.ImGui_DrawListSplitter_Split(${1:splitter}, ${2:count})$0",
	"description": ""
	},

	"ImGui_DrawList_AddBezierCubic lua": {
	"prefix": "reaper.ImGui_DrawList_AddBezierCubic",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_AddBezierCubic(${1:draw_list}, ${2:p1_x}, ${3:p1_y}, ${4:p2_x}, ${5:p2_y}, ${6:p3_x}, ${7:p3_y}, ${8:p4_x}, ${9:p4_y}, ${10:col_rgba}, ${11:thickness}, ${12:optional_num_segmentsIn})$0",
	"description": "Cubic Bezier (4 control points)\n\n"
	},

	"ImGui_DrawList_AddBezierQuadratic lua": {
	"prefix": "reaper.ImGui_DrawList_AddBezierQuadratic",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_AddBezierQuadratic(${1:draw_list}, ${2:p1_x}, ${3:p1_y}, ${4:p2_x}, ${5:p2_y}, ${6:p3_x}, ${7:p3_y}, ${8:col_rgba}, ${9:thickness}, ${10:optional_num_segmentsIn})$0",
	"description": "Quadratic Bezier (3 control points)\n\n"
	},

	"ImGui_DrawList_AddCircle lua": {
	"prefix": "reaper.ImGui_DrawList_AddCircle",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_AddCircle(${1:draw_list}, ${2:center_x}, ${3:center_y}, ${4:radius}, ${5:col_rgba}, ${6:optional_num_segmentsIn}, ${7:optional_thicknessIn})$0",
	"description": "Use 'num_segments == 0' to automatically calculate tessellation (preferred).\n\n"
	},

	"ImGui_DrawList_AddCircleFilled lua": {
	"prefix": "reaper.ImGui_DrawList_AddCircleFilled",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_AddCircleFilled(${1:draw_list}, ${2:center_x}, ${3:center_y}, ${4:radius}, ${5:col_rgba}, ${6:optional_num_segmentsIn})$0",
	"description": "Use 'num_segments == 0' to automatically calculate tessellation (preferred).\n\n"
	},

	"ImGui_DrawList_AddConvexPolyFilled lua": {
	"prefix": "reaper.ImGui_DrawList_AddConvexPolyFilled",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_AddConvexPolyFilled(${1:ImGui_DrawList_points}, ${2:col_rgba})$0",
	"description": "Note: Anti-aliased filling requires points to be in clockwise order.\n\n"
	},

	"ImGui_DrawList_AddImage lua": {
	"prefix": "reaper.ImGui_DrawList_AddImage",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_AddImage(${1:ImGui_DrawList_img}, ${2:p_min_x}, ${3:p_min_y}, ${4:p_max_x}, ${5:p_max_y}, ${6:optional_uv_min_xIn}, ${7:optional_uv_min_yIn}, ${8:optional_uv_max_xIn}, ${9:optional_uv_max_yIn}, ${10:optional_col_rgbaIn})$0",
	"description": ""
	},

	"ImGui_DrawList_AddImageQuad lua": {
	"prefix": "reaper.ImGui_DrawList_AddImageQuad",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_AddImageQuad(${1:ImGui_DrawList_img}, ${2:p1_x}, ${3:p1_y}, ${4:p2_x}, ${5:p2_y}, ${6:p3_x}, ${7:p3_y}, ${8:p4_x}, ${9:p4_y}, ${10:optional_uv1_xIn}, ${11:optional_uv1_yIn}, ${12:optional_uv2_xIn}, ${13:optional_uv2_yIn}, ${14:optional_uv3_xIn}, ${15:optional_uv3_yIn}, ${16:optional_uv4_xIn}, ${17:optional_uv4_yIn}, ${18:optional_col_rgbaIn})$0",
	"description": ""
	},

	"ImGui_DrawList_AddImageRounded lua": {
	"prefix": "reaper.ImGui_DrawList_AddImageRounded",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_AddImageRounded(${1:ImGui_DrawList_img}, ${2:p_min_x}, ${3:p_min_y}, ${4:p_max_x}, ${5:p_max_y}, ${6:uv_min_x}, ${7:uv_min_y}, ${8:uv_max_x}, ${9:uv_max_y}, ${10:col_rgba}, ${11:rounding}, ${12:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_DrawList_AddLine lua": {
	"prefix": "reaper.ImGui_DrawList_AddLine",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_AddLine(${1:draw_list}, ${2:p1_x}, ${3:p1_y}, ${4:p2_x}, ${5:p2_y}, ${6:col_rgba}, ${7:optional_thicknessIn})$0",
	"description": ""
	},

	"ImGui_DrawList_AddNgon lua": {
	"prefix": "reaper.ImGui_DrawList_AddNgon",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_AddNgon(${1:draw_list}, ${2:center_x}, ${3:center_y}, ${4:radius}, ${5:col_rgba}, ${6:num_segments}, ${7:optional_thicknessIn})$0",
	"description": ""
	},

	"ImGui_DrawList_AddNgonFilled lua": {
	"prefix": "reaper.ImGui_DrawList_AddNgonFilled",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_AddNgonFilled(${1:draw_list}, ${2:center_x}, ${3:center_y}, ${4:radius}, ${5:col_rgba}, ${6:num_segments})$0",
	"description": ""
	},

	"ImGui_DrawList_AddPolyline lua": {
	"prefix": "reaper.ImGui_DrawList_AddPolyline",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_AddPolyline(${1:ImGui_DrawList_points}, ${2:col_rgba}, ${3:flags}, ${4:thickness})$0",
	"description": "Points is a list of x,y coordinates.\n\n"
	},

	"ImGui_DrawList_AddQuad lua": {
	"prefix": "reaper.ImGui_DrawList_AddQuad",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_AddQuad(${1:draw_list}, ${2:p1_x}, ${3:p1_y}, ${4:p2_x}, ${5:p2_y}, ${6:p3_x}, ${7:p3_y}, ${8:p4_x}, ${9:p4_y}, ${10:col_rgba}, ${11:optional_thicknessIn})$0",
	"description": ""
	},

	"ImGui_DrawList_AddQuadFilled lua": {
	"prefix": "reaper.ImGui_DrawList_AddQuadFilled",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_AddQuadFilled(${1:draw_list}, ${2:p1_x}, ${3:p1_y}, ${4:p2_x}, ${5:p2_y}, ${6:p3_x}, ${7:p3_y}, ${8:p4_x}, ${9:p4_y}, ${10:col_rgba})$0",
	"description": ""
	},

	"ImGui_DrawList_AddRect lua": {
	"prefix": "reaper.ImGui_DrawList_AddRect",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_AddRect(${1:draw_list}, ${2:p_min_x}, ${3:p_min_y}, ${4:p_max_x}, ${5:p_max_y}, ${6:col_rgba}, ${7:optional_roundingIn}, ${8:optional_flagsIn}, ${9:optional_thicknessIn})$0",
	"description": ""
	},

	"ImGui_DrawList_AddRectFilled lua": {
	"prefix": "reaper.ImGui_DrawList_AddRectFilled",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_AddRectFilled(${1:draw_list}, ${2:p_min_x}, ${3:p_min_y}, ${4:p_max_x}, ${5:p_max_y}, ${6:col_rgba}, ${7:optional_roundingIn}, ${8:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_DrawList_AddRectFilledMultiColor lua": {
	"prefix": "reaper.ImGui_DrawList_AddRectFilledMultiColor",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_AddRectFilledMultiColor(${1:draw_list}, ${2:p_min_x}, ${3:p_min_y}, ${4:p_max_x}, ${5:p_max_y}, ${6:col_upr_left}, ${7:col_upr_right}, ${8:col_bot_right}, ${9:col_bot_left})$0",
	"description": ""
	},

	"ImGui_DrawList_AddText lua": {
	"prefix": "reaper.ImGui_DrawList_AddText",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_AddText(${1:draw_list}, ${2:x}, ${3:y}, ${4:col_rgba}, ${5:text})$0",
	"description": ""
	},

	"ImGui_DrawList_AddTextEx lua": {
	"prefix": "reaper.ImGui_DrawList_AddTextEx",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_AddTextEx(${1:ImGui_DrawList_font}, ${2:font_size}, ${3:pos_x}, ${4:pos_y}, ${5:col_rgba}, ${6:text}, ${7:optional_wrap_widthIn}, ${8:optional_cpu_fine_clip_rect_xIn}, ${9:optional_cpu_fine_clip_rect_yIn}, ${10:optional_cpu_fine_clip_rect_wIn}, ${11:optional_cpu_fine_clip_rect_hIn})$0",
	"description": "The last pushed font is used if font is nil.\nThe size of the last pushed font is used if font_size is 0.\ncpu_fine_clip_rect_* only takes effect if all four are non-nil.\n\n"
	},

	"ImGui_DrawList_AddTriangle lua": {
	"prefix": "reaper.ImGui_DrawList_AddTriangle",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_AddTriangle(${1:draw_list}, ${2:p1_x}, ${3:p1_y}, ${4:p2_x}, ${5:p2_y}, ${6:p3_x}, ${7:p3_y}, ${8:col_rgba}, ${9:optional_thicknessIn})$0",
	"description": ""
	},

	"ImGui_DrawList_AddTriangleFilled lua": {
	"prefix": "reaper.ImGui_DrawList_AddTriangleFilled",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_AddTriangleFilled(${1:draw_list}, ${2:p1_x}, ${3:p1_y}, ${4:p2_x}, ${5:p2_y}, ${6:p3_x}, ${7:p3_y}, ${8:col_rgba})$0",
	"description": ""
	},

	"ImGui_DrawList_PathArcTo lua": {
	"prefix": "reaper.ImGui_DrawList_PathArcTo",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_PathArcTo(${1:draw_list}, ${2:center_x}, ${3:center_y}, ${4:radius}, ${5:a_min}, ${6:a_max}, ${7:optional_num_segmentsIn})$0",
	"description": ""
	},

	"ImGui_DrawList_PathArcToFast lua": {
	"prefix": "reaper.ImGui_DrawList_PathArcToFast",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_PathArcToFast(${1:draw_list}, ${2:center_x}, ${3:center_y}, ${4:radius}, ${5:a_min_of_12}, ${6:a_max_of_12})$0",
	"description": "Use precomputed angles for a 12 steps circle.\n\n"
	},

	"ImGui_DrawList_PathBezierCubicCurveTo lua": {
	"prefix": "reaper.ImGui_DrawList_PathBezierCubicCurveTo",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_PathBezierCubicCurveTo(${1:draw_list}, ${2:p2_x}, ${3:p2_y}, ${4:p3_x}, ${5:p3_y}, ${6:p4_x}, ${7:p4_y}, ${8:optional_num_segmentsIn})$0",
	"description": "Cubic Bezier (4 control points)\n\n"
	},

	"ImGui_DrawList_PathBezierQuadraticCurveTo lua": {
	"prefix": "reaper.ImGui_DrawList_PathBezierQuadraticCurveTo",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_PathBezierQuadraticCurveTo(${1:draw_list}, ${2:p2_x}, ${3:p2_y}, ${4:p3_x}, ${5:p3_y}, ${6:optional_num_segmentsIn})$0",
	"description": "Quadratic Bezier (3 control points)\n\n"
	},

	"ImGui_DrawList_PathClear lua": {
	"prefix": "reaper.ImGui_DrawList_PathClear",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_PathClear(${1:draw_list})$0",
	"description": ""
	},

	"ImGui_DrawList_PathFillConvex lua": {
	"prefix": "reaper.ImGui_DrawList_PathFillConvex",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_PathFillConvex(${1:draw_list}, ${2:col_rgba})$0",
	"description": "Note: Anti-aliased filling requires points to be in clockwise order.\n\n"
	},

	"ImGui_DrawList_PathLineTo lua": {
	"prefix": "reaper.ImGui_DrawList_PathLineTo",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_PathLineTo(${1:draw_list}, ${2:pos_x}, ${3:pos_y})$0",
	"description": ""
	},

	"ImGui_DrawList_PathRect lua": {
	"prefix": "reaper.ImGui_DrawList_PathRect",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_PathRect(${1:draw_list}, ${2:rect_min_x}, ${3:rect_min_y}, ${4:rect_max_x}, ${5:rect_max_y}, ${6:optional_roundingIn}, ${7:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_DrawList_PathStroke lua": {
	"prefix": "reaper.ImGui_DrawList_PathStroke",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_PathStroke(${1:draw_list}, ${2:col_rgba}, ${3:optional_flagsIn}, ${4:optional_thicknessIn})$0",
	"description": ""
	},

	"ImGui_DrawList_PopClipRect lua": {
	"prefix": "reaper.ImGui_DrawList_PopClipRect",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_PopClipRect(${1:draw_list})$0",
	"description": "See DrawList_PushClipRect\n\n"
	},

	"ImGui_DrawList_PushClipRect lua": {
	"prefix": "reaper.ImGui_DrawList_PushClipRect",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_PushClipRect(${1:draw_list}, ${2:clip_rect_min_x}, ${3:clip_rect_min_y}, ${4:clip_rect_max_x}, ${5:clip_rect_max_y}, ${6:optional_intersect_with_current_clip_rectIn})$0",
	"description": "Render-level scissoring. Prefer using higher-level PushClipRect to affect\nlogic (hit-testing and widget culling).\n\n"
	},

	"ImGui_DrawList_PushClipRectFullScreen lua": {
	"prefix": "reaper.ImGui_DrawList_PushClipRectFullScreen",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_PushClipRectFullScreen(${1:draw_list})$0",
	"description": ""
	},

	"ImGui_Dummy lua": {
	"prefix": "reaper.ImGui_Dummy",
	"scope": "lua",
	"body": "reaper.ImGui_Dummy(${1:ctx}, ${2:size_w}, ${3:size_h})$0",
	"description": "Add a dummy item of given size. unlike InvisibleButton, Dummy() won't take the\nmouse click or be navigable into.\n\n"
	},

	"ImGui_End lua": {
	"prefix": "reaper.ImGui_End",
	"scope": "lua",
	"body": "reaper.ImGui_End(${1:ctx})$0",
	"description": "Pop window from the stack. See Begin.\n\n"
	},

	"ImGui_EndChild lua": {
	"prefix": "reaper.ImGui_EndChild",
	"scope": "lua",
	"body": "reaper.ImGui_EndChild(${1:ctx})$0",
	"description": "See BeginChild.\n\n"
	},

	"ImGui_EndChildFrame lua": {
	"prefix": "reaper.ImGui_EndChildFrame",
	"scope": "lua",
	"body": "reaper.ImGui_EndChildFrame(${1:ctx})$0",
	"description": "See BeginChildFrame.\n\n"
	},

	"ImGui_EndCombo lua": {
	"prefix": "reaper.ImGui_EndCombo",
	"scope": "lua",
	"body": "reaper.ImGui_EndCombo(${1:ctx})$0",
	"description": "Only call EndCombo() if BeginCombo returns true!\n\n"
	},

	"ImGui_EndDisabled lua": {
	"prefix": "reaper.ImGui_EndDisabled",
	"scope": "lua",
	"body": "reaper.ImGui_EndDisabled(${1:ctx})$0",
	"description": "See BeginDisabled.\n\n"
	},

	"ImGui_EndDragDropSource lua": {
	"prefix": "reaper.ImGui_EndDragDropSource",
	"scope": "lua",
	"body": "reaper.ImGui_EndDragDropSource(${1:ctx})$0",
	"description": "Only call EndDragDropSource() if BeginDragDropSource returns true!\n\n"
	},

	"ImGui_EndDragDropTarget lua": {
	"prefix": "reaper.ImGui_EndDragDropTarget",
	"scope": "lua",
	"body": "reaper.ImGui_EndDragDropTarget(${1:ctx})$0",
	"description": "Only call EndDragDropTarget() if BeginDragDropTarget returns true!\n\n"
	},

	"ImGui_EndGroup lua": {
	"prefix": "reaper.ImGui_EndGroup",
	"scope": "lua",
	"body": "reaper.ImGui_EndGroup(${1:ctx})$0",
	"description": "Unlock horizontal starting position + capture the whole group bounding box\ninto one 'item' (so you can use IsItemHovered or layout primitives such as\nSameLine on whole group, etc.).\nSee BeginGroup.\n\n"
	},

	"ImGui_EndListBox lua": {
	"prefix": "reaper.ImGui_EndListBox",
	"scope": "lua",
	"body": "reaper.ImGui_EndListBox(${1:ctx})$0",
	"description": "Only call EndListBox() if BeginListBox returned true!\n\n"
	},

	"ImGui_EndMenu lua": {
	"prefix": "reaper.ImGui_EndMenu",
	"scope": "lua",
	"body": "reaper.ImGui_EndMenu(${1:ctx})$0",
	"description": "Only call EndMenu() if BeginMenu returns true!\n\n"
	},

	"ImGui_EndMenuBar lua": {
	"prefix": "reaper.ImGui_EndMenuBar",
	"scope": "lua",
	"body": "reaper.ImGui_EndMenuBar(${1:ctx})$0",
	"description": "Only call EndMenuBar if BeginMenuBar returns true!\n\n"
	},

	"ImGui_EndPopup lua": {
	"prefix": "reaper.ImGui_EndPopup",
	"scope": "lua",
	"body": "reaper.ImGui_EndPopup(${1:ctx})$0",
	"description": "Only call EndPopup() if BeginPopupXXX() returns true!\n\n"
	},

	"ImGui_EndTabBar lua": {
	"prefix": "reaper.ImGui_EndTabBar",
	"scope": "lua",
	"body": "reaper.ImGui_EndTabBar(${1:ctx})$0",
	"description": "Only call EndTabBar() if BeginTabBar() returns true!\n\n"
	},

	"ImGui_EndTabItem lua": {
	"prefix": "reaper.ImGui_EndTabItem",
	"scope": "lua",
	"body": "reaper.ImGui_EndTabItem(${1:ctx})$0",
	"description": "Only call EndTabItem() if BeginTabItem() returns true!\n\n"
	},

	"ImGui_EndTable lua": {
	"prefix": "reaper.ImGui_EndTable",
	"scope": "lua",
	"body": "reaper.ImGui_EndTable(${1:ctx})$0",
	"description": "Only call EndTable() if BeginTable() returns true!\n\n"
	},

	"ImGui_EndTooltip lua": {
	"prefix": "reaper.ImGui_EndTooltip",
	"scope": "lua",
	"body": "reaper.ImGui_EndTooltip(${1:ctx})$0",
	"description": ""
	},

	"ImGui_FocusedFlags_AnyWindow lua": {
	"prefix": "reaper.ImGui_FocusedFlags_AnyWindow",
	"scope": "lua",
	"body": "reaper.ImGui_FocusedFlags_AnyWindow()\n\n",
	"description": "Return true if any window is focused.\n\n"
	},

	"ImGui_FocusedFlags_ChildWindows lua": {
	"prefix": "reaper.ImGui_FocusedFlags_ChildWindows",
	"scope": "lua",
	"body": "reaper.ImGui_FocusedFlags_ChildWindows()\n\n",
	"description": "Return true if any children of the window is focused.\n\n"
	},

	"ImGui_FocusedFlags_DockHierarchy lua": {
	"prefix": "reaper.ImGui_FocusedFlags_DockHierarchy",
	"scope": "lua",
	"body": "reaper.ImGui_FocusedFlags_DockHierarchy()\n\n",
	"description": "Consider docking hierarchy (treat dockspace host as parent of docked window)\n(when used with _ChildWindows or _RootWindow).\n\n"
	},

	"ImGui_FocusedFlags_NoPopupHierarchy lua": {
	"prefix": "reaper.ImGui_FocusedFlags_NoPopupHierarchy",
	"scope": "lua",
	"body": "reaper.ImGui_FocusedFlags_NoPopupHierarchy()\n\n",
	"description": "Do not consider popup hierarchy (do not treat popup emitter as parent of\npopup) (when used with _ChildWindows or _RootWindow).\n\n"
	},

	"ImGui_FocusedFlags_None lua": {
	"prefix": "reaper.ImGui_FocusedFlags_None",
	"scope": "lua",
	"body": "reaper.ImGui_FocusedFlags_None()\n\n",
	"description": ""
	},

	"ImGui_FocusedFlags_RootAndChildWindows lua": {
	"prefix": "reaper.ImGui_FocusedFlags_RootAndChildWindows",
	"scope": "lua",
	"body": "reaper.ImGui_FocusedFlags_RootAndChildWindows()\n\n",
	"description": "FocusedFlags_RootWindow | FocusedFlags_ChildWindows\n\n"
	},

	"ImGui_FocusedFlags_RootWindow lua": {
	"prefix": "reaper.ImGui_FocusedFlags_RootWindow",
	"scope": "lua",
	"body": "reaper.ImGui_FocusedFlags_RootWindow()\n\n",
	"description": "Test from root window (top most parent of the current hierarchy).\n\n"
	},

	"ImGui_FontFlags_Bold lua": {
	"prefix": "reaper.ImGui_FontFlags_Bold",
	"scope": "lua",
	"body": "reaper.ImGui_FontFlags_Bold()\n\n",
	"description": ""
	},

	"ImGui_FontFlags_Italic lua": {
	"prefix": "reaper.ImGui_FontFlags_Italic",
	"scope": "lua",
	"body": "reaper.ImGui_FontFlags_Italic()\n\n",
	"description": ""
	},

	"ImGui_FontFlags_None lua": {
	"prefix": "reaper.ImGui_FontFlags_None",
	"scope": "lua",
	"body": "reaper.ImGui_FontFlags_None()\n\n",
	"description": ""
	},

	"ImGui_GetBackgroundDrawList lua": {
	"prefix": "reaper.ImGui_GetBackgroundDrawList",
	"scope": "lua",
	"body": "reaper.ImGui_GetBackgroundDrawList(${1:ctx})$0",
	"description": "This draw list will be the first rendering one. Useful to quickly draw\nshapes/text behind dear imgui contents.\n\n"
	},

	"ImGui_GetClipboardText lua": {
	"prefix": "reaper.ImGui_GetClipboardText",
	"scope": "lua",
	"body": "reaper.ImGui_GetClipboardText(${1:ctx})$0",
	"description": ""
	},

	"ImGui_GetColor lua": {
	"prefix": "reaper.ImGui_GetColor",
	"scope": "lua",
	"body": "reaper.ImGui_GetColor(${1:ctx}, ${2:idx}, ${3:optional_alpha_mulIn})$0",
	"description": "Retrieve given style color with style alpha applied and optional extra alpha\nmultiplier, packed as a 32-bit value (RGBA). See Col_* for available style colors.\n\n"
	},

	"ImGui_GetColorEx lua": {
	"prefix": "reaper.ImGui_GetColorEx",
	"scope": "lua",
	"body": "reaper.ImGui_GetColorEx(${1:ctx}, ${2:col_rgba})$0",
	"description": "Retrieve given color with style alpha applied, packed as a 32-bit value (RGBA).\n\n"
	},

	"ImGui_GetConfigVar lua": {
	"prefix": "reaper.ImGui_GetConfigVar",
	"scope": "lua",
	"body": "reaper.ImGui_GetConfigVar(${1:ctx}, ${2:var_idx})$0",
	"description": ""
	},

	"ImGui_GetContentRegionAvail lua": {
	"prefix": "reaper.ImGui_GetContentRegionAvail",
	"scope": "lua",
	"body": "x, y = reaper.ImGui_GetContentRegionAvail(${1:ctx})$0",
	"description": "== GetContentRegionMax() - GetCursorPos()\n\n"
	},

	"ImGui_GetContentRegionMax lua": {
	"prefix": "reaper.ImGui_GetContentRegionMax",
	"scope": "lua",
	"body": "x, y = reaper.ImGui_GetContentRegionMax(${1:ctx})$0",
	"description": "Current content boundaries (typically window boundaries including scrolling,\nor current column boundaries), in windows coordinates.\n\n"
	},

	"ImGui_GetCursorPos lua": {
	"prefix": "reaper.ImGui_GetCursorPos",
	"scope": "lua",
	"body": "x, y = reaper.ImGui_GetCursorPos(${1:ctx})$0",
	"description": "Cursor position in window\n\n"
	},

	"ImGui_GetCursorPosX lua": {
	"prefix": "reaper.ImGui_GetCursorPosX",
	"scope": "lua",
	"body": "reaper.ImGui_GetCursorPosX(${1:ctx})$0",
	"description": "Cursor X position in window\n\n"
	},

	"ImGui_GetCursorPosY lua": {
	"prefix": "reaper.ImGui_GetCursorPosY",
	"scope": "lua",
	"body": "reaper.ImGui_GetCursorPosY(${1:ctx})$0",
	"description": "Cursor Y position in window\n\n"
	},

	"ImGui_GetCursorScreenPos lua": {
	"prefix": "reaper.ImGui_GetCursorScreenPos",
	"scope": "lua",
	"body": "x, y = reaper.ImGui_GetCursorScreenPos(${1:ctx})$0",
	"description": "Cursor position in absolute screen coordinates (useful to work with the DrawList API).\n\n"
	},

	"ImGui_GetCursorStartPos lua": {
	"prefix": "reaper.ImGui_GetCursorStartPos",
	"scope": "lua",
	"body": "x, y = reaper.ImGui_GetCursorStartPos(${1:ctx})$0",
	"description": "Initial cursor position in window coordinates.\n\n"
	},

	"ImGui_GetDeltaTime lua": {
	"prefix": "reaper.ImGui_GetDeltaTime",
	"scope": "lua",
	"body": "reaper.ImGui_GetDeltaTime(${1:ctx})$0",
	"description": "Time elapsed since last frame, in seconds.\n\n"
	},

	"ImGui_GetDragDropPayload lua": {
	"prefix": "reaper.ImGui_GetDragDropPayload",
	"scope": "lua",
	"body": "retval, type, payload, is_preview, is_delivery = reaper.ImGui_GetDragDropPayload(${1:ctx})$0",
	"description": "Peek directly into the current payload from anywhere.\n\n"
	},

	"ImGui_GetDragDropPayloadFile lua": {
	"prefix": "reaper.ImGui_GetDragDropPayloadFile",
	"scope": "lua",
	"body": "retval, filename = reaper.ImGui_GetDragDropPayloadFile(${1:ctx}, ${2:index})$0",
	"description": "Get a filename from the list of dropped files.\nReturns false if index is out of bounds.\n\n"
	},

	"ImGui_GetFont lua": {
	"prefix": "reaper.ImGui_GetFont",
	"scope": "lua",
	"body": "reaper.ImGui_GetFont(${1:ctx})$0",
	"description": "Get the current font\n\n"
	},

	"ImGui_GetFontSize lua": {
	"prefix": "reaper.ImGui_GetFontSize",
	"scope": "lua",
	"body": "reaper.ImGui_GetFontSize(${1:ctx})$0",
	"description": "Get current font size (= height in pixels) of current font with current scale\napplied.\n\n"
	},

	"ImGui_GetForegroundDrawList lua": {
	"prefix": "reaper.ImGui_GetForegroundDrawList",
	"scope": "lua",
	"body": "reaper.ImGui_GetForegroundDrawList(${1:ctx})$0",
	"description": "This draw list will be the last rendered one. Useful to quickly draw\nshapes/text over dear imgui contents.\n\n"
	},

	"ImGui_GetFrameCount lua": {
	"prefix": "reaper.ImGui_GetFrameCount",
	"scope": "lua",
	"body": "reaper.ImGui_GetFrameCount(${1:ctx})$0",
	"description": "Get global imgui frame count. incremented by 1 every frame.\n\n"
	},

	"ImGui_GetFrameHeight lua": {
	"prefix": "reaper.ImGui_GetFrameHeight",
	"scope": "lua",
	"body": "reaper.ImGui_GetFrameHeight(${1:ctx})$0",
	"description": "GetFontSize + StyleVar_FramePadding.y * 2\n\n"
	},

	"ImGui_GetFrameHeightWithSpacing lua": {
	"prefix": "reaper.ImGui_GetFrameHeightWithSpacing",
	"scope": "lua",
	"body": "reaper.ImGui_GetFrameHeightWithSpacing(${1:ctx})$0",
	"description": "GetFontSize + StyleVar_FramePadding.y * 2 + StyleVar_ItemSpacing.y\n(distance in pixels between 2 consecutive lines of framed widgets).\n\n"
	},

	"ImGui_GetFramerate lua": {
	"prefix": "reaper.ImGui_GetFramerate",
	"scope": "lua",
	"body": "reaper.ImGui_GetFramerate(${1:ctx})$0",
	"description": "Estimate of application framerate (rolling average over 60 frames, based on\nGetDeltaTime), in frame per second. Solely for convenience.\n\n"
	},

	"ImGui_GetInputQueueCharacter lua": {
	"prefix": "reaper.ImGui_GetInputQueueCharacter",
	"scope": "lua",
	"body": "retval, unicode_char = reaper.ImGui_GetInputQueueCharacter(${1:ctx}, ${2:idx})$0",
	"description": "Read from ImGui's character input queue.\nCall with increasing idx until false is returned.\n\n"
	},

	"ImGui_GetItemRectMax lua": {
	"prefix": "reaper.ImGui_GetItemRectMax",
	"scope": "lua",
	"body": "x, y = reaper.ImGui_GetItemRectMax(${1:ctx})$0",
	"description": "Get lower-right bounding rectangle of the last item (screen space)\n\n"
	},

	"ImGui_GetItemRectMin lua": {
	"prefix": "reaper.ImGui_GetItemRectMin",
	"scope": "lua",
	"body": "x, y = reaper.ImGui_GetItemRectMin(${1:ctx})$0",
	"description": "Get upper-left bounding rectangle of the last item (screen space)\n\n"
	},

	"ImGui_GetItemRectSize lua": {
	"prefix": "reaper.ImGui_GetItemRectSize",
	"scope": "lua",
	"body": "w, h = reaper.ImGui_GetItemRectSize(${1:ctx})$0",
	"description": "Get size of last item\n\n"
	},

	"ImGui_GetKeyDownDuration lua": {
	"prefix": "reaper.ImGui_GetKeyDownDuration",
	"scope": "lua",
	"body": "reaper.ImGui_GetKeyDownDuration(${1:ctx}, ${2:key})$0",
	"description": "Duration the keyboard key has been down (0.0 == just pressed)\n\n"
	},

	"ImGui_GetKeyMods lua": {
	"prefix": "reaper.ImGui_GetKeyMods",
	"scope": "lua",
	"body": "reaper.ImGui_GetKeyMods(${1:ctx})$0",
	"description": "Flags for the Ctrl/Shift/Alt/Super keys. Uses Mod_* values.\n\n"
	},

	"ImGui_GetKeyPressedAmount lua": {
	"prefix": "reaper.ImGui_GetKeyPressedAmount",
	"scope": "lua",
	"body": "reaper.ImGui_GetKeyPressedAmount(${1:ctx}, ${2:key}, ${3:repeat_delay}, ${4:rate})$0",
	"description": "Uses provided repeat rate/delay. Return a count, most often 0 or 1 but might\nbe >1 if ConfigVar_RepeatRate is small enough that GetDeltaTime > RepeatRate.\n\n"
	},

	"ImGui_GetMainViewport lua": {
	"prefix": "reaper.ImGui_GetMainViewport",
	"scope": "lua",
	"body": "reaper.ImGui_GetMainViewport(${1:ctx})$0",
	"description": "Currently represents REAPER's main window (arrange view).\nWARNING: This may change or be removed in the future.\n\n"
	},

	"ImGui_GetMouseClickedCount lua": {
	"prefix": "reaper.ImGui_GetMouseClickedCount",
	"scope": "lua",
	"body": "reaper.ImGui_GetMouseClickedCount(${1:ctx}, ${2:button})$0",
	"description": "Return the number of successive mouse-clicks at the time where a click happen (otherwise 0).\n\n"
	},

	"ImGui_GetMouseClickedPos lua": {
	"prefix": "reaper.ImGui_GetMouseClickedPos",
	"scope": "lua",
	"body": "x, y = reaper.ImGui_GetMouseClickedPos(${1:ctx}, ${2:button})$0",
	"description": ""
	},

	"ImGui_GetMouseCursor lua": {
	"prefix": "reaper.ImGui_GetMouseCursor",
	"scope": "lua",
	"body": "reaper.ImGui_GetMouseCursor(${1:ctx})$0",
	"description": "Get desired mouse cursor shape, reset every frame. This is updated during the frame.\n\n"
	},

	"ImGui_GetMouseDelta lua": {
	"prefix": "reaper.ImGui_GetMouseDelta",
	"scope": "lua",
	"body": "x, y = reaper.ImGui_GetMouseDelta(${1:ctx})$0",
	"description": "Mouse delta. Note that this is zero if either current or previous position\nare invalid (-FLT_MAX,-FLT_MAX), so a disappearing/reappearing mouse won't have\na huge delta.\n\n"
	},

	"ImGui_GetMouseDownDuration lua": {
	"prefix": "reaper.ImGui_GetMouseDownDuration",
	"scope": "lua",
	"body": "reaper.ImGui_GetMouseDownDuration(${1:ctx}, ${2:button})$0",
	"description": "Duration the mouse button has been down (0.0 == just clicked)\n\n"
	},

	"ImGui_GetMouseDragDelta lua": {
	"prefix": "reaper.ImGui_GetMouseDragDelta",
	"scope": "lua",
	"body": "x, y = reaper.ImGui_GetMouseDragDelta(${1:ctx}, ${2:x}, ${3:y}, ${4:optional_buttonIn}, ${5:optional_lock_thresholdIn})$0",
	"description": "Return the delta from the initial clicking position while the mouse button is\npressed or was just released. This is locked and return 0.0 until the mouse\nmoves past a distance threshold at least once (if lock_threshold < -1.0, uses\nConfigVar_MouseDragThreshold).\n\n"
	},

	"ImGui_GetMousePos lua": {
	"prefix": "reaper.ImGui_GetMousePos",
	"scope": "lua",
	"body": "x, y = reaper.ImGui_GetMousePos(${1:ctx})$0",
	"description": ""
	},

	"ImGui_GetMousePosOnOpeningCurrentPopup lua": {
	"prefix": "reaper.ImGui_GetMousePosOnOpeningCurrentPopup",
	"scope": "lua",
	"body": "x, y = reaper.ImGui_GetMousePosOnOpeningCurrentPopup(${1:ctx})$0",
	"description": "Retrieve mouse position at the time of opening popup we have BeginPopup()\ninto (helper to avoid user backing that value themselves).\n\n"
	},

	"ImGui_GetMouseWheel lua": {
	"prefix": "reaper.ImGui_GetMouseWheel",
	"scope": "lua",
	"body": "vertical, horizontal = reaper.ImGui_GetMouseWheel(${1:ctx})$0",
	"description": "Mouse wheel Vertical: 1 unit scrolls about 5 lines text.\n\n"
	},

	"ImGui_GetScrollMaxX lua": {
	"prefix": "reaper.ImGui_GetScrollMaxX",
	"scope": "lua",
	"body": "reaper.ImGui_GetScrollMaxX(${1:ctx})$0",
	"description": "Get maximum scrolling amount ~~ ContentSize.x - WindowSize.x - DecorationsSize.x\n\n"
	},

	"ImGui_GetScrollMaxY lua": {
	"prefix": "reaper.ImGui_GetScrollMaxY",
	"scope": "lua",
	"body": "reaper.ImGui_GetScrollMaxY(${1:ctx})$0",
	"description": "Get maximum scrolling amount ~~ ContentSize.y - WindowSize.y - DecorationsSize.y\n\n"
	},

	"ImGui_GetScrollX lua": {
	"prefix": "reaper.ImGui_GetScrollX",
	"scope": "lua",
	"body": "reaper.ImGui_GetScrollX(${1:ctx})$0",
	"description": "Get scrolling amount [0 .. GetScrollMaxX()]\n\n"
	},

	"ImGui_GetScrollY lua": {
	"prefix": "reaper.ImGui_GetScrollY",
	"scope": "lua",
	"body": "reaper.ImGui_GetScrollY(${1:ctx})$0",
	"description": "Get scrolling amount [0 .. GetScrollMaxY()]\n\n"
	},

	"ImGui_GetStyleColor lua": {
	"prefix": "reaper.ImGui_GetStyleColor",
	"scope": "lua",
	"body": "reaper.ImGui_GetStyleColor(${1:ctx}, ${2:idx})$0",
	"description": "Retrieve style color as stored in ImGuiStyle structure.\nUse to feed back into PushStyleColor, Otherwise use GetColor to get style color\nwith style alpha baked in. See Col_* for available style colors.\n\n"
	},

	"ImGui_GetStyleVar lua": {
	"prefix": "reaper.ImGui_GetStyleVar",
	"scope": "lua",
	"body": "val1, val2 = reaper.ImGui_GetStyleVar(${1:ctx}, ${2:var_idx})$0",
	"description": ""
	},

	"ImGui_GetTextLineHeight lua": {
	"prefix": "reaper.ImGui_GetTextLineHeight",
	"scope": "lua",
	"body": "reaper.ImGui_GetTextLineHeight(${1:ctx})$0",
	"description": "Same as GetFontSize\n\n"
	},

	"ImGui_GetTextLineHeightWithSpacing lua": {
	"prefix": "reaper.ImGui_GetTextLineHeightWithSpacing",
	"scope": "lua",
	"body": "reaper.ImGui_GetTextLineHeightWithSpacing(${1:ctx})$0",
	"description": "GetFontSize + StyleVar_ItemSpacing.y\n(distance in pixels between 2 consecutive lines of text).\n\n"
	},

	"ImGui_GetTime lua": {
	"prefix": "reaper.ImGui_GetTime",
	"scope": "lua",
	"body": "reaper.ImGui_GetTime(${1:ctx})$0",
	"description": "Get global imgui time. Incremented every frame.\n\n"
	},

	"ImGui_GetTreeNodeToLabelSpacing lua": {
	"prefix": "reaper.ImGui_GetTreeNodeToLabelSpacing",
	"scope": "lua",
	"body": "reaper.ImGui_GetTreeNodeToLabelSpacing(${1:ctx})$0",
	"description": "Horizontal distance preceding label when using TreeNode*() or Bullet()\n== (GetFontSize + StyleVar_FramePadding.x*2) for a regular unframed TreeNode.\n\n"
	},

	"ImGui_GetVersion lua": {
	"prefix": "reaper.ImGui_GetVersion",
	"scope": "lua",
	"body": "imgui_version, imgui_version_num, reaimgui_version = reaper.ImGui_GetVersion()\n\n",
	"description": ""
	},

	"ImGui_GetWindowContentRegionMax lua": {
	"prefix": "reaper.ImGui_GetWindowContentRegionMax",
	"scope": "lua",
	"body": "x, y = reaper.ImGui_GetWindowContentRegionMax(${1:ctx})$0",
	"description": "Content boundaries max (roughly (0,0)+Size-Scroll) where Size can be\noverridden with SetNextWindowContentSize, in window coordinates.\n\n"
	},

	"ImGui_GetWindowContentRegionMin lua": {
	"prefix": "reaper.ImGui_GetWindowContentRegionMin",
	"scope": "lua",
	"body": "x, y = reaper.ImGui_GetWindowContentRegionMin(${1:ctx})$0",
	"description": "Content boundaries min (roughly (0,0)-Scroll), in window coordinates.\n\n"
	},

	"ImGui_GetWindowDockID lua": {
	"prefix": "reaper.ImGui_GetWindowDockID",
	"scope": "lua",
	"body": "reaper.ImGui_GetWindowDockID(${1:ctx})$0",
	"description": ""
	},

	"ImGui_GetWindowDpiScale lua": {
	"prefix": "reaper.ImGui_GetWindowDpiScale",
	"scope": "lua",
	"body": "reaper.ImGui_GetWindowDpiScale(${1:ctx})$0",
	"description": "Get DPI scale currently associated to the current window's viewport\n(1.0 = 96 DPI).\n\n"
	},

	"ImGui_GetWindowDrawList lua": {
	"prefix": "reaper.ImGui_GetWindowDrawList",
	"scope": "lua",
	"body": "reaper.ImGui_GetWindowDrawList(${1:ctx})$0",
	"description": "The draw list associated to the current window, to append your own drawing primitives\n\n"
	},

	"ImGui_GetWindowHeight lua": {
	"prefix": "reaper.ImGui_GetWindowHeight",
	"scope": "lua",
	"body": "reaper.ImGui_GetWindowHeight(${1:ctx})$0",
	"description": "Get current window height (shortcut for (select(2, GetWindowSize())).\n\n"
	},

	"ImGui_GetWindowPos lua": {
	"prefix": "reaper.ImGui_GetWindowPos",
	"scope": "lua",
	"body": "x, y = reaper.ImGui_GetWindowPos(${1:ctx})$0",
	"description": "Get current window position in screen space (useful if you want to do your own\ndrawing via the DrawList API).\n\n"
	},

	"ImGui_GetWindowSize lua": {
	"prefix": "reaper.ImGui_GetWindowSize",
	"scope": "lua",
	"body": "w, h = reaper.ImGui_GetWindowSize(${1:ctx})$0",
	"description": "Get current window size\n\n"
	},

	"ImGui_GetWindowViewport lua": {
	"prefix": "reaper.ImGui_GetWindowViewport",
	"scope": "lua",
	"body": "reaper.ImGui_GetWindowViewport(${1:ctx})$0",
	"description": "Get viewport currently associated to the current window.\n\n"
	},

	"ImGui_GetWindowWidth lua": {
	"prefix": "reaper.ImGui_GetWindowWidth",
	"scope": "lua",
	"body": "reaper.ImGui_GetWindowWidth(${1:ctx})$0",
	"description": "Get current window width (shortcut for (select(1, GetWindowSize())).\n\n"
	},

	"ImGui_HoveredFlags_AllowWhenBlockedByActiveItem lua": {
	"prefix": "reaper.ImGui_HoveredFlags_AllowWhenBlockedByActiveItem",
	"scope": "lua",
	"body": "reaper.ImGui_HoveredFlags_AllowWhenBlockedByActiveItem()\n\n",
	"description": "Return true even if an active item is blocking access to this item/window.\nUseful for Drag and Drop patterns.\n\n"
	},

	"ImGui_HoveredFlags_AllowWhenBlockedByPopup lua": {
	"prefix": "reaper.ImGui_HoveredFlags_AllowWhenBlockedByPopup",
	"scope": "lua",
	"body": "reaper.ImGui_HoveredFlags_AllowWhenBlockedByPopup()\n\n",
	"description": "Return true even if a popup window is normally blocking access to this item/window.\n\n"
	},

	"ImGui_HoveredFlags_AllowWhenDisabled lua": {
	"prefix": "reaper.ImGui_HoveredFlags_AllowWhenDisabled",
	"scope": "lua",
	"body": "reaper.ImGui_HoveredFlags_AllowWhenDisabled()\n\n",
	"description": "IsItemHovered only: Return true even if the item is disabled.\n\n"
	},

	"ImGui_HoveredFlags_AllowWhenOverlapped lua": {
	"prefix": "reaper.ImGui_HoveredFlags_AllowWhenOverlapped",
	"scope": "lua",
	"body": "reaper.ImGui_HoveredFlags_AllowWhenOverlapped()\n\n",
	"description": "IsItemHovered only: Return true even if the position is obstructed or\noverlapped by another window.\n\n"
	},

	"ImGui_HoveredFlags_AnyWindow lua": {
	"prefix": "reaper.ImGui_HoveredFlags_AnyWindow",
	"scope": "lua",
	"body": "reaper.ImGui_HoveredFlags_AnyWindow()\n\n",
	"description": "IsWindowHovered only: Return true if any window is hovered.\n\n"
	},

	"ImGui_HoveredFlags_ChildWindows lua": {
	"prefix": "reaper.ImGui_HoveredFlags_ChildWindows",
	"scope": "lua",
	"body": "reaper.ImGui_HoveredFlags_ChildWindows()\n\n",
	"description": "IsWindowHovered only: Return true if any children of the window is hovered.\n\n"
	},

	"ImGui_HoveredFlags_DelayNormal lua": {
	"prefix": "reaper.ImGui_HoveredFlags_DelayNormal",
	"scope": "lua",
	"body": "reaper.ImGui_HoveredFlags_DelayNormal()\n\n",
	"description": "Return true after ConfigVar_HoverDelayNormal elapsed (~0.30 sec)\n\n"
	},

	"ImGui_HoveredFlags_DelayShort lua": {
	"prefix": "reaper.ImGui_HoveredFlags_DelayShort",
	"scope": "lua",
	"body": "reaper.ImGui_HoveredFlags_DelayShort()\n\n",
	"description": "Return true after ConfigVar_HoverDelayShort elapsed (~0.10 sec)\n\n"
	},

	"ImGui_HoveredFlags_DockHierarchy lua": {
	"prefix": "reaper.ImGui_HoveredFlags_DockHierarchy",
	"scope": "lua",
	"body": "reaper.ImGui_HoveredFlags_DockHierarchy()\n\n",
	"description": "IsWindowHovered only: Consider docking hierarchy (treat dockspace host as\nparent of docked window) (when used with _ChildWindows or _RootWindow).\n\n"
	},

	"ImGui_HoveredFlags_NoNavOverride lua": {
	"prefix": "reaper.ImGui_HoveredFlags_NoNavOverride",
	"scope": "lua",
	"body": "reaper.ImGui_HoveredFlags_NoNavOverride()\n\n",
	"description": "Disable using gamepad/keyboard navigation state when active, always query mouse.\n\n"
	},

	"ImGui_HoveredFlags_NoPopupHierarchy lua": {
	"prefix": "reaper.ImGui_HoveredFlags_NoPopupHierarchy",
	"scope": "lua",
	"body": "reaper.ImGui_HoveredFlags_NoPopupHierarchy()\n\n",
	"description": "IsWindowHovered only: Do not consider popup hierarchy (do not treat popup\nemitter as parent of popup) (when used with _ChildWindows or _RootWindow).\n\n"
	},

	"ImGui_HoveredFlags_NoSharedDelay lua": {
	"prefix": "reaper.ImGui_HoveredFlags_NoSharedDelay",
	"scope": "lua",
	"body": "reaper.ImGui_HoveredFlags_NoSharedDelay()\n\n",
	"description": "Disable shared delay system where moving from one item to the next keeps\nthe previous timer for a short time (standard for tooltips with long delays\n\n"
	},

	"ImGui_HoveredFlags_None lua": {
	"prefix": "reaper.ImGui_HoveredFlags_None",
	"scope": "lua",
	"body": "reaper.ImGui_HoveredFlags_None()\n\n",
	"description": "Return true if directly over the item/window, not obstructed by another\nwindow, not obstructed by an active popup or modal blocking inputs under them.\n\n"
	},

	"ImGui_HoveredFlags_RectOnly lua": {
	"prefix": "reaper.ImGui_HoveredFlags_RectOnly",
	"scope": "lua",
	"body": "reaper.ImGui_HoveredFlags_RectOnly()\n\n",
	"description": "HoveredFlags_AllowWhenBlockedByPopup |\nHoveredFlags_AllowWhenBlockedByActiveItem | HoveredFlags_AllowWhenOverlapped\n\n"
	},

	"ImGui_HoveredFlags_RootAndChildWindows lua": {
	"prefix": "reaper.ImGui_HoveredFlags_RootAndChildWindows",
	"scope": "lua",
	"body": "reaper.ImGui_HoveredFlags_RootAndChildWindows()\n\n",
	"description": "HoveredFlags_RootWindow | HoveredFlags_ChildWindows\n\n"
	},

	"ImGui_HoveredFlags_RootWindow lua": {
	"prefix": "reaper.ImGui_HoveredFlags_RootWindow",
	"scope": "lua",
	"body": "reaper.ImGui_HoveredFlags_RootWindow()\n\n",
	"description": "IsWindowHovered only: Test from root window (top most parent of the current hierarchy).\n\n"
	},

	"ImGui_Image lua": {
	"prefix": "reaper.ImGui_Image",
	"scope": "lua",
	"body": "reaper.ImGui_Image(${1:ImGui_Context_img}, ${2:size_w}, ${3:size_h}, ${4:optional_uv0_xIn}, ${5:optional_uv0_yIn}, ${6:optional_uv1_xIn}, ${7:optional_uv1_yIn}, ${8:optional_tint_col_rgbaIn}, ${9:optional_border_col_rgbaIn})$0",
	"description": ""
	},

	"ImGui_ImageButton lua": {
	"prefix": "reaper.ImGui_ImageButton",
	"scope": "lua",
	"body": "reaper.ImGui_ImageButton(${1:ctx}, ${2:string_img}, ${3:size_w}, ${4:size_h}, ${5:optional_uv0_xIn}, ${6:optional_uv0_yIn}, ${7:optional_uv1_xIn}, ${8:optional_uv1_yIn}, ${9:optional_bg_col_rgbaIn}, ${10:optional_tint_col_rgbaIn})$0",
	"description": ""
	},

	"ImGui_ImageSet_Add lua": {
	"prefix": "reaper.ImGui_ImageSet_Add",
	"scope": "lua",
	"body": "reaper.ImGui_ImageSet_Add(${1:set}, ${2:number_img})$0",
	"description": "'img' cannot be another ImageSet.\n\n"
	},

	"ImGui_Image_GetSize lua": {
	"prefix": "reaper.ImGui_Image_GetSize",
	"scope": "lua",
	"body": "w, h = reaper.ImGui_Image_GetSize(${1:img})$0",
	"description": ""
	},

	"ImGui_Indent lua": {
	"prefix": "reaper.ImGui_Indent",
	"scope": "lua",
	"body": "reaper.ImGui_Indent(${1:ctx}, ${2:optional_indent_wIn})$0",
	"description": "Move content position toward the right, by 'indent_w', or\nStyleVar_IndentSpacing if 'indent_w' <= 0. See Unindent.\n\n"
	},

	"ImGui_InputDouble lua": {
	"prefix": "reaper.ImGui_InputDouble",
	"scope": "lua",
	"body": "retval, v = reaper.ImGui_InputDouble(${1:ctx}, ${2:label}, ${3:v}, ${4:optional_stepIn}, ${5:optional_step_fastIn}, ${6:optional_formatIn}, ${7:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_InputDouble2 lua": {
	"prefix": "reaper.ImGui_InputDouble2",
	"scope": "lua",
	"body": "retval, v1, v2 = reaper.ImGui_InputDouble2(${1:ctx}, ${2:label}, ${3:v1}, ${4:v2}, ${5:optional_formatIn}, ${6:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_InputDouble3 lua": {
	"prefix": "reaper.ImGui_InputDouble3",
	"scope": "lua",
	"body": "retval, v1, v2, v3 = reaper.ImGui_InputDouble3(${1:ctx}, ${2:label}, ${3:v1}, ${4:v2}, ${5:v3}, ${6:optional_formatIn}, ${7:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_InputDouble4 lua": {
	"prefix": "reaper.ImGui_InputDouble4",
	"scope": "lua",
	"body": "retval, v1, v2, v3, v4 = reaper.ImGui_InputDouble4(${1:ctx}, ${2:label}, ${3:v1}, ${4:v2}, ${5:v3}, ${6:v4}, ${7:optional_formatIn}, ${8:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_InputDoubleN lua": {
	"prefix": "reaper.ImGui_InputDoubleN",
	"scope": "lua",
	"body": "reaper.ImGui_InputDoubleN(${1:ctx}, ${2:string_values}, ${3:optional_stepIn}, ${4:optional_step_fastIn}, ${5:optional_formatIn}, ${6:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_InputInt lua": {
	"prefix": "reaper.ImGui_InputInt",
	"scope": "lua",
	"body": "retval, v = reaper.ImGui_InputInt(${1:ctx}, ${2:label}, ${3:v}, ${4:optional_stepIn}, ${5:optional_step_fastIn}, ${6:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_InputInt2 lua": {
	"prefix": "reaper.ImGui_InputInt2",
	"scope": "lua",
	"body": "retval, v1, v2 = reaper.ImGui_InputInt2(${1:ctx}, ${2:label}, ${3:v1}, ${4:v2}, ${5:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_InputInt3 lua": {
	"prefix": "reaper.ImGui_InputInt3",
	"scope": "lua",
	"body": "retval, v1, v2, v3 = reaper.ImGui_InputInt3(${1:ctx}, ${2:label}, ${3:v1}, ${4:v2}, ${5:v3}, ${6:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_InputInt4 lua": {
	"prefix": "reaper.ImGui_InputInt4",
	"scope": "lua",
	"body": "retval, v1, v2, v3, v4 = reaper.ImGui_InputInt4(${1:ctx}, ${2:label}, ${3:v1}, ${4:v2}, ${5:v3}, ${6:v4}, ${7:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_InputText lua": {
	"prefix": "reaper.ImGui_InputText",
	"scope": "lua",
	"body": "retval, buf = reaper.ImGui_InputText(${1:ctx}, ${2:label}, ${3:buf}, ${4:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_InputTextFlags_AllowTabInput lua": {
	"prefix": "reaper.ImGui_InputTextFlags_AllowTabInput",
	"scope": "lua",
	"body": "reaper.ImGui_InputTextFlags_AllowTabInput()\n\n",
	"description": "Pressing TAB input a '\t' character into the text field.\n\n"
	},

	"ImGui_InputTextFlags_AlwaysOverwrite lua": {
	"prefix": "reaper.ImGui_InputTextFlags_AlwaysOverwrite",
	"scope": "lua",
	"body": "reaper.ImGui_InputTextFlags_AlwaysOverwrite()\n\n",
	"description": "Overwrite mode.\n\n"
	},

	"ImGui_InputTextFlags_AutoSelectAll lua": {
	"prefix": "reaper.ImGui_InputTextFlags_AutoSelectAll",
	"scope": "lua",
	"body": "reaper.ImGui_InputTextFlags_AutoSelectAll()\n\n",
	"description": "Select entire text when first taking mouse focus.\n\n"
	},

	"ImGui_InputTextFlags_CharsDecimal lua": {
	"prefix": "reaper.ImGui_InputTextFlags_CharsDecimal",
	"scope": "lua",
	"body": "reaper.ImGui_InputTextFlags_CharsDecimal()\n\n",
	"description": "Allow 0123456789.+-*/.\n\n"
	},

	"ImGui_InputTextFlags_CharsHexadecimal lua": {
	"prefix": "reaper.ImGui_InputTextFlags_CharsHexadecimal",
	"scope": "lua",
	"body": "reaper.ImGui_InputTextFlags_CharsHexadecimal()\n\n",
	"description": "Allow 0123456789ABCDEFabcdef.\n\n"
	},

	"ImGui_InputTextFlags_CharsNoBlank lua": {
	"prefix": "reaper.ImGui_InputTextFlags_CharsNoBlank",
	"scope": "lua",
	"body": "reaper.ImGui_InputTextFlags_CharsNoBlank()\n\n",
	"description": "Filter out spaces, tabs.\n\n"
	},

	"ImGui_InputTextFlags_CharsScientific lua": {
	"prefix": "reaper.ImGui_InputTextFlags_CharsScientific",
	"scope": "lua",
	"body": "reaper.ImGui_InputTextFlags_CharsScientific()\n\n",
	"description": "Allow 0123456789.+-*/eE (Scientific notation input).\n\n"
	},

	"ImGui_InputTextFlags_CharsUppercase lua": {
	"prefix": "reaper.ImGui_InputTextFlags_CharsUppercase",
	"scope": "lua",
	"body": "reaper.ImGui_InputTextFlags_CharsUppercase()\n\n",
	"description": "Turn a..z into A..Z.\n\n"
	},

	"ImGui_InputTextFlags_CtrlEnterForNewLine lua": {
	"prefix": "reaper.ImGui_InputTextFlags_CtrlEnterForNewLine",
	"scope": "lua",
	"body": "reaper.ImGui_InputTextFlags_CtrlEnterForNewLine()\n\n",
	"description": "In multi-line mode, unfocus with Enter, add new line with Ctrl+Enter\n(default is opposite: unfocus with Ctrl+Enter, add line with Enter).\n\n"
	},

	"ImGui_InputTextFlags_EnterReturnsTrue lua": {
	"prefix": "reaper.ImGui_InputTextFlags_EnterReturnsTrue",
	"scope": "lua",
	"body": "reaper.ImGui_InputTextFlags_EnterReturnsTrue()\n\n",
	"description": "Return 'true' when Enter is pressed (as opposed to every time the value was\nmodified). Consider looking at the IsItemDeactivatedAfterEdit function.\n\n"
	},

	"ImGui_InputTextFlags_EscapeClearsAll lua": {
	"prefix": "reaper.ImGui_InputTextFlags_EscapeClearsAll",
	"scope": "lua",
	"body": "reaper.ImGui_InputTextFlags_EscapeClearsAll()\n\n",
	"description": "Escape key clears content if not empty, and deactivate otherwise\n(constrast to default behavior of Escape to revert).\n\n"
	},

	"ImGui_InputTextFlags_NoHorizontalScroll lua": {
	"prefix": "reaper.ImGui_InputTextFlags_NoHorizontalScroll",
	"scope": "lua",
	"body": "reaper.ImGui_InputTextFlags_NoHorizontalScroll()\n\n",
	"description": "Disable following the cursor horizontally.\n\n"
	},

	"ImGui_InputTextFlags_NoUndoRedo lua": {
	"prefix": "reaper.ImGui_InputTextFlags_NoUndoRedo",
	"scope": "lua",
	"body": "reaper.ImGui_InputTextFlags_NoUndoRedo()\n\n",
	"description": "Disable undo/redo. Note that input text owns the text data while active.\n\n"
	},

	"ImGui_InputTextFlags_None lua": {
	"prefix": "reaper.ImGui_InputTextFlags_None",
	"scope": "lua",
	"body": "reaper.ImGui_InputTextFlags_None()\n\n",
	"description": ""
	},

	"ImGui_InputTextFlags_Password lua": {
	"prefix": "reaper.ImGui_InputTextFlags_Password",
	"scope": "lua",
	"body": "reaper.ImGui_InputTextFlags_Password()\n\n",
	"description": "Password mode, display all characters as '*'.\n\n"
	},

	"ImGui_InputTextFlags_ReadOnly lua": {
	"prefix": "reaper.ImGui_InputTextFlags_ReadOnly",
	"scope": "lua",
	"body": "reaper.ImGui_InputTextFlags_ReadOnly()\n\n",
	"description": "Read-only mode.\n\n"
	},

	"ImGui_InputTextMultiline lua": {
	"prefix": "reaper.ImGui_InputTextMultiline",
	"scope": "lua",
	"body": "retval, buf = reaper.ImGui_InputTextMultiline(${1:ctx}, ${2:label}, ${3:buf}, ${4:optional_size_wIn}, ${5:optional_size_hIn}, ${6:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_InputTextWithHint lua": {
	"prefix": "reaper.ImGui_InputTextWithHint",
	"scope": "lua",
	"body": "retval, buf = reaper.ImGui_InputTextWithHint(${1:ctx}, ${2:label}, ${3:hint}, ${4:buf}, ${5:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_InvisibleButton lua": {
	"prefix": "reaper.ImGui_InvisibleButton",
	"scope": "lua",
	"body": "reaper.ImGui_InvisibleButton(${1:ctx}, ${2:str_id}, ${3:size_w}, ${4:size_h}, ${5:optional_flagsIn})$0",
	"description": "Flexible button behavior without the visuals, frequently useful to build\ncustom behaviors using the public api (along with IsItemActive, IsItemHovered, etc.).\n\n"
	},

	"ImGui_IsAnyItemActive lua": {
	"prefix": "reaper.ImGui_IsAnyItemActive",
	"scope": "lua",
	"body": "reaper.ImGui_IsAnyItemActive(${1:ctx})$0",
	"description": ""
	},

	"ImGui_IsAnyItemFocused lua": {
	"prefix": "reaper.ImGui_IsAnyItemFocused",
	"scope": "lua",
	"body": "reaper.ImGui_IsAnyItemFocused(${1:ctx})$0",
	"description": ""
	},

	"ImGui_IsAnyItemHovered lua": {
	"prefix": "reaper.ImGui_IsAnyItemHovered",
	"scope": "lua",
	"body": "reaper.ImGui_IsAnyItemHovered(${1:ctx})$0",
	"description": ""
	},

	"ImGui_IsAnyMouseDown lua": {
	"prefix": "reaper.ImGui_IsAnyMouseDown",
	"scope": "lua",
	"body": "reaper.ImGui_IsAnyMouseDown(${1:ctx})$0",
	"description": "Is any mouse button held?\n\n"
	},

	"ImGui_IsItemActivated lua": {
	"prefix": "reaper.ImGui_IsItemActivated",
	"scope": "lua",
	"body": "reaper.ImGui_IsItemActivated(${1:ctx})$0",
	"description": "Was the last item just made active (item was previously inactive).\n\n"
	},

	"ImGui_IsItemActive lua": {
	"prefix": "reaper.ImGui_IsItemActive",
	"scope": "lua",
	"body": "reaper.ImGui_IsItemActive(${1:ctx})$0",
	"description": "Is the last item active? (e.g. button being held, text field being edited.\nThis will continuously return true while holding mouse button on an item.\nItems that don't interact will always return false.\n\n"
	},

	"ImGui_IsItemClicked lua": {
	"prefix": "reaper.ImGui_IsItemClicked",
	"scope": "lua",
	"body": "reaper.ImGui_IsItemClicked(${1:ctx}, ${2:optional_mouse_buttonIn})$0",
	"description": "Is the last item clicked? (e.g. button/node just clicked on)\n== IsMouseClicked(mouse_button) && IsItemHovered().\nThis is NOT equivalent to the behavior of e.g. Button.\nMost widgets have specific reactions based on mouse-up/down state, mouse position etc.\n\n"
	},

	"ImGui_IsItemDeactivated lua": {
	"prefix": "reaper.ImGui_IsItemDeactivated",
	"scope": "lua",
	"body": "reaper.ImGui_IsItemDeactivated(${1:ctx})$0",
	"description": "Was the last item just made inactive (item was previously active).\nUseful for Undo/Redo patterns with widgets that require continuous editing.\n\n"
	},

	"ImGui_IsItemDeactivatedAfterEdit lua": {
	"prefix": "reaper.ImGui_IsItemDeactivatedAfterEdit",
	"scope": "lua",
	"body": "reaper.ImGui_IsItemDeactivatedAfterEdit(${1:ctx})$0",
	"description": "Was the last item just made inactive and made a value change when it was\nactive? (e.g. Slider/Drag moved).\nUseful for Undo/Redo patterns with widgets that require continuous editing. Note\nthat you may get false positives (some widgets such as Combo/ListBox/Selectable\nwill return true even when clicking an already selected item).\n\n"
	},

	"ImGui_IsItemEdited lua": {
	"prefix": "reaper.ImGui_IsItemEdited",
	"scope": "lua",
	"body": "reaper.ImGui_IsItemEdited(${1:ctx})$0",
	"description": "Did the last item modify its underlying value this frame? or was pressed?\nThis is generally the same as the 'bool' return value of many widgets.\n\n"
	},

	"ImGui_IsItemFocused lua": {
	"prefix": "reaper.ImGui_IsItemFocused",
	"scope": "lua",
	"body": "reaper.ImGui_IsItemFocused(${1:ctx})$0",
	"description": "Is the last item focused for keyboard/gamepad navigation?\n\n"
	},

	"ImGui_IsItemHovered lua": {
	"prefix": "reaper.ImGui_IsItemHovered",
	"scope": "lua",
	"body": "reaper.ImGui_IsItemHovered(${1:ctx}, ${2:optional_flagsIn})$0",
	"description": "Is the last item hovered? (and usable, aka not blocked by a popup, etc.).\nSee HoveredFlags_* for more options.\n\n"
	},

	"ImGui_IsItemToggledOpen lua": {
	"prefix": "reaper.ImGui_IsItemToggledOpen",
	"scope": "lua",
	"body": "reaper.ImGui_IsItemToggledOpen(${1:ctx})$0",
	"description": "Was the last item open state toggled? Set by TreeNode.\n\n"
	},

	"ImGui_IsItemVisible lua": {
	"prefix": "reaper.ImGui_IsItemVisible",
	"scope": "lua",
	"body": "reaper.ImGui_IsItemVisible(${1:ctx})$0",
	"description": "Is the last item visible? (items may be out of sight because of clipping/scrolling)\n\n"
	},

	"ImGui_IsKeyDown lua": {
	"prefix": "reaper.ImGui_IsKeyDown",
	"scope": "lua",
	"body": "reaper.ImGui_IsKeyDown(${1:ctx}, ${2:key})$0",
	"description": "Is key being held.\n\n"
	},

	"ImGui_IsKeyPressed lua": {
	"prefix": "reaper.ImGui_IsKeyPressed",
	"scope": "lua",
	"body": "reaper.ImGui_IsKeyPressed(${1:ctx}, ${2:key}, ${3:optional_repeatIn})$0",
	"description": "Was key pressed (went from !Down to Down)?\nIf repeat=true, uses ConfigVar_KeyRepeatDelay / ConfigVar_KeyRepeatRate.\n\n"
	},

	"ImGui_IsKeyReleased lua": {
	"prefix": "reaper.ImGui_IsKeyReleased",
	"scope": "lua",
	"body": "reaper.ImGui_IsKeyReleased(${1:ctx}, ${2:key})$0",
	"description": "Was key released (went from Down to !Down)?\n\n"
	},

	"ImGui_IsMouseClicked lua": {
	"prefix": "reaper.ImGui_IsMouseClicked",
	"scope": "lua",
	"body": "reaper.ImGui_IsMouseClicked(${1:ctx}, ${2:button}, ${3:optional_repeatIn})$0",
	"description": "Did mouse button clicked? (went from !Down to Down).\nSame as GetMouseClickedCount() == 1.\n\n"
	},

	"ImGui_IsMouseDoubleClicked lua": {
	"prefix": "reaper.ImGui_IsMouseDoubleClicked",
	"scope": "lua",
	"body": "reaper.ImGui_IsMouseDoubleClicked(${1:ctx}, ${2:button})$0",
	"description": "Did mouse button double-clicked? Same as GetMouseClickedCount() == 2.\n(Note that a double-click will also report IsMouseClicked() == true)\n\n"
	},

	"ImGui_IsMouseDown lua": {
	"prefix": "reaper.ImGui_IsMouseDown",
	"scope": "lua",
	"body": "reaper.ImGui_IsMouseDown(${1:ctx}, ${2:button})$0",
	"description": "Is mouse button held?\n\n"
	},

	"ImGui_IsMouseDragging lua": {
	"prefix": "reaper.ImGui_IsMouseDragging",
	"scope": "lua",
	"body": "reaper.ImGui_IsMouseDragging(${1:ctx}, ${2:button}, ${3:optional_lock_thresholdIn})$0",
	"description": "Is mouse dragging? (if lock_threshold < -1.0, uses ConfigVar_MouseDragThreshold)\n\n"
	},

	"ImGui_IsMouseHoveringRect lua": {
	"prefix": "reaper.ImGui_IsMouseHoveringRect",
	"scope": "lua",
	"body": "reaper.ImGui_IsMouseHoveringRect(${1:ctx}, ${2:r_min_x}, ${3:r_min_y}, ${4:r_max_x}, ${5:r_max_y}, ${6:optional_clipIn})$0",
	"description": "Is mouse hovering given bounding rect (in screen space).\nClipped by current clipping settings, but disregarding of other consideration\nof focus/window ordering/popup-block.\n\n"
	},

	"ImGui_IsMousePosValid lua": {
	"prefix": "reaper.ImGui_IsMousePosValid",
	"scope": "lua",
	"body": "reaper.ImGui_IsMousePosValid(${1:ctx}, ${2:optional_mouse_pos_xIn}, ${3:optional_mouse_pos_yIn})$0",
	"description": ""
	},

	"ImGui_IsMouseReleased lua": {
	"prefix": "reaper.ImGui_IsMouseReleased",
	"scope": "lua",
	"body": "reaper.ImGui_IsMouseReleased(${1:ctx}, ${2:button})$0",
	"description": "Did mouse button released? (went from Down to !Down)\n\n"
	},

	"ImGui_IsPopupOpen lua": {
	"prefix": "reaper.ImGui_IsPopupOpen",
	"scope": "lua",
	"body": "reaper.ImGui_IsPopupOpen(${1:ctx}, ${2:str_id}, ${3:optional_flagsIn})$0",
	"description": "Return true if the popup is open at the current BeginPopup level of the\npopup stack.\n- With PopupFlags_AnyPopupId: return true if any popup is open at the current\nBeginPopup() level of the popup stack.\n- With PopupFlags_AnyPopupId + PopupFlags_AnyPopupLevel: return true if any\npopup is open.\n\n"
	},

	"ImGui_IsRectVisible lua": {
	"prefix": "reaper.ImGui_IsRectVisible",
	"scope": "lua",
	"body": "reaper.ImGui_IsRectVisible(${1:ctx}, ${2:size_w}, ${3:size_h})$0",
	"description": "Test if rectangle (of given size, starting from cursor position) is\nvisible / not clipped.\n\n"
	},

	"ImGui_IsRectVisibleEx lua": {
	"prefix": "reaper.ImGui_IsRectVisibleEx",
	"scope": "lua",
	"body": "reaper.ImGui_IsRectVisibleEx(${1:ctx}, ${2:rect_min_x}, ${3:rect_min_y}, ${4:rect_max_x}, ${5:rect_max_y})$0",
	"description": "Test if rectangle (in screen space) is visible / not clipped. to perform\ncoarse clipping on user's side.\n\n"
	},

	"ImGui_IsWindowAppearing lua": {
	"prefix": "reaper.ImGui_IsWindowAppearing",
	"scope": "lua",
	"body": "reaper.ImGui_IsWindowAppearing(${1:ctx})$0",
	"description": "Use after Begin/BeginPopup/BeginPopupModal to tell if a window just opened.\n\n"
	},

	"ImGui_IsWindowDocked lua": {
	"prefix": "reaper.ImGui_IsWindowDocked",
	"scope": "lua",
	"body": "reaper.ImGui_IsWindowDocked(${1:ctx})$0",
	"description": "Is current window docked into another window or a REAPER docker?\n\n"
	},

	"ImGui_IsWindowFocused lua": {
	"prefix": "reaper.ImGui_IsWindowFocused",
	"scope": "lua",
	"body": "reaper.ImGui_IsWindowFocused(${1:ctx}, ${2:optional_flagsIn})$0",
	"description": "Is current window focused? or its root/child, depending on flags.\nSee flags for options.\n\n"
	},

	"ImGui_IsWindowHovered lua": {
	"prefix": "reaper.ImGui_IsWindowHovered",
	"scope": "lua",
	"body": "reaper.ImGui_IsWindowHovered(${1:ctx}, ${2:optional_flagsIn})$0",
	"description": "Is current window hovered (and typically: not blocked by a popup/modal)?\nSee flags for options.\n\n"
	},

	"ImGui_Key_0 lua": {
	"prefix": "reaper.ImGui_Key_0",
	"scope": "lua",
	"body": "reaper.ImGui_Key_0()\n\n",
	"description": ""
	},

	"ImGui_Key_1 lua": {
	"prefix": "reaper.ImGui_Key_1",
	"scope": "lua",
	"body": "reaper.ImGui_Key_1()\n\n",
	"description": ""
	},

	"ImGui_Key_2 lua": {
	"prefix": "reaper.ImGui_Key_2",
	"scope": "lua",
	"body": "reaper.ImGui_Key_2()\n\n",
	"description": ""
	},

	"ImGui_Key_3 lua": {
	"prefix": "reaper.ImGui_Key_3",
	"scope": "lua",
	"body": "reaper.ImGui_Key_3()\n\n",
	"description": ""
	},

	"ImGui_Key_4 lua": {
	"prefix": "reaper.ImGui_Key_4",
	"scope": "lua",
	"body": "reaper.ImGui_Key_4()\n\n",
	"description": ""
	},

	"ImGui_Key_5 lua": {
	"prefix": "reaper.ImGui_Key_5",
	"scope": "lua",
	"body": "reaper.ImGui_Key_5()\n\n",
	"description": ""
	},

	"ImGui_Key_6 lua": {
	"prefix": "reaper.ImGui_Key_6",
	"scope": "lua",
	"body": "reaper.ImGui_Key_6()\n\n",
	"description": ""
	},

	"ImGui_Key_7 lua": {
	"prefix": "reaper.ImGui_Key_7",
	"scope": "lua",
	"body": "reaper.ImGui_Key_7()\n\n",
	"description": ""
	},

	"ImGui_Key_8 lua": {
	"prefix": "reaper.ImGui_Key_8",
	"scope": "lua",
	"body": "reaper.ImGui_Key_8()\n\n",
	"description": ""
	},

	"ImGui_Key_9 lua": {
	"prefix": "reaper.ImGui_Key_9",
	"scope": "lua",
	"body": "reaper.ImGui_Key_9()\n\n",
	"description": ""
	},

	"ImGui_Key_A lua": {
	"prefix": "reaper.ImGui_Key_A",
	"scope": "lua",
	"body": "reaper.ImGui_Key_A()\n\n",
	"description": ""
	},

	"ImGui_Key_Apostrophe lua": {
	"prefix": "reaper.ImGui_Key_Apostrophe",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Apostrophe()\n\n",
	"description": "'\n\n"
	},

	"ImGui_Key_B lua": {
	"prefix": "reaper.ImGui_Key_B",
	"scope": "lua",
	"body": "reaper.ImGui_Key_B()\n\n",
	"description": ""
	},

	"ImGui_Key_Backslash lua": {
	"prefix": "reaper.ImGui_Key_Backslash",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Backslash()\n\n",
	"description": "\\n\n"
	},

	"ImGui_Key_Backspace lua": {
	"prefix": "reaper.ImGui_Key_Backspace",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Backspace()\n\n",
	"description": ""
	},

	"ImGui_Key_C lua": {
	"prefix": "reaper.ImGui_Key_C",
	"scope": "lua",
	"body": "reaper.ImGui_Key_C()\n\n",
	"description": ""
	},

	"ImGui_Key_CapsLock lua": {
	"prefix": "reaper.ImGui_Key_CapsLock",
	"scope": "lua",
	"body": "reaper.ImGui_Key_CapsLock()\n\n",
	"description": ""
	},

	"ImGui_Key_Comma lua": {
	"prefix": "reaper.ImGui_Key_Comma",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Comma()\n\n",
	"description": ",\n\n"
	},

	"ImGui_Key_D lua": {
	"prefix": "reaper.ImGui_Key_D",
	"scope": "lua",
	"body": "reaper.ImGui_Key_D()\n\n",
	"description": ""
	},

	"ImGui_Key_Delete lua": {
	"prefix": "reaper.ImGui_Key_Delete",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Delete()\n\n",
	"description": ""
	},

	"ImGui_Key_DownArrow lua": {
	"prefix": "reaper.ImGui_Key_DownArrow",
	"scope": "lua",
	"body": "reaper.ImGui_Key_DownArrow()\n\n",
	"description": ""
	},

	"ImGui_Key_E lua": {
	"prefix": "reaper.ImGui_Key_E",
	"scope": "lua",
	"body": "reaper.ImGui_Key_E()\n\n",
	"description": ""
	},

	"ImGui_Key_End lua": {
	"prefix": "reaper.ImGui_Key_End",
	"scope": "lua",
	"body": "reaper.ImGui_Key_End()\n\n",
	"description": ""
	},

	"ImGui_Key_Enter lua": {
	"prefix": "reaper.ImGui_Key_Enter",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Enter()\n\n",
	"description": ""
	},

	"ImGui_Key_Equal lua": {
	"prefix": "reaper.ImGui_Key_Equal",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Equal()\n\n",
	"description": "=\n\n"
	},

	"ImGui_Key_Escape lua": {
	"prefix": "reaper.ImGui_Key_Escape",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Escape()\n\n",
	"description": ""
	},

	"ImGui_Key_F lua": {
	"prefix": "reaper.ImGui_Key_F",
	"scope": "lua",
	"body": "reaper.ImGui_Key_F()\n\n",
	"description": ""
	},

	"ImGui_Key_F1 lua": {
	"prefix": "reaper.ImGui_Key_F1",
	"scope": "lua",
	"body": "reaper.ImGui_Key_F1()\n\n",
	"description": ""
	},

	"ImGui_Key_F10 lua": {
	"prefix": "reaper.ImGui_Key_F10",
	"scope": "lua",
	"body": "reaper.ImGui_Key_F10()\n\n",
	"description": ""
	},

	"ImGui_Key_F11 lua": {
	"prefix": "reaper.ImGui_Key_F11",
	"scope": "lua",
	"body": "reaper.ImGui_Key_F11()\n\n",
	"description": ""
	},

	"ImGui_Key_F12 lua": {
	"prefix": "reaper.ImGui_Key_F12",
	"scope": "lua",
	"body": "reaper.ImGui_Key_F12()\n\n",
	"description": ""
	},

	"ImGui_Key_F2 lua": {
	"prefix": "reaper.ImGui_Key_F2",
	"scope": "lua",
	"body": "reaper.ImGui_Key_F2()\n\n",
	"description": ""
	},

	"ImGui_Key_F3 lua": {
	"prefix": "reaper.ImGui_Key_F3",
	"scope": "lua",
	"body": "reaper.ImGui_Key_F3()\n\n",
	"description": ""
	},

	"ImGui_Key_F4 lua": {
	"prefix": "reaper.ImGui_Key_F4",
	"scope": "lua",
	"body": "reaper.ImGui_Key_F4()\n\n",
	"description": ""
	},

	"ImGui_Key_F5 lua": {
	"prefix": "reaper.ImGui_Key_F5",
	"scope": "lua",
	"body": "reaper.ImGui_Key_F5()\n\n",
	"description": ""
	},

	"ImGui_Key_F6 lua": {
	"prefix": "reaper.ImGui_Key_F6",
	"scope": "lua",
	"body": "reaper.ImGui_Key_F6()\n\n",
	"description": ""
	},

	"ImGui_Key_F7 lua": {
	"prefix": "reaper.ImGui_Key_F7",
	"scope": "lua",
	"body": "reaper.ImGui_Key_F7()\n\n",
	"description": ""
	},

	"ImGui_Key_F8 lua": {
	"prefix": "reaper.ImGui_Key_F8",
	"scope": "lua",
	"body": "reaper.ImGui_Key_F8()\n\n",
	"description": ""
	},

	"ImGui_Key_F9 lua": {
	"prefix": "reaper.ImGui_Key_F9",
	"scope": "lua",
	"body": "reaper.ImGui_Key_F9()\n\n",
	"description": ""
	},

	"ImGui_Key_G lua": {
	"prefix": "reaper.ImGui_Key_G",
	"scope": "lua",
	"body": "reaper.ImGui_Key_G()\n\n",
	"description": ""
	},

	"ImGui_Key_GraveAccent lua": {
	"prefix": "reaper.ImGui_Key_GraveAccent",
	"scope": "lua",
	"body": "reaper.ImGui_Key_GraveAccent()\n\n",
	"description": "`\n\n"
	},

	"ImGui_Key_H lua": {
	"prefix": "reaper.ImGui_Key_H",
	"scope": "lua",
	"body": "reaper.ImGui_Key_H()\n\n",
	"description": ""
	},

	"ImGui_Key_Home lua": {
	"prefix": "reaper.ImGui_Key_Home",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Home()\n\n",
	"description": ""
	},

	"ImGui_Key_I lua": {
	"prefix": "reaper.ImGui_Key_I",
	"scope": "lua",
	"body": "reaper.ImGui_Key_I()\n\n",
	"description": ""
	},

	"ImGui_Key_Insert lua": {
	"prefix": "reaper.ImGui_Key_Insert",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Insert()\n\n",
	"description": ""
	},

	"ImGui_Key_J lua": {
	"prefix": "reaper.ImGui_Key_J",
	"scope": "lua",
	"body": "reaper.ImGui_Key_J()\n\n",
	"description": ""
	},

	"ImGui_Key_K lua": {
	"prefix": "reaper.ImGui_Key_K",
	"scope": "lua",
	"body": "reaper.ImGui_Key_K()\n\n",
	"description": ""
	},

	"ImGui_Key_Keypad0 lua": {
	"prefix": "reaper.ImGui_Key_Keypad0",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Keypad0()\n\n",
	"description": ""
	},

	"ImGui_Key_Keypad1 lua": {
	"prefix": "reaper.ImGui_Key_Keypad1",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Keypad1()\n\n",
	"description": ""
	},

	"ImGui_Key_Keypad2 lua": {
	"prefix": "reaper.ImGui_Key_Keypad2",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Keypad2()\n\n",
	"description": ""
	},

	"ImGui_Key_Keypad3 lua": {
	"prefix": "reaper.ImGui_Key_Keypad3",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Keypad3()\n\n",
	"description": ""
	},

	"ImGui_Key_Keypad4 lua": {
	"prefix": "reaper.ImGui_Key_Keypad4",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Keypad4()\n\n",
	"description": ""
	},

	"ImGui_Key_Keypad5 lua": {
	"prefix": "reaper.ImGui_Key_Keypad5",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Keypad5()\n\n",
	"description": ""
	},

	"ImGui_Key_Keypad6 lua": {
	"prefix": "reaper.ImGui_Key_Keypad6",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Keypad6()\n\n",
	"description": ""
	},

	"ImGui_Key_Keypad7 lua": {
	"prefix": "reaper.ImGui_Key_Keypad7",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Keypad7()\n\n",
	"description": ""
	},

	"ImGui_Key_Keypad8 lua": {
	"prefix": "reaper.ImGui_Key_Keypad8",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Keypad8()\n\n",
	"description": ""
	},

	"ImGui_Key_Keypad9 lua": {
	"prefix": "reaper.ImGui_Key_Keypad9",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Keypad9()\n\n",
	"description": ""
	},

	"ImGui_Key_KeypadAdd lua": {
	"prefix": "reaper.ImGui_Key_KeypadAdd",
	"scope": "lua",
	"body": "reaper.ImGui_Key_KeypadAdd()\n\n",
	"description": ""
	},

	"ImGui_Key_KeypadDecimal lua": {
	"prefix": "reaper.ImGui_Key_KeypadDecimal",
	"scope": "lua",
	"body": "reaper.ImGui_Key_KeypadDecimal()\n\n",
	"description": ""
	},

	"ImGui_Key_KeypadDivide lua": {
	"prefix": "reaper.ImGui_Key_KeypadDivide",
	"scope": "lua",
	"body": "reaper.ImGui_Key_KeypadDivide()\n\n",
	"description": ""
	},

	"ImGui_Key_KeypadEnter lua": {
	"prefix": "reaper.ImGui_Key_KeypadEnter",
	"scope": "lua",
	"body": "reaper.ImGui_Key_KeypadEnter()\n\n",
	"description": ""
	},

	"ImGui_Key_KeypadEqual lua": {
	"prefix": "reaper.ImGui_Key_KeypadEqual",
	"scope": "lua",
	"body": "reaper.ImGui_Key_KeypadEqual()\n\n",
	"description": ""
	},

	"ImGui_Key_KeypadMultiply lua": {
	"prefix": "reaper.ImGui_Key_KeypadMultiply",
	"scope": "lua",
	"body": "reaper.ImGui_Key_KeypadMultiply()\n\n",
	"description": ""
	},

	"ImGui_Key_KeypadSubtract lua": {
	"prefix": "reaper.ImGui_Key_KeypadSubtract",
	"scope": "lua",
	"body": "reaper.ImGui_Key_KeypadSubtract()\n\n",
	"description": ""
	},

	"ImGui_Key_L lua": {
	"prefix": "reaper.ImGui_Key_L",
	"scope": "lua",
	"body": "reaper.ImGui_Key_L()\n\n",
	"description": ""
	},

	"ImGui_Key_LeftAlt lua": {
	"prefix": "reaper.ImGui_Key_LeftAlt",
	"scope": "lua",
	"body": "reaper.ImGui_Key_LeftAlt()\n\n",
	"description": ""
	},

	"ImGui_Key_LeftArrow lua": {
	"prefix": "reaper.ImGui_Key_LeftArrow",
	"scope": "lua",
	"body": "reaper.ImGui_Key_LeftArrow()\n\n",
	"description": ""
	},

	"ImGui_Key_LeftBracket lua": {
	"prefix": "reaper.ImGui_Key_LeftBracket",
	"scope": "lua",
	"body": "reaper.ImGui_Key_LeftBracket()\n\n",
	"description": "[\n\n"
	},

	"ImGui_Key_LeftCtrl lua": {
	"prefix": "reaper.ImGui_Key_LeftCtrl",
	"scope": "lua",
	"body": "reaper.ImGui_Key_LeftCtrl()\n\n",
	"description": ""
	},

	"ImGui_Key_LeftShift lua": {
	"prefix": "reaper.ImGui_Key_LeftShift",
	"scope": "lua",
	"body": "reaper.ImGui_Key_LeftShift()\n\n",
	"description": ""
	},

	"ImGui_Key_LeftSuper lua": {
	"prefix": "reaper.ImGui_Key_LeftSuper",
	"scope": "lua",
	"body": "reaper.ImGui_Key_LeftSuper()\n\n",
	"description": ""
	},

	"ImGui_Key_M lua": {
	"prefix": "reaper.ImGui_Key_M",
	"scope": "lua",
	"body": "reaper.ImGui_Key_M()\n\n",
	"description": ""
	},

	"ImGui_Key_Menu lua": {
	"prefix": "reaper.ImGui_Key_Menu",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Menu()\n\n",
	"description": ""
	},

	"ImGui_Key_Minus lua": {
	"prefix": "reaper.ImGui_Key_Minus",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Minus()\n\n",
	"description": "-\n\n"
	},

	"ImGui_Key_MouseLeft lua": {
	"prefix": "reaper.ImGui_Key_MouseLeft",
	"scope": "lua",
	"body": "reaper.ImGui_Key_MouseLeft()\n\n",
	"description": ""
	},

	"ImGui_Key_MouseMiddle lua": {
	"prefix": "reaper.ImGui_Key_MouseMiddle",
	"scope": "lua",
	"body": "reaper.ImGui_Key_MouseMiddle()\n\n",
	"description": ""
	},

	"ImGui_Key_MouseRight lua": {
	"prefix": "reaper.ImGui_Key_MouseRight",
	"scope": "lua",
	"body": "reaper.ImGui_Key_MouseRight()\n\n",
	"description": ""
	},

	"ImGui_Key_MouseWheelX lua": {
	"prefix": "reaper.ImGui_Key_MouseWheelX",
	"scope": "lua",
	"body": "reaper.ImGui_Key_MouseWheelX()\n\n",
	"description": ""
	},

	"ImGui_Key_MouseWheelY lua": {
	"prefix": "reaper.ImGui_Key_MouseWheelY",
	"scope": "lua",
	"body": "reaper.ImGui_Key_MouseWheelY()\n\n",
	"description": ""
	},

	"ImGui_Key_MouseX1 lua": {
	"prefix": "reaper.ImGui_Key_MouseX1",
	"scope": "lua",
	"body": "reaper.ImGui_Key_MouseX1()\n\n",
	"description": ""
	},

	"ImGui_Key_MouseX2 lua": {
	"prefix": "reaper.ImGui_Key_MouseX2",
	"scope": "lua",
	"body": "reaper.ImGui_Key_MouseX2()\n\n",
	"description": ""
	},

	"ImGui_Key_N lua": {
	"prefix": "reaper.ImGui_Key_N",
	"scope": "lua",
	"body": "reaper.ImGui_Key_N()\n\n",
	"description": ""
	},

	"ImGui_Key_NumLock lua": {
	"prefix": "reaper.ImGui_Key_NumLock",
	"scope": "lua",
	"body": "reaper.ImGui_Key_NumLock()\n\n",
	"description": ""
	},

	"ImGui_Key_O lua": {
	"prefix": "reaper.ImGui_Key_O",
	"scope": "lua",
	"body": "reaper.ImGui_Key_O()\n\n",
	"description": ""
	},

	"ImGui_Key_P lua": {
	"prefix": "reaper.ImGui_Key_P",
	"scope": "lua",
	"body": "reaper.ImGui_Key_P()\n\n",
	"description": ""
	},

	"ImGui_Key_PageDown lua": {
	"prefix": "reaper.ImGui_Key_PageDown",
	"scope": "lua",
	"body": "reaper.ImGui_Key_PageDown()\n\n",
	"description": ""
	},

	"ImGui_Key_PageUp lua": {
	"prefix": "reaper.ImGui_Key_PageUp",
	"scope": "lua",
	"body": "reaper.ImGui_Key_PageUp()\n\n",
	"description": ""
	},

	"ImGui_Key_Pause lua": {
	"prefix": "reaper.ImGui_Key_Pause",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Pause()\n\n",
	"description": ""
	},

	"ImGui_Key_Period lua": {
	"prefix": "reaper.ImGui_Key_Period",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Period()\n\n",
	"description": ".\n\n"
	},

	"ImGui_Key_PrintScreen lua": {
	"prefix": "reaper.ImGui_Key_PrintScreen",
	"scope": "lua",
	"body": "reaper.ImGui_Key_PrintScreen()\n\n",
	"description": ""
	},

	"ImGui_Key_Q lua": {
	"prefix": "reaper.ImGui_Key_Q",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Q()\n\n",
	"description": ""
	},

	"ImGui_Key_R lua": {
	"prefix": "reaper.ImGui_Key_R",
	"scope": "lua",
	"body": "reaper.ImGui_Key_R()\n\n",
	"description": ""
	},

	"ImGui_Key_RightAlt lua": {
	"prefix": "reaper.ImGui_Key_RightAlt",
	"scope": "lua",
	"body": "reaper.ImGui_Key_RightAlt()\n\n",
	"description": ""
	},

	"ImGui_Key_RightArrow lua": {
	"prefix": "reaper.ImGui_Key_RightArrow",
	"scope": "lua",
	"body": "reaper.ImGui_Key_RightArrow()\n\n",
	"description": ""
	},

	"ImGui_Key_RightBracket lua": {
	"prefix": "reaper.ImGui_Key_RightBracket",
	"scope": "lua",
	"body": "reaper.ImGui_Key_RightBracket()\n\n",
	"description": "]\n\n"
	},

	"ImGui_Key_RightCtrl lua": {
	"prefix": "reaper.ImGui_Key_RightCtrl",
	"scope": "lua",
	"body": "reaper.ImGui_Key_RightCtrl()\n\n",
	"description": ""
	},

	"ImGui_Key_RightShift lua": {
	"prefix": "reaper.ImGui_Key_RightShift",
	"scope": "lua",
	"body": "reaper.ImGui_Key_RightShift()\n\n",
	"description": ""
	},

	"ImGui_Key_RightSuper lua": {
	"prefix": "reaper.ImGui_Key_RightSuper",
	"scope": "lua",
	"body": "reaper.ImGui_Key_RightSuper()\n\n",
	"description": ""
	},

	"ImGui_Key_S lua": {
	"prefix": "reaper.ImGui_Key_S",
	"scope": "lua",
	"body": "reaper.ImGui_Key_S()\n\n",
	"description": ""
	},

	"ImGui_Key_ScrollLock lua": {
	"prefix": "reaper.ImGui_Key_ScrollLock",
	"scope": "lua",
	"body": "reaper.ImGui_Key_ScrollLock()\n\n",
	"description": ""
	},

	"ImGui_Key_Semicolon lua": {
	"prefix": "reaper.ImGui_Key_Semicolon",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Semicolon()\n\n",
	"description": ";\n\n"
	},

	"ImGui_Key_Slash lua": {
	"prefix": "reaper.ImGui_Key_Slash",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Slash()\n\n",
	"description": "/\n\n"
	},

	"ImGui_Key_Space lua": {
	"prefix": "reaper.ImGui_Key_Space",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Space()\n\n",
	"description": ""
	},

	"ImGui_Key_T lua": {
	"prefix": "reaper.ImGui_Key_T",
	"scope": "lua",
	"body": "reaper.ImGui_Key_T()\n\n",
	"description": ""
	},

	"ImGui_Key_Tab lua": {
	"prefix": "reaper.ImGui_Key_Tab",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Tab()\n\n",
	"description": ""
	},

	"ImGui_Key_U lua": {
	"prefix": "reaper.ImGui_Key_U",
	"scope": "lua",
	"body": "reaper.ImGui_Key_U()\n\n",
	"description": ""
	},

	"ImGui_Key_UpArrow lua": {
	"prefix": "reaper.ImGui_Key_UpArrow",
	"scope": "lua",
	"body": "reaper.ImGui_Key_UpArrow()\n\n",
	"description": ""
	},

	"ImGui_Key_V lua": {
	"prefix": "reaper.ImGui_Key_V",
	"scope": "lua",
	"body": "reaper.ImGui_Key_V()\n\n",
	"description": ""
	},

	"ImGui_Key_W lua": {
	"prefix": "reaper.ImGui_Key_W",
	"scope": "lua",
	"body": "reaper.ImGui_Key_W()\n\n",
	"description": ""
	},

	"ImGui_Key_X lua": {
	"prefix": "reaper.ImGui_Key_X",
	"scope": "lua",
	"body": "reaper.ImGui_Key_X()\n\n",
	"description": ""
	},

	"ImGui_Key_Y lua": {
	"prefix": "reaper.ImGui_Key_Y",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Y()\n\n",
	"description": ""
	},

	"ImGui_Key_Z lua": {
	"prefix": "reaper.ImGui_Key_Z",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Z()\n\n",
	"description": ""
	},

	"ImGui_LabelText lua": {
	"prefix": "reaper.ImGui_LabelText",
	"scope": "lua",
	"body": "reaper.ImGui_LabelText(${1:ctx}, ${2:label}, ${3:text})$0",
	"description": "Display text+label aligned the same way as value+label widgets\n\n"
	},

	"ImGui_ListBox lua": {
	"prefix": "reaper.ImGui_ListBox",
	"scope": "lua",
	"body": "retval, current_item = reaper.ImGui_ListBox(${1:ctx}, ${2:label}, ${3:current_item}, ${4:items}, ${5:optional_height_in_itemsIn})$0",
	"description": "This is an helper over BeginListBox/EndListBox for convenience purpose.\nEach item must be null-terminated (requires REAPER v6.44 or newer for EEL and Lua).\n\n"
	},

	"ImGui_ListClipper_Begin lua": {
	"prefix": "reaper.ImGui_ListClipper_Begin",
	"scope": "lua",
	"body": "reaper.ImGui_ListClipper_Begin(${1:clipper}, ${2:items_count}, ${3:optional_items_heightIn})$0",
	"description": "- items_count: Use INT_MAX if you don't know how many items you have\n(in which case the cursor won't be advanced in the final step)\n- items_height: Use -1.0 to be calculated automatically on first step.\nOtherwise pass in the distance between your items, typically\nGetTextLineHeightWithSpacing or GetFrameHeightWithSpacing.\n\n"
	},

	"ImGui_ListClipper_End lua": {
	"prefix": "reaper.ImGui_ListClipper_End",
	"scope": "lua",
	"body": "reaper.ImGui_ListClipper_End(${1:clipper})$0",
	"description": "Automatically called on the last call of ListClipper_Step that returns false.\n\n"
	},

	"ImGui_ListClipper_ForceDisplayRangeByIndices lua": {
	"prefix": "reaper.ImGui_ListClipper_ForceDisplayRangeByIndices",
	"scope": "lua",
	"body": "reaper.ImGui_ListClipper_ForceDisplayRangeByIndices(${1:clipper}, ${2:item_min}, ${3:item_max})$0",
	"description": "Call ListClipper_ForceDisplayRangeByIndices before first call to\nListClipper_Step if you need a range of items to be displayed regardless of\nvisibility.\nitem_max is exclusive e.g. use (42, 42+1) to make item 42 always visible BUT due\nto alignment/padding of certain items it is likely that an extra item may be\nincluded on either end of the display range.\n\n"
	},

	"ImGui_ListClipper_GetDisplayRange lua": {
	"prefix": "reaper.ImGui_ListClipper_GetDisplayRange",
	"scope": "lua",
	"body": "display_start, display_end = reaper.ImGui_ListClipper_GetDisplayRange(${1:clipper})$0",
	"description": ""
	},

	"ImGui_ListClipper_Step lua": {
	"prefix": "reaper.ImGui_ListClipper_Step",
	"scope": "lua",
	"body": "reaper.ImGui_ListClipper_Step(${1:clipper})$0",
	"description": "Call until it returns false. The display_start/display_end fields from\nListClipper_GetDisplayRange will be set and you can process/draw those items.\n\n"
	},

	"ImGui_LogFinish lua": {
	"prefix": "reaper.ImGui_LogFinish",
	"scope": "lua",
	"body": "reaper.ImGui_LogFinish(${1:ctx})$0",
	"description": "Stop logging (close file, etc.)\n\n"
	},

	"ImGui_LogText lua": {
	"prefix": "reaper.ImGui_LogText",
	"scope": "lua",
	"body": "reaper.ImGui_LogText(${1:ctx}, ${2:text})$0",
	"description": "Pass text data straight to log (without being displayed)\n\n"
	},

	"ImGui_LogToClipboard lua": {
	"prefix": "reaper.ImGui_LogToClipboard",
	"scope": "lua",
	"body": "reaper.ImGui_LogToClipboard(${1:ctx}, ${2:optional_auto_open_depthIn})$0",
	"description": "Start logging all text output from the interface to the OS clipboard.\nSee also SetClipboardText.\n\n"
	},

	"ImGui_LogToFile lua": {
	"prefix": "reaper.ImGui_LogToFile",
	"scope": "lua",
	"body": "reaper.ImGui_LogToFile(${1:ctx}, ${2:optional_auto_open_depthIn}, ${3:optional_filenameIn})$0",
	"description": "Start logging all text output from the interface to a file.\nThe data is saved to $resource_path/imgui_log.txt if filename is nil.\n\n"
	},

	"ImGui_LogToTTY lua": {
	"prefix": "reaper.ImGui_LogToTTY",
	"scope": "lua",
	"body": "reaper.ImGui_LogToTTY(${1:ctx}, ${2:optional_auto_open_depthIn})$0",
	"description": "Start logging all text output from the interface to the TTY (stdout).\n\n"
	},

	"ImGui_MenuItem lua": {
	"prefix": "reaper.ImGui_MenuItem",
	"scope": "lua",
	"body": "retval, optional_p_selected = reaper.ImGui_MenuItem(${1:ctx}, ${2:label}, ${3:optional_shortcutIn}, ${4:optional_p_selected}, ${5:optional_enabledIn})$0",
	"description": "Return true when activated. Shortcuts are displayed for convenience but not\nprocessed by ImGui at the moment. Toggle state is written to 'selected' when\nprovided.\n\n"
	},

	"ImGui_Mod_Alt lua": {
	"prefix": "reaper.ImGui_Mod_Alt",
	"scope": "lua",
	"body": "reaper.ImGui_Mod_Alt()\n\n",
	"description": ""
	},

	"ImGui_Mod_Ctrl lua": {
	"prefix": "reaper.ImGui_Mod_Ctrl",
	"scope": "lua",
	"body": "reaper.ImGui_Mod_Ctrl()\n\n",
	"description": ""
	},

	"ImGui_Mod_None lua": {
	"prefix": "reaper.ImGui_Mod_None",
	"scope": "lua",
	"body": "reaper.ImGui_Mod_None()\n\n",
	"description": ""
	},

	"ImGui_Mod_Shift lua": {
	"prefix": "reaper.ImGui_Mod_Shift",
	"scope": "lua",
	"body": "reaper.ImGui_Mod_Shift()\n\n",
	"description": ""
	},

	"ImGui_Mod_Shortcut lua": {
	"prefix": "reaper.ImGui_Mod_Shortcut",
	"scope": "lua",
	"body": "reaper.ImGui_Mod_Shortcut()\n\n",
	"description": "Alias for Mod_Ctrl on Linux and Windows and Mod_Super on macOS (Cmd key).\n\n"
	},

	"ImGui_Mod_Super lua": {
	"prefix": "reaper.ImGui_Mod_Super",
	"scope": "lua",
	"body": "reaper.ImGui_Mod_Super()\n\n",
	"description": ""
	},

	"ImGui_MouseButton_Left lua": {
	"prefix": "reaper.ImGui_MouseButton_Left",
	"scope": "lua",
	"body": "reaper.ImGui_MouseButton_Left()\n\n",
	"description": ""
	},

	"ImGui_MouseButton_Middle lua": {
	"prefix": "reaper.ImGui_MouseButton_Middle",
	"scope": "lua",
	"body": "reaper.ImGui_MouseButton_Middle()\n\n",
	"description": ""
	},

	"ImGui_MouseButton_Right lua": {
	"prefix": "reaper.ImGui_MouseButton_Right",
	"scope": "lua",
	"body": "reaper.ImGui_MouseButton_Right()\n\n",
	"description": ""
	},

	"ImGui_MouseCursor_Arrow lua": {
	"prefix": "reaper.ImGui_MouseCursor_Arrow",
	"scope": "lua",
	"body": "reaper.ImGui_MouseCursor_Arrow()\n\n",
	"description": ""
	},

	"ImGui_MouseCursor_Hand lua": {
	"prefix": "reaper.ImGui_MouseCursor_Hand",
	"scope": "lua",
	"body": "reaper.ImGui_MouseCursor_Hand()\n\n",
	"description": "(Unused by Dear ImGui functions. Use for e.g. hyperlinks)\n\n"
	},

	"ImGui_MouseCursor_NotAllowed lua": {
	"prefix": "reaper.ImGui_MouseCursor_NotAllowed",
	"scope": "lua",
	"body": "reaper.ImGui_MouseCursor_NotAllowed()\n\n",
	"description": "When hovering something with disallowed interaction. Usually a crossed circle.\n\n"
	},

	"ImGui_MouseCursor_ResizeAll lua": {
	"prefix": "reaper.ImGui_MouseCursor_ResizeAll",
	"scope": "lua",
	"body": "reaper.ImGui_MouseCursor_ResizeAll()\n\n",
	"description": "(Unused by Dear ImGui functions)\n\n"
	},

	"ImGui_MouseCursor_ResizeEW lua": {
	"prefix": "reaper.ImGui_MouseCursor_ResizeEW",
	"scope": "lua",
	"body": "reaper.ImGui_MouseCursor_ResizeEW()\n\n",
	"description": "When hovering over a vertical border or a column.\n\n"
	},

	"ImGui_MouseCursor_ResizeNESW lua": {
	"prefix": "reaper.ImGui_MouseCursor_ResizeNESW",
	"scope": "lua",
	"body": "reaper.ImGui_MouseCursor_ResizeNESW()\n\n",
	"description": "When hovering over the bottom-left corner of a window.\n\n"
	},

	"ImGui_MouseCursor_ResizeNS lua": {
	"prefix": "reaper.ImGui_MouseCursor_ResizeNS",
	"scope": "lua",
	"body": "reaper.ImGui_MouseCursor_ResizeNS()\n\n",
	"description": "When hovering over a horizontal border.\n\n"
	},

	"ImGui_MouseCursor_ResizeNWSE lua": {
	"prefix": "reaper.ImGui_MouseCursor_ResizeNWSE",
	"scope": "lua",
	"body": "reaper.ImGui_MouseCursor_ResizeNWSE()\n\n",
	"description": "When hovering over the bottom-right corner of a window.\n\n"
	},

	"ImGui_MouseCursor_TextInput lua": {
	"prefix": "reaper.ImGui_MouseCursor_TextInput",
	"scope": "lua",
	"body": "reaper.ImGui_MouseCursor_TextInput()\n\n",
	"description": "When hovering over InputText, etc.\n\n"
	},

	"ImGui_NewLine lua": {
	"prefix": "reaper.ImGui_NewLine",
	"scope": "lua",
	"body": "reaper.ImGui_NewLine(${1:ctx})$0",
	"description": "Undo a SameLine() or force a new line when in a horizontal-layout context.\n\n"
	},

	"ImGui_NumericLimits_Float lua": {
	"prefix": "reaper.ImGui_NumericLimits_Float",
	"scope": "lua",
	"body": "min, max = reaper.ImGui_NumericLimits_Float()\n\n",
	"description": "Returns FLT_MIN and FLT_MAX for this system.\n\n"
	},

	"ImGui_OpenPopup lua": {
	"prefix": "reaper.ImGui_OpenPopup",
	"scope": "lua",
	"body": "reaper.ImGui_OpenPopup(${1:ctx}, ${2:str_id}, ${3:optional_popup_flagsIn})$0",
	"description": "Set popup state to open (don't call every frame!).\nImGuiPopupFlags are available for opening options.\nIf not modal: they can be closed by clicking anywhere outside them, or by\npressing ESCAPE.\nUse PopupFlags_NoOpenOverExistingPopup to avoid opening a popup if there's\nalready one at the same level.\n\n"
	},

	"ImGui_OpenPopupOnItemClick lua": {
	"prefix": "reaper.ImGui_OpenPopupOnItemClick",
	"scope": "lua",
	"body": "reaper.ImGui_OpenPopupOnItemClick(${1:ctx}, ${2:optional_str_idIn}, ${3:optional_popup_flagsIn})$0",
	"description": "Helper to open popup when clicked on last item. return true when just opened.\n(Note: actually triggers on the mouse _released_ event to be consistent with\npopup behaviors.)\n\n"
	},

	"ImGui_PlotHistogram lua": {
	"prefix": "reaper.ImGui_PlotHistogram",
	"scope": "lua",
	"body": "reaper.ImGui_PlotHistogram(${1:ctx}, ${2:string_values}, ${3:optional_values_offsetIn}, ${4:optional_overlay_textIn}, ${5:optional_scale_minIn}, ${6:optional_scale_maxIn}, ${7:optional_graph_size_wIn}, ${8:optional_graph_size_hIn})$0",
	"description": ""
	},

	"ImGui_PlotLines lua": {
	"prefix": "reaper.ImGui_PlotLines",
	"scope": "lua",
	"body": "reaper.ImGui_PlotLines(${1:ctx}, ${2:string_values}, ${3:optional_values_offsetIn}, ${4:optional_overlay_textIn}, ${5:optional_scale_minIn}, ${6:optional_scale_maxIn}, ${7:optional_graph_size_wIn}, ${8:optional_graph_size_hIn})$0",
	"description": ""
	},

	"ImGui_PointConvertNative lua": {
	"prefix": "reaper.ImGui_PointConvertNative",
	"scope": "lua",
	"body": "x, y = reaper.ImGui_PointConvertNative(${1:ctx}, ${2:x}, ${3:y}, ${4:optional_to_nativeIn})$0",
	"description": "Convert a position from the current platform's native coordinate position\nsystem to ReaImGui global coordinates (or vice versa).\nThis effectively flips the Y coordinate on macOS and applies HiDPI scaling on\nWindows and Linux.\n\n"
	},

	"ImGui_PopAllowKeyboardFocus lua": {
	"prefix": "reaper.ImGui_PopAllowKeyboardFocus",
	"scope": "lua",
	"body": "reaper.ImGui_PopAllowKeyboardFocus(${1:ctx})$0",
	"description": "See PushAllowKeyboardFocus\n\n"
	},

	"ImGui_PopButtonRepeat lua": {
	"prefix": "reaper.ImGui_PopButtonRepeat",
	"scope": "lua",
	"body": "reaper.ImGui_PopButtonRepeat(${1:ctx})$0",
	"description": "See PushButtonRepeat\n\n"
	},

	"ImGui_PopClipRect lua": {
	"prefix": "reaper.ImGui_PopClipRect",
	"scope": "lua",
	"body": "reaper.ImGui_PopClipRect(${1:ctx})$0",
	"description": "See PushClipRect\n\n"
	},

	"ImGui_PopFont lua": {
	"prefix": "reaper.ImGui_PopFont",
	"scope": "lua",
	"body": "reaper.ImGui_PopFont(${1:ctx})$0",
	"description": "See PushFont.\n\n"
	},

	"ImGui_PopID lua": {
	"prefix": "reaper.ImGui_PopID",
	"scope": "lua",
	"body": "reaper.ImGui_PopID(${1:ctx})$0",
	"description": "Pop from the ID stack.\n\n"
	},

	"ImGui_PopItemWidth lua": {
	"prefix": "reaper.ImGui_PopItemWidth",
	"scope": "lua",
	"body": "reaper.ImGui_PopItemWidth(${1:ctx})$0",
	"description": "See PushItemWidth\n\n"
	},

	"ImGui_PopStyleColor lua": {
	"prefix": "reaper.ImGui_PopStyleColor",
	"scope": "lua",
	"body": "reaper.ImGui_PopStyleColor(${1:ctx}, ${2:optional_countIn})$0",
	"description": ""
	},

	"ImGui_PopStyleVar lua": {
	"prefix": "reaper.ImGui_PopStyleVar",
	"scope": "lua",
	"body": "reaper.ImGui_PopStyleVar(${1:ctx}, ${2:optional_countIn})$0",
	"description": "Reset a style variable.\n\n"
	},

	"ImGui_PopTextWrapPos lua": {
	"prefix": "reaper.ImGui_PopTextWrapPos",
	"scope": "lua",
	"body": "reaper.ImGui_PopTextWrapPos(${1:ctx})$0",
	"description": ""
	},

	"ImGui_PopupFlags_AnyPopup lua": {
	"prefix": "reaper.ImGui_PopupFlags_AnyPopup",
	"scope": "lua",
	"body": "reaper.ImGui_PopupFlags_AnyPopup()\n\n",
	"description": "PopupFlags_AnyPopupId | PopupFlags_AnyPopupLevel\n\n"
	},

	"ImGui_PopupFlags_AnyPopupId lua": {
	"prefix": "reaper.ImGui_PopupFlags_AnyPopupId",
	"scope": "lua",
	"body": "reaper.ImGui_PopupFlags_AnyPopupId()\n\n",
	"description": "For IsPopupOpen: ignore the str_id parameter and test for any popup.\n\n"
	},

	"ImGui_PopupFlags_AnyPopupLevel lua": {
	"prefix": "reaper.ImGui_PopupFlags_AnyPopupLevel",
	"scope": "lua",
	"body": "reaper.ImGui_PopupFlags_AnyPopupLevel()\n\n",
	"description": "For IsPopupOpen: search/test at any level of the popup stack\n(default test in the current level).\n\n"
	},

	"ImGui_PopupFlags_MouseButtonLeft lua": {
	"prefix": "reaper.ImGui_PopupFlags_MouseButtonLeft",
	"scope": "lua",
	"body": "reaper.ImGui_PopupFlags_MouseButtonLeft()\n\n",
	"description": "For BeginPopupContext*(): open on Left Mouse release.\nGuaranteed to always be == 0 (same as MouseButton_Left).\n\n"
	},

	"ImGui_PopupFlags_MouseButtonMiddle lua": {
	"prefix": "reaper.ImGui_PopupFlags_MouseButtonMiddle",
	"scope": "lua",
	"body": "reaper.ImGui_PopupFlags_MouseButtonMiddle()\n\n",
	"description": "For BeginPopupContext*(): open on Middle Mouse release.\nGuaranteed to always be == 2 (same as MouseButton_Middle).\n\n"
	},

	"ImGui_PopupFlags_MouseButtonRight lua": {
	"prefix": "reaper.ImGui_PopupFlags_MouseButtonRight",
	"scope": "lua",
	"body": "reaper.ImGui_PopupFlags_MouseButtonRight()\n\n",
	"description": "For BeginPopupContext*(): open on Right Mouse release.\nGuaranteed to always be == 1 (same as MouseButton_Right).\n\n"
	},

	"ImGui_PopupFlags_NoOpenOverExistingPopup lua": {
	"prefix": "reaper.ImGui_PopupFlags_NoOpenOverExistingPopup",
	"scope": "lua",
	"body": "reaper.ImGui_PopupFlags_NoOpenOverExistingPopup()\n\n",
	"description": "For OpenPopup*(), BeginPopupContext*(): don't open if there's already a popup\nat the same level of the popup stack.\n\n"
	},

	"ImGui_PopupFlags_NoOpenOverItems lua": {
	"prefix": "reaper.ImGui_PopupFlags_NoOpenOverItems",
	"scope": "lua",
	"body": "reaper.ImGui_PopupFlags_NoOpenOverItems()\n\n",
	"description": "For BeginPopupContextWindow: don't return true when hovering items,\nonly when hovering empty space.\n\n"
	},

	"ImGui_PopupFlags_None lua": {
	"prefix": "reaper.ImGui_PopupFlags_None",
	"scope": "lua",
	"body": "reaper.ImGui_PopupFlags_None()\n\n",
	"description": ""
	},

	"ImGui_ProgressBar lua": {
	"prefix": "reaper.ImGui_ProgressBar",
	"scope": "lua",
	"body": "reaper.ImGui_ProgressBar(${1:ctx}, ${2:fraction}, ${3:optional_size_arg_wIn}, ${4:optional_size_arg_hIn}, ${5:optional_overlayIn})$0",
	"description": ""
	},

	"ImGui_PushAllowKeyboardFocus lua": {
	"prefix": "reaper.ImGui_PushAllowKeyboardFocus",
	"scope": "lua",
	"body": "reaper.ImGui_PushAllowKeyboardFocus(${1:ctx}, ${2:allow_keyboard_focus})$0",
	"description": "Allow focusing using TAB/Shift-TAB, enabled by default but you can disable it\nfor certain widgets\n\n"
	},

	"ImGui_PushButtonRepeat lua": {
	"prefix": "reaper.ImGui_PushButtonRepeat",
	"scope": "lua",
	"body": "reaper.ImGui_PushButtonRepeat(${1:ctx}, ${2:repeat})$0",
	"description": "In 'repeat' mode, Button*() functions return repeated true in a typematic\nmanner (using ConfigVar_KeyRepeatDelay/ConfigVar_KeyRepeatRate settings).\nNote that you can call IsItemActive after any Button to tell if the button is\nheld in the current frame.\n\n"
	},

	"ImGui_PushClipRect lua": {
	"prefix": "reaper.ImGui_PushClipRect",
	"scope": "lua",
	"body": "reaper.ImGui_PushClipRect(${1:ctx}, ${2:clip_rect_min_x}, ${3:clip_rect_min_y}, ${4:clip_rect_max_x}, ${5:clip_rect_max_y}, ${6:intersect_with_current_clip_rect})$0",
	"description": ""
	},

	"ImGui_PushFont lua": {
	"prefix": "reaper.ImGui_PushFont",
	"scope": "lua",
	"body": "reaper.ImGui_PushFont(${1:ImGui_Context_font})$0",
	"description": "Change the current font. Use nil to push the default font.\nThe font object must have been registered using Attach. See PopFont.\n\n"
	},

	"ImGui_PushID lua": {
	"prefix": "reaper.ImGui_PushID",
	"scope": "lua",
	"body": "reaper.ImGui_PushID(${1:ctx}, ${2:str_id})$0",
	"description": "Push string into the ID stack.\n\n"
	},

	"ImGui_PushItemWidth lua": {
	"prefix": "reaper.ImGui_PushItemWidth",
	"scope": "lua",
	"body": "reaper.ImGui_PushItemWidth(${1:ctx}, ${2:item_width})$0",
	"description": "Push width of items for common large 'item+label' widgets.\n- \>0.0: width in pixels\n- <0.0 align xx pixels to the right of window\n(so -FLT_MIN always align width to the right side)\n- 0.0 = default to ~2/3 of windows width.\n\n"
	},

	"ImGui_PushStyleColor lua": {
	"prefix": "reaper.ImGui_PushStyleColor",
	"scope": "lua",
	"body": "reaper.ImGui_PushStyleColor(${1:ctx}, ${2:idx}, ${3:col_rgba})$0",
	"description": "Modify a style color.\nCall PopStyleColor to undo after use (before the end of the frame).\nSee Col_* for available style colors.\n\n"
	},

	"ImGui_PushStyleVar lua": {
	"prefix": "reaper.ImGui_PushStyleVar",
	"scope": "lua",
	"body": "reaper.ImGui_PushStyleVar(${1:ctx}, ${2:var_idx}, ${3:val1}, ${4:optional_val2In})$0",
	"description": "See StyleVar_* for possible values of 'var_idx'.\n\n"
	},

	"ImGui_PushTextWrapPos lua": {
	"prefix": "reaper.ImGui_PushTextWrapPos",
	"scope": "lua",
	"body": "reaper.ImGui_PushTextWrapPos(${1:ctx}, ${2:optional_wrap_local_pos_xIn})$0",
	"description": "Push word-wrapping position for Text*() commands.\n-  < 0.0: no wrapping\n-  = 0.0: wrap to end of window (or column)\n- \> 0.0: wrap at 'wrap_pos_x' position in window local space.\n\n"
	},

	"ImGui_RadioButton lua": {
	"prefix": "reaper.ImGui_RadioButton",
	"scope": "lua",
	"body": "reaper.ImGui_RadioButton(${1:ctx}, ${2:label}, ${3:active})$0",
	"description": "Use with e.g. if (RadioButton('one', my_value==1)) { my_value = 1; }\n\n"
	},

	"ImGui_RadioButtonEx lua": {
	"prefix": "reaper.ImGui_RadioButtonEx",
	"scope": "lua",
	"body": "retval, v = reaper.ImGui_RadioButtonEx(${1:ctx}, ${2:label}, ${3:v}, ${4:v_button})$0",
	"description": "Shortcut to handle RadioButton's example pattern when value is an integer\n\n"
	},

	"ImGui_ResetMouseDragDelta lua": {
	"prefix": "reaper.ImGui_ResetMouseDragDelta",
	"scope": "lua",
	"body": "reaper.ImGui_ResetMouseDragDelta(${1:ctx}, ${2:optional_buttonIn})$0",
	"description": ""
	},

	"ImGui_SameLine lua": {
	"prefix": "reaper.ImGui_SameLine",
	"scope": "lua",
	"body": "reaper.ImGui_SameLine(${1:ctx}, ${2:optional_offset_from_start_xIn}, ${3:optional_spacingIn})$0",
	"description": "Call between widgets or groups to layout them horizontally.\nX position given in window coordinates.\n\n"
	},

	"ImGui_Selectable lua": {
	"prefix": "reaper.ImGui_Selectable",
	"scope": "lua",
	"body": "retval, p_selected = reaper.ImGui_Selectable(${1:ctx}, ${2:label}, ${3:p_selected}, ${4:optional_flagsIn}, ${5:optional_size_wIn}, ${6:optional_size_hIn})$0",
	"description": ""
	},

	"ImGui_SelectableFlags_AllowDoubleClick lua": {
	"prefix": "reaper.ImGui_SelectableFlags_AllowDoubleClick",
	"scope": "lua",
	"body": "reaper.ImGui_SelectableFlags_AllowDoubleClick()\n\n",
	"description": "Generate press events on double clicks too.\n\n"
	},

	"ImGui_SelectableFlags_AllowItemOverlap lua": {
	"prefix": "reaper.ImGui_SelectableFlags_AllowItemOverlap",
	"scope": "lua",
	"body": "reaper.ImGui_SelectableFlags_AllowItemOverlap()\n\n",
	"description": "Hit testing to allow subsequent widgets to overlap this one.\n\n"
	},

	"ImGui_SelectableFlags_Disabled lua": {
	"prefix": "reaper.ImGui_SelectableFlags_Disabled",
	"scope": "lua",
	"body": "reaper.ImGui_SelectableFlags_Disabled()\n\n",
	"description": "Cannot be selected, display grayed out text.\n\n"
	},

	"ImGui_SelectableFlags_DontClosePopups lua": {
	"prefix": "reaper.ImGui_SelectableFlags_DontClosePopups",
	"scope": "lua",
	"body": "reaper.ImGui_SelectableFlags_DontClosePopups()\n\n",
	"description": "Clicking this doesn't close parent popup window.\n\n"
	},

	"ImGui_SelectableFlags_None lua": {
	"prefix": "reaper.ImGui_SelectableFlags_None",
	"scope": "lua",
	"body": "reaper.ImGui_SelectableFlags_None()\n\n",
	"description": ""
	},

	"ImGui_SelectableFlags_SpanAllColumns lua": {
	"prefix": "reaper.ImGui_SelectableFlags_SpanAllColumns",
	"scope": "lua",
	"body": "reaper.ImGui_SelectableFlags_SpanAllColumns()\n\n",
	"description": "Selectable frame can span all columns (text will still fit in current column).\n\n"
	},

	"ImGui_Separator lua": {
	"prefix": "reaper.ImGui_Separator",
	"scope": "lua",
	"body": "reaper.ImGui_Separator(${1:ctx})$0",
	"description": "Separator, generally horizontal. inside a menu bar or in horizontal layout\nmode, this becomes a vertical separator.\n\n"
	},

	"ImGui_SetClipboardText lua": {
	"prefix": "reaper.ImGui_SetClipboardText",
	"scope": "lua",
	"body": "reaper.ImGui_SetClipboardText(${1:ctx}, ${2:text})$0",
	"description": "See also the LogToClipboard function to capture GUI into clipboard,\nor easily output text data to the clipboard.\n\n"
	},

	"ImGui_SetColorEditOptions lua": {
	"prefix": "reaper.ImGui_SetColorEditOptions",
	"scope": "lua",
	"body": "reaper.ImGui_SetColorEditOptions(${1:ctx}, ${2:flags})$0",
	"description": "Picker type, etc. User will be able to change many settings, unless you pass\nthe _NoOptions flag to your calls.\n\n"
	},

	"ImGui_SetConfigVar lua": {
	"prefix": "reaper.ImGui_SetConfigVar",
	"scope": "lua",
	"body": "reaper.ImGui_SetConfigVar(${1:ctx}, ${2:var_idx}, ${3:value})$0",
	"description": ""
	},

	"ImGui_SetCursorPos lua": {
	"prefix": "reaper.ImGui_SetCursorPos",
	"scope": "lua",
	"body": "reaper.ImGui_SetCursorPos(${1:ctx}, ${2:local_pos_x}, ${3:local_pos_y})$0",
	"description": "Cursor position in window\n\n"
	},

	"ImGui_SetCursorPosX lua": {
	"prefix": "reaper.ImGui_SetCursorPosX",
	"scope": "lua",
	"body": "reaper.ImGui_SetCursorPosX(${1:ctx}, ${2:local_x})$0",
	"description": "Cursor X position in window\n\n"
	},

	"ImGui_SetCursorPosY lua": {
	"prefix": "reaper.ImGui_SetCursorPosY",
	"scope": "lua",
	"body": "reaper.ImGui_SetCursorPosY(${1:ctx}, ${2:local_y})$0",
	"description": "Cursor Y position in window\n\n"
	},

	"ImGui_SetCursorScreenPos lua": {
	"prefix": "reaper.ImGui_SetCursorScreenPos",
	"scope": "lua",
	"body": "reaper.ImGui_SetCursorScreenPos(${1:ctx}, ${2:pos_x}, ${3:pos_y})$0",
	"description": "Cursor position in absolute screen coordinates.\n\n"
	},

	"ImGui_SetDragDropPayload lua": {
	"prefix": "reaper.ImGui_SetDragDropPayload",
	"scope": "lua",
	"body": "reaper.ImGui_SetDragDropPayload(${1:ctx}, ${2:type}, ${3:data}, ${4:optional_condIn})$0",
	"description": "The type is a user defined string of maximum 32 characters.\nStrings starting with '_' are reserved for dear imgui internal types.\nData is copied and held by imgui.\n\n"
	},

	"ImGui_SetItemAllowOverlap lua": {
	"prefix": "reaper.ImGui_SetItemAllowOverlap",
	"scope": "lua",
	"body": "reaper.ImGui_SetItemAllowOverlap(${1:ctx})$0",
	"description": "Allow last item to be overlapped by a subsequent item. sometimes useful with\ninvisible buttons, selectables, etc. to catch unused area.\n\n"
	},

	"ImGui_SetItemDefaultFocus lua": {
	"prefix": "reaper.ImGui_SetItemDefaultFocus",
	"scope": "lua",
	"body": "reaper.ImGui_SetItemDefaultFocus(${1:ctx})$0",
	"description": "Make last item the default focused item of a window.\n\n"
	},

	"ImGui_SetKeyboardFocusHere lua": {
	"prefix": "reaper.ImGui_SetKeyboardFocusHere",
	"scope": "lua",
	"body": "reaper.ImGui_SetKeyboardFocusHere(${1:ctx}, ${2:optional_offsetIn})$0",
	"description": "Focus keyboard on the next widget. Use positive 'offset' to access sub\ncomponents of a multiple component widget. Use -1 to access previous widget.\n\n"
	},

	"ImGui_SetMouseCursor lua": {
	"prefix": "reaper.ImGui_SetMouseCursor",
	"scope": "lua",
	"body": "reaper.ImGui_SetMouseCursor(${1:ctx}, ${2:cursor_type})$0",
	"description": "Set desired mouse cursor shape\n\n"
	},

	"ImGui_SetNextFrameWantCaptureKeyboard lua": {
	"prefix": "reaper.ImGui_SetNextFrameWantCaptureKeyboard",
	"scope": "lua",
	"body": "reaper.ImGui_SetNextFrameWantCaptureKeyboard(${1:ctx}, ${2:want_capture_keyboard})$0",
	"description": "Request capture of keyboard shortcuts in REAPER's global scope for the next frame.\n\n"
	},

	"ImGui_SetNextItemOpen lua": {
	"prefix": "reaper.ImGui_SetNextItemOpen",
	"scope": "lua",
	"body": "reaper.ImGui_SetNextItemOpen(${1:ctx}, ${2:is_open}, ${3:optional_condIn})$0",
	"description": "Set next TreeNode/CollapsingHeader open state.\nCan also be done with the TreeNodeFlags_DefaultOpen flag.\n\n"
	},

	"ImGui_SetNextItemWidth lua": {
	"prefix": "reaper.ImGui_SetNextItemWidth",
	"scope": "lua",
	"body": "reaper.ImGui_SetNextItemWidth(${1:ctx}, ${2:item_width})$0",
	"description": "Set width of the _next_ common large 'item+label' widget.\n- \>0.0: width in pixels\n- <0.0 align xx pixels to the right of window\n(so -FLT_MIN always align width to the right side)\n\n"
	},

	"ImGui_SetNextWindowBgAlpha lua": {
	"prefix": "reaper.ImGui_SetNextWindowBgAlpha",
	"scope": "lua",
	"body": "reaper.ImGui_SetNextWindowBgAlpha(${1:ctx}, ${2:alpha})$0",
	"description": "Set next window background color alpha. Helper to easily override the Alpha\ncomponent of Col_WindowBg/Col_ChildBg/Col_PopupBg.\nYou may also use WindowFlags_NoBackground for a fully transparent window.\n\n"
	},

	"ImGui_SetNextWindowCollapsed lua": {
	"prefix": "reaper.ImGui_SetNextWindowCollapsed",
	"scope": "lua",
	"body": "reaper.ImGui_SetNextWindowCollapsed(${1:ctx}, ${2:collapsed}, ${3:optional_condIn})$0",
	"description": "Set next window collapsed state.\n\n"
	},

	"ImGui_SetNextWindowContentSize lua": {
	"prefix": "reaper.ImGui_SetNextWindowContentSize",
	"scope": "lua",
	"body": "reaper.ImGui_SetNextWindowContentSize(${1:ctx}, ${2:size_w}, ${3:size_h})$0",
	"description": "Set next window content size (~ scrollable client area, which enforce the\nrange of scrollbars). Not including window decorations (title bar, menu bar,\netc.) nor StyleVar_WindowPadding. set an axis to 0.0 to leave it automatic.\n\n"
	},

	"ImGui_SetNextWindowDockID lua": {
	"prefix": "reaper.ImGui_SetNextWindowDockID",
	"scope": "lua",
	"body": "reaper.ImGui_SetNextWindowDockID(${1:ctx}, ${2:dock_id}, ${3:optional_condIn})$0",
	"description": ""
	},

	"ImGui_SetNextWindowFocus lua": {
	"prefix": "reaper.ImGui_SetNextWindowFocus",
	"scope": "lua",
	"body": "reaper.ImGui_SetNextWindowFocus(${1:ctx})$0",
	"description": "Set next window to be focused / top-most.\n\n"
	},

	"ImGui_SetNextWindowPos lua": {
	"prefix": "reaper.ImGui_SetNextWindowPos",
	"scope": "lua",
	"body": "reaper.ImGui_SetNextWindowPos(${1:ctx}, ${2:pos_x}, ${3:pos_y}, ${4:optional_condIn}, ${5:optional_pivot_xIn}, ${6:optional_pivot_yIn})$0",
	"description": "Set next window position. Use pivot=(0.5,0.5) to center on given point, etc.\n\n"
	},

	"ImGui_SetNextWindowScroll lua": {
	"prefix": "reaper.ImGui_SetNextWindowScroll",
	"scope": "lua",
	"body": "reaper.ImGui_SetNextWindowScroll(${1:ctx}, ${2:scroll_x}, ${3:scroll_y})$0",
	"description": "Set next window scrolling value (use < 0.0 to not affect a given axis).\n\n"
	},

	"ImGui_SetNextWindowSize lua": {
	"prefix": "reaper.ImGui_SetNextWindowSize",
	"scope": "lua",
	"body": "reaper.ImGui_SetNextWindowSize(${1:ctx}, ${2:size_w}, ${3:size_h}, ${4:optional_condIn})$0",
	"description": "Set next window size. set axis to 0.0 to force an auto-fit on this axis.\n\n"
	},

	"ImGui_SetNextWindowSizeConstraints lua": {
	"prefix": "reaper.ImGui_SetNextWindowSizeConstraints",
	"scope": "lua",
	"body": "reaper.ImGui_SetNextWindowSizeConstraints(${1:ctx}, ${2:size_min_w}, ${3:size_min_h}, ${4:size_max_w}, ${5:size_max_h})$0",
	"description": "Set next window size limits. use -1,-1 on either X/Y axis to preserve the\ncurrent size. Sizes will be rounded down.\n\n"
	},

	"ImGui_SetScrollFromPosX lua": {
	"prefix": "reaper.ImGui_SetScrollFromPosX",
	"scope": "lua",
	"body": "reaper.ImGui_SetScrollFromPosX(${1:ctx}, ${2:local_x}, ${3:optional_center_x_ratioIn})$0",
	"description": "Adjust scrolling amount to make given position visible.\nGenerally GetCursorStartPos() + offset to compute a valid position.\n\n"
	},

	"ImGui_SetScrollFromPosY lua": {
	"prefix": "reaper.ImGui_SetScrollFromPosY",
	"scope": "lua",
	"body": "reaper.ImGui_SetScrollFromPosY(${1:ctx}, ${2:local_y}, ${3:optional_center_y_ratioIn})$0",
	"description": "Adjust scrolling amount to make given position visible.\nGenerally GetCursorStartPos() + offset to compute a valid position.\n\n"
	},

	"ImGui_SetScrollHereX lua": {
	"prefix": "reaper.ImGui_SetScrollHereX",
	"scope": "lua",
	"body": "reaper.ImGui_SetScrollHereX(${1:ctx}, ${2:optional_center_x_ratioIn})$0",
	"description": "Adjust scrolling amount to make current cursor position visible.\ncenter_x_ratio=0.0: left, 0.5: center, 1.0: right.\nWhen using to make a 'default/current item' visible,\nconsider using SetItemDefaultFocus instead.\n\n"
	},

	"ImGui_SetScrollHereY lua": {
	"prefix": "reaper.ImGui_SetScrollHereY",
	"scope": "lua",
	"body": "reaper.ImGui_SetScrollHereY(${1:ctx}, ${2:optional_center_y_ratioIn})$0",
	"description": "Adjust scrolling amount to make current cursor position visible.\ncenter_y_ratio=0.0: top, 0.5: center, 1.0: bottom.\nWhen using to make a 'default/current item' visible,\nconsider using SetItemDefaultFocus instead.\n\n"
	},

	"ImGui_SetScrollX lua": {
	"prefix": "reaper.ImGui_SetScrollX",
	"scope": "lua",
	"body": "reaper.ImGui_SetScrollX(${1:ctx}, ${2:scroll_x})$0",
	"description": "Set scrolling amount [0 .. GetScrollMaxX()]\n\n"
	},

	"ImGui_SetScrollY lua": {
	"prefix": "reaper.ImGui_SetScrollY",
	"scope": "lua",
	"body": "reaper.ImGui_SetScrollY(${1:ctx}, ${2:scroll_y})$0",
	"description": "Set scrolling amount [0 .. GetScrollMaxY()]\n\n"
	},

	"ImGui_SetTabItemClosed lua": {
	"prefix": "reaper.ImGui_SetTabItemClosed",
	"scope": "lua",
	"body": "reaper.ImGui_SetTabItemClosed(${1:ctx}, ${2:tab_or_docked_window_label})$0",
	"description": "Notify TabBar or Docking system of a closed tab/window ahead\n(useful to reduce visual flicker on reorderable tab bars).\nFor tab-bar: call after BeginTabBar and before Tab submissions.\nOtherwise call with a window name.\n\n"
	},

	"ImGui_SetTooltip lua": {
	"prefix": "reaper.ImGui_SetTooltip",
	"scope": "lua",
	"body": "reaper.ImGui_SetTooltip(${1:ctx}, ${2:text})$0",
	"description": "Set a text-only tooltip, typically use with IsItemHovered. override any\nprevious call to SetTooltip.\n\n"
	},

	"ImGui_SetWindowCollapsed lua": {
	"prefix": "reaper.ImGui_SetWindowCollapsed",
	"scope": "lua",
	"body": "reaper.ImGui_SetWindowCollapsed(${1:ctx}, ${2:collapsed}, ${3:optional_condIn})$0",
	"description": "(Not recommended) Set current window collapsed state.\nPrefer using SetNextWindowCollapsed.\n\n"
	},

	"ImGui_SetWindowCollapsedEx lua": {
	"prefix": "reaper.ImGui_SetWindowCollapsedEx",
	"scope": "lua",
	"body": "reaper.ImGui_SetWindowCollapsedEx(${1:ctx}, ${2:name}, ${3:collapsed}, ${4:optional_condIn})$0",
	"description": "Set named window collapsed state.\n\n"
	},

	"ImGui_SetWindowFocus lua": {
	"prefix": "reaper.ImGui_SetWindowFocus",
	"scope": "lua",
	"body": "reaper.ImGui_SetWindowFocus(${1:ctx})$0",
	"description": "(Not recommended) Set current window to be focused / top-most.\nPrefer using SetNextWindowFocus.\n\n"
	},

	"ImGui_SetWindowFocusEx lua": {
	"prefix": "reaper.ImGui_SetWindowFocusEx",
	"scope": "lua",
	"body": "reaper.ImGui_SetWindowFocusEx(${1:ctx}, ${2:name})$0",
	"description": "Set named window to be focused / top-most. Use an empty name to remove focus.\n\n"
	},

	"ImGui_SetWindowPos lua": {
	"prefix": "reaper.ImGui_SetWindowPos",
	"scope": "lua",
	"body": "reaper.ImGui_SetWindowPos(${1:ctx}, ${2:pos_x}, ${3:pos_y}, ${4:optional_condIn})$0",
	"description": "(Not recommended) Set current window position - call within Begin/End.\nPrefer using SetNextWindowPos, as this may incur tearing and minor side-effects.\n\n"
	},

	"ImGui_SetWindowPosEx lua": {
	"prefix": "reaper.ImGui_SetWindowPosEx",
	"scope": "lua",
	"body": "reaper.ImGui_SetWindowPosEx(${1:ctx}, ${2:name}, ${3:pos_x}, ${4:pos_y}, ${5:optional_condIn})$0",
	"description": "Set named window position.\n\n"
	},

	"ImGui_SetWindowSize lua": {
	"prefix": "reaper.ImGui_SetWindowSize",
	"scope": "lua",
	"body": "reaper.ImGui_SetWindowSize(${1:ctx}, ${2:size_w}, ${3:size_h}, ${4:optional_condIn})$0",
	"description": "(Not recommended) Set current window size - call within Begin/End.\nSet size_w and size_h to 0 to force an auto-fit.\nPrefer using SetNextWindowSize, as this may incur tearing and minor side-effects.\n\n"
	},

	"ImGui_SetWindowSizeEx lua": {
	"prefix": "reaper.ImGui_SetWindowSizeEx",
	"scope": "lua",
	"body": "reaper.ImGui_SetWindowSizeEx(${1:ctx}, ${2:name}, ${3:size_w}, ${4:size_h}, ${5:optional_condIn})$0",
	"description": "Set named window size. Set axis to 0.0 to force an auto-fit on this axis.\n\n"
	},

	"ImGui_ShowAboutWindow lua": {
	"prefix": "reaper.ImGui_ShowAboutWindow",
	"scope": "lua",
	"body": "optional_p_open = reaper.ImGui_ShowAboutWindow(${1:ctx}, ${2:optional_p_open})$0",
	"description": "Create About window.\nDisplay ReaImGui version, Dear ImGui version, credits and build/system information.\n\n"
	},

	"ImGui_ShowDebugLogWindow lua": {
	"prefix": "reaper.ImGui_ShowDebugLogWindow",
	"scope": "lua",
	"body": "optional_p_open = reaper.ImGui_ShowDebugLogWindow(${1:ctx}, ${2:optional_p_open})$0",
	"description": "Create Debug Log window. display a simplified log of important dear imgui events.\n\n"
	},

	"ImGui_ShowMetricsWindow lua": {
	"prefix": "reaper.ImGui_ShowMetricsWindow",
	"scope": "lua",
	"body": "optional_p_open = reaper.ImGui_ShowMetricsWindow(${1:ctx}, ${2:optional_p_open})$0",
	"description": "Create Metrics/Debugger window.\nDisplay Dear ImGui internals: windows, draw commands, various internal state, etc.\n\n"
	},

	"ImGui_ShowStackToolWindow lua": {
	"prefix": "reaper.ImGui_ShowStackToolWindow",
	"scope": "lua",
	"body": "optional_p_open = reaper.ImGui_ShowStackToolWindow(${1:ctx}, ${2:optional_p_open})$0",
	"description": "Create Stack Tool window. Hover items with mouse to query information about\nthe source of their unique ID.\n\n"
	},

	"ImGui_SliderAngle lua": {
	"prefix": "reaper.ImGui_SliderAngle",
	"scope": "lua",
	"body": "retval, v_rad = reaper.ImGui_SliderAngle(${1:ctx}, ${2:label}, ${3:v_rad}, ${4:optional_v_degrees_minIn}, ${5:optional_v_degrees_maxIn}, ${6:optional_formatIn}, ${7:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_SliderDouble lua": {
	"prefix": "reaper.ImGui_SliderDouble",
	"scope": "lua",
	"body": "retval, v = reaper.ImGui_SliderDouble(${1:ctx}, ${2:label}, ${3:v}, ${4:v_min}, ${5:v_max}, ${6:optional_formatIn}, ${7:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_SliderDouble2 lua": {
	"prefix": "reaper.ImGui_SliderDouble2",
	"scope": "lua",
	"body": "retval, v1, v2 = reaper.ImGui_SliderDouble2(${1:ctx}, ${2:label}, ${3:v1}, ${4:v2}, ${5:v_min}, ${6:v_max}, ${7:optional_formatIn}, ${8:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_SliderDouble3 lua": {
	"prefix": "reaper.ImGui_SliderDouble3",
	"scope": "lua",
	"body": "retval, v1, v2, v3 = reaper.ImGui_SliderDouble3(${1:ctx}, ${2:label}, ${3:v1}, ${4:v2}, ${5:v3}, ${6:v_min}, ${7:v_max}, ${8:optional_formatIn}, ${9:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_SliderDouble4 lua": {
	"prefix": "reaper.ImGui_SliderDouble4",
	"scope": "lua",
	"body": "retval, v1, v2, v3, v4 = reaper.ImGui_SliderDouble4(${1:ctx}, ${2:label}, ${3:v1}, ${4:v2}, ${5:v3}, ${6:v4}, ${7:v_min}, ${8:v_max}, ${9:optional_formatIn}, ${10:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_SliderDoubleN lua": {
	"prefix": "reaper.ImGui_SliderDoubleN",
	"scope": "lua",
	"body": "reaper.ImGui_SliderDoubleN(${1:ctx}, ${2:string_values}, ${3:v_min}, ${4:v_max}, ${5:optional_formatIn}, ${6:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_SliderFlags_AlwaysClamp lua": {
	"prefix": "reaper.ImGui_SliderFlags_AlwaysClamp",
	"scope": "lua",
	"body": "reaper.ImGui_SliderFlags_AlwaysClamp()\n\n",
	"description": "Clamp value to min/max bounds when input manually with CTRL+Click.\nBy default CTRL+Click allows going out of bounds.\n\n"
	},

	"ImGui_SliderFlags_Logarithmic lua": {
	"prefix": "reaper.ImGui_SliderFlags_Logarithmic",
	"scope": "lua",
	"body": "reaper.ImGui_SliderFlags_Logarithmic()\n\n",
	"description": "Make the widget logarithmic (linear otherwise).\nConsider using SliderFlags_NoRoundToFormat with this if using a format-string\nwith small amount of digits.\n\n"
	},

	"ImGui_SliderFlags_NoInput lua": {
	"prefix": "reaper.ImGui_SliderFlags_NoInput",
	"scope": "lua",
	"body": "reaper.ImGui_SliderFlags_NoInput()\n\n",
	"description": "Disable CTRL+Click or Enter key allowing to input text directly into the widget.\n\n"
	},

	"ImGui_SliderFlags_NoRoundToFormat lua": {
	"prefix": "reaper.ImGui_SliderFlags_NoRoundToFormat",
	"scope": "lua",
	"body": "reaper.ImGui_SliderFlags_NoRoundToFormat()\n\n",
	"description": "Disable rounding underlying value to match precision of the display format\nstring (e.g. %.3f values are rounded to those 3 digits).\n\n"
	},

	"ImGui_SliderFlags_None lua": {
	"prefix": "reaper.ImGui_SliderFlags_None",
	"scope": "lua",
	"body": "reaper.ImGui_SliderFlags_None()\n\n",
	"description": ""
	},

	"ImGui_SliderInt lua": {
	"prefix": "reaper.ImGui_SliderInt",
	"scope": "lua",
	"body": "retval, v = reaper.ImGui_SliderInt(${1:ctx}, ${2:label}, ${3:v}, ${4:v_min}, ${5:v_max}, ${6:optional_formatIn}, ${7:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_SliderInt2 lua": {
	"prefix": "reaper.ImGui_SliderInt2",
	"scope": "lua",
	"body": "retval, v1, v2 = reaper.ImGui_SliderInt2(${1:ctx}, ${2:label}, ${3:v1}, ${4:v2}, ${5:v_min}, ${6:v_max}, ${7:optional_formatIn}, ${8:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_SliderInt3 lua": {
	"prefix": "reaper.ImGui_SliderInt3",
	"scope": "lua",
	"body": "retval, v1, v2, v3 = reaper.ImGui_SliderInt3(${1:ctx}, ${2:label}, ${3:v1}, ${4:v2}, ${5:v3}, ${6:v_min}, ${7:v_max}, ${8:optional_formatIn}, ${9:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_SliderInt4 lua": {
	"prefix": "reaper.ImGui_SliderInt4",
	"scope": "lua",
	"body": "retval, v1, v2, v3, v4 = reaper.ImGui_SliderInt4(${1:ctx}, ${2:label}, ${3:v1}, ${4:v2}, ${5:v3}, ${6:v4}, ${7:v_min}, ${8:v_max}, ${9:optional_formatIn}, ${10:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_SmallButton lua": {
	"prefix": "reaper.ImGui_SmallButton",
	"scope": "lua",
	"body": "reaper.ImGui_SmallButton(${1:ctx}, ${2:label})$0",
	"description": "Button with StyleVar_FramePadding=(0,0) to easily embed within text.\n\n"
	},

	"ImGui_SortDirection_Ascending lua": {
	"prefix": "reaper.ImGui_SortDirection_Ascending",
	"scope": "lua",
	"body": "reaper.ImGui_SortDirection_Ascending()\n\n",
	"description": "Ascending = 0->9, A->Z etc.\n\n"
	},

	"ImGui_SortDirection_Descending lua": {
	"prefix": "reaper.ImGui_SortDirection_Descending",
	"scope": "lua",
	"body": "reaper.ImGui_SortDirection_Descending()\n\n",
	"description": "Descending = 9->0, Z->A etc.\n\n"
	},

	"ImGui_SortDirection_None lua": {
	"prefix": "reaper.ImGui_SortDirection_None",
	"scope": "lua",
	"body": "reaper.ImGui_SortDirection_None()\n\n",
	"description": ""
	},

	"ImGui_Spacing lua": {
	"prefix": "reaper.ImGui_Spacing",
	"scope": "lua",
	"body": "reaper.ImGui_Spacing(${1:ctx})$0",
	"description": "Add vertical spacing.\n\n"
	},

	"ImGui_StyleVar_Alpha lua": {
	"prefix": "reaper.ImGui_StyleVar_Alpha",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_Alpha()\n\n",
	"description": "Global alpha applies to everything in Dear ImGui.\n\n"
	},

	"ImGui_StyleVar_ButtonTextAlign lua": {
	"prefix": "reaper.ImGui_StyleVar_ButtonTextAlign",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_ButtonTextAlign()\n\n",
	"description": "Alignment of button text when button is larger than text.\nDefaults to (0.5, 0.5) (centered).\n\n"
	},

	"ImGui_StyleVar_CellPadding lua": {
	"prefix": "reaper.ImGui_StyleVar_CellPadding",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_CellPadding()\n\n",
	"description": "Padding within a table cell.\n\n"
	},

	"ImGui_StyleVar_ChildBorderSize lua": {
	"prefix": "reaper.ImGui_StyleVar_ChildBorderSize",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_ChildBorderSize()\n\n",
	"description": "Thickness of border around child windows. Generally set to 0.0 or 1.0.\n(Other values are not well tested and more CPU/GPU costly).\n\n"
	},

	"ImGui_StyleVar_ChildRounding lua": {
	"prefix": "reaper.ImGui_StyleVar_ChildRounding",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_ChildRounding()\n\n",
	"description": "Radius of child window corners rounding. Set to 0.0 to have rectangular windows.\n\n"
	},

	"ImGui_StyleVar_DisabledAlpha lua": {
	"prefix": "reaper.ImGui_StyleVar_DisabledAlpha",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_DisabledAlpha()\n\n",
	"description": "Additional alpha multiplier applied by BeginDisabled.\nMultiply over current value of Alpha.\n\n"
	},

	"ImGui_StyleVar_FrameBorderSize lua": {
	"prefix": "reaper.ImGui_StyleVar_FrameBorderSize",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_FrameBorderSize()\n\n",
	"description": "Thickness of border around frames. Generally set to 0.0 or 1.0.\n(Other values are not well tested and more CPU/GPU costly).\n\n"
	},

	"ImGui_StyleVar_FramePadding lua": {
	"prefix": "reaper.ImGui_StyleVar_FramePadding",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_FramePadding()\n\n",
	"description": "Padding within a framed rectangle (used by most widgets).\n\n"
	},

	"ImGui_StyleVar_FrameRounding lua": {
	"prefix": "reaper.ImGui_StyleVar_FrameRounding",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_FrameRounding()\n\n",
	"description": "Radius of frame corners rounding.\nSet to 0.0 to have rectangular frame (used by most widgets).\n\n"
	},

	"ImGui_StyleVar_GrabMinSize lua": {
	"prefix": "reaper.ImGui_StyleVar_GrabMinSize",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_GrabMinSize()\n\n",
	"description": "Minimum width/height of a grab box for slider/scrollbar.\n\n"
	},

	"ImGui_StyleVar_GrabRounding lua": {
	"prefix": "reaper.ImGui_StyleVar_GrabRounding",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_GrabRounding()\n\n",
	"description": "Radius of grabs corners rounding. Set to 0.0 to have rectangular slider grabs.\n\n"
	},

	"ImGui_StyleVar_IndentSpacing lua": {
	"prefix": "reaper.ImGui_StyleVar_IndentSpacing",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_IndentSpacing()\n\n",
	"description": "Horizontal indentation when e.g. entering a tree node.\nGenerally == (GetFontSize + StyleVar_FramePadding.x*2).\n\n"
	},

	"ImGui_StyleVar_ItemInnerSpacing lua": {
	"prefix": "reaper.ImGui_StyleVar_ItemInnerSpacing",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_ItemInnerSpacing()\n\n",
	"description": "Horizontal and vertical spacing between within elements of a composed widget\n(e.g. a slider and its label).\n\n"
	},

	"ImGui_StyleVar_ItemSpacing lua": {
	"prefix": "reaper.ImGui_StyleVar_ItemSpacing",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_ItemSpacing()\n\n",
	"description": "Horizontal and vertical spacing between widgets/lines.\n\n"
	},

	"ImGui_StyleVar_PopupBorderSize lua": {
	"prefix": "reaper.ImGui_StyleVar_PopupBorderSize",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_PopupBorderSize()\n\n",
	"description": "Thickness of border around popup/tooltip windows. Generally set to 0.0 or 1.0.\n(Other values are not well tested and more CPU/GPU costly).\n\n"
	},

	"ImGui_StyleVar_PopupRounding lua": {
	"prefix": "reaper.ImGui_StyleVar_PopupRounding",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_PopupRounding()\n\n",
	"description": "Radius of popup window corners rounding.\n(Note that tooltip windows use StyleVar_WindowRounding.)\n\n"
	},

	"ImGui_StyleVar_ScrollbarRounding lua": {
	"prefix": "reaper.ImGui_StyleVar_ScrollbarRounding",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_ScrollbarRounding()\n\n",
	"description": "Radius of grab corners for scrollbar.\n\n"
	},

	"ImGui_StyleVar_ScrollbarSize lua": {
	"prefix": "reaper.ImGui_StyleVar_ScrollbarSize",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_ScrollbarSize()\n\n",
	"description": "Width of the vertical scrollbar, Height of the horizontal scrollbar.\n\n"
	},

	"ImGui_StyleVar_SelectableTextAlign lua": {
	"prefix": "reaper.ImGui_StyleVar_SelectableTextAlign",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_SelectableTextAlign()\n\n",
	"description": "Alignment of selectable text. Defaults to (0.0, 0.0) (top-left aligned).\nIt's generally important to keep this left-aligned if you want to lay\nmultiple items on a same line.\n\n"
	},

	"ImGui_StyleVar_TabRounding lua": {
	"prefix": "reaper.ImGui_StyleVar_TabRounding",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_TabRounding()\n\n",
	"description": "Radius of upper corners of a tab. Set to 0.0 to have rectangular tabs.\n\n"
	},

	"ImGui_StyleVar_WindowBorderSize lua": {
	"prefix": "reaper.ImGui_StyleVar_WindowBorderSize",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_WindowBorderSize()\n\n",
	"description": "Thickness of border around windows. Generally set to 0.0 or 1.0.\n(Other values are not well tested and more CPU/GPU costly).\n\n"
	},

	"ImGui_StyleVar_WindowMinSize lua": {
	"prefix": "reaper.ImGui_StyleVar_WindowMinSize",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_WindowMinSize()\n\n",
	"description": "Minimum window size. This is a global setting.\nIf you want to constrain individual windows, use SetNextWindowSizeConstraints.\n\n"
	},

	"ImGui_StyleVar_WindowPadding lua": {
	"prefix": "reaper.ImGui_StyleVar_WindowPadding",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_WindowPadding()\n\n",
	"description": "Padding within a window.\n\n"
	},

	"ImGui_StyleVar_WindowRounding lua": {
	"prefix": "reaper.ImGui_StyleVar_WindowRounding",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_WindowRounding()\n\n",
	"description": "Radius of window corners rounding. Set to 0.0 to have rectangular windows.\nLarge values tend to lead to variety of artifacts and are not recommended.\n\n"
	},

	"ImGui_StyleVar_WindowTitleAlign lua": {
	"prefix": "reaper.ImGui_StyleVar_WindowTitleAlign",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_WindowTitleAlign()\n\n",
	"description": "Alignment for title bar text.\nDefaults to (0.0,0.5) for left-aligned,vertically centered.\n\n"
	},

	"ImGui_TabBarFlags_AutoSelectNewTabs lua": {
	"prefix": "reaper.ImGui_TabBarFlags_AutoSelectNewTabs",
	"scope": "lua",
	"body": "reaper.ImGui_TabBarFlags_AutoSelectNewTabs()\n\n",
	"description": "Automatically select new tabs when they appear.\n\n"
	},

	"ImGui_TabBarFlags_FittingPolicyResizeDown lua": {
	"prefix": "reaper.ImGui_TabBarFlags_FittingPolicyResizeDown",
	"scope": "lua",
	"body": "reaper.ImGui_TabBarFlags_FittingPolicyResizeDown()\n\n",
	"description": "Resize tabs when they don't fit.\n\n"
	},

	"ImGui_TabBarFlags_FittingPolicyScroll lua": {
	"prefix": "reaper.ImGui_TabBarFlags_FittingPolicyScroll",
	"scope": "lua",
	"body": "reaper.ImGui_TabBarFlags_FittingPolicyScroll()\n\n",
	"description": "Add scroll buttons when tabs don't fit.\n\n"
	},

	"ImGui_TabBarFlags_NoCloseWithMiddleMouseButton lua": {
	"prefix": "reaper.ImGui_TabBarFlags_NoCloseWithMiddleMouseButton",
	"scope": "lua",
	"body": "reaper.ImGui_TabBarFlags_NoCloseWithMiddleMouseButton()\n\n",
	"description": "Disable behavior of closing tabs (that are submitted with p_open != nil)\nwith middle mouse button. You can still repro this behavior on user's side\nwith if(IsItemHovered() && IsMouseClicked(2)) p_open = false.\n\n"
	},

	"ImGui_TabBarFlags_NoTabListScrollingButtons lua": {
	"prefix": "reaper.ImGui_TabBarFlags_NoTabListScrollingButtons",
	"scope": "lua",
	"body": "reaper.ImGui_TabBarFlags_NoTabListScrollingButtons()\n\n",
	"description": "Disable scrolling buttons (apply when fitting policy is\nTabBarFlags_FittingPolicyScroll).\n\n"
	},

	"ImGui_TabBarFlags_NoTooltip lua": {
	"prefix": "reaper.ImGui_TabBarFlags_NoTooltip",
	"scope": "lua",
	"body": "reaper.ImGui_TabBarFlags_NoTooltip()\n\n",
	"description": "Disable tooltips when hovering a tab.\n\n"
	},

	"ImGui_TabBarFlags_None lua": {
	"prefix": "reaper.ImGui_TabBarFlags_None",
	"scope": "lua",
	"body": "reaper.ImGui_TabBarFlags_None()\n\n",
	"description": ""
	},

	"ImGui_TabBarFlags_Reorderable lua": {
	"prefix": "reaper.ImGui_TabBarFlags_Reorderable",
	"scope": "lua",
	"body": "reaper.ImGui_TabBarFlags_Reorderable()\n\n",
	"description": "Allow manually dragging tabs to re-order them + New tabs are appended at\nthe end of list.\n\n"
	},

	"ImGui_TabBarFlags_TabListPopupButton lua": {
	"prefix": "reaper.ImGui_TabBarFlags_TabListPopupButton",
	"scope": "lua",
	"body": "reaper.ImGui_TabBarFlags_TabListPopupButton()\n\n",
	"description": "Disable buttons to open the tab list popup.\n\n"
	},

	"ImGui_TabItemButton lua": {
	"prefix": "reaper.ImGui_TabItemButton",
	"scope": "lua",
	"body": "reaper.ImGui_TabItemButton(${1:ctx}, ${2:label}, ${3:optional_flagsIn})$0",
	"description": "Create a Tab behaving like a button. Return true when clicked.\nCannot be selected in the tab bar.\n\n"
	},

	"ImGui_TabItemFlags_Leading lua": {
	"prefix": "reaper.ImGui_TabItemFlags_Leading",
	"scope": "lua",
	"body": "reaper.ImGui_TabItemFlags_Leading()\n\n",
	"description": "Enforce the tab position to the left of the tab bar (after the tab list popup button).\n\n"
	},

	"ImGui_TabItemFlags_NoCloseWithMiddleMouseButton lua": {
	"prefix": "reaper.ImGui_TabItemFlags_NoCloseWithMiddleMouseButton",
	"scope": "lua",
	"body": "reaper.ImGui_TabItemFlags_NoCloseWithMiddleMouseButton()\n\n",
	"description": "Disable behavior of closing tabs (that are submitted with p_open != nil) with\nmiddle mouse button. You can still repro this behavior on user's side with\nif(IsItemHovered() && IsMouseClicked(2)) p_open = false.\n\n"
	},

	"ImGui_TabItemFlags_NoPushId lua": {
	"prefix": "reaper.ImGui_TabItemFlags_NoPushId",
	"scope": "lua",
	"body": "reaper.ImGui_TabItemFlags_NoPushId()\n\n",
	"description": "Don't call PushID(tab->ID)/PopID() on BeginTabItem/EndTabItem.\n\n"
	},

	"ImGui_TabItemFlags_NoReorder lua": {
	"prefix": "reaper.ImGui_TabItemFlags_NoReorder",
	"scope": "lua",
	"body": "reaper.ImGui_TabItemFlags_NoReorder()\n\n",
	"description": "Disable reordering this tab or having another tab cross over this tab.\n\n"
	},

	"ImGui_TabItemFlags_NoTooltip lua": {
	"prefix": "reaper.ImGui_TabItemFlags_NoTooltip",
	"scope": "lua",
	"body": "reaper.ImGui_TabItemFlags_NoTooltip()\n\n",
	"description": "Disable tooltip for the given tab.\n\n"
	},

	"ImGui_TabItemFlags_None lua": {
	"prefix": "reaper.ImGui_TabItemFlags_None",
	"scope": "lua",
	"body": "reaper.ImGui_TabItemFlags_None()\n\n",
	"description": ""
	},

	"ImGui_TabItemFlags_SetSelected lua": {
	"prefix": "reaper.ImGui_TabItemFlags_SetSelected",
	"scope": "lua",
	"body": "reaper.ImGui_TabItemFlags_SetSelected()\n\n",
	"description": "Trigger flag to programmatically make the tab selected when calling BeginTabItem.\n\n"
	},

	"ImGui_TabItemFlags_Trailing lua": {
	"prefix": "reaper.ImGui_TabItemFlags_Trailing",
	"scope": "lua",
	"body": "reaper.ImGui_TabItemFlags_Trailing()\n\n",
	"description": "Enforce the tab position to the right of the tab bar (before the scrolling buttons).\n\n"
	},

	"ImGui_TabItemFlags_UnsavedDocument lua": {
	"prefix": "reaper.ImGui_TabItemFlags_UnsavedDocument",
	"scope": "lua",
	"body": "reaper.ImGui_TabItemFlags_UnsavedDocument()\n\n",
	"description": "Append '*' to title without affecting the ID, as a convenience to avoid using\nthe ### operator. Also: tab is selected on closure and closure is deferred by\none frame to allow code to undo it without flicker.\n\n"
	},

	"ImGui_TableBgTarget_CellBg lua": {
	"prefix": "reaper.ImGui_TableBgTarget_CellBg",
	"scope": "lua",
	"body": "reaper.ImGui_TableBgTarget_CellBg()\n\n",
	"description": "Set cell background color (top-most color).\n\n"
	},

	"ImGui_TableBgTarget_None lua": {
	"prefix": "reaper.ImGui_TableBgTarget_None",
	"scope": "lua",
	"body": "reaper.ImGui_TableBgTarget_None()\n\n",
	"description": ""
	},

	"ImGui_TableBgTarget_RowBg0 lua": {
	"prefix": "reaper.ImGui_TableBgTarget_RowBg0",
	"scope": "lua",
	"body": "reaper.ImGui_TableBgTarget_RowBg0()\n\n",
	"description": "Set row background color 0 (generally used for background,\nautomatically set when TableFlags_RowBg is used).\n\n"
	},

	"ImGui_TableBgTarget_RowBg1 lua": {
	"prefix": "reaper.ImGui_TableBgTarget_RowBg1",
	"scope": "lua",
	"body": "reaper.ImGui_TableBgTarget_RowBg1()\n\n",
	"description": "Set row background color 1 (generally used for selection marking).\n\n"
	},

	"ImGui_TableColumnFlags_DefaultHide lua": {
	"prefix": "reaper.ImGui_TableColumnFlags_DefaultHide",
	"scope": "lua",
	"body": "reaper.ImGui_TableColumnFlags_DefaultHide()\n\n",
	"description": "Default as a hidden/disabled column.\n\n"
	},

	"ImGui_TableColumnFlags_DefaultSort lua": {
	"prefix": "reaper.ImGui_TableColumnFlags_DefaultSort",
	"scope": "lua",
	"body": "reaper.ImGui_TableColumnFlags_DefaultSort()\n\n",
	"description": "Default as a sorting column.\n\n"
	},

	"ImGui_TableColumnFlags_Disabled lua": {
	"prefix": "reaper.ImGui_TableColumnFlags_Disabled",
	"scope": "lua",
	"body": "reaper.ImGui_TableColumnFlags_Disabled()\n\n",
	"description": "Overriding/master disable flag: hide column, won't show in context menu\n(unlike calling TableSetColumnEnabled which manipulates the user accessible state).\n\n"
	},

	"ImGui_TableColumnFlags_IndentDisable lua": {
	"prefix": "reaper.ImGui_TableColumnFlags_IndentDisable",
	"scope": "lua",
	"body": "reaper.ImGui_TableColumnFlags_IndentDisable()\n\n",
	"description": "Ignore current Indent value when entering cell (default for columns > 0).\nIndentation changes _within_ the cell will still be honored.\n\n"
	},

	"ImGui_TableColumnFlags_IndentEnable lua": {
	"prefix": "reaper.ImGui_TableColumnFlags_IndentEnable",
	"scope": "lua",
	"body": "reaper.ImGui_TableColumnFlags_IndentEnable()\n\n",
	"description": "Use current Indent value when entering cell (default for column 0).\n\n"
	},

	"ImGui_TableColumnFlags_IsEnabled lua": {
	"prefix": "reaper.ImGui_TableColumnFlags_IsEnabled",
	"scope": "lua",
	"body": "reaper.ImGui_TableColumnFlags_IsEnabled()\n\n",
	"description": "Status: is enabled == not hidden by user/api (referred to as 'Hide' in\n_DefaultHide and _NoHide) flags.\n\n"
	},

	"ImGui_TableColumnFlags_IsHovered lua": {
	"prefix": "reaper.ImGui_TableColumnFlags_IsHovered",
	"scope": "lua",
	"body": "reaper.ImGui_TableColumnFlags_IsHovered()\n\n",
	"description": "Status: is hovered by mouse.\n\n"
	},

	"ImGui_TableColumnFlags_IsSorted lua": {
	"prefix": "reaper.ImGui_TableColumnFlags_IsSorted",
	"scope": "lua",
	"body": "reaper.ImGui_TableColumnFlags_IsSorted()\n\n",
	"description": "Status: is currently part of the sort specs.\n\n"
	},

	"ImGui_TableColumnFlags_IsVisible lua": {
	"prefix": "reaper.ImGui_TableColumnFlags_IsVisible",
	"scope": "lua",
	"body": "reaper.ImGui_TableColumnFlags_IsVisible()\n\n",
	"description": "Status: is visible == is enabled AND not clipped by scrolling.\n\n"
	},

	"ImGui_TableColumnFlags_NoClip lua": {
	"prefix": "reaper.ImGui_TableColumnFlags_NoClip",
	"scope": "lua",
	"body": "reaper.ImGui_TableColumnFlags_NoClip()\n\n",
	"description": "Disable clipping for this column\n(all NoClip columns will render in a same draw command).\n\n"
	},

	"ImGui_TableColumnFlags_NoHeaderLabel lua": {
	"prefix": "reaper.ImGui_TableColumnFlags_NoHeaderLabel",
	"scope": "lua",
	"body": "reaper.ImGui_TableColumnFlags_NoHeaderLabel()\n\n",
	"description": "TableHeadersRow will not submit label for this column.\nConvenient for some small columns. Name will still appear in context menu.\n\n"
	},

	"ImGui_TableColumnFlags_NoHeaderWidth lua": {
	"prefix": "reaper.ImGui_TableColumnFlags_NoHeaderWidth",
	"scope": "lua",
	"body": "reaper.ImGui_TableColumnFlags_NoHeaderWidth()\n\n",
	"description": "Disable header text width contribution to automatic column width.\n\n"
	},

	"ImGui_TableColumnFlags_NoHide lua": {
	"prefix": "reaper.ImGui_TableColumnFlags_NoHide",
	"scope": "lua",
	"body": "reaper.ImGui_TableColumnFlags_NoHide()\n\n",
	"description": "Disable ability to hide/disable this column.\n\n"
	},

	"ImGui_TableColumnFlags_NoReorder lua": {
	"prefix": "reaper.ImGui_TableColumnFlags_NoReorder",
	"scope": "lua",
	"body": "reaper.ImGui_TableColumnFlags_NoReorder()\n\n",
	"description": "Disable manual reordering this column, this will also prevent other columns\nfrom crossing over this column.\n\n"
	},

	"ImGui_TableColumnFlags_NoResize lua": {
	"prefix": "reaper.ImGui_TableColumnFlags_NoResize",
	"scope": "lua",
	"body": "reaper.ImGui_TableColumnFlags_NoResize()\n\n",
	"description": "Disable manual resizing.\n\n"
	},

	"ImGui_TableColumnFlags_NoSort lua": {
	"prefix": "reaper.ImGui_TableColumnFlags_NoSort",
	"scope": "lua",
	"body": "reaper.ImGui_TableColumnFlags_NoSort()\n\n",
	"description": "Disable ability to sort on this field\n(even if TableFlags_Sortable is set on the table).\n\n"
	},

	"ImGui_TableColumnFlags_NoSortAscending lua": {
	"prefix": "reaper.ImGui_TableColumnFlags_NoSortAscending",
	"scope": "lua",
	"body": "reaper.ImGui_TableColumnFlags_NoSortAscending()\n\n",
	"description": "Disable ability to sort in the ascending direction.\n\n"
	},

	"ImGui_TableColumnFlags_NoSortDescending lua": {
	"prefix": "reaper.ImGui_TableColumnFlags_NoSortDescending",
	"scope": "lua",
	"body": "reaper.ImGui_TableColumnFlags_NoSortDescending()\n\n",
	"description": "Disable ability to sort in the descending direction.\n\n"
	},

	"ImGui_TableColumnFlags_None lua": {
	"prefix": "reaper.ImGui_TableColumnFlags_None",
	"scope": "lua",
	"body": "reaper.ImGui_TableColumnFlags_None()\n\n",
	"description": ""
	},

	"ImGui_TableColumnFlags_PreferSortAscending lua": {
	"prefix": "reaper.ImGui_TableColumnFlags_PreferSortAscending",
	"scope": "lua",
	"body": "reaper.ImGui_TableColumnFlags_PreferSortAscending()\n\n",
	"description": "Make the initial sort direction Ascending when first sorting on this column (default).\n\n"
	},

	"ImGui_TableColumnFlags_PreferSortDescending lua": {
	"prefix": "reaper.ImGui_TableColumnFlags_PreferSortDescending",
	"scope": "lua",
	"body": "reaper.ImGui_TableColumnFlags_PreferSortDescending()\n\n",
	"description": "Make the initial sort direction Descending when first sorting on this column.\n\n"
	},

	"ImGui_TableColumnFlags_WidthFixed lua": {
	"prefix": "reaper.ImGui_TableColumnFlags_WidthFixed",
	"scope": "lua",
	"body": "reaper.ImGui_TableColumnFlags_WidthFixed()\n\n",
	"description": "Column will not stretch. Preferable with horizontal scrolling enabled\n(default if table sizing policy is _SizingFixedFit and table is resizable).\n\n"
	},

	"ImGui_TableColumnFlags_WidthStretch lua": {
	"prefix": "reaper.ImGui_TableColumnFlags_WidthStretch",
	"scope": "lua",
	"body": "reaper.ImGui_TableColumnFlags_WidthStretch()\n\n",
	"description": "Column will stretch. Preferable with horizontal scrolling disabled\n(default if table sizing policy is _SizingStretchSame or _SizingStretchProp).\n\n"
	},

	"ImGui_TableFlags_Borders lua": {
	"prefix": "reaper.ImGui_TableFlags_Borders",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_Borders()\n\n",
	"description": "Draw all borders.\n\n"
	},

	"ImGui_TableFlags_BordersH lua": {
	"prefix": "reaper.ImGui_TableFlags_BordersH",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_BordersH()\n\n",
	"description": "Draw horizontal borders.\n\n"
	},

	"ImGui_TableFlags_BordersInner lua": {
	"prefix": "reaper.ImGui_TableFlags_BordersInner",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_BordersInner()\n\n",
	"description": "Draw inner borders.\n\n"
	},

	"ImGui_TableFlags_BordersInnerH lua": {
	"prefix": "reaper.ImGui_TableFlags_BordersInnerH",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_BordersInnerH()\n\n",
	"description": "Draw horizontal borders between rows.\n\n"
	},

	"ImGui_TableFlags_BordersInnerV lua": {
	"prefix": "reaper.ImGui_TableFlags_BordersInnerV",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_BordersInnerV()\n\n",
	"description": "Draw vertical borders between columns.\n\n"
	},

	"ImGui_TableFlags_BordersOuter lua": {
	"prefix": "reaper.ImGui_TableFlags_BordersOuter",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_BordersOuter()\n\n",
	"description": "Draw outer borders.\n\n"
	},

	"ImGui_TableFlags_BordersOuterH lua": {
	"prefix": "reaper.ImGui_TableFlags_BordersOuterH",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_BordersOuterH()\n\n",
	"description": "Draw horizontal borders at the top and bottom.\n\n"
	},

	"ImGui_TableFlags_BordersOuterV lua": {
	"prefix": "reaper.ImGui_TableFlags_BordersOuterV",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_BordersOuterV()\n\n",
	"description": "Draw vertical borders on the left and right sides.\n\n"
	},

	"ImGui_TableFlags_BordersV lua": {
	"prefix": "reaper.ImGui_TableFlags_BordersV",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_BordersV()\n\n",
	"description": "Draw vertical borders.\n\n"
	},

	"ImGui_TableFlags_ContextMenuInBody lua": {
	"prefix": "reaper.ImGui_TableFlags_ContextMenuInBody",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_ContextMenuInBody()\n\n",
	"description": "Right-click on columns body/contents will display table context menu.\nBy default it is available in TableHeadersRow.\n\n"
	},

	"ImGui_TableFlags_Hideable lua": {
	"prefix": "reaper.ImGui_TableFlags_Hideable",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_Hideable()\n\n",
	"description": "Enable hiding/disabling columns in context menu.\n\n"
	},

	"ImGui_TableFlags_NoClip lua": {
	"prefix": "reaper.ImGui_TableFlags_NoClip",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_NoClip()\n\n",
	"description": "Disable clipping rectangle for every individual columns\n(reduce draw command count, items will be able to overflow into other columns).\nGenerally incompatible with TableSetupScrollFreeze.\n\n"
	},

	"ImGui_TableFlags_NoHostExtendX lua": {
	"prefix": "reaper.ImGui_TableFlags_NoHostExtendX",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_NoHostExtendX()\n\n",
	"description": "Make outer width auto-fit to columns, overriding outer_size.x value. Only\navailable when ScrollX/ScrollY are disabled and Stretch columns are not used.\n\n"
	},

	"ImGui_TableFlags_NoHostExtendY lua": {
	"prefix": "reaper.ImGui_TableFlags_NoHostExtendY",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_NoHostExtendY()\n\n",
	"description": "Make outer height stop exactly at outer_size.y (prevent auto-extending table\npast the limit). Only available when ScrollX/ScrollY are disabled.\nData below the limit will be clipped and not visible.\n\n"
	},

	"ImGui_TableFlags_NoKeepColumnsVisible lua": {
	"prefix": "reaper.ImGui_TableFlags_NoKeepColumnsVisible",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_NoKeepColumnsVisible()\n\n",
	"description": "Disable keeping column always minimally visible when ScrollX is off and table\ngets too small. Not recommended if columns are resizable.\n\n"
	},

	"ImGui_TableFlags_NoPadInnerX lua": {
	"prefix": "reaper.ImGui_TableFlags_NoPadInnerX",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_NoPadInnerX()\n\n",
	"description": "Disable inner padding between columns (double inner padding if\nTableFlags_BordersOuterV is on, single inner padding if BordersOuterV is off).\n\n"
	},

	"ImGui_TableFlags_NoPadOuterX lua": {
	"prefix": "reaper.ImGui_TableFlags_NoPadOuterX",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_NoPadOuterX()\n\n",
	"description": "Default if TableFlags_BordersOuterV is off. Disable outermost padding.\n\n"
	},

	"ImGui_TableFlags_NoSavedSettings lua": {
	"prefix": "reaper.ImGui_TableFlags_NoSavedSettings",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_NoSavedSettings()\n\n",
	"description": "Disable persisting columns order, width and sort settings in the .ini file.\n\n"
	},

	"ImGui_TableFlags_None lua": {
	"prefix": "reaper.ImGui_TableFlags_None",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_None()\n\n",
	"description": ""
	},

	"ImGui_TableFlags_PadOuterX lua": {
	"prefix": "reaper.ImGui_TableFlags_PadOuterX",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_PadOuterX()\n\n",
	"description": "Default if TableFlags_BordersOuterV is on. Enable outermost padding.\nGenerally desirable if you have headers.\n\n"
	},

	"ImGui_TableFlags_PreciseWidths lua": {
	"prefix": "reaper.ImGui_TableFlags_PreciseWidths",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_PreciseWidths()\n\n",
	"description": "Disable distributing remainder width to stretched columns (width allocation\non a 100-wide table with 3 columns: Without this flag: 33,33,34. With this\nflag: 33,33,33).\nWith larger number of columns, resizing will appear to be less smooth.\n\n"
	},

	"ImGui_TableFlags_Reorderable lua": {
	"prefix": "reaper.ImGui_TableFlags_Reorderable",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_Reorderable()\n\n",
	"description": "Enable reordering columns in header row\n(need calling TableSetupColumn + TableHeadersRow to display headers).\n\n"
	},

	"ImGui_TableFlags_Resizable lua": {
	"prefix": "reaper.ImGui_TableFlags_Resizable",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_Resizable()\n\n",
	"description": "Enable resizing columns.\n\n"
	},

	"ImGui_TableFlags_RowBg lua": {
	"prefix": "reaper.ImGui_TableFlags_RowBg",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_RowBg()\n\n",
	"description": "Set each RowBg color with Col_TableRowBg or Col_TableRowBgAlt (equivalent of\ncalling TableSetBgColor with TableBgTarget_RowBg0 on each row manually).\n\n"
	},

	"ImGui_TableFlags_ScrollX lua": {
	"prefix": "reaper.ImGui_TableFlags_ScrollX",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_ScrollX()\n\n",
	"description": "Enable horizontal scrolling. Require 'outer_size' parameter of BeginTable to\nspecify the container size. Changes default sizing policy.\nBecause this creates a child window, ScrollY is currently generally\nrecommended when using ScrollX.\n\n"
	},

	"ImGui_TableFlags_ScrollY lua": {
	"prefix": "reaper.ImGui_TableFlags_ScrollY",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_ScrollY()\n\n",
	"description": "Enable vertical scrolling.\nRequire 'outer_size' parameter of BeginTable to specify the container size.\n\n"
	},

	"ImGui_TableFlags_SizingFixedFit lua": {
	"prefix": "reaper.ImGui_TableFlags_SizingFixedFit",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_SizingFixedFit()\n\n",
	"description": "Columns default to _WidthFixed or _WidthAuto (if resizable or not resizable),\nmatching contents width.\n\n"
	},

	"ImGui_TableFlags_SizingFixedSame lua": {
	"prefix": "reaper.ImGui_TableFlags_SizingFixedSame",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_SizingFixedSame()\n\n",
	"description": "Columns default to _WidthFixed or _WidthAuto (if resizable or not resizable),\nmatching the maximum contents width of all columns.\nImplicitly enable TableFlags_NoKeepColumnsVisible.\n\n"
	},

	"ImGui_TableFlags_SizingStretchProp lua": {
	"prefix": "reaper.ImGui_TableFlags_SizingStretchProp",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_SizingStretchProp()\n\n",
	"description": "Columns default to _WidthStretch with default weights proportional to each\ncolumns contents widths.\n\n"
	},

	"ImGui_TableFlags_SizingStretchSame lua": {
	"prefix": "reaper.ImGui_TableFlags_SizingStretchSame",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_SizingStretchSame()\n\n",
	"description": "Columns default to _WidthStretch with default weights all equal,\nunless overriden by TableSetupColumn.\n\n"
	},

	"ImGui_TableFlags_SortMulti lua": {
	"prefix": "reaper.ImGui_TableFlags_SortMulti",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_SortMulti()\n\n",
	"description": "Hold shift when clicking headers to sort on multiple column.\nTableGetGetSortSpecs may return specs where (SpecsCount > 1).\n\n"
	},

	"ImGui_TableFlags_SortTristate lua": {
	"prefix": "reaper.ImGui_TableFlags_SortTristate",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_SortTristate()\n\n",
	"description": "Allow no sorting, disable default sorting.\nTableGetColumnSortSpecs may return specs where (SpecsCount == 0).\n\n"
	},

	"ImGui_TableFlags_Sortable lua": {
	"prefix": "reaper.ImGui_TableFlags_Sortable",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_Sortable()\n\n",
	"description": "Enable sorting. Call TableNeedSort/TableGetColumnSortSpecs to obtain sort specs.\nAlso see TableFlags_SortMulti and TableFlags_SortTristate.\n\n"
	},

	"ImGui_TableGetColumnCount lua": {
	"prefix": "reaper.ImGui_TableGetColumnCount",
	"scope": "lua",
	"body": "reaper.ImGui_TableGetColumnCount(${1:ctx})$0",
	"description": "Return number of columns (value passed to BeginTable).\n\n"
	},

	"ImGui_TableGetColumnFlags lua": {
	"prefix": "reaper.ImGui_TableGetColumnFlags",
	"scope": "lua",
	"body": "reaper.ImGui_TableGetColumnFlags(${1:ctx}, ${2:optional_column_nIn})$0",
	"description": "Return column flags so you can query their Enabled/Visible/Sorted/Hovered\nstatus flags. Pass -1 to use current column.\n\n"
	},

	"ImGui_TableGetColumnIndex lua": {
	"prefix": "reaper.ImGui_TableGetColumnIndex",
	"scope": "lua",
	"body": "reaper.ImGui_TableGetColumnIndex(${1:ctx})$0",
	"description": "Return current column index.\n\n"
	},

	"ImGui_TableGetColumnName lua": {
	"prefix": "reaper.ImGui_TableGetColumnName",
	"scope": "lua",
	"body": "reaper.ImGui_TableGetColumnName(${1:ctx}, ${2:optional_column_nIn})$0",
	"description": "Return '' if column didn't have a name declared by TableSetupColumn.\nPass -1 to use current column.\n\n"
	},

	"ImGui_TableGetColumnSortSpecs lua": {
	"prefix": "reaper.ImGui_TableGetColumnSortSpecs",
	"scope": "lua",
	"body": "retval, column_user_id, column_index, sort_order, sort_direction = reaper.ImGui_TableGetColumnSortSpecs(${1:ctx}, ${2:id})$0",
	"description": "Sorting specification for one column of a table.\nCall while incrementing 'id' from 0 until false is returned.\n- ColumnUserID:  User id of the column (if specified by a TableSetupColumn call)\n- ColumnIndex:   Index of the column\n- SortOrder:     Index within parent SortSpecs (always stored in order starting\nfrom 0, tables sorted on a single criteria will always have a 0 here)\n- SortDirection: SortDirection_Ascending or SortDirection_Descending\n(you can use this or SortSign, whichever is more convenient for your sort\nfunction)\nSee TableNeedSort.\n\n"
	},

	"ImGui_TableGetRowIndex lua": {
	"prefix": "reaper.ImGui_TableGetRowIndex",
	"scope": "lua",
	"body": "reaper.ImGui_TableGetRowIndex(${1:ctx})$0",
	"description": "Return current row index.\n\n"
	},

	"ImGui_TableHeader lua": {
	"prefix": "reaper.ImGui_TableHeader",
	"scope": "lua",
	"body": "reaper.ImGui_TableHeader(${1:ctx}, ${2:label})$0",
	"description": "Submit one header cell manually (rarely used). See TableSetupColumn.\n\n"
	},

	"ImGui_TableHeadersRow lua": {
	"prefix": "reaper.ImGui_TableHeadersRow",
	"scope": "lua",
	"body": "reaper.ImGui_TableHeadersRow(${1:ctx})$0",
	"description": "Submit all headers cells based on data provided to TableSetupColumn +\nsubmit context menu.\n\n"
	},

	"ImGui_TableNeedSort lua": {
	"prefix": "reaper.ImGui_TableNeedSort",
	"scope": "lua",
	"body": "retval, has_specs = reaper.ImGui_TableNeedSort(${1:ctx})$0",
	"description": "Return true once when sorting specs have changed since last call,\nor the first time. 'has_specs' is false when not sorting.\nSee TableGetColumnSortSpecs.\n\n"
	},

	"ImGui_TableNextColumn lua": {
	"prefix": "reaper.ImGui_TableNextColumn",
	"scope": "lua",
	"body": "reaper.ImGui_TableNextColumn(${1:ctx})$0",
	"description": "Append into the next column (or first column of next row if currently in\nlast column). Return true when column is visible.\n\n"
	},

	"ImGui_TableNextRow lua": {
	"prefix": "reaper.ImGui_TableNextRow",
	"scope": "lua",
	"body": "reaper.ImGui_TableNextRow(${1:ctx}, ${2:optional_row_flagsIn}, ${3:optional_min_row_heightIn})$0",
	"description": "Append into the first cell of a new row.\n\n"
	},

	"ImGui_TableRowFlags_Headers lua": {
	"prefix": "reaper.ImGui_TableRowFlags_Headers",
	"scope": "lua",
	"body": "reaper.ImGui_TableRowFlags_Headers()\n\n",
	"description": "Identify header row (set default background color + width of its contents\naccounted different for auto column width).\n\n"
	},

	"ImGui_TableRowFlags_None lua": {
	"prefix": "reaper.ImGui_TableRowFlags_None",
	"scope": "lua",
	"body": "reaper.ImGui_TableRowFlags_None()\n\n",
	"description": "For TableNextRow.\n\n"
	},

	"ImGui_TableSetBgColor lua": {
	"prefix": "reaper.ImGui_TableSetBgColor",
	"scope": "lua",
	"body": "reaper.ImGui_TableSetBgColor(${1:ctx}, ${2:target}, ${3:color_rgba}, ${4:optional_column_nIn})$0",
	"description": "Change the color of a cell, row, or column.\nSee TableBgTarget_* flags for details.\n\n"
	},

	"ImGui_TableSetColumnEnabled lua": {
	"prefix": "reaper.ImGui_TableSetColumnEnabled",
	"scope": "lua",
	"body": "reaper.ImGui_TableSetColumnEnabled(${1:ctx}, ${2:column_n}, ${3:v})$0",
	"description": "Change user-accessible enabled/disabled state of a column, set to false to\nhide the column. Note that end-user can use the context menu to change this\nthemselves (right-click in headers, or right-click in columns body with\nTableFlags_ContextMenuInBody).\n- Require table to have the TableFlags_Hideable flag because we are manipulating\nuser accessible state.\n- Request will be applied during next layout, which happens on the first call to\nTableNextRow after Begin_Table.\n- For the getter you can test\n(TableGetColumnFlags() & TableColumnFlags_IsEnabled) != 0.\n\n"
	},

	"ImGui_TableSetColumnIndex lua": {
	"prefix": "reaper.ImGui_TableSetColumnIndex",
	"scope": "lua",
	"body": "reaper.ImGui_TableSetColumnIndex(${1:ctx}, ${2:column_n})$0",
	"description": "Append into the specified column. Return true when column is visible.\n\n"
	},

	"ImGui_TableSetupColumn lua": {
	"prefix": "reaper.ImGui_TableSetupColumn",
	"scope": "lua",
	"body": "reaper.ImGui_TableSetupColumn(${1:ctx}, ${2:label}, ${3:optional_flagsIn}, ${4:optional_init_width_or_weightIn}, ${5:optional_user_idIn})$0",
	"description": "Use to specify label, resizing policy, default width/weight, id,\nvarious other flags etc.\n\n"
	},

	"ImGui_TableSetupScrollFreeze lua": {
	"prefix": "reaper.ImGui_TableSetupScrollFreeze",
	"scope": "lua",
	"body": "reaper.ImGui_TableSetupScrollFreeze(${1:ctx}, ${2:cols}, ${3:rows})$0",
	"description": "Lock columns/rows so they stay visible when scrolled.\n\n"
	},

	"ImGui_Text lua": {
	"prefix": "reaper.ImGui_Text",
	"scope": "lua",
	"body": "reaper.ImGui_Text(${1:ctx}, ${2:text})$0",
	"description": ""
	},

	"ImGui_TextColored lua": {
	"prefix": "reaper.ImGui_TextColored",
	"scope": "lua",
	"body": "reaper.ImGui_TextColored(${1:ctx}, ${2:col_rgba}, ${3:text})$0",
	"description": "Shortcut for PushStyleColor(Col_Text, color); Text(text); PopStyleColor();\n\n"
	},

	"ImGui_TextDisabled lua": {
	"prefix": "reaper.ImGui_TextDisabled",
	"scope": "lua",
	"body": "reaper.ImGui_TextDisabled(${1:ctx}, ${2:text})$0",
	"description": ""
	},

	"ImGui_TextFilter_Clear lua": {
	"prefix": "reaper.ImGui_TextFilter_Clear",
	"scope": "lua",
	"body": "reaper.ImGui_TextFilter_Clear(${1:filter})$0",
	"description": ""
	},

	"ImGui_TextFilter_Draw lua": {
	"prefix": "reaper.ImGui_TextFilter_Draw",
	"scope": "lua",
	"body": "reaper.ImGui_TextFilter_Draw(${1:ImGui_TextFilter_ctx}, ${2:optional_labelIn}, ${3:optional_widthIn})$0",
	"description": "Helper calling InputText+TextFilter_Set\n\n"
	},

	"ImGui_TextFilter_Get lua": {
	"prefix": "reaper.ImGui_TextFilter_Get",
	"scope": "lua",
	"body": "reaper.ImGui_TextFilter_Get(${1:filter})$0",
	"description": ""
	},

	"ImGui_TextFilter_IsActive lua": {
	"prefix": "reaper.ImGui_TextFilter_IsActive",
	"scope": "lua",
	"body": "reaper.ImGui_TextFilter_IsActive(${1:filter})$0",
	"description": ""
	},

	"ImGui_TextFilter_PassFilter lua": {
	"prefix": "reaper.ImGui_TextFilter_PassFilter",
	"scope": "lua",
	"body": "reaper.ImGui_TextFilter_PassFilter(${1:filter}, ${2:text})$0",
	"description": ""
	},

	"ImGui_TextFilter_Set lua": {
	"prefix": "reaper.ImGui_TextFilter_Set",
	"scope": "lua",
	"body": "reaper.ImGui_TextFilter_Set(${1:filter}, ${2:filter_text})$0",
	"description": ""
	},

	"ImGui_TextWrapped lua": {
	"prefix": "reaper.ImGui_TextWrapped",
	"scope": "lua",
	"body": "reaper.ImGui_TextWrapped(${1:ctx}, ${2:text})$0",
	"description": "Shortcut for PushTextWrapPos(0.0); Text(text); PopTextWrapPos();.\nNote that this won't work on an auto-resizing window if there's no other\nwidgets to extend the window width, yoy may need to set a size using\nSetNextWindowSize.\n\n"
	},

	"ImGui_TreeNode lua": {
	"prefix": "reaper.ImGui_TreeNode",
	"scope": "lua",
	"body": "reaper.ImGui_TreeNode(${1:ctx}, ${2:label}, ${3:optional_flagsIn})$0",
	"description": "TreeNode functions return true when the node is open, in which case you need\nto also call TreePop when you are finished displaying the tree node contents.\n\n"
	},

	"ImGui_TreeNodeEx lua": {
	"prefix": "reaper.ImGui_TreeNodeEx",
	"scope": "lua",
	"body": "reaper.ImGui_TreeNodeEx(${1:ctx}, ${2:str_id}, ${3:label}, ${4:optional_flagsIn})$0",
	"description": "Helper variation to easily decorelate the id from the displayed string.\nRead the [FAQ](https://dearimgui.org/faq) about why and how to use ID.\nTo align arbitrary text at the same level as a TreeNode you can use Bullet.\n\n"
	},

	"ImGui_TreeNodeFlags_AllowItemOverlap lua": {
	"prefix": "reaper.ImGui_TreeNodeFlags_AllowItemOverlap",
	"scope": "lua",
	"body": "reaper.ImGui_TreeNodeFlags_AllowItemOverlap()\n\n",
	"description": "Hit testing to allow subsequent widgets to overlap this one.\n\n"
	},

	"ImGui_TreeNodeFlags_Bullet lua": {
	"prefix": "reaper.ImGui_TreeNodeFlags_Bullet",
	"scope": "lua",
	"body": "reaper.ImGui_TreeNodeFlags_Bullet()\n\n",
	"description": "Display a bullet instead of arrow.\n\n"
	},

	"ImGui_TreeNodeFlags_CollapsingHeader lua": {
	"prefix": "reaper.ImGui_TreeNodeFlags_CollapsingHeader",
	"scope": "lua",
	"body": "reaper.ImGui_TreeNodeFlags_CollapsingHeader()\n\n",
	"description": "TreeNodeFlags_Framed | TreeNodeFlags_NoTreePushOnOpen | TreeNodeFlags_NoAutoOpenOnLog\n\n"
	},

	"ImGui_TreeNodeFlags_DefaultOpen lua": {
	"prefix": "reaper.ImGui_TreeNodeFlags_DefaultOpen",
	"scope": "lua",
	"body": "reaper.ImGui_TreeNodeFlags_DefaultOpen()\n\n",
	"description": "Default node to be open.\n\n"
	},

	"ImGui_TreeNodeFlags_FramePadding lua": {
	"prefix": "reaper.ImGui_TreeNodeFlags_FramePadding",
	"scope": "lua",
	"body": "reaper.ImGui_TreeNodeFlags_FramePadding()\n\n",
	"description": "Use FramePadding (even for an unframed text node) to vertically align text\nbaseline to regular widget height.\nEquivalent to calling AlignTextToFramePadding.\n\n"
	},

	"ImGui_TreeNodeFlags_Framed lua": {
	"prefix": "reaper.ImGui_TreeNodeFlags_Framed",
	"scope": "lua",
	"body": "reaper.ImGui_TreeNodeFlags_Framed()\n\n",
	"description": "Draw frame with background (e.g. for CollapsingHeader).\n\n"
	},

	"ImGui_TreeNodeFlags_Leaf lua": {
	"prefix": "reaper.ImGui_TreeNodeFlags_Leaf",
	"scope": "lua",
	"body": "reaper.ImGui_TreeNodeFlags_Leaf()\n\n",
	"description": "No collapsing, no arrow (use as a convenience for leaf nodes).\n\n"
	},

	"ImGui_TreeNodeFlags_NoAutoOpenOnLog lua": {
	"prefix": "reaper.ImGui_TreeNodeFlags_NoAutoOpenOnLog",
	"scope": "lua",
	"body": "reaper.ImGui_TreeNodeFlags_NoAutoOpenOnLog()\n\n",
	"description": "Don't automatically and temporarily open node when Logging is active\n(by default logging will automatically open tree nodes).\n\n"
	},

	"ImGui_TreeNodeFlags_NoTreePushOnOpen lua": {
	"prefix": "reaper.ImGui_TreeNodeFlags_NoTreePushOnOpen",
	"scope": "lua",
	"body": "reaper.ImGui_TreeNodeFlags_NoTreePushOnOpen()\n\n",
	"description": "Don't do a TreePush when open (e.g. for CollapsingHeader)\n= no extra indent nor pushing on ID stack.\n\n"
	},

	"ImGui_TreeNodeFlags_None lua": {
	"prefix": "reaper.ImGui_TreeNodeFlags_None",
	"scope": "lua",
	"body": "reaper.ImGui_TreeNodeFlags_None()\n\n",
	"description": ""
	},

	"ImGui_TreeNodeFlags_OpenOnArrow lua": {
	"prefix": "reaper.ImGui_TreeNodeFlags_OpenOnArrow",
	"scope": "lua",
	"body": "reaper.ImGui_TreeNodeFlags_OpenOnArrow()\n\n",
	"description": "Only open when clicking on the arrow part.\nIf TreeNodeFlags_OpenOnDoubleClick is also set, single-click arrow or\ndouble-click all box to open.\n\n"
	},

	"ImGui_TreeNodeFlags_OpenOnDoubleClick lua": {
	"prefix": "reaper.ImGui_TreeNodeFlags_OpenOnDoubleClick",
	"scope": "lua",
	"body": "reaper.ImGui_TreeNodeFlags_OpenOnDoubleClick()\n\n",
	"description": "Need double-click to open node.\n\n"
	},

	"ImGui_TreeNodeFlags_Selected lua": {
	"prefix": "reaper.ImGui_TreeNodeFlags_Selected",
	"scope": "lua",
	"body": "reaper.ImGui_TreeNodeFlags_Selected()\n\n",
	"description": "Draw as selected.\n\n"
	},

	"ImGui_TreeNodeFlags_SpanAvailWidth lua": {
	"prefix": "reaper.ImGui_TreeNodeFlags_SpanAvailWidth",
	"scope": "lua",
	"body": "reaper.ImGui_TreeNodeFlags_SpanAvailWidth()\n\n",
	"description": "Extend hit box to the right-most edge, even if not framed.\nThis is not the default in order to allow adding other items on the same line.\nIn the future we may refactor the hit system to be front-to-back,\nallowing natural overlaps and then this can become the default.\n\n"
	},

	"ImGui_TreeNodeFlags_SpanFullWidth lua": {
	"prefix": "reaper.ImGui_TreeNodeFlags_SpanFullWidth",
	"scope": "lua",
	"body": "reaper.ImGui_TreeNodeFlags_SpanFullWidth()\n\n",
	"description": "Extend hit box to the left-most and right-most edges (bypass the indented area).\n\n"
	},

	"ImGui_TreePop lua": {
	"prefix": "reaper.ImGui_TreePop",
	"scope": "lua",
	"body": "reaper.ImGui_TreePop(${1:ctx})$0",
	"description": "Unindent()+PopID()\n\n"
	},

	"ImGui_TreePush lua": {
	"prefix": "reaper.ImGui_TreePush",
	"scope": "lua",
	"body": "reaper.ImGui_TreePush(${1:ctx}, ${2:str_id})$0",
	"description": "Indent()+PushID(). Already called by TreeNode when returning true,\nbut you can call TreePush/TreePop yourself if desired.\n\n"
	},

	"ImGui_Unindent lua": {
	"prefix": "reaper.ImGui_Unindent",
	"scope": "lua",
	"body": "reaper.ImGui_Unindent(${1:ctx}, ${2:optional_indent_wIn})$0",
	"description": "Move content position back to the left, by 'indent_w', or\nStyleVar_IndentSpacing if 'indent_w' <= 0\n\n"
	},

	"ImGui_VSliderDouble lua": {
	"prefix": "reaper.ImGui_VSliderDouble",
	"scope": "lua",
	"body": "retval, v = reaper.ImGui_VSliderDouble(${1:ctx}, ${2:label}, ${3:size_w}, ${4:size_h}, ${5:v}, ${6:v_min}, ${7:v_max}, ${8:optional_formatIn}, ${9:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_VSliderInt lua": {
	"prefix": "reaper.ImGui_VSliderInt",
	"scope": "lua",
	"body": "retval, v = reaper.ImGui_VSliderInt(${1:ctx}, ${2:label}, ${3:size_w}, ${4:size_h}, ${5:v}, ${6:v_min}, ${7:v_max}, ${8:optional_formatIn}, ${9:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_ValidatePtr lua": {
	"prefix": "reaper.ImGui_ValidatePtr",
	"scope": "lua",
	"body": "reaper.ImGui_ValidatePtr(${1:pointer}, ${2:type})$0",
	"description": "Return whether the pointer of the specified type is valid.\nSupported types are:\n- ImGui_Context*\n- ImGui_DrawList*\n- ImGui_DrawListSplitter*\n- ImGui_Font*\n- ImGui_Image*\n- ImGui_ImageSet*\n- ImGui_ListClipper*\n- ImGui_TextFilter*\n- ImGui_Viewport*\n\n"
	},

	"ImGui_Viewport_GetCenter lua": {
	"prefix": "reaper.ImGui_Viewport_GetCenter",
	"scope": "lua",
	"body": "x, y = reaper.ImGui_Viewport_GetCenter(${1:viewport})$0",
	"description": "Center of the viewport.\n\n"
	},

	"ImGui_Viewport_GetPos lua": {
	"prefix": "reaper.ImGui_Viewport_GetPos",
	"scope": "lua",
	"body": "x, y = reaper.ImGui_Viewport_GetPos(${1:viewport})$0",
	"description": "Main Area: Position of the viewport\n\n"
	},

	"ImGui_Viewport_GetSize lua": {
	"prefix": "reaper.ImGui_Viewport_GetSize",
	"scope": "lua",
	"body": "w, h = reaper.ImGui_Viewport_GetSize(${1:viewport})$0",
	"description": "Main Area: Size of the viewport.\n\n"
	},

	"ImGui_Viewport_GetWorkCenter lua": {
	"prefix": "reaper.ImGui_Viewport_GetWorkCenter",
	"scope": "lua",
	"body": "x, y = reaper.ImGui_Viewport_GetWorkCenter(${1:viewport})$0",
	"description": "Center of the viewport's work area.\n\n"
	},

	"ImGui_Viewport_GetWorkPos lua": {
	"prefix": "reaper.ImGui_Viewport_GetWorkPos",
	"scope": "lua",
	"body": "x, y = reaper.ImGui_Viewport_GetWorkPos(${1:viewport})$0",
	"description": ">= Viewport_GetPos\n\n"
	},

	"ImGui_Viewport_GetWorkSize lua": {
	"prefix": "reaper.ImGui_Viewport_GetWorkSize",
	"scope": "lua",
	"body": "w, h = reaper.ImGui_Viewport_GetWorkSize(${1:viewport})$0",
	"description": "<= Viewport_GetSize\n\n"
	},

	"ImGui_WindowFlags_AlwaysAutoResize lua": {
	"prefix": "reaper.ImGui_WindowFlags_AlwaysAutoResize",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_AlwaysAutoResize()\n\n",
	"description": "Resize every window to its content every frame.\n\n"
	},

	"ImGui_WindowFlags_AlwaysHorizontalScrollbar lua": {
	"prefix": "reaper.ImGui_WindowFlags_AlwaysHorizontalScrollbar",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_AlwaysHorizontalScrollbar()\n\n",
	"description": "Always show horizontal scrollbar (even if ContentSize.x < Size.x).\n\n"
	},

	"ImGui_WindowFlags_AlwaysUseWindowPadding lua": {
	"prefix": "reaper.ImGui_WindowFlags_AlwaysUseWindowPadding",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_AlwaysUseWindowPadding()\n\n",
	"description": "Ensure child windows without border uses StyleVar_WindowPadding\n(ignored by default for non-bordered child windows, because more convenient).\n\n"
	},

	"ImGui_WindowFlags_AlwaysVerticalScrollbar lua": {
	"prefix": "reaper.ImGui_WindowFlags_AlwaysVerticalScrollbar",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_AlwaysVerticalScrollbar()\n\n",
	"description": "Always show vertical scrollbar (even if ContentSize.y < Size.y).\n\n"
	},

	"ImGui_WindowFlags_HorizontalScrollbar lua": {
	"prefix": "reaper.ImGui_WindowFlags_HorizontalScrollbar",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_HorizontalScrollbar()\n\n",
	"description": "Allow horizontal scrollbar to appear (off by default).\nYou may use SetNextWindowContentSize(width, 0.0) prior to calling Begin() to\nspecify width. Read code in the demo's 'Horizontal Scrolling' section.\n\n"
	},

	"ImGui_WindowFlags_MenuBar lua": {
	"prefix": "reaper.ImGui_WindowFlags_MenuBar",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_MenuBar()\n\n",
	"description": "Has a menu-bar.\n\n"
	},

	"ImGui_WindowFlags_NoBackground lua": {
	"prefix": "reaper.ImGui_WindowFlags_NoBackground",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_NoBackground()\n\n",
	"description": "Disable drawing background color (WindowBg, etc.) and outside border.\nSimilar as using SetNextWindowBgAlpha(0.0).\n\n"
	},

	"ImGui_WindowFlags_NoCollapse lua": {
	"prefix": "reaper.ImGui_WindowFlags_NoCollapse",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_NoCollapse()\n\n",
	"description": "Disable user collapsing window by double-clicking on it.\nAlso referred to as Window Menu Button (e.g. within a docking node).\n\n"
	},

	"ImGui_WindowFlags_NoDecoration lua": {
	"prefix": "reaper.ImGui_WindowFlags_NoDecoration",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_NoDecoration()\n\n",
	"description": "WindowFlags_NoTitleBar | WindowFlags_NoResize | WindowFlags_NoScrollbar |\nWindowFlags_NoCollapse\n\n"
	},

	"ImGui_WindowFlags_NoDocking lua": {
	"prefix": "reaper.ImGui_WindowFlags_NoDocking",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_NoDocking()\n\n",
	"description": "Disable docking of this window.\n\n"
	},

	"ImGui_WindowFlags_NoFocusOnAppearing lua": {
	"prefix": "reaper.ImGui_WindowFlags_NoFocusOnAppearing",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_NoFocusOnAppearing()\n\n",
	"description": "Disable taking focus when transitioning from hidden to visible state.\n\n"
	},

	"ImGui_WindowFlags_NoInputs lua": {
	"prefix": "reaper.ImGui_WindowFlags_NoInputs",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_NoInputs()\n\n",
	"description": "WindowFlags_NoMouseInputs | WindowFlags_NoNavInputs | WindowFlags_NoNavFocus\n\n"
	},

	"ImGui_WindowFlags_NoMouseInputs lua": {
	"prefix": "reaper.ImGui_WindowFlags_NoMouseInputs",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_NoMouseInputs()\n\n",
	"description": "Disable catching mouse, hovering test with pass through.\n\n"
	},

	"ImGui_WindowFlags_NoMove lua": {
	"prefix": "reaper.ImGui_WindowFlags_NoMove",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_NoMove()\n\n",
	"description": "Disable user moving the window.\n\n"
	},

	"ImGui_WindowFlags_NoNav lua": {
	"prefix": "reaper.ImGui_WindowFlags_NoNav",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_NoNav()\n\n",
	"description": "WindowFlags_NoNavInputs | WindowFlags_NoNavFocus\n\n"
	},

	"ImGui_WindowFlags_NoNavFocus lua": {
	"prefix": "reaper.ImGui_WindowFlags_NoNavFocus",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_NoNavFocus()\n\n",
	"description": "No focusing toward this window with gamepad/keyboard navigation\n(e.g. skipped by CTRL+TAB).\n\n"
	},

	"ImGui_WindowFlags_NoNavInputs lua": {
	"prefix": "reaper.ImGui_WindowFlags_NoNavInputs",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_NoNavInputs()\n\n",
	"description": "No gamepad/keyboard navigation within the window.\n\n"
	},

	"ImGui_WindowFlags_NoResize lua": {
	"prefix": "reaper.ImGui_WindowFlags_NoResize",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_NoResize()\n\n",
	"description": "Disable user resizing with the lower-right grip.\n\n"
	},

	"ImGui_WindowFlags_NoSavedSettings lua": {
	"prefix": "reaper.ImGui_WindowFlags_NoSavedSettings",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_NoSavedSettings()\n\n",
	"description": "Never load/save settings in .ini file.\n\n"
	},

	"ImGui_WindowFlags_NoScrollWithMouse lua": {
	"prefix": "reaper.ImGui_WindowFlags_NoScrollWithMouse",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_NoScrollWithMouse()\n\n",
	"description": "Disable user vertically scrolling with mouse wheel.\nOn child window, mouse wheel will be forwarded to the parent unless\nNoScrollbar is also set.\n\n"
	},

	"ImGui_WindowFlags_NoScrollbar lua": {
	"prefix": "reaper.ImGui_WindowFlags_NoScrollbar",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_NoScrollbar()\n\n",
	"description": "Disable scrollbars (window can still scroll with mouse or programmatically).\n\n"
	},

	"ImGui_WindowFlags_NoTitleBar lua": {
	"prefix": "reaper.ImGui_WindowFlags_NoTitleBar",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_NoTitleBar()\n\n",
	"description": "Disable title-bar.\n\n"
	},

	"ImGui_WindowFlags_None lua": {
	"prefix": "reaper.ImGui_WindowFlags_None",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_None()\n\n",
	"description": "Default flag.\n\n"
	},

	"ImGui_WindowFlags_TopMost lua": {
	"prefix": "reaper.ImGui_WindowFlags_TopMost",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_TopMost()\n\n",
	"description": "Show the window above all non-topmost windows.\n\n"
	},

	"ImGui_WindowFlags_UnsavedDocument lua": {
	"prefix": "reaper.ImGui_WindowFlags_UnsavedDocument",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_UnsavedDocument()\n\n",
	"description": "Display a dot next to the title. When used in a tab/docking context,\ntab is selected when clicking the X + closure is not assumed\n(will wait for user to stop submitting the tab).\nOtherwise closure is assumed when pressing the X,\nso if you keep submitting the tab may reappear at end of tab bar.\n\n"
	},

	"JS_Actions_CountShortcuts lua": {
	"prefix": "reaper.JS_Actions_CountShortcuts",
	"scope": "lua",
	"body": "reaper.JS_Actions_CountShortcuts(${1:section}, ${2:cmdID})$0",
	"description": "Section:\n0 = Main, 100 = Main (alt recording), 32060 = MIDI Editor, 32061 = MIDI Event List Editor, 32062 = MIDI Inline Editor, 32063 = Media Explorer.\n\n"
	},

	"JS_Actions_DeleteShortcut lua": {
	"prefix": "reaper.JS_Actions_DeleteShortcut",
	"scope": "lua",
	"body": "reaper.JS_Actions_DeleteShortcut(${1:section}, ${2:cmdID}, ${3:shortcutidx})$0",
	"description": "Section:\n0 = Main, 100 = Main (alt recording), 32060 = MIDI Editor, 32061 = MIDI Event List Editor, 32062 = MIDI Inline Editor, 32063 = Media Explorer.\n\n"
	},

	"JS_Actions_DoShortcutDialog lua": {
	"prefix": "reaper.JS_Actions_DoShortcutDialog",
	"scope": "lua",
	"body": "reaper.JS_Actions_DoShortcutDialog(${1:section}, ${2:cmdID}, ${3:shortcutidx})$0",
	"description": "Section:\n0 = Main, 100 = Main (alt recording), 32060 = MIDI Editor, 32061 = MIDI Event List Editor, 32062 = MIDI Inline Editor, 32063 = Media Explorer.\nIf the shortcut index is higher than the current number of shortcuts, it will add a new shortcut.\n\n"
	},

	"JS_Actions_GetShortcutDesc lua": {
	"prefix": "reaper.JS_Actions_GetShortcutDesc",
	"scope": "lua",
	"body": "retval, desc = reaper.JS_Actions_GetShortcutDesc(${1:section}, ${2:cmdID}, ${3:shortcutidx})$0",
	"description": "Section:\n0 = Main, 100 = Main (alt recording), 32060 = MIDI Editor, 32061 = MIDI Event List Editor, 32062 = MIDI Inline Editor, 32063 = Media Explorer.\n\n"
	},

	"JS_Byte lua": {
	"prefix": "reaper.JS_Byte",
	"scope": "lua",
	"body": "byte = reaper.JS_Byte(${1:pointer}, ${2:offset})$0",
	"description": "Returns the unsigned byte at address[offset]. Offset is added as steps of 1 byte each.\n\n"
	},

	"JS_Composite lua": {
	"prefix": "reaper.JS_Composite",
	"scope": "lua",
	"body": "reaper.JS_Composite(${1:windowHWND}, ${2:dstx}, ${3:dsty}, ${4:dstw}, ${5:dsth}, ${6:sysBitmap}, ${7:srcx}, ${8:srcy}, ${9:srcw}, ${10:srch}, ${11:autoUpdate})$0",
	"description": "Composites a LICE bitmap with a REAPER window.  Each time that the window is re-drawn, the bitmap will be blitted over the window's client area (with per-pixel alpha blending).\n* If dstw or dsth is -1, the bitmap will be stretched to fill the width or height of the window, respectively.\n* autoUpdate is an optional parameter that is false by default. If true, JS_Composite will automatically invalidate and re-draw the part of the window that covers the current position of the bitmap, and if the bitmap is being moved, also the previous position. (If only one or a handful of bitmaps are being moved across the screen, autoUpdate should result in smoother animation on WindowsOS; if numerous bitmaps are spread over the entire window, it may be faster to disable autoUpdate and instead call JS_Window_InvalidateRect explicitly once all bitmaps have been moved.)\n* InvalidateRect should also be called whenever the contents of the bitmap contents have been changed, but not the position, to trigger a window update.\n* On WindowsOS, the key to reducing flickering is to slow down the frequency at which the window is re-drawn. InvalidateRect should only be called when absolutely necessary, preferably not more than 20 times per second.  (Also refer to the JS_Composite_Delay function.)\n* On WindowsOS, flickering can further be reduced by keeping the invalidated area as small as possible, covering only the bitmaps that have been edited or moved.  However, if numerous bitmaps are spread over the entire window, it may be faster to simply invalidate the entire client area. \n* This function should not be applied directly to top-level windows, but rather to child windows.\n* Some classes of UI elements, particularly buttons, do not take kindly to being composited, and may crash REAPER.\n* On WindowsOS, GDI blitting does not perform alpha multiplication of the source bitmap. For proper color rendering, a separate pre-multiplication step is therefore required, using either LICE_Blit or LICE_ProcessRect.\nReturns:\n1 if successful, otherwise -1 = windowHWND is not a window, -3 = Could not obtain the original window process, -4 = sysBitmap is not a LICE bitmap, -5 = sysBitmap is not a system bitmap, -6 = Could not obtain the window HDC, -7 = Error when subclassing to new window process.\n\n"
	},

	"JS_Composite_Delay lua": {
	"prefix": "reaper.JS_Composite_Delay",
	"scope": "lua",
	"body": "retval, prevMinTime, prevMaxTime, prevBitmaps = reaper.JS_Composite_Delay(${1:windowHWND}, ${2:minTime}, ${3:maxTime}, ${4:numBitmapsWhenMax})$0",
	"description": "On WindowsOS, flickering of composited images can be improved considerably by slowing the refresh rate of the window.  The optimal refresh rate may depend on the number of composited bitmaps.\nminTime is the minimum refresh delay, in seconds, when only one bitmap is composited onto the window.  The delay time will increase linearly with the number of bitmaps, up to a maximum of maxTime when numBitmapsWhenMax is reached.\nIf both minTime and maxTime are 0, all delay settings for the window are cleared.\nReturns:\n* retval = 1 if successful, 0 if arguments are invalid (i.e. if maxTime < minTime, or maxBitmaps < 1).\n* If delay times have not previously been set for this window, prev time values are 0.\n\n"
	},

	"JS_Composite_ListBitmaps lua": {
	"prefix": "reaper.JS_Composite_ListBitmaps",
	"scope": "lua",
	"body": "retval, list = reaper.JS_Composite_ListBitmaps(${1:windowHWND})$0",
	"description": "Returns all bitmaps composited to the given window.\nThe list is formatted as a comma-separated string of hexadecimal values, each representing a LICE_IBitmap* pointer.\nretval is the number of linked bitmaps found, or negative if an error occured.\n\n"
	},

	"JS_Composite_Unlink lua": {
	"prefix": "reaper.JS_Composite_Unlink",
	"scope": "lua",
	"body": "reaper.JS_Composite_Unlink(${1:windowHWND}, ${2:bitmap}, ${3:autoUpdate})$0",
	"description": "Unlinks the window and bitmap.\n* autoUpdate is an optional parameter. If unlinking a single bitmap and autoUpdate is true, the function will automatically re-draw the window to remove the blitted image.\nIf no bitmap is specified, all bitmaps composited to the window will be unlinked -- even those by other scripts.\n\n"
	},

	"JS_Dialog_BrowseForFolder lua": {
	"prefix": "reaper.JS_Dialog_BrowseForFolder",
	"scope": "lua",
	"body": "retval, folder = reaper.JS_Dialog_BrowseForFolder(${1:caption}, ${2:initialFolder})$0",
	"description": "retval is 1 if a file was selected, 0 if the user cancelled the dialog, and -1 if an error occurred.\n\n"
	},

	"JS_Dialog_BrowseForOpenFiles lua": {
	"prefix": "reaper.JS_Dialog_BrowseForOpenFiles",
	"scope": "lua",
	"body": "retval, fileNames = reaper.JS_Dialog_BrowseForOpenFiles(${1:windowTitle}, ${2:initialFolder}, ${3:initialFile}, ${4:extensionList}, ${5:allowMultiple})$0",
	"description": "If allowMultiple is true, multiple files may be selected. The returned string is \0-separated, with the first substring containing the folder path and subsequent substrings containing the file names.\n* On macOS, the first substring may be empty, and each file name will then contain its entire path.\n* This function only allows selection of existing files, and does not allow creation of new files.\nextensionList is a string containing pairs of \0-terminated substrings. The last substring must be terminated by two \0 characters. Each pair defines one filter pattern:\n* The first substring in each pair describes the filter in user-readable form (for example, 'Lua script files (*.lua)') and will be displayed in the dialog box.\n* The second substring specifies the filter that the operating system must use to search for the files (for example, '*.txt'; the wildcard should not be omitted). To specify multiple extensions for a single display string, use a semicolon to separate the patterns (for example, '*.lua;*.eel').\nAn example of an extensionList string:\n'ReaScript files\0*.lua;*.eel\0Lua files (.lua)\0*.lua\0EEL files (.eel)\0*.eel\0\0'.\nOn macOS, file dialogs do not accept empty extensionLists, nor wildcard extensions (such as 'All files\0*.*\0\0'), so each acceptable extension must be listed explicitly. On Linux and Windows, wildcard extensions are acceptable, and if the extensionList string is empty, the dialog will display a default 'All files (*.*)' filter.\nretval is 1 if one or more files were selected, 0 if the user cancelled the dialog, or negative if an error occurred.\nDisplaying \0-separated strings:\n* REAPER's IDE and ShowConsoleMsg only display strings up to the first \0 byte. If multiple files were selected, only the first substring containing the path will be displayed. This is not a problem for Lua or EEL, which can access the full string beyond the first \0 byte as usual.\n\n"
	},

	"JS_Dialog_BrowseForSaveFile lua": {
	"prefix": "reaper.JS_Dialog_BrowseForSaveFile",
	"scope": "lua",
	"body": "retval, fileName = reaper.JS_Dialog_BrowseForSaveFile(${1:windowTitle}, ${2:initialFolder}, ${3:initialFile}, ${4:extensionList})$0",
	"description": "retval is 1 if a file was selected, 0 if the user cancelled the dialog, or negative if an error occurred.\nextensionList is as described for JS_Dialog_BrowseForOpenFiles.\n\n"
	},

	"JS_Double lua": {
	"prefix": "reaper.JS_Double",
	"scope": "lua",
	"body": "double = reaper.JS_Double(${1:pointer}, ${2:offset})$0",
	"description": "Returns the 8-byte floating point value at address[offset]. Offset is added as steps of 8 bytes each.\n\n"
	},

	"JS_File_Stat lua": {
	"prefix": "reaper.JS_File_Stat",
	"scope": "lua",
	"body": "retval, size, accessedTime, modifiedTime, cTime, deviceID, deviceSpecialID, inode, mode, numLinks, ownerUserID, ownerGroupID = reaper.JS_File_Stat(${1:filePath})$0",
	"description": "Returns information about a file.\ncTime is not implemented on all systems. If it does return a time, the value may differ depending on the OS: on WindowsOS, it may refer to the time that the file was either created or copied, whereas on Linux and macOS, it may refer to the time of last status change.\nretval is 0 if successful, negative if not.\n\n"
	},

	"JS_GDI_Blit lua": {
	"prefix": "reaper.JS_GDI_Blit",
	"scope": "lua",
	"body": "reaper.JS_GDI_Blit(${1:destHDC}, ${2:dstx}, ${3:dsty}, ${4:sourceHDC}, ${5:srcx}, ${6:srxy}, ${7:width}, ${8:height}, ${9:optional_mode})$0",
	"description": "Blits between two device contexts, which may include LICE 'system bitmaps'.\nmode: Optional parameter. 'SRCCOPY' by default, or specify 'ALPHA' to enable per-pixel alpha blending.\nWARNING: On WindowsOS, GDI_Blit does not perform alpha multiplication of the source bitmap. For proper color rendering, a separate pre-multiplication step is therefore required, using either LICE_Blit or LICE_ProcessRect.\n\n"
	},

	"JS_GDI_CreateFillBrush lua": {
	"prefix": "reaper.JS_GDI_CreateFillBrush",
	"scope": "lua",
	"body": "reaper.JS_GDI_CreateFillBrush(${1:color})$0",
	"description": ""
	},

	"JS_GDI_CreateFont lua": {
	"prefix": "reaper.JS_GDI_CreateFont",
	"scope": "lua",
	"body": "reaper.JS_GDI_CreateFont(${1:height}, ${2:weight}, ${3:angle}, ${4:italic}, ${5:underline}, ${6:strike}, ${7:fontName})$0",
	"description": "Parameters:\n* weight: 0 - 1000, with 0 = auto, 400 = normal and 700 = bold.\n* angle: the angle, in tenths of degrees, between the text and the x-axis of the device.\n* fontName: If empty string '', uses first font that matches the other specified attributes.\nNote: Text color must be set separately.\n\n"
	},

	"JS_GDI_CreatePen lua": {
	"prefix": "reaper.JS_GDI_CreatePen",
	"scope": "lua",
	"body": "reaper.JS_GDI_CreatePen(${1:width}, ${2:color})$0",
	"description": ""
	},

	"JS_GDI_DeleteObject lua": {
	"prefix": "reaper.JS_GDI_DeleteObject",
	"scope": "lua",
	"body": "reaper.JS_GDI_DeleteObject(${1:GDIObject})$0",
	"description": ""
	},

	"JS_GDI_DrawText lua": {
	"prefix": "reaper.JS_GDI_DrawText",
	"scope": "lua",
	"body": "reaper.JS_GDI_DrawText(${1:deviceHDC}, ${2:text}, ${3:len}, ${4:left}, ${5:top}, ${6:right}, ${7:bottom}, ${8:align})$0",
	"description": "Parameters:\n* align: Combination of: 'TOP', 'VCENTER', 'LEFT', 'HCENTER', 'RIGHT', 'BOTTOM', 'WORDBREAK', 'SINGLELINE', 'NOCLIP', 'CALCRECT', 'NOPREFIX' or 'ELLIPSIS'\n\n"
	},

	"JS_GDI_FillEllipse lua": {
	"prefix": "reaper.JS_GDI_FillEllipse",
	"scope": "lua",
	"body": "reaper.JS_GDI_FillEllipse(${1:deviceHDC}, ${2:left}, ${3:top}, ${4:right}, ${5:bottom})$0",
	"description": ""
	},

	"JS_GDI_FillPolygon lua": {
	"prefix": "reaper.JS_GDI_FillPolygon",
	"scope": "lua",
	"body": "reaper.JS_GDI_FillPolygon(${1:deviceHDC}, ${2:packedX}, ${3:packedY}, ${4:numPoints})$0",
	"description": "packedX and packedY are strings of points, each packed as '<i4'.\n\n"
	},

	"JS_GDI_FillRect lua": {
	"prefix": "reaper.JS_GDI_FillRect",
	"scope": "lua",
	"body": "reaper.JS_GDI_FillRect(${1:deviceHDC}, ${2:left}, ${3:top}, ${4:right}, ${5:bottom})$0",
	"description": ""
	},

	"JS_GDI_FillRoundRect lua": {
	"prefix": "reaper.JS_GDI_FillRoundRect",
	"scope": "lua",
	"body": "reaper.JS_GDI_FillRoundRect(${1:deviceHDC}, ${2:left}, ${3:top}, ${4:right}, ${5:bottom}, ${6:xrnd}, ${7:yrnd})$0",
	"description": ""
	},

	"JS_GDI_GetClientDC lua": {
	"prefix": "reaper.JS_GDI_GetClientDC",
	"scope": "lua",
	"body": "reaper.JS_GDI_GetClientDC(${1:windowHWND})$0",
	"description": "Returns the device context for the client area of the specified window.\n\n"
	},

	"JS_GDI_GetScreenDC lua": {
	"prefix": "reaper.JS_GDI_GetScreenDC",
	"scope": "lua",
	"body": "reaper.JS_GDI_GetScreenDC()\n\n",
	"description": "Returns a device context for the entire screen.\nWARNING: Only available on Windows, not Linux or macOS.\n\n"
	},

	"JS_GDI_GetSysColor lua": {
	"prefix": "reaper.JS_GDI_GetSysColor",
	"scope": "lua",
	"body": "reaper.JS_GDI_GetSysColor(${1:GUIElement})$0",
	"description": ""
	},

	"JS_GDI_GetTextColor lua": {
	"prefix": "reaper.JS_GDI_GetTextColor",
	"scope": "lua",
	"body": "reaper.JS_GDI_GetTextColor(${1:deviceHDC})$0",
	"description": ""
	},

	"JS_GDI_GetWindowDC lua": {
	"prefix": "reaper.JS_GDI_GetWindowDC",
	"scope": "lua",
	"body": "reaper.JS_GDI_GetWindowDC(${1:windowHWND})$0",
	"description": "Returns the device context for the entire window, including title bar and frame.\n\n"
	},

	"JS_GDI_Line lua": {
	"prefix": "reaper.JS_GDI_Line",
	"scope": "lua",
	"body": "reaper.JS_GDI_Line(${1:deviceHDC}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2})$0",
	"description": ""
	},

	"JS_GDI_Polyline lua": {
	"prefix": "reaper.JS_GDI_Polyline",
	"scope": "lua",
	"body": "reaper.JS_GDI_Polyline(${1:deviceHDC}, ${2:packedX}, ${3:packedY}, ${4:numPoints})$0",
	"description": "packedX and packedY are strings of points, each packed as '<i4'.\n\n"
	},

	"JS_GDI_ReleaseDC lua": {
	"prefix": "reaper.JS_GDI_ReleaseDC",
	"scope": "lua",
	"body": "reaper.JS_GDI_ReleaseDC(${1:deviceHDC}, ${2:identifier_windowHWND})$0",
	"description": "To release a window HDC, both arguments must be supplied: the HWND as well as the HDC.  To release a screen DC, only the HDC needs to be supplied.  \nFor compatibility with previous versions, the HWND and HDC can be supplied in any order.\nNOTE: Any GDI HDC should be released immediately after drawing, and deferred scripts should get and release new DCs in each cycle.\n\n"
	},

	"JS_GDI_SelectObject lua": {
	"prefix": "reaper.JS_GDI_SelectObject",
	"scope": "lua",
	"body": "reaper.JS_GDI_SelectObject(${1:deviceHDC}, ${2:GDIObject})$0",
	"description": "Activates a font, pen, or fill brush for subsequent drawing in the specified device context.\n\n"
	},

	"JS_GDI_SetPixel lua": {
	"prefix": "reaper.JS_GDI_SetPixel",
	"scope": "lua",
	"body": "reaper.JS_GDI_SetPixel(${1:deviceHDC}, ${2:x}, ${3:y}, ${4:color})$0",
	"description": ""
	},

	"JS_GDI_SetTextBkColor lua": {
	"prefix": "reaper.JS_GDI_SetTextBkColor",
	"scope": "lua",
	"body": "reaper.JS_GDI_SetTextBkColor(${1:deviceHDC}, ${2:color})$0",
	"description": ""
	},

	"JS_GDI_SetTextBkMode lua": {
	"prefix": "reaper.JS_GDI_SetTextBkMode",
	"scope": "lua",
	"body": "reaper.JS_GDI_SetTextBkMode(${1:deviceHDC}, ${2:mode})$0",
	"description": ""
	},

	"JS_GDI_SetTextColor lua": {
	"prefix": "reaper.JS_GDI_SetTextColor",
	"scope": "lua",
	"body": "reaper.JS_GDI_SetTextColor(${1:deviceHDC}, ${2:color})$0",
	"description": ""
	},

	"JS_GDI_StretchBlit lua": {
	"prefix": "reaper.JS_GDI_StretchBlit",
	"scope": "lua",
	"body": "reaper.JS_GDI_StretchBlit(${1:destHDC}, ${2:dstx}, ${3:dsty}, ${4:dstw}, ${5:dsth}, ${6:sourceHDC}, ${7:srcx}, ${8:srxy}, ${9:srcw}, ${10:srch}, ${11:optional_mode})$0",
	"description": "Blits between two device contexts, which may include LICE 'system bitmaps'.\nmodeOptional: 'SRCCOPY' by default, or specify 'ALPHA' to enable per-pixel alpha blending.\nWARNING: On WindowsOS, GDI_Blit does not perform alpha multiplication of the source bitmap. For proper color rendering, a separate pre-multiplication step is therefore required, using either LICE_Blit or LICE_ProcessRect.\n\n"
	},

	"JS_Header_GetItemCount lua": {
	"prefix": "reaper.JS_Header_GetItemCount",
	"scope": "lua",
	"body": "reaper.JS_Header_GetItemCount(${1:headerHWND})$0",
	"description": ""
	},

	"JS_Int lua": {
	"prefix": "reaper.JS_Int",
	"scope": "lua",
	"body": "int = reaper.JS_Int(${1:pointer}, ${2:offset})$0",
	"description": "Returns the 4-byte signed integer at address[offset]. Offset is added as steps of 4 bytes each.\n\n"
	},

	"JS_LICE_AlterBitmapHSV lua": {
	"prefix": "reaper.JS_LICE_AlterBitmapHSV",
	"scope": "lua",
	"body": "reaper.JS_LICE_AlterBitmapHSV(${1:bitmap}, ${2:hue}, ${3:saturation}, ${4:value})$0",
	"description": "Hue is rolled over, saturation and value are clamped, all 0..1. (Alpha remains unchanged.)\n\n"
	},

	"JS_LICE_AlterRectHSV lua": {
	"prefix": "reaper.JS_LICE_AlterRectHSV",
	"scope": "lua",
	"body": "reaper.JS_LICE_AlterRectHSV(${1:bitmap}, ${2:x}, ${3:y}, ${4:w}, ${5:h}, ${6:hue}, ${7:saturation}, ${8:value})$0",
	"description": "Hue is rolled over, saturation and value are clamped, all 0..1. (Alpha remains unchanged.)\n\n"
	},

	"JS_LICE_Arc lua": {
	"prefix": "reaper.JS_LICE_Arc",
	"scope": "lua",
	"body": "reaper.JS_LICE_Arc(${1:bitmap}, ${2:cx}, ${3:cy}, ${4:r}, ${5:minAngle}, ${6:maxAngle}, ${7:color}, ${8:alpha}, ${9:mode}, ${10:antialias})$0",
	"description": "LICE modes: 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA'.\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).\n\n"
	},

	"JS_LICE_ArrayAllBitmaps lua": {
	"prefix": "reaper.JS_LICE_ArrayAllBitmaps",
	"scope": "lua",
	"body": "reaper.JS_LICE_ArrayAllBitmaps(${1:reaperarray})$0",
	"description": ""
	},

	"JS_LICE_Bezier lua": {
	"prefix": "reaper.JS_LICE_Bezier",
	"scope": "lua",
	"body": "reaper.JS_LICE_Bezier(${1:bitmap}, ${2:xstart}, ${3:ystart}, ${4:xctl1}, ${5:yctl1}, ${6:xctl2}, ${7:yctl2}, ${8:xend}, ${9:yend}, ${10:tol}, ${11:color}, ${12:alpha}, ${13:mode}, ${14:antialias})$0",
	"description": "LICE modes: 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA' to enable per-pixel alpha blending.\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).\n\n"
	},

	"JS_LICE_Blit lua": {
	"prefix": "reaper.JS_LICE_Blit",
	"scope": "lua",
	"body": "reaper.JS_LICE_Blit(${1:destBitmap}, ${2:dstx}, ${3:dsty}, ${4:sourceBitmap}, ${5:srcx}, ${6:srcy}, ${7:width}, ${8:height}, ${9:alpha}, ${10:mode})$0",
	"description": "Standard LICE modes: 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA' to enable per-pixel alpha blending.\nIn addition to the standard LICE modes, LICE_Blit also offers:\n* 'CHANCOPY_XTOY', with X and Y any of the four channels, A, R, G or B. (CHANCOPY_ATOA is similar to MASK mode.)\n* 'BLUR'\n* 'ALPHAMUL', which overwrites the destination with a per-pixel alpha-multiplied copy of the source. (Similar to first clearing the destination with 0x00000000 and then blitting with 'COPY,ALPHA'.)\n\n"
	},

	"JS_LICE_Circle lua": {
	"prefix": "reaper.JS_LICE_Circle",
	"scope": "lua",
	"body": "reaper.JS_LICE_Circle(${1:bitmap}, ${2:cx}, ${3:cy}, ${4:r}, ${5:color}, ${6:alpha}, ${7:mode}, ${8:antialias})$0",
	"description": "LICE modes: 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA'.\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).\n\n"
	},

	"JS_LICE_Clear lua": {
	"prefix": "reaper.JS_LICE_Clear",
	"scope": "lua",
	"body": "reaper.JS_LICE_Clear(${1:bitmap}, ${2:color})$0",
	"description": ""
	},

	"JS_LICE_CreateBitmap lua": {
	"prefix": "reaper.JS_LICE_CreateBitmap",
	"scope": "lua",
	"body": "reaper.JS_LICE_CreateBitmap(${1:isSysBitmap}, ${2:width}, ${3:height})$0",
	"description": ""
	},

	"JS_LICE_CreateFont lua": {
	"prefix": "reaper.JS_LICE_CreateFont",
	"scope": "lua",
	"body": "reaper.JS_LICE_CreateFont()\n\n",
	"description": ""
	},

	"JS_LICE_DestroyBitmap lua": {
	"prefix": "reaper.JS_LICE_DestroyBitmap",
	"scope": "lua",
	"body": "reaper.JS_LICE_DestroyBitmap(${1:bitmap})$0",
	"description": "Deletes the bitmap, and also unlinks bitmap from any composited window.\n\n"
	},

	"JS_LICE_DestroyFont lua": {
	"prefix": "reaper.JS_LICE_DestroyFont",
	"scope": "lua",
	"body": "reaper.JS_LICE_DestroyFont(${1:LICEFont})$0",
	"description": ""
	},

	"JS_LICE_DrawChar lua": {
	"prefix": "reaper.JS_LICE_DrawChar",
	"scope": "lua",
	"body": "reaper.JS_LICE_DrawChar(${1:bitmap}, ${2:x}, ${3:y}, ${4:c}, ${5:color}, ${6:alpha}, ${7:mode})$0",
	"description": ""
	},

	"JS_LICE_DrawText lua": {
	"prefix": "reaper.JS_LICE_DrawText",
	"scope": "lua",
	"body": "reaper.JS_LICE_DrawText(${1:bitmap}, ${2:LICEFont}, ${3:text}, ${4:textLen}, ${5:x1}, ${6:y1}, ${7:x2}, ${8:y2})$0",
	"description": ""
	},

	"JS_LICE_FillCircle lua": {
	"prefix": "reaper.JS_LICE_FillCircle",
	"scope": "lua",
	"body": "reaper.JS_LICE_FillCircle(${1:bitmap}, ${2:cx}, ${3:cy}, ${4:r}, ${5:color}, ${6:alpha}, ${7:mode}, ${8:antialias})$0",
	"description": "LICE modes: 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA'.\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).\n\n"
	},

	"JS_LICE_FillPolygon lua": {
	"prefix": "reaper.JS_LICE_FillPolygon",
	"scope": "lua",
	"body": "reaper.JS_LICE_FillPolygon(${1:bitmap}, ${2:packedX}, ${3:packedY}, ${4:numPoints}, ${5:color}, ${6:alpha}, ${7:mode})$0",
	"description": "packedX and packedY are two strings of coordinates, each packed as '<i4'.\nLICE modes : 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA' to enable per-pixel alpha blending.\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).\n\n"
	},

	"JS_LICE_FillRect lua": {
	"prefix": "reaper.JS_LICE_FillRect",
	"scope": "lua",
	"body": "reaper.JS_LICE_FillRect(${1:bitmap}, ${2:x}, ${3:y}, ${4:w}, ${5:h}, ${6:color}, ${7:alpha}, ${8:mode})$0",
	"description": "LICE modes: 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA'.\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).\n\n"
	},

	"JS_LICE_FillTriangle lua": {
	"prefix": "reaper.JS_LICE_FillTriangle",
	"scope": "lua",
	"body": "reaper.JS_LICE_FillTriangle(${1:bitmap}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2}, ${6:x3}, ${7:y3}, ${8:color}, ${9:alpha}, ${10:mode})$0",
	"description": "LICE modes: 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA'.\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).\n\n"
	},

	"JS_LICE_GetDC lua": {
	"prefix": "reaper.JS_LICE_GetDC",
	"scope": "lua",
	"body": "reaper.JS_LICE_GetDC(${1:bitmap})$0",
	"description": ""
	},

	"JS_LICE_GetHeight lua": {
	"prefix": "reaper.JS_LICE_GetHeight",
	"scope": "lua",
	"body": "reaper.JS_LICE_GetHeight(${1:bitmap})$0",
	"description": ""
	},

	"JS_LICE_GetPixel lua": {
	"prefix": "reaper.JS_LICE_GetPixel",
	"scope": "lua",
	"body": "color = reaper.JS_LICE_GetPixel(${1:bitmap}, ${2:x}, ${3:y})$0",
	"description": "Returns the color of the specified pixel.\n\n"
	},

	"JS_LICE_GetWidth lua": {
	"prefix": "reaper.JS_LICE_GetWidth",
	"scope": "lua",
	"body": "reaper.JS_LICE_GetWidth(${1:bitmap})$0",
	"description": ""
	},

	"JS_LICE_GradRect lua": {
	"prefix": "reaper.JS_LICE_GradRect",
	"scope": "lua",
	"body": "reaper.JS_LICE_GradRect(${1:bitmap}, ${2:dstx}, ${3:dsty}, ${4:dstw}, ${5:dsth}, ${6:ir}, ${7:ig}, ${8:ib}, ${9:ia}, ${10:drdx}, ${11:dgdx}, ${12:dbdx}, ${13:dadx}, ${14:drdy}, ${15:dgdy}, ${16:dbdy}, ${17:dady}, ${18:mode})$0",
	"description": ""
	},

	"JS_LICE_IsFlipped lua": {
	"prefix": "reaper.JS_LICE_IsFlipped",
	"scope": "lua",
	"body": "reaper.JS_LICE_IsFlipped(${1:bitmap})$0",
	"description": ""
	},

	"JS_LICE_Line lua": {
	"prefix": "reaper.JS_LICE_Line",
	"scope": "lua",
	"body": "reaper.JS_LICE_Line(${1:bitmap}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2}, ${6:color}, ${7:alpha}, ${8:mode}, ${9:antialias})$0",
	"description": "LICE modes: 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA'.\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).\n\n"
	},

	"JS_LICE_ListAllBitmaps lua": {
	"prefix": "reaper.JS_LICE_ListAllBitmaps",
	"scope": "lua",
	"body": "retval, list = reaper.JS_LICE_ListAllBitmaps()\n\n",
	"description": ""
	},

	"JS_LICE_LoadJPG lua": {
	"prefix": "reaper.JS_LICE_LoadJPG",
	"scope": "lua",
	"body": "reaper.JS_LICE_LoadJPG(${1:filename})$0",
	"description": "Returns a system LICE bitmap containing the JPEG.\n\n"
	},

	"JS_LICE_LoadJPGFromMemory lua": {
	"prefix": "reaper.JS_LICE_LoadJPGFromMemory",
	"scope": "lua",
	"body": "reaper.JS_LICE_LoadJPGFromMemory(${1:buffer}, ${2:bufsize})$0",
	"description": "Returns a system LICE bitmap containing the JPEG.\n\n"
	},

	"JS_LICE_LoadPNG lua": {
	"prefix": "reaper.JS_LICE_LoadPNG",
	"scope": "lua",
	"body": "reaper.JS_LICE_LoadPNG(${1:filename})$0",
	"description": "Returns a system LICE bitmap containing the PNG.\n\n"
	},

	"JS_LICE_LoadPNGFromMemory lua": {
	"prefix": "reaper.JS_LICE_LoadPNGFromMemory",
	"scope": "lua",
	"body": "reaper.JS_LICE_LoadPNGFromMemory(${1:buffer}, ${2:bufsize})$0",
	"description": "Returns a system LICE bitmap containing the PNG.\n\n"
	},

	"JS_LICE_MeasureText lua": {
	"prefix": "reaper.JS_LICE_MeasureText",
	"scope": "lua",
	"body": "width, Height = reaper.JS_LICE_MeasureText(${1:text})$0",
	"description": ""
	},

	"JS_LICE_ProcessRect lua": {
	"prefix": "reaper.JS_LICE_ProcessRect",
	"scope": "lua",
	"body": "reaper.JS_LICE_ProcessRect(${1:bitmap}, ${2:x}, ${3:y}, ${4:w}, ${5:h}, ${6:mode}, ${7:operand})$0",
	"description": "Applies bitwise operations to each pixel in the target rectangle.\noperand: a color in 0xAARRGGBB format.\nmodes:\n* 'XOR', 'OR' or 'AND'.\n* 'SET_XYZ', with XYZ any combination of A, R, G, and B: copies the specified channels from operand to the bitmap. (Useful for setting the alpha values of a bitmap.)\n* 'ALPHAMUL': Performs alpha pre-multiplication on each pixel in the rect. operand is ignored in this mode. (On WindowsOS, GDI_Blit does not perform alpha multiplication on the fly, and a separate alpha pre-multiplication step is therefore required.)\nNOTE:\nLICE_Blit and LICE_ScaledBlit are also useful for processing bitmap colors. For example, to multiply all channel values by 1.5:\nreaper.JS_LICE_Blit(bitmap, x, y, bitmap, x, y, w, h, 0.5, 'ADD').\n\n"
	},

	"JS_LICE_PutPixel lua": {
	"prefix": "reaper.JS_LICE_PutPixel",
	"scope": "lua",
	"body": "reaper.JS_LICE_PutPixel(${1:bitmap}, ${2:x}, ${3:y}, ${4:color}, ${5:alpha}, ${6:mode})$0",
	"description": "LICE modes: 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA'.\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).\n\n"
	},

	"JS_LICE_Resize lua": {
	"prefix": "reaper.JS_LICE_Resize",
	"scope": "lua",
	"body": "reaper.JS_LICE_Resize(${1:bitmap}, ${2:width}, ${3:height})$0",
	"description": ""
	},

	"JS_LICE_RotatedBlit lua": {
	"prefix": "reaper.JS_LICE_RotatedBlit",
	"scope": "lua",
	"body": "reaper.JS_LICE_RotatedBlit(${1:destBitmap}, ${2:dstx}, ${3:dsty}, ${4:dstw}, ${5:dsth}, ${6:sourceBitmap}, ${7:srcx}, ${8:srcy}, ${9:srcw}, ${10:srch}, ${11:angle}, ${12:rotxcent}, ${13:rotycent}, ${14:cliptosourcerect}, ${15:alpha}, ${16:mode})$0",
	"description": "LICE modes: 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA' to enable per-pixel alpha blending.\n\n"
	},

	"JS_LICE_RoundRect lua": {
	"prefix": "reaper.JS_LICE_RoundRect",
	"scope": "lua",
	"body": "reaper.JS_LICE_RoundRect(${1:bitmap}, ${2:x}, ${3:y}, ${4:w}, ${5:h}, ${6:cornerradius}, ${7:color}, ${8:alpha}, ${9:mode}, ${10:antialias})$0",
	"description": "LICE modes: 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA'.\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).\n\n"
	},

	"JS_LICE_ScaledBlit lua": {
	"prefix": "reaper.JS_LICE_ScaledBlit",
	"scope": "lua",
	"body": "reaper.JS_LICE_ScaledBlit(${1:destBitmap}, ${2:dstx}, ${3:dsty}, ${4:dstw}, ${5:dsth}, ${6:srcBitmap}, ${7:srcx}, ${8:srcy}, ${9:srcw}, ${10:srch}, ${11:alpha}, ${12:mode})$0",
	"description": "LICE modes: 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA' to enable per-pixel alpha blending.\n\n"
	},

	"JS_LICE_SetAlphaFromColorMask lua": {
	"prefix": "reaper.JS_LICE_SetAlphaFromColorMask",
	"scope": "lua",
	"body": "reaper.JS_LICE_SetAlphaFromColorMask(${1:bitmap}, ${2:colorRGB})$0",
	"description": "Sets all pixels that match the given color's RGB values to fully transparent, and all other pixels to fully opaque.  (All pixels' RGB values remain unchanged.)\n\n"
	},

	"JS_LICE_SetFontBkColor lua": {
	"prefix": "reaper.JS_LICE_SetFontBkColor",
	"scope": "lua",
	"body": "reaper.JS_LICE_SetFontBkColor(${1:LICEFont}, ${2:color})$0",
	"description": "Sets the color of the font background.\n\n"
	},

	"JS_LICE_SetFontColor lua": {
	"prefix": "reaper.JS_LICE_SetFontColor",
	"scope": "lua",
	"body": "reaper.JS_LICE_SetFontColor(${1:LICEFont}, ${2:color})$0",
	"description": ""
	},

	"JS_LICE_SetFontFXColor lua": {
	"prefix": "reaper.JS_LICE_SetFontFXColor",
	"scope": "lua",
	"body": "reaper.JS_LICE_SetFontFXColor(${1:LICEFont}, ${2:color})$0",
	"description": "Sets the color of font FX such as shadow.\n\n"
	},

	"JS_LICE_SetFontFromGDI lua": {
	"prefix": "reaper.JS_LICE_SetFontFromGDI",
	"scope": "lua",
	"body": "reaper.JS_LICE_SetFontFromGDI(${1:LICEFont}, ${2:GDIFont}, ${3:moreFormats})$0",
	"description": "Converts a GDI font into a LICE font.\nThe font can be modified by the following flags, in a comma-separated list:\n'VERTICAL', 'BOTTOMUP', 'NATIVE', 'BLUR', 'INVERT', 'MONO', 'SHADOW' or 'OUTLINE'.\n\n"
	},

	"JS_LICE_WriteJPG lua": {
	"prefix": "reaper.JS_LICE_WriteJPG",
	"scope": "lua",
	"body": "reaper.JS_LICE_WriteJPG(${1:filename}, ${2:bitmap}, ${3:quality}, ${4:forceBaseline})$0",
	"description": "Parameters:\n* quality is an integer in the range 1..100.\n* forceBaseline is an optional boolean parameter that ensures compatibility with all JPEG viewers by preventing too low quality, 'cubist' settings.\n\n"
	},

	"JS_LICE_WritePNG lua": {
	"prefix": "reaper.JS_LICE_WritePNG",
	"scope": "lua",
	"body": "reaper.JS_LICE_WritePNG(${1:filename}, ${2:bitmap}, ${3:wantAlpha})$0",
	"description": ""
	},

	"JS_ListView_EnsureVisible lua": {
	"prefix": "reaper.JS_ListView_EnsureVisible",
	"scope": "lua",
	"body": "reaper.JS_ListView_EnsureVisible(${1:listviewHWND}, ${2:index}, ${3:partialOK})$0",
	"description": ""
	},

	"JS_ListView_EnumSelItems lua": {
	"prefix": "reaper.JS_ListView_EnumSelItems",
	"scope": "lua",
	"body": "reaper.JS_ListView_EnumSelItems(${1:listviewHWND}, ${2:index})$0",
	"description": "Returns the index of the next selected list item with index greater that the specified number. Returns -1 if no selected items left.\n\n"
	},

	"JS_ListView_GetFocusedItem lua": {
	"prefix": "reaper.JS_ListView_GetFocusedItem",
	"scope": "lua",
	"body": "retval, text = reaper.JS_ListView_GetFocusedItem(${1:listviewHWND})$0",
	"description": "Returns the index and text of the focused item, if any.\n\n"
	},

	"JS_ListView_GetHeader lua": {
	"prefix": "reaper.JS_ListView_GetHeader",
	"scope": "lua",
	"body": "reaper.JS_ListView_GetHeader(${1:listviewHWND})$0",
	"description": ""
	},

	"JS_ListView_GetItem lua": {
	"prefix": "reaper.JS_ListView_GetItem",
	"scope": "lua",
	"body": "text, state = reaper.JS_ListView_GetItem(${1:listviewHWND}, ${2:index}, ${3:subItem})$0",
	"description": "Returns the text and state of specified item.\n\n"
	},

	"JS_ListView_GetItemCount lua": {
	"prefix": "reaper.JS_ListView_GetItemCount",
	"scope": "lua",
	"body": "reaper.JS_ListView_GetItemCount(${1:listviewHWND})$0",
	"description": ""
	},

	"JS_ListView_GetItemRect lua": {
	"prefix": "reaper.JS_ListView_GetItemRect",
	"scope": "lua",
	"body": "retval, left, top, right, bottom = reaper.JS_ListView_GetItemRect(${1:listviewHWND}, ${2:index})$0",
	"description": "Returns client coordinates of the item.\n\n"
	},

	"JS_ListView_GetItemState lua": {
	"prefix": "reaper.JS_ListView_GetItemState",
	"scope": "lua",
	"body": "reaper.JS_ListView_GetItemState(${1:listviewHWND}, ${2:index})$0",
	"description": "State is a bitmask:\n1 = focused, 2 = selected. On Windows only, cut-and-paste marked = 4, drag-and-drop highlighted = 8.\nWarning: this function uses the Win32 bitmask values, which differ from the values used by WDL/swell.\n\n"
	},

	"JS_ListView_GetItemText lua": {
	"prefix": "reaper.JS_ListView_GetItemText",
	"scope": "lua",
	"body": "text = reaper.JS_ListView_GetItemText(${1:listviewHWND}, ${2:index}, ${3:subItem})$0",
	"description": ""
	},

	"JS_ListView_GetSelectedCount lua": {
	"prefix": "reaper.JS_ListView_GetSelectedCount",
	"scope": "lua",
	"body": "reaper.JS_ListView_GetSelectedCount(${1:listviewHWND})$0",
	"description": ""
	},

	"JS_ListView_GetTopIndex lua": {
	"prefix": "reaper.JS_ListView_GetTopIndex",
	"scope": "lua",
	"body": "reaper.JS_ListView_GetTopIndex(${1:listviewHWND})$0",
	"description": ""
	},

	"JS_ListView_HitTest lua": {
	"prefix": "reaper.JS_ListView_HitTest",
	"scope": "lua",
	"body": "index, subItem, flags = reaper.JS_ListView_HitTest(${1:listviewHWND}, ${2:clientX}, ${3:clientY})$0",
	"description": ""
	},

	"JS_ListView_ListAllSelItems lua": {
	"prefix": "reaper.JS_ListView_ListAllSelItems",
	"scope": "lua",
	"body": "retval, items = reaper.JS_ListView_ListAllSelItems(${1:listviewHWND})$0",
	"description": "Returns the indices of all selected items as a comma-separated list.\n* retval: Number of selected items found; negative or zero if an error occured.\n\n"
	},

	"JS_ListView_SetItemState lua": {
	"prefix": "reaper.JS_ListView_SetItemState",
	"scope": "lua",
	"body": "reaper.JS_ListView_SetItemState(${1:listviewHWND}, ${2:index}, ${3:state}, ${4:mask})$0",
	"description": "The mask parameter specifies the state bits that must be set, and the state parameter specifies the new values for those bits.\n1 = focused, 2 = selected. On Windows only, cut-and-paste marked = 4, drag-and-drop highlighted = 8.\nWarning: this function uses the Win32 bitmask values, which differ from the values used by WDL/swell.\n\n"
	},

	"JS_ListView_SetItemText lua": {
	"prefix": "reaper.JS_ListView_SetItemText",
	"scope": "lua",
	"body": "reaper.JS_ListView_SetItemText(${1:listviewHWND}, ${2:index}, ${3:subItem}, ${4:text})$0",
	"description": "Currently, this fuction only accepts ASCII text.\n\n"
	},

	"JS_Localize lua": {
	"prefix": "reaper.JS_Localize",
	"scope": "lua",
	"body": "translation = reaper.JS_Localize(${1:USEnglish}, ${2:LangPackSection})$0",
	"description": "Returns the translation of the given US English text, according to the currently loaded Language Pack.\nParameters:\n* LangPackSection: Language Packs are divided into sections such as 'common' or 'DLG_102'.\n* In Lua, by default, text of up to 1024 chars can be returned. To increase (or reduce) the default buffer size, a string and size can be included as optional 3rd and 4th arguments.\nExample: reaper.JS_Localize('Actions', 'common', '', 20)\n\n"
	},

	"JS_MIDIEditor_ArrayAll lua": {
	"prefix": "reaper.JS_MIDIEditor_ArrayAll",
	"scope": "lua",
	"body": "reaper.JS_MIDIEditor_ArrayAll(${1:reaperarray})$0",
	"description": "Finds all open MIDI windows (whether docked or not).\n* retval: The number of MIDI editor windows found; negative if an error occurred.\n* The address of each MIDI editor window is stored in the provided reaper.array. Each address can be converted to a REAPER object (HWND) by the function JS_Window_HandleFromAddress.\n\n"
	},

	"JS_MIDIEditor_ListAll lua": {
	"prefix": "reaper.JS_MIDIEditor_ListAll",
	"scope": "lua",
	"body": "retval, list = reaper.JS_MIDIEditor_ListAll()\n\n",
	"description": "Finds all open MIDI windows (whether docked or not).\n* retval: The number of MIDI editor windows found; negative if an error occurred.\n* list: Comma-separated string of hexadecimal values. Each value is an address that can be converted to a HWND by the function Window_HandleFromAddress.\n\n"
	},

	"JS_Mem_Alloc lua": {
	"prefix": "reaper.JS_Mem_Alloc",
	"scope": "lua",
	"body": "reaper.JS_Mem_Alloc(${1:sizeBytes})$0",
	"description": "Allocates memory for general use by functions that require memory buffers.\n\n"
	},

	"JS_Mem_Free lua": {
	"prefix": "reaper.JS_Mem_Free",
	"scope": "lua",
	"body": "reaper.JS_Mem_Free(${1:mallocPointer})$0",
	"description": "Frees memory that was previously allocated by JS_Mem_Alloc.\n\n"
	},

	"JS_Mem_FromString lua": {
	"prefix": "reaper.JS_Mem_FromString",
	"scope": "lua",
	"body": "reaper.JS_Mem_FromString(${1:mallocPointer}, ${2:offset}, ${3:packedString}, ${4:stringLength})$0",
	"description": "Copies a packed string into a memory buffer.\n\n"
	},

	"JS_Mouse_GetCursor lua": {
	"prefix": "reaper.JS_Mouse_GetCursor",
	"scope": "lua",
	"body": "reaper.JS_Mouse_GetCursor()\n\n",
	"description": "On Windows, retrieves a handle to the current mouse cursor.\nOn Linux and macOS, retrieves a handle to the last cursor set by REAPER or its extensions via SWELL.\n\n"
	},

	"JS_Mouse_GetState lua": {
	"prefix": "reaper.JS_Mouse_GetState",
	"scope": "lua",
	"body": "reaper.JS_Mouse_GetState(${1:flags})$0",
	"description": "Retrieves the states of mouse buttons and modifiers keys.\nParameters:\n* flags, state: The parameter and the return value both use the same format as gfx.mouse_cap. For example, to get the states of the left mouse button and the ctrl key, use flags = 0b00000101.\n\n"
	},

	"JS_Mouse_LoadCursor lua": {
	"prefix": "reaper.JS_Mouse_LoadCursor",
	"scope": "lua",
	"body": "reaper.JS_Mouse_LoadCursor(${1:cursorNumber})$0",
	"description": "Loads a cursor by number.\ncursorNumber: Same as used for gfx.setcursor, and includes some of Windows' predefined cursors (with numbers > 32000; refer to documentation for the Win32 C++ function LoadCursor), and REAPER's own cursors (with numbers < 2000).\nIf successful, returns a handle to the cursor, which can be used in JS_Mouse_SetCursor.\n\n"
	},

	"JS_Mouse_LoadCursorFromFile lua": {
	"prefix": "reaper.JS_Mouse_LoadCursorFromFile",
	"scope": "lua",
	"body": "reaper.JS_Mouse_LoadCursorFromFile(${1:pathAndFileName}, ${2:forceNewLoad})$0",
	"description": "Loads a cursor from a .cur file.\nforceNewLoad is an optional boolean parameter:\n* If omitted or false, and if the cursor file has already been loaded previously during the REAPER session by any script, the file will not be re-loaded, and the existing handle will be returned.\n* If true, the file will be re-loaded and a new handle will be returned.\n* WARNING: Each time that a cursor file is re-loaded, the number of GDI objects increases for the entire duration of the REAPER session.\nIf successful, returns a handle to the cursor, which can be used in JS_Mouse_SetCursor.\n\n"
	},

	"JS_Mouse_SetCursor lua": {
	"prefix": "reaper.JS_Mouse_SetCursor",
	"scope": "lua",
	"body": "reaper.JS_Mouse_SetCursor(${1:cursorHandle})$0",
	"description": "Sets the mouse cursor.  (Only lasts while script is running, and for a single 'defer' cycle.)\n\n"
	},

	"JS_Mouse_SetPosition lua": {
	"prefix": "reaper.JS_Mouse_SetPosition",
	"scope": "lua",
	"body": "reaper.JS_Mouse_SetPosition(${1:x}, ${2:y})$0",
	"description": "Moves the mouse cursor to the specified screen coordinates.\nNOTES:\n* On Windows and Linux, screen coordinates are relative to *upper* left corner of the primary display, and the positive Y-axis points downward.\n* On macOS, screen coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward.\n\n"
	},

	"JS_ReaScriptAPI_Version lua": {
	"prefix": "reaper.JS_ReaScriptAPI_Version",
	"scope": "lua",
	"body": "version = reaper.JS_ReaScriptAPI_Version()\n\n",
	"description": "Returns the version of the js_ReaScriptAPI extension.\n\n"
	},

	"JS_String lua": {
	"prefix": "reaper.JS_String",
	"scope": "lua",
	"body": "retval, buf = reaper.JS_String(${1:pointer}, ${2:offset}, ${3:lengthChars})$0",
	"description": "Returns the memory contents starting at address[offset] as a packed string. Offset is added as steps of 1 byte (char) each.\n\n"
	},

	"JS_VKeys_GetDown lua": {
	"prefix": "reaper.JS_VKeys_GetDown",
	"scope": "lua",
	"body": "state = reaper.JS_VKeys_GetDown(${1:cutoffTime})$0",
	"description": "Returns a 255-byte array that specifies which virtual keys, from 0x01 to 0xFF, have sent KEYDOWN messages since cutoffTime.\nNotes:\n* Mouse buttons and modifier keys are not (currently) reliably detected, and JS_Mouse_GetState can be used instead.\n* Auto-repeated KEYDOWN messages are ignored.\n\n"
	},

	"JS_VKeys_GetState lua": {
	"prefix": "reaper.JS_VKeys_GetState",
	"scope": "lua",
	"body": "state = reaper.JS_VKeys_GetState(${1:cutoffTime})$0",
	"description": "Retrieves the current states (0 or 1) of all virtual keys, from 0x01 to 0xFF, in a 255-byte array.\ncutoffTime: A key is only regarded as down if it sent a KEYDOWN message after the cut-off time, not followed by KEYUP. (This is useful for excluding old KEYDOWN messages that weren't properly followed by KEYUP.) \nIf cutoffTime is positive, is it interpreted as absolute time in similar format as time_precise().\nIf cutoffTime is negative, it is relative to the current time.\nNotes:\n* Mouse buttons and modifier keys are not (currently) reliably detected, and JS_Mouse_GetState can be used instead.\n* Auto-repeated KEYDOWN messages are ignored.\n\n"
	},

	"JS_VKeys_GetUp lua": {
	"prefix": "reaper.JS_VKeys_GetUp",
	"scope": "lua",
	"body": "state = reaper.JS_VKeys_GetUp(${1:cutoffTime})$0",
	"description": "Return a 255-byte array that specifies which virtual keys, from 0x01 to 0xFF, have sent KEYUP messages since cutoffTime.\nNote: Mouse buttons and modifier keys are not (currently) reliably detected, and JS_Mouse_GetState can be used instead.\n\n"
	},

	"JS_VKeys_Intercept lua": {
	"prefix": "reaper.JS_VKeys_Intercept",
	"scope": "lua",
	"body": "reaper.JS_VKeys_Intercept(${1:keyCode}, ${2:intercept})$0",
	"description": "Intercepting (blocking) virtual keys work similar to the native function PreventUIRefresh:  Each key has a (non-negative) intercept state, and the key is passed through as usual if the state equals 0, or blocked if the state is greater than 0.\nkeyCode: The virtual key code of the key, or -1 to change the state of all keys.\nintercept: A script can increase the intercept state by passing +1, or lower the state by passing -1.  Multiple scripts can block the same key, and the intercept state may reach up to 255. If zero is passed, the intercept state is not changed, but the current state is returned.\nReturns: If keyCode refers to a single key, the intercept state of that key is returned.  If keyCode = -1, the state of the key that is most strongly blocked (highest intercept state) is returned.\n\n"
	},

	"JS_WindowMessage_Intercept lua": {
	"prefix": "reaper.JS_WindowMessage_Intercept",
	"scope": "lua",
	"body": "reaper.JS_WindowMessage_Intercept(${1:windowHWND}, ${2:message}, ${3:passThrough})$0",
	"description": "Begins intercepting a window message type to specified window.\nParameters:\n* message: a single message type to be intercepted, either in WM_ or hexadecimal format. For example 'WM_SETCURSOR' or '0x0020'.\n* passThrough: Whether message should be blocked (false) or passed through (true) to the window.\nFor more information on message codes, refer to the Win32 C++ API documentation.\nAll WM_ and CB_ message types listed in swell-types.h should be valid cross-platform, and the function can recognize all of these by name. Other messages can be specified by their hex code.\nReturns:\n* 1: Success.\n* 0: The message type is already being intercepted by another script.\n* -2: message string could not be parsed.\n* -3: Failure getting original window process / window not valid.\n* -6: Could not obtain the window client HDC.\nNotes:\n* Intercepted messages can be polled using JS_WindowMessage_Peek.\n* Intercepted messages can be edited, if necessary, and then forwarded to their original destination using JS_WindowMessage_Post or JS_WindowMessage_Send.\n* To check whether a message type is being blocked or passed through, Peek the message type, or retrieve the entire List of intercepts.\n* Mouse events are typically received by the child window under the mouse, not the parent window.\nKeyboard events are usually *not* received by any individual window. To intercept keyboard events, use the VKey functions.\n\n"
	},

	"JS_WindowMessage_InterceptList lua": {
	"prefix": "reaper.JS_WindowMessage_InterceptList",
	"scope": "lua",
	"body": "reaper.JS_WindowMessage_InterceptList(${1:windowHWND}, ${2:messages})$0",
	"description": "Begins intercepting window messages to specified window.\nParameters:\n* messages: comma-separated string of message types to be intercepted (either in WM_ or hexadecimal format), each with a 'block' or 'passthrough' modifier to specify whether the message should be blocked or passed through to the window. For example 'WM_SETCURSOR:block, 0x0201:passthrough'.\nFor more information on message codes, refer to the Win32 C++ API documentation.\nAll WM_ and CB_ message types listed in swell-types.h should be valid cross-platform, and the function can recognize all of these by name. Other messages can be specified by their hex code.\nReturns:\n* 1: Success.\n* 0: The message type is already being intercepted by another script.\n* -1: windowHWND is not a valid window.\n* -2: message string could not be parsed.\n* -3: Failure getting original window process.\n* -6: COuld not obtain the window client HDC.\nNotes:\n* Intercepted messages can be polled using JS_WindowMessage_Peek.\n* Intercepted messages can be edited, if necessary, and then forwarded to their original destination using JS_WindowMessage_Post or JS_WindowMessage_Send.\n* To check whether a message type is being blocked or passed through, Peek the message type, or retrieve the entire List of intercepts.\n\n"
	},

	"JS_WindowMessage_ListIntercepts lua": {
	"prefix": "reaper.JS_WindowMessage_ListIntercepts",
	"scope": "lua",
	"body": "retval, list = reaper.JS_WindowMessage_ListIntercepts(${1:windowHWND})$0",
	"description": "Returns a string with a list of all message types currently being intercepted for the specified window.\n\n"
	},

	"JS_WindowMessage_PassThrough lua": {
	"prefix": "reaper.JS_WindowMessage_PassThrough",
	"scope": "lua",
	"body": "reaper.JS_WindowMessage_PassThrough(${1:windowHWND}, ${2:message}, ${3:passThrough})$0",
	"description": "Changes the passthrough setting of a message type that is already being intercepted.\nReturns 1 if successful, 0 if the message type is not yet being intercepted, or -2 if the argument could not be parsed.\n\n"
	},

	"JS_WindowMessage_Peek lua": {
	"prefix": "reaper.JS_WindowMessage_Peek",
	"scope": "lua",
	"body": "retval, passedThrough, time, wParamLow, wParamHigh, lParamLow, lParamHigh = reaper.JS_WindowMessage_Peek(${1:windowHWND}, ${2:message})$0",
	"description": "Polls the state of an intercepted message.\nParameters:\n* message: String containing a single message name, such as 'WM_SETCURSOR', or in hexadecimal format, '0x0020'.\n(For a list of WM_ and CB_ message types that are valid cross-platform, refer to swell-types.h. Only these will be recognized by WM_ or CB_ name.)\nReturns:\n* A retval of false indicates that the message type is not being intercepted in the specified window.\n* All messages are timestamped. A time of 0 indicates that no message if this type has been intercepted yet.\n* For more information about wParam and lParam for different message types, refer to Win32 C++ documentation.\n* For example, in the case of mousewheel, returns mousewheel delta, modifier keys, x position and y position.\n* wParamHigh, lParamLow and lParamHigh are signed, whereas wParamLow is unsigned.\n\n"
	},

	"JS_WindowMessage_Post lua": {
	"prefix": "reaper.JS_WindowMessage_Post",
	"scope": "lua",
	"body": "reaper.JS_WindowMessage_Post(${1:windowHWND}, ${2:message}, ${3:wParam}, ${4:wParamHighWord}, ${5:lParam}, ${6:lParamHighWord})$0",
	"description": "If the specified window and message type are not currently being intercepted by a script, this function will post the message in the message queue of the specified window, and return without waiting.\nIf the window and message type are currently being intercepted, the message will be sent directly to the original window process, similar to WindowMessage_Send, thereby skipping any intercepts.\nParameters:\n* message: String containing a single message name, such as 'WM_SETCURSOR', or in hexadecimal format, '0x0020'.\n(For a list of WM_ and CB_ message types that are valid cross-platform, refer to swell-types.h. Only these will be recognized by WM_ or CB_ name.)\n* wParam, wParamHigh, lParam and lParamHigh: Low and high 16-bit WORDs of the WPARAM and LPARAM parameters.\n(Most window messages encode separate information into the two WORDs. However, for those rare cases in which the entire WPARAM and LPARAM must be used to post a large pointer, the script can store this address in wParam or lParam, and keep wParamHigh and lParamHigh zero.)\nNotes:\n* For more information about parameter values, refer to documentation for the Win32 C++ function PostMessage.\n* Messages should only be sent to windows that were created from the main thread.\n* Useful for simulating mouse clicks and calling mouse modifier actions from scripts.\n\n"
	},

	"JS_WindowMessage_Release lua": {
	"prefix": "reaper.JS_WindowMessage_Release",
	"scope": "lua",
	"body": "reaper.JS_WindowMessage_Release(${1:windowHWND}, ${2:messages})$0",
	"description": "Release intercepts of specified message types.\nParameters:\n* messages: 'WM_SETCURSOR,WM_MOUSEHWHEEL' or '0x0020,0x020E', for example.\n\n"
	},

	"JS_WindowMessage_ReleaseAll lua": {
	"prefix": "reaper.JS_WindowMessage_ReleaseAll",
	"scope": "lua",
	"body": "reaper.JS_WindowMessage_ReleaseAll()\n\n",
	"description": "Release script intercepts of window messages for all windows.\n\n"
	},

	"JS_WindowMessage_ReleaseWindow lua": {
	"prefix": "reaper.JS_WindowMessage_ReleaseWindow",
	"scope": "lua",
	"body": "reaper.JS_WindowMessage_ReleaseWindow(${1:windowHWND})$0",
	"description": "Release script intercepts of window messages for specified window.\n\n"
	},

	"JS_WindowMessage_Send lua": {
	"prefix": "reaper.JS_WindowMessage_Send",
	"scope": "lua",
	"body": "reaper.JS_WindowMessage_Send(${1:windowHWND}, ${2:message}, ${3:wParam}, ${4:wParamHighWord}, ${5:lParam}, ${6:lParamHighWord})$0",
	"description": "Sends a message to the specified window by calling the window process directly, and only returns after the message has been processed. Any intercepts of the message by scripts will be skipped, and the message can therefore not be blocked.\nParameters:\n* message: String containing a single message name, such as 'WM_SETCURSOR', or in hexadecimal format, '0x0020'.\n(For a list of WM_ and CB_ message types that are valid cross-platform, refer to swell-types.h. Only these will be recognized by WM_ or CB_ name.)\n* wParam, wParamHigh, lParam and lParamHigh: Low and high 16-bit WORDs of the WPARAM and LPARAM parameters.\n(Most window messages encode separate information into the two WORDs. However, for those rare cases in which the entire WPARAM and LPARAM must be used to post a large pointer, the script can store this address in wParam or lParam, and keep wParamHigh and lParamHigh zero.)\nNotes:\n* For more information about parameter and return values, refer to documentation for the Win32 C++ function SendMessage.\n* Messages should only be sent to windows that were created from the main thread.\n* Useful for simulating mouse clicks and calling mouse modifier actions from scripts.\n\n"
	},

	"JS_Window_AddressFromHandle lua": {
	"prefix": "reaper.JS_Window_AddressFromHandle",
	"scope": "lua",
	"body": "address = reaper.JS_Window_AddressFromHandle(${1:handle})$0",
	"description": ""
	},

	"JS_Window_ArrayAllChild lua": {
	"prefix": "reaper.JS_Window_ArrayAllChild",
	"scope": "lua",
	"body": "reaper.JS_Window_ArrayAllChild(${1:parentHWND}, ${2:reaperarray})$0",
	"description": "Finds all child windows of the specified parent.\nReturns:\n* retval: The number of windows found; negative if an error occurred.\n* The addresses are stored in the provided reaper.array, and can be converted to REAPER objects (HWNDs) by the function JS_Window_HandleFromAddress.\n\n"
	},

	"JS_Window_ArrayAllTop lua": {
	"prefix": "reaper.JS_Window_ArrayAllTop",
	"scope": "lua",
	"body": "reaper.JS_Window_ArrayAllTop(${1:reaperarray})$0",
	"description": "Finds all top-level windows.\nReturns:\n* retval: The number of windows found; negative if an error occurred.\n* The addresses are stored in the provided reaper.array, and can be converted to REAPER objects (HWNDs) by the function JS_Window_HandleFromAddress.\n\n"
	},

	"JS_Window_ArrayFind lua": {
	"prefix": "reaper.JS_Window_ArrayFind",
	"scope": "lua",
	"body": "reaper.JS_Window_ArrayFind(${1:title}, ${2:exact}, ${3:reaperarray})$0",
	"description": "Finds all windows, whether top-level or child, whose titles match the specified string.\nReturns:\n* retval: The number of windows found; negative if an error occurred.\n* The addresses are stored in the provided reaper.array, and can be converted to REAPER objects (HWNDs) by the function JS_Window_HandleFromAddress.\nParameters:\n* exact: Match entire title exactly, or match substring of title.\n\n"
	},

	"JS_Window_AttachResizeGrip lua": {
	"prefix": "reaper.JS_Window_AttachResizeGrip",
	"scope": "lua",
	"body": "reaper.JS_Window_AttachResizeGrip(${1:windowHWND})$0",
	"description": ""
	},

	"JS_Window_AttachTopmostPin lua": {
	"prefix": "reaper.JS_Window_AttachTopmostPin",
	"scope": "lua",
	"body": "reaper.JS_Window_AttachTopmostPin(${1:windowHWND})$0",
	"description": "Attaches a 'pin on top' button to the window frame. The button should remember its state when closing and re-opening the window.\nWARNING: This function does not yet work on Linux.\n\n"
	},

	"JS_Window_ClientToScreen lua": {
	"prefix": "reaper.JS_Window_ClientToScreen",
	"scope": "lua",
	"body": "x, y = reaper.JS_Window_ClientToScreen(${1:windowHWND}, ${2:x}, ${3:y})$0",
	"description": "Converts the client-area coordinates of a specified point to screen coordinates.\nNOTES:\n* On Windows and Linux, screen coordinates are relative to *upper* left corner of the primary display, and the positive Y-axis points downward.\n* On macOS, screen coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward.\n* On all platforms, client coordinates are relative to the upper left corner of the client area.\n\n"
	},

	"JS_Window_Create lua": {
	"prefix": "reaper.JS_Window_Create",
	"scope": "lua",
	"body": "retval, optional_style = reaper.JS_Window_Create(${1:title}, ${2:className}, ${3:x}, ${4:y}, ${5:w}, ${6:h}, ${7:optional_style}, ${8:ownerHWND})$0",
	"description": "Creates a modeless window with WS_OVERLAPPEDWINDOW style and only rudimentary features. Scripts can paint into the window using GDI or LICE/Composite functions (and JS_Window_InvalidateRect to trigger re-painting).\nstyle: An optional parameter that overrides the default style. The string may include any combination of standard window styles, such as 'POPUP' for a frameless window, or 'CAPTION,SIZEBOX,SYSMENU' for a standard framed window.\nOn Linux and macOS, 'MAXIMIZE' has not yet been implemented, and the remaining styles may appear slightly different from their WindowsOS counterparts.\nclassName: On Windows, only standard ANSI characters are supported.\nownerHWND: Optional parameter, only available on WindowsOS.  Usually either the REAPER main window or another script window, and useful for ensuring that the created window automatically closes when the owner is closed.\nNOTE: On Linux and macOS, the window contents are only updated *between* defer cycles, so the window cannot be animated by for/while loops within a single defer cycle.\n\n"
	},

	"JS_Window_Destroy lua": {
	"prefix": "reaper.JS_Window_Destroy",
	"scope": "lua",
	"body": "reaper.JS_Window_Destroy(${1:windowHWND})$0",
	"description": "Destroys the specified window.\n\n"
	},

	"JS_Window_Enable lua": {
	"prefix": "reaper.JS_Window_Enable",
	"scope": "lua",
	"body": "reaper.JS_Window_Enable(${1:windowHWND}, ${2:enable})$0",
	"description": "Enables or disables mouse and keyboard input to the specified window or control.\n\n"
	},

	"JS_Window_EnableMetal lua": {
	"prefix": "reaper.JS_Window_EnableMetal",
	"scope": "lua",
	"body": "reaper.JS_Window_EnableMetal(${1:windowHWND})$0",
	"description": "On macOS, returns the Metal graphics setting:\n2 = Metal enabled and support GetDC()/ReleaseDC() for drawing (more overhead).\n1 = Metal enabled.\n0 = N/A (Windows and Linux).\n-1 = non-metal async layered mode.\n-2 = non-metal non-async layered mode.\nWARNING: If using mode -1, any BitBlt()/StretchBlt() MUST have the source bitmap persist. If it is resized after Blit it could cause crashes.\n\n"
	},

	"JS_Window_Find lua": {
	"prefix": "reaper.JS_Window_Find",
	"scope": "lua",
	"body": "reaper.JS_Window_Find(${1:title}, ${2:exact})$0",
	"description": "Returns a HWND to a window whose title matches the specified string.\n* Unlike the Win32 function FindWindow, this function searches top-level as well as child windows, so that the target window can be found irrespective of docked state.\n* In addition, the function can optionally match substrings of the title.\n* Matching is not case sensitive.\nParameters:\n* exact: Match entire title, or match substring of title.\n\n"
	},

	"JS_Window_FindChild lua": {
	"prefix": "reaper.JS_Window_FindChild",
	"scope": "lua",
	"body": "reaper.JS_Window_FindChild(${1:parentHWND}, ${2:title}, ${3:exact})$0",
	"description": "Returns a HWND to a child window whose title matches the specified string.\nParameters:\n* exact: Match entire title length, or match substring of title. In both cases, matching is not case sensitive.\n\n"
	},

	"JS_Window_FindChildByID lua": {
	"prefix": "reaper.JS_Window_FindChildByID",
	"scope": "lua",
	"body": "reaper.JS_Window_FindChildByID(${1:parentHWND}, ${2:ID})$0",
	"description": "Similar to the C++ WIN32 function GetDlgItem, this function finds child windows by ID.\n(The ID of a window may be retrieved by JS_Window_GetLongPtr.)\n\n"
	},

	"JS_Window_FindEx lua": {
	"prefix": "reaper.JS_Window_FindEx",
	"scope": "lua",
	"body": "reaper.JS_Window_FindEx(${1:parentHWND}, ${2:childHWND}, ${3:className}, ${4:title})$0",
	"description": "Returns a handle to a child window whose class and title match the specified strings.\nParameters: * childWindow: The function searches child windows, beginning with the window *after* the specified child window. If childHWND is equal to parentHWND, the search begins with the first child window of parentHWND.\n* title: An empty string, '', will match all windows. (Search is not case sensitive.)\n\n"
	},

	"JS_Window_FindTop lua": {
	"prefix": "reaper.JS_Window_FindTop",
	"scope": "lua",
	"body": "reaper.JS_Window_FindTop(${1:title}, ${2:exact})$0",
	"description": "Returns a HWND to a top-level window whose title matches the specified string.\nParameters:\n* exact: Match entire title length, or match substring of title. In both cases, matching is not case sensitive.\n\n"
	},

	"JS_Window_FromPoint lua": {
	"prefix": "reaper.JS_Window_FromPoint",
	"scope": "lua",
	"body": "reaper.JS_Window_FromPoint(${1:x}, ${2:y})$0",
	"description": "Retrieves a HWND to the window that contains the specified point.\nNOTES:\n* On Windows and Linux, screen coordinates are relative to *upper* left corner of the primary display, and the positive Y-axis points downward.\n* On macOS, screen coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward.\n\n"
	},

	"JS_Window_GetClassName lua": {
	"prefix": "reaper.JS_Window_GetClassName",
	"scope": "lua",
	"body": "class = reaper.JS_Window_GetClassName(${1:windowHWND})$0",
	"description": "WARNING: May not be fully implemented on macOS and Linux.\n\n"
	},

	"JS_Window_GetClientRect lua": {
	"prefix": "reaper.JS_Window_GetClientRect",
	"scope": "lua",
	"body": "retval, left, top, right, bottom = reaper.JS_Window_GetClientRect(${1:windowHWND})$0",
	"description": "Retrieves the screen coordinates of the client area rectangle of the specified window.\nNOTES:\n* Unlike the C++ function GetClientRect, this function returns the screen coordinates, not the width and height. To get the client size, use GetClientSize.\n* The pixel at (right, bottom) lies immediately outside the rectangle.\n* On Windows and Linux, screen coordinates are relative to *upper* left corner of the primary display, and the positive Y-axis points downward.\n* On macOS, screen coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward.\n\n"
	},

	"JS_Window_GetClientSize lua": {
	"prefix": "reaper.JS_Window_GetClientSize",
	"scope": "lua",
	"body": "retval, width, height = reaper.JS_Window_GetClientSize(${1:windowHWND})$0",
	"description": ""
	},

	"JS_Window_GetFocus lua": {
	"prefix": "reaper.JS_Window_GetFocus",
	"scope": "lua",
	"body": "reaper.JS_Window_GetFocus()\n\n",
	"description": "Retrieves a HWND to the window that has the keyboard focus, if the window is attached to the calling thread's message queue.\n\n"
	},

	"JS_Window_GetForeground lua": {
	"prefix": "reaper.JS_Window_GetForeground",
	"scope": "lua",
	"body": "reaper.JS_Window_GetForeground()\n\n",
	"description": "Retrieves a HWND to the top-level foreground window (the window with which the user is currently working).\n\n"
	},

	"JS_Window_GetLong lua": {
	"prefix": "reaper.JS_Window_GetLong",
	"scope": "lua",
	"body": "retval = reaper.JS_Window_GetLong(${1:windowHWND}, ${2:info})$0",
	"description": "Similar to JS_Window_GetLongPtr, but returns the information as a number instead of a pointer. \nIn the case of 'DLGPROC' and 'WNDPROC', the return values can be converted to pointers by JS_Window_HandleFromAddress.\nIf the function fails, the return value is 0.\n\n"
	},

	"JS_Window_GetLongPtr lua": {
	"prefix": "reaper.JS_Window_GetLongPtr",
	"scope": "lua",
	"body": "reaper.JS_Window_GetLongPtr(${1:windowHWND}, ${2:info})$0",
	"description": "Returns information about the specified window.\ninfo: 'USERDATA', 'WNDPROC', 'DLGPROC', 'ID', 'EXSTYLE' or 'STYLE'.\nFor documentation about the types of information returned, refer to the Win32 function GetWindowLongPtr.\nThe values returned by 'DLGPROC' and 'WNDPROC' are typically used as-is, as pointers, whereas the others should first be converted to integers.\nIf the function fails, a null pointer is returned.\n\n"
	},

	"JS_Window_GetParent lua": {
	"prefix": "reaper.JS_Window_GetParent",
	"scope": "lua",
	"body": "reaper.JS_Window_GetParent(${1:windowHWND})$0",
	"description": "Retrieves a HWND to the specified window's parent or owner.\nReturns NULL if the window is unowned or if the function otherwise fails.\n\n"
	},

	"JS_Window_GetRect lua": {
	"prefix": "reaper.JS_Window_GetRect",
	"scope": "lua",
	"body": "retval, left, top, right, bottom = reaper.JS_Window_GetRect(${1:windowHWND})$0",
	"description": "Retrieves the screen coordinates of the bounding rectangle of the specified window.\nNOTES:\n* On Windows and Linux, coordinates are relative to *upper* left corner of the primary display, and the positive Y-axis points downward.\n* On macOS, coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward.\n* The pixel at (right, bottom) lies immediately outside the rectangle.\n\n"
	},

	"JS_Window_GetRelated lua": {
	"prefix": "reaper.JS_Window_GetRelated",
	"scope": "lua",
	"body": "reaper.JS_Window_GetRelated(${1:windowHWND}, ${2:relation})$0",
	"description": "Retrieves a handle to a window that has the specified relationship (Z-Order or owner) to the specified window.\nrelation: 'LAST', 'NEXT', 'PREV', 'OWNER' or 'CHILD'.\n(Refer to documentation for Win32 C++ function GetWindow.)\n\n"
	},

	"JS_Window_GetScrollInfo lua": {
	"prefix": "reaper.JS_Window_GetScrollInfo",
	"scope": "lua",
	"body": "retval, position, pageSize, min, max, trackPos = reaper.JS_Window_GetScrollInfo(${1:windowHWND}, ${2:scrollbar})$0",
	"description": "Retrieves the scroll information of a window.\nParameters:\n* windowHWND: The window that contains the scrollbar. This is usually a child window, not a top-level, framed window.\n* scrollbar: 'v' (or 'SB_VERT', or 'VERT') for vertical scroll, 'h' (or 'SB_HORZ' or 'HORZ') for horizontal.\nReturns:\n* Leftmost or topmost visible pixel position, as well as the visible page size, the range minimum and maximum, and scroll box tracking position.\n\n"
	},

	"JS_Window_GetTitle lua": {
	"prefix": "reaper.JS_Window_GetTitle",
	"scope": "lua",
	"body": "title = reaper.JS_Window_GetTitle(${1:windowHWND})$0",
	"description": "Returns the title (if any) of the specified window.\n\n"
	},

	"JS_Window_GetViewportFromRect lua": {
	"prefix": "reaper.JS_Window_GetViewportFromRect",
	"scope": "lua",
	"body": "left, top, right, bottom = reaper.JS_Window_GetViewportFromRect(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:wantWork})$0",
	"description": "Retrieves the dimensions of the display monitor that has the largest area of intersection with the specified rectangle.\nIf the monitor is not the primary display, some of the rectangle's coordinates may be negative.\nwantWork: Returns the work area of the display, which excludes the system taskbar or application desktop toolbars.\n\n"
	},

	"JS_Window_HandleFromAddress lua": {
	"prefix": "reaper.JS_Window_HandleFromAddress",
	"scope": "lua",
	"body": "reaper.JS_Window_HandleFromAddress(${1:address})$0",
	"description": "Converts an address to a handle (such as a HWND) that can be utilized by REAPER and other API functions.\n\n"
	},

	"JS_Window_InvalidateRect lua": {
	"prefix": "reaper.JS_Window_InvalidateRect",
	"scope": "lua",
	"body": "reaper.JS_Window_InvalidateRect(${1:windowHWND}, ${2:left}, ${3:top}, ${4:right}, ${5:bottom}, ${6:eraseBackground})$0",
	"description": "Similar to the Win32 function InvalidateRect.\n\n"
	},

	"JS_Window_IsChild lua": {
	"prefix": "reaper.JS_Window_IsChild",
	"scope": "lua",
	"body": "reaper.JS_Window_IsChild(${1:parentHWND}, ${2:childHWND})$0",
	"description": "Determines whether a window is a child window or descendant window of a specified parent window.\n\n"
	},

	"JS_Window_IsVisible lua": {
	"prefix": "reaper.JS_Window_IsVisible",
	"scope": "lua",
	"body": "reaper.JS_Window_IsVisible(${1:windowHWND})$0",
	"description": "Determines the visibility state of the window.\n\n"
	},

	"JS_Window_IsWindow lua": {
	"prefix": "reaper.JS_Window_IsWindow",
	"scope": "lua",
	"body": "reaper.JS_Window_IsWindow(${1:windowHWND})$0",
	"description": "Determines whether the specified window handle identifies an existing window.\nOn macOS and Linux, only windows that were created by WDL/swell will be identified (and only such windows should be acted on by scripts).\nNOTE: Since REAPER v5.974, windows can be checked using the native function ValidatePtr(windowHWND, 'HWND').\n\n"
	},

	"JS_Window_ListAllChild lua": {
	"prefix": "reaper.JS_Window_ListAllChild",
	"scope": "lua",
	"body": "retval, list = reaper.JS_Window_ListAllChild(${1:parentHWND})$0",
	"description": "Finds all child windows of the specified parent.\nReturns:\n* retval: The number of windows found; negative if an error occurred.\n* list: A comma-separated string of hexadecimal values.\nEach value is an address that can be converted to a HWND by the function Window_HandleFromAddress.\n\n"
	},

	"JS_Window_ListAllTop lua": {
	"prefix": "reaper.JS_Window_ListAllTop",
	"scope": "lua",
	"body": "retval, list = reaper.JS_Window_ListAllTop()\n\n",
	"description": "Finds all top-level windows.\nReturns:\n* retval: The number of windows found; negative if an error occurred.\n* list: A comma-separated string of hexadecimal values. Each value is an address that can be converted to a HWND by the function Window_HandleFromAddress.\n\n"
	},

	"JS_Window_ListFind lua": {
	"prefix": "reaper.JS_Window_ListFind",
	"scope": "lua",
	"body": "retval, list = reaper.JS_Window_ListFind(${1:title}, ${2:exact})$0",
	"description": "Finds all windows (whether top-level or child) whose titles match the specified string.\nReturns:\n* retval: The number of windows found; negative if an error occurred.\n* list: A comma-separated string of hexadecimal values. Each value is an address that can be converted to a HWND by the function Window_HandleFromAddress.\nParameters:\n* exact: Match entire title exactly, or match substring of title.\n\n"
	},

	"JS_Window_MonitorFromRect lua": {
	"prefix": "reaper.JS_Window_MonitorFromRect",
	"scope": "lua",
	"body": "left, top, right, bottom = reaper.JS_Window_MonitorFromRect(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:wantWork})$0",
	"description": "Deprecated - use GetViewportFromRect instead.\n\n"
	},

	"JS_Window_Move lua": {
	"prefix": "reaper.JS_Window_Move",
	"scope": "lua",
	"body": "reaper.JS_Window_Move(${1:windowHWND}, ${2:left}, ${3:top})$0",
	"description": "Changes the position of the specified window, keeping its size constant.\nNOTES:\n* For top-level windows, position is relative to the primary display.\n* On Windows and Linux, position is calculated as the coordinates of the upper left corner of the window, relative to upper left corner of the primary display, and the positive Y-axis points downward.\n* On macOS, position is calculated as the coordinates of the bottom left corner of the window, relative to bottom left corner of the display, and the positive Y-axis points upward.\n* For a child window, on all platforms, position is relative to the upper-left corner of the parent window's client area.\n* Equivalent to calling JS_Window_SetPosition with NOSIZE, NOZORDER, NOACTIVATE and NOOWNERZORDER flags set.\n\n"
	},

	"JS_Window_OnCommand lua": {
	"prefix": "reaper.JS_Window_OnCommand",
	"scope": "lua",
	"body": "reaper.JS_Window_OnCommand(${1:windowHWND}, ${2:commandID})$0",
	"description": "Sends a 'WM_COMMAND' message to the specified window, which simulates a user selecting a command in the window menu.\nThis function is similar to Main_OnCommand and MIDIEditor_OnCommand, but can send commands to any window that has a menu.\nIn the case of windows that are listed among the Action list's contexts (such as the Media Explorer), the commandIDs of the actions in the Actions list may be used.\n\n"
	},

	"JS_Window_Resize lua": {
	"prefix": "reaper.JS_Window_Resize",
	"scope": "lua",
	"body": "reaper.JS_Window_Resize(${1:windowHWND}, ${2:width}, ${3:height})$0",
	"description": "Changes the dimensions of the specified window, keeping the top left corner position constant.\n* If resizing script GUIs, call gfx.update() after resizing.\n* Equivalent to calling JS_Window_SetPosition with NOMOVE, NOZORDER, NOACTIVATE and NOOWNERZORDER flags set.\n\n"
	},

	"JS_Window_ScreenToClient lua": {
	"prefix": "reaper.JS_Window_ScreenToClient",
	"scope": "lua",
	"body": "x, y = reaper.JS_Window_ScreenToClient(${1:windowHWND}, ${2:x}, ${3:y})$0",
	"description": "Converts the screen coordinates of a specified point on the screen to client-area coordinates.\nNOTES:\n* On Windows and Linux, screen coordinates are relative to *upper* left corner of the primary display, and the positive Y-axis points downward.\n* On macOS, screen coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward.\n* On all platforms, client coordinates are relative to the upper left corner of the client area.\n\n"
	},

	"JS_Window_SetFocus lua": {
	"prefix": "reaper.JS_Window_SetFocus",
	"scope": "lua",
	"body": "reaper.JS_Window_SetFocus(${1:windowHWND})$0",
	"description": "Sets the keyboard focus to the specified window.\n\n"
	},

	"JS_Window_SetForeground lua": {
	"prefix": "reaper.JS_Window_SetForeground",
	"scope": "lua",
	"body": "reaper.JS_Window_SetForeground(${1:windowHWND})$0",
	"description": "Brings the specified window into the foreground, activates the window, and directs keyboard input to it.\n\n"
	},

	"JS_Window_SetLong lua": {
	"prefix": "reaper.JS_Window_SetLong",
	"scope": "lua",
	"body": "retval = reaper.JS_Window_SetLong(${1:windowHWND}, ${2:info}, ${3:value})$0",
	"description": "Similar to the Win32 function SetWindowLongPtr. \ninfo: 'USERDATA', 'WNDPROC', 'DLGPROC', 'ID', 'EXSTYLE' or 'STYLE', and only on WindowOS, 'INSTANCE' and 'PARENT'.\n\n"
	},

	"JS_Window_SetOpacity lua": {
	"prefix": "reaper.JS_Window_SetOpacity",
	"scope": "lua",
	"body": "reaper.JS_Window_SetOpacity(${1:windowHWND}, ${2:mode}, ${3:value})$0",
	"description": "Sets the window opacity.\nParameters:\nmode: either 'ALPHA' or 'COLOR'. \nvalue: If ALPHA, the specified value may range from zero to one, and will apply to the entire window, frame included. \nIf COLOR, value specifies a 0xRRGGBB color, and all pixels of this color will be made transparent. (All mouse clicks over transparent pixels will pass through, too).  WARNING:\nCOLOR mode is only available in Windows, not Linux or macOS.\nTransparency can only be applied to top-level windows. If windowHWND refers to a child window, the entire top-level window that contains windowHWND will be made transparent.\n\n"
	},

	"JS_Window_SetParent lua": {
	"prefix": "reaper.JS_Window_SetParent",
	"scope": "lua",
	"body": "reaper.JS_Window_SetParent(${1:childHWND}, ${2:parentHWND})$0",
	"description": "If successful, returns a handle to the previous parent window.\nOnly on WindowsOS: If parentHWND is not specified, the desktop window becomes the new parent window.\n\n"
	},

	"JS_Window_SetPosition lua": {
	"prefix": "reaper.JS_Window_SetPosition",
	"scope": "lua",
	"body": "retval, optional_ZOrder, optional_flags = reaper.JS_Window_SetPosition(${1:windowHWND}, ${2:left}, ${3:top}, ${4:width}, ${5:height}, ${6:optional_ZOrder}, ${7:optional_flags})$0",
	"description": "Interface to the Win32/swell function SetWindowPos, with which window position, size, Z-order and visibility can be set, and new frame styles can be applied.\nZOrder and flags are optional parameters. If no arguments are supplied, the window will simply be moved and resized, as if the NOACTIVATE, NOZORDER, NOOWNERZORDER flags were set.\n* ZOrder: 'BOTTOM', 'TOPMOST', 'NOTOPMOST', 'TOP' or a window HWND converted to a string, for example by the Lua function tostring.\n* flags: Any combination of the standard flags, of which 'NOMOVE', 'NOSIZE', 'NOZORDER', 'NOACTIVATE', 'SHOWWINDOW', 'FRAMECHANGED' and 'NOCOPYBITS' should be valid cross-platform.\n\n"
	},

	"JS_Window_SetScrollPos lua": {
	"prefix": "reaper.JS_Window_SetScrollPos",
	"scope": "lua",
	"body": "reaper.JS_Window_SetScrollPos(${1:windowHWND}, ${2:scrollbar}, ${3:position})$0",
	"description": "Parameters:\n* scrollbar: 'v' (or 'SB_VERT', or 'VERT') for vertical scroll, 'h' (or 'SB_HORZ' or 'HORZ') for horizontal.\nNOTE: API functions can scroll REAPER's windows, but cannot zoom them.  Instead, use actions such as 'View: Zoom to one loop iteration'.\n\n"
	},

	"JS_Window_SetStyle lua": {
	"prefix": "reaper.JS_Window_SetStyle",
	"scope": "lua",
	"body": "retval, style = reaper.JS_Window_SetStyle(${1:windowHWND}, ${2:style})$0",
	"description": "Sets and applies a window style.\nstyle may include any combination of standard window styles, such as 'POPUP' for a frameless window, or 'CAPTION,SIZEBOX,SYSMENU' for a standard framed window.\nOn Linux and macOS, 'MAXIMIZE' has not yet been implmented, and the remaining styles may appear slightly different from their WindowsOS counterparts.\n\n"
	},

	"JS_Window_SetTitle lua": {
	"prefix": "reaper.JS_Window_SetTitle",
	"scope": "lua",
	"body": "reaper.JS_Window_SetTitle(${1:windowHWND}, ${2:title})$0",
	"description": "Changes the title of the specified window. Returns true if successful.\n\n"
	},

	"JS_Window_SetZOrder lua": {
	"prefix": "reaper.JS_Window_SetZOrder",
	"scope": "lua",
	"body": "reaper.JS_Window_SetZOrder(${1:windowHWND}, ${2:ZOrder}, ${3:insertAfterHWND})$0",
	"description": "Sets the window Z order.\n* Equivalent to calling JS_Window_SetPos with flags NOMOVE | NOSIZE.\n* Not all the Z orders have been implemented in Linux yet.\nParameters:\n* ZOrder: 'BOTTOM', 'TOPMOST', 'NOTOPMOST', 'TOP', or a window HWND converted to a string, for example by the Lua function tostring.\n* InsertAfterHWND: For compatibility with older versions, this parameter is still available, and is optional. If ZOrder is 'INSERTAFTER', insertAfterHWND must be a handle to the window behind which windowHWND will be placed in the Z order, equivalent to setting ZOrder to this HWND; otherwise, insertAfterHWND is ignored and can be left out (or it can simply be set to the same value as windowHWND).\n\n"
	},

	"JS_Window_Show lua": {
	"prefix": "reaper.JS_Window_Show",
	"scope": "lua",
	"body": "reaper.JS_Window_Show(${1:windowHWND}, ${2:state})$0",
	"description": "Sets the specified window's show state.\nParameters:\n* state: One of the following options: 'SHOW', 'SHOWNA' (or 'SHOWNOACTIVATE'), 'SHOWMINIMIZED', 'HIDE', 'NORMAL', 'SHOWNORMAL', 'SHOWMAXIMIZED', 'SHOWDEFAULT' or 'RESTORE'. On Linux and macOS, only the first four options are fully implemented.\n\n"
	},

	"JS_Window_Update lua": {
	"prefix": "reaper.JS_Window_Update",
	"scope": "lua",
	"body": "reaper.JS_Window_Update(${1:windowHWND})$0",
	"description": "Similar to the Win32 function UpdateWindow.\n\n"
	},

	"JS_Zip_Close lua": {
	"prefix": "reaper.JS_Zip_Close",
	"scope": "lua",
	"body": "reaper.JS_Zip_Close(${1:zipFile}, ${2:zipHandle})$0",
	"description": "Closes the zip archive, using either the file name or the zip handle. Finalizes entries and releases resources.\n\n"
	},

	"JS_Zip_CountEntries lua": {
	"prefix": "reaper.JS_Zip_CountEntries",
	"scope": "lua",
	"body": "reaper.JS_Zip_CountEntries(${1:zipHandle})$0",
	"description": ""
	},

	"JS_Zip_DeleteEntries lua": {
	"prefix": "reaper.JS_Zip_DeleteEntries",
	"scope": "lua",
	"body": "reaper.JS_Zip_DeleteEntries(${1:zipHandle}, ${2:entryNames}, ${3:entryNamesStrLen})$0",
	"description": "Deletes the specified entries from an existing Zip file.\nentryNames is zero-separated and double-zero-terminated.\nReturns the number of deleted entries on success, negative number (< 0) on error.\n\n"
	},

	"JS_Zip_Entry_Close lua": {
	"prefix": "reaper.JS_Zip_Entry_Close",
	"scope": "lua",
	"body": "reaper.JS_Zip_Entry_Close(${1:zipHandle})$0",
	"description": "Closes a zip entry, flushes buffer and releases resources. In WRITE mode, entries must be closed in order to apply and save changes.\nReturns 0 on success, negative number (< 0) on error.\n\n"
	},

	"JS_Zip_Entry_CompressFile lua": {
	"prefix": "reaper.JS_Zip_Entry_CompressFile",
	"scope": "lua",
	"body": "reaper.JS_Zip_Entry_CompressFile(${1:zipHandle}, ${2:inputFile})$0",
	"description": "Compresses the specified file into the zip archive's open entry.\nReturns 0 on success, negative number (< 0) on error.\n\n"
	},

	"JS_Zip_Entry_CompressMemory lua": {
	"prefix": "reaper.JS_Zip_Entry_CompressMemory",
	"scope": "lua",
	"body": "reaper.JS_Zip_Entry_CompressMemory(${1:zipHandle}, ${2:buf}, ${3:buf_size})$0",
	"description": "Compresses the specified memory buffer into the zip archive's open entry.\nReturns 0 on success, negative number (< 0) on error.\n\n"
	},

	"JS_Zip_Entry_ExtractToFile lua": {
	"prefix": "reaper.JS_Zip_Entry_ExtractToFile",
	"scope": "lua",
	"body": "reaper.JS_Zip_Entry_ExtractToFile(${1:zipHandle}, ${2:outputFile})$0",
	"description": "Extracts the zip archive's open entry.\nReturns 0 on success, negative number (< 0) on error.\n\n"
	},

	"JS_Zip_Entry_ExtractToMemory lua": {
	"prefix": "reaper.JS_Zip_Entry_ExtractToMemory",
	"scope": "lua",
	"body": "retval, contents = reaper.JS_Zip_Entry_ExtractToMemory(${1:zipHandle})$0",
	"description": "Extracts and returns the zip archive's open entry.\nReturns the number of bytes extracted on success, negative number (< 0) on error.\n\n"
	},

	"JS_Zip_Entry_Info lua": {
	"prefix": "reaper.JS_Zip_Entry_Info",
	"scope": "lua",
	"body": "retval, name, index, isFolder, size, crc32 = reaper.JS_Zip_Entry_Info(${1:zipHandle})$0",
	"description": "Returns information about the zip archive's open entry.\n\n"
	},

	"JS_Zip_Entry_OpenByIndex lua": {
	"prefix": "reaper.JS_Zip_Entry_OpenByIndex",
	"scope": "lua",
	"body": "reaper.JS_Zip_Entry_OpenByIndex(${1:zipHandle}, ${2:index})$0",
	"description": "Opens a new entry by index in the zip archive.\nThis function is only valid if zip archive was opened in 'r' (readonly) mode.\nReturns 0 on success, negative number on error.\n\n"
	},

	"JS_Zip_Entry_OpenByName lua": {
	"prefix": "reaper.JS_Zip_Entry_OpenByName",
	"scope": "lua",
	"body": "reaper.JS_Zip_Entry_OpenByName(${1:zipHandle}, ${2:entryName})$0",
	"description": "Opens an entry by name in the zip archive.\nFor zip archive opened in 'w' or 'a' mode the function will append a new entry. In readonly mode the function tries to locate an existing entry.\nReturns 0 on success, negative number (< 0) on error.\n\n"
	},

	"JS_Zip_ErrorString lua": {
	"prefix": "reaper.JS_Zip_ErrorString",
	"scope": "lua",
	"body": "errorStr = reaper.JS_Zip_ErrorString(${1:errorNum})$0",
	"description": "Returns a descriptive string for the given error code.\n\n"
	},

	"JS_Zip_Extract lua": {
	"prefix": "reaper.JS_Zip_Extract",
	"scope": "lua",
	"body": "reaper.JS_Zip_Extract(${1:zipFile}, ${2:outputFolder})$0",
	"description": "Extracts an existing Zip file to the specified folder.\nReturns the number of extracted files on success, negative number (< 0) on error.\n\n"
	},

	"JS_Zip_ListAllEntries lua": {
	"prefix": "reaper.JS_Zip_ListAllEntries",
	"scope": "lua",
	"body": "retval, list = reaper.JS_Zip_ListAllEntries(${1:zipHandle})$0",
	"description": "Returns the number of entries and a zero-separated and double-zero-terminated string of entry names.\nOn error, returns a negative number (< 0).\n\n"
	},

	"JS_Zip_Open lua": {
	"prefix": "reaper.JS_Zip_Open",
	"scope": "lua",
	"body": "retval, retval = reaper.JS_Zip_Open(${1:zipFile}, ${2:mode}, ${3:compressionLevel})$0",
	"description": "Opens a zip archive using the given mode, which can be either 'READ' or 'WRITE' (or simply 'r' or 'w').\n* READ: Opens an existing archive for reading/extracting.\n* WRITE: Opens an archive for writing/deleting. If the file doesn't exist, an empty archive will created.\ncompressionLevel is only relevant for WRITE mode, and ranges from 0 (fastest, no compression) to 9 (slowest, best compression), with a default of 6.\nIf successful, returns 0 and a handle to the Zip archive. If failed, returns a negative error code. If the file is already open -- in the given mode -- the existing handle will be returned.\nNOTES:\n* The Zip API functions support Unicode file names and entry names.\n* The original zip specification did not support Unicode. Some applications still use this outdated specification by default, or try to use the local code page. This may lead to incompatibility and incorrect retrieval of file or entry names.\n\n"
	},

	"Llm_Do lua": {
	"prefix": "reaper.Llm_Do",
	"scope": "lua",
	"body": "reaper.Llm_Do(${1:optional_paramIn})$0",
	"description": "Called with parameter value 1 executes one ReaLlm cycle. E.g. for running ReaLlm on custom timer, or deferred. 0 or nothing performs shutdown. Disarming/disabling all monitored inputs and calling with parameter value 1 equals to shutdown.\n\n"
	},

	"Llm_Get lua": {
	"prefix": "reaper.Llm_Get",
	"scope": "lua",
	"body": "buf = reaper.Llm_Get(${1:parmname}, ${2:buf}, ${3:trIn})$0",
	"description": "Get ReaLlm information string. Zero-based indices. Master track index -1. Optional MediaTrack* tr gets results relative to tr. Each line (newline '\n' separated) represents entry. Tracks are separated with ';'. FX are listed after ':' separated with ','. \nP_GRAPH: Mixer routings as network graph in format 'node;neighborhood\n' where node is track, and neighborhood is group of tracks in format 'track;tr#1;tr#2...\n'. Or as 'parent;children\n' where first field is parent and rest are children. Or as multiply linked list where first field is node and rest are links. E.g. '7;1;-1;\n' would mean '8th track is connected to 2nd track and Master track.'\nP_PDCLATENCY: Latency in samples.\nP_PDCLIMIT: Limit in samples.\nP_PDCMODECHECK: Is PDC mode check enabled? '0' or '1'.\nP_REALLM or P_STATE: Current state of ReaLlm as approach vektors with disabled FX in format: 'begin:disabled fx,...;next:fx,...;end:fx,...;\n.' E.g. '3:1,2;0;-1:0\n' would be: 4th track, fx#2 and #3 disabled => 1st track, nofx disabled => Master track, fx#1 disabled.\nP_SAFE: 'Safed' plugins as 'track#:fx#\n' pairs.\nP_VECTOR: Same as P_REALLM without FX information. Faster.\n\n"
	},

	"Llm_Set lua": {
	"prefix": "reaper.Llm_Set",
	"scope": "lua",
	"body": "reaper.Llm_Set(${1:parmname}, ${2:bufIn})$0",
	"description": "Set ReaLlm parameters.\nP_PDCLIMIT: PDC latency limit in audio blocks/buffers.\nP_PDCMODECHECK: Highly experimental. Check Track FX Chain PDC mode during Llm_Do(). '0' or '1'.\n\n"
	},

	"MRP_CalculateEnvelopeHash lua": {
	"prefix": "reaper.MRP_CalculateEnvelopeHash",
	"scope": "lua",
	"body": "reaper.MRP_CalculateEnvelopeHash(${1:env})$0",
	"description": "This function isn't really correct... it calculates a 64 bit hash but returns it as a 32 bit int. Should reimplement this. Or rather, even more confusingly : The hash will be 32 bit when building for 32 bit architecture and 64 bit when building for 64 bit architecture! It comes down to how size_t is of different size between the 32 and 64 bit architectures.\n\n"
	},

	"MRP_CastDoubleToInt lua": {
	"prefix": "reaper.MRP_CastDoubleToInt",
	"scope": "lua",
	"body": "reaper.MRP_CastDoubleToInt(${1:n1}, ${2:n2})$0",
	"description": "add two numbers\n\n"
	},

	"MRP_CreateArray lua": {
	"prefix": "reaper.MRP_CreateArray",
	"scope": "lua",
	"body": "reaper.MRP_CreateArray(${1:size})$0",
	"description": "Create an array of 64 bit floating point numbers. Note that these will leak memory if they are not later destroyed with MRP_DestroyArray!\n\n"
	},

	"MRP_CreateWindow lua": {
	"prefix": "reaper.MRP_CreateWindow",
	"scope": "lua",
	"body": "reaper.MRP_CreateWindow(${1:title})$0",
	"description": "Create window\n\n"
	},

	"MRP_DestroyArray lua": {
	"prefix": "reaper.MRP_DestroyArray",
	"scope": "lua",
	"body": "reaper.MRP_DestroyArray(${1:array})$0",
	"description": "Destroy a previously created MRP_Array\n\n"
	},

	"MRP_DestroyWindow lua": {
	"prefix": "reaper.MRP_DestroyWindow",
	"scope": "lua",
	"body": "reaper.MRP_DestroyWindow(${1:window})$0",
	"description": "Destroy window\n\n"
	},

	"MRP_DoNothing lua": {
	"prefix": "reaper.MRP_DoNothing",
	"scope": "lua",
	"body": "reaper.MRP_DoNothing()\n\n",
	"description": "do nothing, return null\n\n"
	},

	"MRP_DoublePointer lua": {
	"prefix": "reaper.MRP_DoublePointer",
	"scope": "lua",
	"body": "reaper.MRP_DoublePointer(${1:n1}, ${2:n2})$0",
	"description": "add two numbers\n\n"
	},

	"MRP_DoublePointerAsInt lua": {
	"prefix": "reaper.MRP_DoublePointerAsInt",
	"scope": "lua",
	"body": "reaper.MRP_DoublePointerAsInt(${1:n1}, ${2:n2})$0",
	"description": "add two numbers\n\n"
	},

	"MRP_GenerateSine lua": {
	"prefix": "reaper.MRP_GenerateSine",
	"scope": "lua",
	"body": "reaper.MRP_GenerateSine(${1:array}, ${2:samplerate}, ${3:frequency})$0",
	"description": "Generate a sine wave into a MRP_Array\n\n"
	},

	"MRP_GetArrayValue lua": {
	"prefix": "reaper.MRP_GetArrayValue",
	"scope": "lua",
	"body": "reaper.MRP_GetArrayValue(${1:array}, ${2:integer_index})$0",
	"description": "Get MRP_Array element value. No safety checks done for array or index validity, so use at your own peril!\n\n"
	},

	"MRP_GetControlFloatNumber lua": {
	"prefix": "reaper.MRP_GetControlFloatNumber",
	"scope": "lua",
	"body": "reaper.MRP_GetControlFloatNumber(${1:window}, ${2:controlname}, ${3:which})$0",
	"description": "Get a floating point number associated with control. Meaning of 'which' depends on the control targeted.\n\n"
	},

	"MRP_GetControlIntNumber lua": {
	"prefix": "reaper.MRP_GetControlIntNumber",
	"scope": "lua",
	"body": "reaper.MRP_GetControlIntNumber(${1:window}, ${2:controlname}, ${3:which})$0",
	"description": "Get an integer point number associated with control. Meaning of 'which' depends on the control targeted.\n\n"
	},

	"MRP_GetWindowDirty lua": {
	"prefix": "reaper.MRP_GetWindowDirty",
	"scope": "lua",
	"body": "reaper.MRP_GetWindowDirty(${1:window}, ${2:whichdirty})$0",
	"description": "Get window dirty state (ie, if something was changed in the window). which : 0 window size\n\n"
	},

	"MRP_GetWindowPosSizeValue lua": {
	"prefix": "reaper.MRP_GetWindowPosSizeValue",
	"scope": "lua",
	"body": "reaper.MRP_GetWindowPosSizeValue(${1:window}, ${2:which})$0",
	"description": "Get window geometry values. which : 0 x, 1 y, 2 w, 3 h\n\n"
	},

	"MRP_IntPointer lua": {
	"prefix": "reaper.MRP_IntPointer",
	"scope": "lua",
	"body": "reaper.MRP_IntPointer(${1:n1}, ${2:n2})$0",
	"description": "add two numbers\n\n"
	},

	"MRP_MultiplyArrays lua": {
	"prefix": "reaper.MRP_MultiplyArrays",
	"scope": "lua",
	"body": "reaper.MRP_MultiplyArrays(${1:MRP_Array array1MRP_Array  array2MRP_Array  array3})$0",
	"description": "Multiply 2 MRP_Arrays of same length. Result is written to 3rd array.\n\n"
	},

	"MRP_MultiplyArraysMT lua": {
	"prefix": "reaper.MRP_MultiplyArraysMT",
	"scope": "lua",
	"body": "reaper.MRP_MultiplyArraysMT(${1:MRP_Array array1MRP_Array  array2MRP_Array array3})$0",
	"description": "Multiply 2 MRP_Arrays of same length. Result is written to 3rd array. Uses multiple threads.\n\n"
	},

	"MRP_ReturnMediaItem lua": {
	"prefix": "reaper.MRP_ReturnMediaItem",
	"scope": "lua",
	"body": "reaper.MRP_ReturnMediaItem()\n\n",
	"description": "return media item\n\n"
	},

	"MRP_SendCommandString lua": {
	"prefix": "reaper.MRP_SendCommandString",
	"scope": "lua",
	"body": "reaper.MRP_SendCommandString(${1:window}, ${2:controlname}, ${3:commandtext})$0",
	"description": "Send a command message to control. Currently only the envelope control understands some messages.\n\n"
	},

	"MRP_SetArrayValue lua": {
	"prefix": "reaper.MRP_SetArrayValue",
	"scope": "lua",
	"body": "reaper.MRP_SetArrayValue(${1:array}, ${2:integer_index}, ${3:number_value})$0",
	"description": "Set MRP_Array element value. No safety checks done for array or index validity, so use at your own peril!\n\n"
	},

	"MRP_SetControlBounds lua": {
	"prefix": "reaper.MRP_SetControlBounds",
	"scope": "lua",
	"body": "reaper.MRP_SetControlBounds(${1:window}, ${2:name}, ${3:x}, ${4:y}, ${5:w}, ${6:h})$0",
	"description": "Set MRP control position and size\n\n"
	},

	"MRP_SetControlFloatNumber lua": {
	"prefix": "reaper.MRP_SetControlFloatNumber",
	"scope": "lua",
	"body": "reaper.MRP_SetControlFloatNumber(${1:window}, ${2:controlname}, ${3:which}, ${4:value})$0",
	"description": "Set a floating point number associated with control. Meaning of 'which' depends on the control targeted.\n\n"
	},

	"MRP_SetControlIntNumber lua": {
	"prefix": "reaper.MRP_SetControlIntNumber",
	"scope": "lua",
	"body": "reaper.MRP_SetControlIntNumber(${1:window}, ${2:controlname}, ${3:which}, ${4:value})$0",
	"description": "Set an integer point number associated with control. Meaning of 'which' depends on the control targeted.\n\n"
	},

	"MRP_SetControlString lua": {
	"prefix": "reaper.MRP_SetControlString",
	"scope": "lua",
	"body": "reaper.MRP_SetControlString(${1:window}, ${2:controlname}, ${3:which}, ${4:text})$0",
	"description": "Set a text property associated with control. Meaning of 'which' depends on the control targeted.\n\n"
	},

	"MRP_SetWindowDirty lua": {
	"prefix": "reaper.MRP_SetWindowDirty",
	"scope": "lua",
	"body": "reaper.MRP_SetWindowDirty(${1:window}, ${2:which}, ${3:state})$0",
	"description": "Set window dirty state (ie, if something was changed in the controls)\n\n"
	},

	"MRP_WindowAddControl lua": {
	"prefix": "reaper.MRP_WindowAddControl",
	"scope": "lua",
	"body": "reaper.MRP_WindowAddControl(${1:window}, ${2:controltypename}, ${3:objectname})$0",
	"description": "Add a control to window. Controltypename is the type of control to create. Objectname must be a unique id\n\n"
	},

	"MRP_WindowClearDirtyControls lua": {
	"prefix": "reaper.MRP_WindowClearDirtyControls",
	"scope": "lua",
	"body": "reaper.MRP_WindowClearDirtyControls(${1:window})$0",
	"description": "Clears the dirty states of the controls in a window.\n\n"
	},

	"MRP_WindowIsClosed lua": {
	"prefix": "reaper.MRP_WindowIsClosed",
	"scope": "lua",
	"body": "reaper.MRP_WindowIsClosed(${1:window})$0",
	"description": "Returns if the window has been closed and the ReaScript defer loop should likely be exited\n\n"
	},

	"MRP_WindowIsDirtyControl lua": {
	"prefix": "reaper.MRP_WindowIsDirtyControl",
	"scope": "lua",
	"body": "reaper.MRP_WindowIsDirtyControl(${1:window}, ${2:controlname})$0",
	"description": "Returns true if control was manipulated\n\n"
	},

	"MRP_WindowSetTitle lua": {
	"prefix": "reaper.MRP_WindowSetTitle",
	"scope": "lua",
	"body": "reaper.MRP_WindowSetTitle(${1:window}, ${2:title})$0",
	"description": "Set window title\n\n"
	},

	"MRP_WriteArrayToFile lua": {
	"prefix": "reaper.MRP_WriteArrayToFile",
	"scope": "lua",
	"body": "reaper.MRP_WriteArrayToFile(${1:array}, ${2:filename}, ${3:samplerate})$0",
	"description": "Write MRP_Array to disk as a 32 bit floating point mono wav file\n\n"
	},

	"NF_AnalyzeMediaItemPeakAndRMS lua": {
	"prefix": "reaper.NF_AnalyzeMediaItemPeakAndRMS",
	"scope": "lua",
	"body": "reaper.NF_AnalyzeMediaItemPeakAndRMS(${1:item}, ${2:windowSize}, ${3:reaper.array_peaks}, ${4:reaper.array_peakpositions}, ${5:reaper.array_RMSs}, ${6:reaper.array_RMSpositions})$0",
	"description": "This function combines all other NF_Peak/RMS functions in a single one and additionally returns peak RMS positions. Lua example code here. Note: It's recommended to use this function with ReaScript/Lua as it provides reaper.array objects. If using this function with other scripting languages, you must provide arrays in the reaper.array format.\n\n"
	},

	"NF_AnalyzeTakeLoudness lua": {
	"prefix": "reaper.NF_AnalyzeTakeLoudness",
	"scope": "lua",
	"body": "retval, lufsIntegrated, range, number_truePeak, truePeakPos, shortTermMax, momentaryMax = reaper.NF_AnalyzeTakeLoudness(${1:take}, ${2:analyzeTruePeak})$0",
	"description": "Full loudness analysis. retval: returns true on successful analysis, false on MIDI take or when analysis failed for some reason. analyzeTruePeak=true: Also do true peak analysis. Returns true peak value in dBTP and true peak position (relative to item position). Considerably slower than without true peak analysis (since it uses oversampling). Note: Short term uses a time window of 3 sec. for calculation. So for items shorter than this shortTermMaxOut can't be calculated correctly. Momentary uses a time window of 0.4 sec. \n\n"
	},

	"NF_AnalyzeTakeLoudness2 lua": {
	"prefix": "reaper.NF_AnalyzeTakeLoudness2",
	"scope": "lua",
	"body": "retval, lufsIntegrated, range, number_truePeak, truePeakPos, shortTermMax, momentaryMax, shortTermMaxPos, momentaryMaxPos = reaper.NF_AnalyzeTakeLoudness2(${1:take}, ${2:analyzeTruePeak})$0",
	"description": "Same as NF_AnalyzeTakeLoudness but additionally returns shortTermMaxPos and momentaryMaxPos (in absolute project time). Note: shortTermMaxPos and momentaryMaxPos indicate the beginning of time intervalls, (3 sec. and 0.4 sec. resp.). \n\n"
	},

	"NF_AnalyzeTakeLoudness_IntegratedOnly lua": {
	"prefix": "reaper.NF_AnalyzeTakeLoudness_IntegratedOnly",
	"scope": "lua",
	"body": "retval, lufsIntegrated = reaper.NF_AnalyzeTakeLoudness_IntegratedOnly(${1:take})$0",
	"description": "Does LUFS integrated analysis only. Faster than full loudness analysis (NF_AnalyzeTakeLoudness) . Use this if only LUFS integrated is required. Take vol. env. is taken into account. See: Signal flow\n\n"
	},

	"NF_Base64_Decode lua": {
	"prefix": "reaper.NF_Base64_Decode",
	"scope": "lua",
	"body": "retval, decodedStr = reaper.NF_Base64_Decode(${1:base64Str})$0",
	"description": "Returns true on success.\n\n"
	},

	"NF_Base64_Encode lua": {
	"prefix": "reaper.NF_Base64_Encode",
	"scope": "lua",
	"body": "encodedStr = reaper.NF_Base64_Encode(${1:str}, ${2:usePadding})$0",
	"description": "Input string may contain null bytes in REAPER 6.44 or newer. Note: Doesn't allow padding in the middle (e.g. concatenated encoded strings), doesn't allow newlines.\n\n"
	},

	"NF_ClearGlobalStartupAction lua": {
	"prefix": "reaper.NF_ClearGlobalStartupAction",
	"scope": "lua",
	"body": "reaper.NF_ClearGlobalStartupAction()\n\n",
	"description": "Returns true if global startup action was cleared successfully.\n\n"
	},

	"NF_ClearProjectStartupAction lua": {
	"prefix": "reaper.NF_ClearProjectStartupAction",
	"scope": "lua",
	"body": "reaper.NF_ClearProjectStartupAction()\n\n",
	"description": "Returns true if project startup action was cleared successfully.\n\n"
	},

	"NF_ClearProjectTrackSelectionAction lua": {
	"prefix": "reaper.NF_ClearProjectTrackSelectionAction",
	"scope": "lua",
	"body": "reaper.NF_ClearProjectTrackSelectionAction()\n\n",
	"description": "Returns true if project track selection action was cleared successfully.\n\n"
	},

	"NF_DeleteTakeFromItem lua": {
	"prefix": "reaper.NF_DeleteTakeFromItem",
	"scope": "lua",
	"body": "reaper.NF_DeleteTakeFromItem(${1:item}, ${2:takeIdx})$0",
	"description": "Deletes a take from an item. takeIdx is zero-based. Returns true on success.\n\n"
	},

	"NF_GetGlobalStartupAction lua": {
	"prefix": "reaper.NF_GetGlobalStartupAction",
	"scope": "lua",
	"body": "retval, desc, cmdId = reaper.NF_GetGlobalStartupAction()\n\n",
	"description": "Gets action description and command ID number (for native actions) or named command IDs / identifier strings (for extension actions /ReaScripts) if global startup action is set, otherwise empty string. Returns false on failure.\n\n"
	},

	"NF_GetMediaItemAverageRMS lua": {
	"prefix": "reaper.NF_GetMediaItemAverageRMS",
	"scope": "lua",
	"body": "reaper.NF_GetMediaItemAverageRMS(${1:item})$0",
	"description": "Returns the average overall (non-windowed) dB RMS level of active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. \nReturns -150.0 if MIDI take or empty item.\n\n"
	},

	"NF_GetMediaItemMaxPeak lua": {
	"prefix": "reaper.NF_GetMediaItemMaxPeak",
	"scope": "lua",
	"body": "reaper.NF_GetMediaItemMaxPeak(${1:item})$0",
	"description": "Returns the greatest max. peak value in dBFS of all active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. \nReturns -150.0 if MIDI take or empty item.\n\n"
	},

	"NF_GetMediaItemMaxPeakAndMaxPeakPos lua": {
	"prefix": "reaper.NF_GetMediaItemMaxPeakAndMaxPeakPos",
	"scope": "lua",
	"body": "retval, maxPeakPos = reaper.NF_GetMediaItemMaxPeakAndMaxPeakPos(${1:item})$0",
	"description": "See NF_GetMediaItemMaxPeak, additionally returns maxPeakPos (relative to item position).\n\n"
	},

	"NF_GetMediaItemPeakRMS_NonWindowed lua": {
	"prefix": "reaper.NF_GetMediaItemPeakRMS_NonWindowed",
	"scope": "lua",
	"body": "reaper.NF_GetMediaItemPeakRMS_NonWindowed(${1:item})$0",
	"description": "Returns the greatest overall (non-windowed) dB RMS peak level of all active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. \nReturns -150.0 if MIDI take or empty item.\n\n"
	},

	"NF_GetMediaItemPeakRMS_Windowed lua": {
	"prefix": "reaper.NF_GetMediaItemPeakRMS_Windowed",
	"scope": "lua",
	"body": "reaper.NF_GetMediaItemPeakRMS_Windowed(${1:item})$0",
	"description": "Returns the average dB RMS peak level of all active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. \nObeys 'Window size for peak RMS' setting in 'SWS: Set RMS analysis/normalize options' for calculation. Returns -150.0 if MIDI take or empty item.\n\n"
	},

	"NF_GetProjectStartupAction lua": {
	"prefix": "reaper.NF_GetProjectStartupAction",
	"scope": "lua",
	"body": "retval, desc, cmdId = reaper.NF_GetProjectStartupAction()\n\n",
	"description": "Gets action description and command ID number (for native actions) or named command IDs / identifier strings (for extension actions /ReaScripts) if project startup action is set, otherwise empty string. Returns false on failure.\n\n"
	},

	"NF_GetProjectTrackSelectionAction lua": {
	"prefix": "reaper.NF_GetProjectTrackSelectionAction",
	"scope": "lua",
	"body": "retval, desc, cmdId = reaper.NF_GetProjectTrackSelectionAction()\n\n",
	"description": "Gets action description and command ID number (for native actions) or named command IDs / identifier strings (for extension actions /ReaScripts) if project track selection action is set, otherwise empty string. Returns false on failure.\n\n"
	},

	"NF_GetSWSMarkerRegionSub lua": {
	"prefix": "reaper.NF_GetSWSMarkerRegionSub",
	"scope": "lua",
	"body": "reaper.NF_GetSWSMarkerRegionSub(${1:markerRegionIdx})$0",
	"description": "Returns SWS/S&M marker/region subtitle. markerRegionIdx: Refers to index that can be passed to EnumProjectMarkers (not displayed marker/region index). Returns empty string if marker/region with specified index not found or marker/region subtitle not set. Lua code example here.\n\n"
	},

	"NF_GetSWSTrackNotes lua": {
	"prefix": "reaper.NF_GetSWSTrackNotes",
	"scope": "lua",
	"body": "reaper.NF_GetSWSTrackNotes(${1:track})$0",
	"description": ""
	},

	"NF_GetSWS_RMSoptions lua": {
	"prefix": "reaper.NF_GetSWS_RMSoptions",
	"scope": "lua",
	"body": "target, windowSize = reaper.NF_GetSWS_RMSoptions()\n\n",
	"description": "Get SWS analysis/normalize options. See NF_SetSWS_RMSoptions.\n\n"
	},

	"NF_ReadAudioFileBitrate lua": {
	"prefix": "reaper.NF_ReadAudioFileBitrate",
	"scope": "lua",
	"body": "reaper.NF_ReadAudioFileBitrate(${1:fn})$0",
	"description": "Returns the bitrate of an audio file in kb/s if available (0 otherwise). For supported filetypes see TagLib::AudioProperties::bitrate.\n\n"
	},

	"NF_ScrollHorizontallyByPercentage lua": {
	"prefix": "reaper.NF_ScrollHorizontallyByPercentage",
	"scope": "lua",
	"body": "reaper.NF_ScrollHorizontallyByPercentage(${1:amount})$0",
	"description": "100 means scroll one page. Negative values scroll left.\n\n"
	},

	"NF_SetGlobalStartupAction lua": {
	"prefix": "reaper.NF_SetGlobalStartupAction",
	"scope": "lua",
	"body": "reaper.NF_SetGlobalStartupAction(${1:str})$0",
	"description": "Returns true if global startup action was set successfully (i.e. valid action ID). Note: For SWS / S&M actions and macros / scripts, you must use identifier strings (e.g. '_SWS_ABOUT', '_f506bc780a0ab34b8fdedb67ed5d3649'), not command IDs (e.g. '47145').\nTip: to copy such identifiers, right-click the action in the Actions window > Copy selected action cmdID / identifier string.\nNOnly works for actions / scripts from Main action section.\n\n"
	},

	"NF_SetProjectStartupAction lua": {
	"prefix": "reaper.NF_SetProjectStartupAction",
	"scope": "lua",
	"body": "reaper.NF_SetProjectStartupAction(${1:str})$0",
	"description": "Returns true if project startup action was set successfully (i.e. valid action ID). Note: For SWS / S&M actions and macros / scripts, you must use identifier strings (e.g. '_SWS_ABOUT', '_f506bc780a0ab34b8fdedb67ed5d3649'), not command IDs (e.g. '47145').\nTip: to copy such identifiers, right-click the action in the Actions window > Copy selected action cmdID / identifier string.\nOnly works for actions / scripts from Main action section. Project must be saved after setting project startup action to be persistent.\n\n"
	},

	"NF_SetProjectTrackSelectionAction lua": {
	"prefix": "reaper.NF_SetProjectTrackSelectionAction",
	"scope": "lua",
	"body": "reaper.NF_SetProjectTrackSelectionAction(${1:str})$0",
	"description": "Returns true if project track selection action was set successfully (i.e. valid action ID). Note: For SWS / S&M actions and macros / scripts, you must use identifier strings (e.g. '_SWS_ABOUT', '_f506bc780a0ab34b8fdedb67ed5d3649'), not command IDs (e.g. '47145').\nTip: to copy such identifiers, right-click the action in the Actions window > Copy selected action cmdID / identifier string.\nOnly works for actions / scripts from Main action section. Project must be saved after setting project track selection action to be persistent.\n\n"
	},

	"NF_SetSWSMarkerRegionSub lua": {
	"prefix": "reaper.NF_SetSWSMarkerRegionSub",
	"scope": "lua",
	"body": "reaper.NF_SetSWSMarkerRegionSub(${1:markerRegionSub}, ${2:markerRegionIdx})$0",
	"description": "Set SWS/S&M marker/region subtitle. markerRegionIdx: Refers to index that can be passed to EnumProjectMarkers (not displayed marker/region index). Returns true if subtitle is set successfully (i.e. marker/region with specified index is present in project). Lua code example here.\n\n"
	},

	"NF_SetSWSTrackNotes lua": {
	"prefix": "reaper.NF_SetSWSTrackNotes",
	"scope": "lua",
	"body": "reaper.NF_SetSWSTrackNotes(${1:track}, ${2:str})$0",
	"description": ""
	},

	"NF_SetSWS_RMSoptions lua": {
	"prefix": "reaper.NF_SetSWS_RMSoptions",
	"scope": "lua",
	"body": "reaper.NF_SetSWS_RMSoptions(${1:targetLevel}, ${2:windowSize})$0",
	"description": "Set SWS analysis/normalize options (same as running action 'SWS: Set RMS analysis/normalize options'). targetLevel: target RMS normalize level (dB), windowSize: window size for peak RMS (sec.)\n\n"
	},

	"NF_TakeFX_GetFXModuleName lua": {
	"prefix": "reaper.NF_TakeFX_GetFXModuleName",
	"scope": "lua",
	"body": "retval, name = reaper.NF_TakeFX_GetFXModuleName(${1:item}, ${2:fx})$0",
	"description": "Deprecated, see TakeFX_GetNamedConfigParm/'fx_ident' (v6.37+). See BR_TrackFX_GetFXModuleName. fx: counted consecutively across all takes (zero-based).\n\n"
	},

	"NF_UpdateSWSMarkerRegionSubWindow lua": {
	"prefix": "reaper.NF_UpdateSWSMarkerRegionSubWindow",
	"scope": "lua",
	"body": "reaper.NF_UpdateSWSMarkerRegionSubWindow()\n\n",
	"description": "Redraw the Notes window (call if you've changed a subtitle via NF_SetSWSMarkerRegionSub which is currently displayed in the Notes window and you want to appear the new subtitle immediately.)\n\n"
	},

	"NF_Win32_GetSystemMetrics lua": {
	"prefix": "reaper.NF_Win32_GetSystemMetrics",
	"scope": "lua",
	"body": "reaper.NF_Win32_GetSystemMetrics(${1:nIndex})$0",
	"description": "Equivalent to win32 API GetSystemMetrics(). Note: Only SM_C[XY]SCREEN, SM_C[XY][HV]SCROLL and SM_CYMENU are currently supported on macOS and Linux as of REAPER 6.68. Check the SWELL source code for up-to-date support information (swell-wnd.mm, swell-wnd-generic.cpp).\n\n"
	},

	"RDNA_GetMediaSourceMetadata lua": {
	"prefix": "reaper.RDNA_GetMediaSourceMetadata",
	"scope": "lua",
	"body": "retval, buf = reaper.RDNA_GetMediaSourceMetadata(${1:src}, ${2:metaType}, ${3:key}, ${4:buf}, ${5:bufSize})$0",
	"description": "Get the value of metadata from media source(.wav only). metaType=BWF,IXML,INFO,CART, key=MetadataID(eg.INAM,IART,... of INFO)\n\n"
	},

	"ReaPack_AboutInstalledPackage lua": {
	"prefix": "reaper.ReaPack_AboutInstalledPackage",
	"scope": "lua",
	"body": "reaper.ReaPack_AboutInstalledPackage(${1:entry})$0",
	"description": "Show the about dialog of the given package entry.\nThe repository index is downloaded asynchronously if the cached copy doesn't exist or is older than one week.\n\n"
	},

	"ReaPack_AboutRepository lua": {
	"prefix": "reaper.ReaPack_AboutRepository",
	"scope": "lua",
	"body": "reaper.ReaPack_AboutRepository(${1:repoName})$0",
	"description": "Show the about dialog of the given repository. Returns true if the repository exists in the user configuration.\nThe repository index is downloaded asynchronously if the cached copy doesn't exist or is older than one week.\n\n"
	},

	"ReaPack_AddSetRepository lua": {
	"prefix": "reaper.ReaPack_AddSetRepository",
	"scope": "lua",
	"body": "retval, error = reaper.ReaPack_AddSetRepository(${1:name}, ${2:url}, ${3:enable}, ${4:autoInstall})$0",
	"description": "Add or modify a repository. Set url to nullptr (or empty string in Lua) to keep the existing URL. Call ReaPack_ProcessQueue(true) when done to process the new list and update the GUI.\nautoInstall: usually set to 2 (obey user setting).\n\n"
	},

	"ReaPack_BrowsePackages lua": {
	"prefix": "reaper.ReaPack_BrowsePackages",
	"scope": "lua",
	"body": "reaper.ReaPack_BrowsePackages(${1:filter})$0",
	"description": "Opens the package browser with the given filter string.\n\n"
	},

	"ReaPack_CompareVersions lua": {
	"prefix": "reaper.ReaPack_CompareVersions",
	"scope": "lua",
	"body": "retval, error = reaper.ReaPack_CompareVersions(${1:ver1}, ${2:ver2})$0",
	"description": "Returns 0 if both versions are equal, a positive value if ver1 is higher than ver2 and a negative value otherwise.\n\n"
	},

	"ReaPack_EnumOwnedFiles lua": {
	"prefix": "reaper.ReaPack_EnumOwnedFiles",
	"scope": "lua",
	"body": "retval, path, sections, type = reaper.ReaPack_EnumOwnedFiles(${1:entry}, ${2:index})$0",
	"description": "Enumerate the files owned by the given package. Returns false when there is no more data.\nsections: 0=not in action list, &1=main, &2=midi editor, &4=midi inline editor\ntype: see ReaPack_GetEntryInfo.\n\n"
	},

	"ReaPack_FreeEntry lua": {
	"prefix": "reaper.ReaPack_FreeEntry",
	"scope": "lua",
	"body": "reaper.ReaPack_FreeEntry(${1:entry})$0",
	"description": "Free resources allocated for the given package entry.\n\n"
	},

	"ReaPack_GetEntryInfo lua": {
	"prefix": "reaper.ReaPack_GetEntryInfo",
	"scope": "lua",
	"body": "retval, repo, cat, pkg, desc, type, ver, author, flags, fileCount = reaper.ReaPack_GetEntryInfo(${1:entry})$0",
	"description": "Get the repository name, category, package name, package description, package type, the currently installed version, author name, flags (&1=Pinned, &2=BleedingEdge) and how many files are owned by the given package entry.\ntype: 1=script, 2=extension, 3=effect, 4=data, 5=theme, 6=langpack, 7=webinterface\n\n"
	},

	"ReaPack_GetOwner lua": {
	"prefix": "reaper.ReaPack_GetOwner",
	"scope": "lua",
	"body": "retval, error = reaper.ReaPack_GetOwner(${1:fn})$0",
	"description": "Returns the package entry owning the given file.\nDelete the returned object from memory after use with ReaPack_FreeEntry.\n\n"
	},

	"ReaPack_GetRepositoryInfo lua": {
	"prefix": "reaper.ReaPack_GetRepositoryInfo",
	"scope": "lua",
	"body": "retval, url, enabled, autoInstall = reaper.ReaPack_GetRepositoryInfo(${1:name})$0",
	"description": "Get the infos of the given repository.\nautoInstall: 0=manual, 1=when sychronizing, 2=obey user setting\n\n"
	},

	"ReaPack_ProcessQueue lua": {
	"prefix": "reaper.ReaPack_ProcessQueue",
	"scope": "lua",
	"body": "reaper.ReaPack_ProcessQueue(${1:refreshUI})$0",
	"description": "Run pending operations and save the configuration file. If refreshUI is true the browser and manager windows are guaranteed to be refreshed (otherwise it depends on which operations are in the queue).\n\n"
	},

	"SNM_AddReceive lua": {
	"prefix": "reaper.SNM_AddReceive",
	"scope": "lua",
	"body": "reaper.SNM_AddReceive(${1:src}, ${2:dest}, ${3:type})$0",
	"description": "[S&M] Deprecated, see CreateTrackSend (v5.15pre1+). Adds a receive. Returns false if nothing updated.\ntype -1=Default type (user preferences), 0=Post-Fader (Post-Pan), 1=Pre-FX, 2=deprecated, 3=Pre-Fader (Post-FX).\nNote: obeys default sends preferences, supports frozen tracks, etc..\n\n"
	},

	"SNM_AddTCPFXParm lua": {
	"prefix": "reaper.SNM_AddTCPFXParm",
	"scope": "lua",
	"body": "reaper.SNM_AddTCPFXParm(${1:tr}, ${2:fxId}, ${3:prmId})$0",
	"description": "[S&M] Add an FX parameter knob in the TCP. Returns false if nothing updated (invalid parameters, knob already present, etc..)\n\n"
	},

	"SNM_CreateFastString lua": {
	"prefix": "reaper.SNM_CreateFastString",
	"scope": "lua",
	"body": "reaper.SNM_CreateFastString(${1:str})$0",
	"description": "[S&M] Instantiates a new 'fast string'. You must delete this string, see SNM_DeleteFastString.\n\n"
	},

	"SNM_DeleteFastString lua": {
	"prefix": "reaper.SNM_DeleteFastString",
	"scope": "lua",
	"body": "reaper.SNM_DeleteFastString(${1:str})$0",
	"description": "[S&M] Deletes a 'fast string' instance.\n\n"
	},

	"SNM_GetDoubleConfigVar lua": {
	"prefix": "reaper.SNM_GetDoubleConfigVar",
	"scope": "lua",
	"body": "reaper.SNM_GetDoubleConfigVar(${1:varname}, ${2:errvalue})$0",
	"description": "[S&M] Returns a floating-point preference (look in project prefs first, then in general prefs). Returns errvalue if failed (e.g. varname not found).\n\n"
	},

	"SNM_GetFastString lua": {
	"prefix": "reaper.SNM_GetFastString",
	"scope": "lua",
	"body": "reaper.SNM_GetFastString(${1:str})$0",
	"description": "[S&M] Gets the 'fast string' content.\n\n"
	},

	"SNM_GetFastStringLength lua": {
	"prefix": "reaper.SNM_GetFastStringLength",
	"scope": "lua",
	"body": "reaper.SNM_GetFastStringLength(${1:str})$0",
	"description": "[S&M] Gets the 'fast string' length.\n\n"
	},

	"SNM_GetIntConfigVar lua": {
	"prefix": "reaper.SNM_GetIntConfigVar",
	"scope": "lua",
	"body": "reaper.SNM_GetIntConfigVar(${1:varname}, ${2:errvalue})$0",
	"description": "[S&M] Returns an integer preference (look in project prefs first, then in general prefs). Returns errvalue if failed (e.g. varname not found).\n\n"
	},

	"SNM_GetLongConfigVar lua": {
	"prefix": "reaper.SNM_GetLongConfigVar",
	"scope": "lua",
	"body": "retval, high, low = reaper.SNM_GetLongConfigVar(${1:varname})$0",
	"description": "[S&M] Reads a 64-bit integer preference split in two 32-bit integers (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found).\n\n"
	},

	"SNM_GetMediaItemTakeByGUID lua": {
	"prefix": "reaper.SNM_GetMediaItemTakeByGUID",
	"scope": "lua",
	"body": "reaper.SNM_GetMediaItemTakeByGUID(${1:project}, ${2:guid})$0",
	"description": "[S&M] Gets a take by GUID as string. The GUID must be enclosed in braces {}. To get take GUID as string, see BR_GetMediaItemTakeGUID\n\n"
	},

	"SNM_GetProjectMarkerName lua": {
	"prefix": "reaper.SNM_GetProjectMarkerName",
	"scope": "lua",
	"body": "reaper.SNM_GetProjectMarkerName(${1:proj}, ${2:num}, ${3:boolean_name})$0",
	"description": "[S&M] Gets a marker/region name. Returns true if marker/region found.\n\n"
	},

	"SNM_GetSetObjectState lua": {
	"prefix": "reaper.SNM_GetSetObjectState",
	"scope": "lua",
	"body": "reaper.SNM_GetSetObjectState(${1:identifier_state}, ${2:setnewvalue}, ${3:wantminimalstate})$0",
	"description": "[S&M] Gets or sets the state of a track, an item or an envelope. The state chunk size is unlimited. Returns false if failed.\nWhen getting a track state (and when you are not interested in FX data), you can use wantminimalstate=true to radically reduce the length of the state. Do not set such minimal states back though, this is for read-only applications!\nNote: unlike the native GetSetObjectState, calling to FreeHeapPtr() is not required.\n\n"
	},

	"SNM_GetSetSourceState lua": {
	"prefix": "reaper.SNM_GetSetSourceState",
	"scope": "lua",
	"body": "reaper.SNM_GetSetSourceState(${1:item}, ${2:integer_state}, ${3:setnewvalue})$0",
	"description": "[S&M] Gets or sets a take source state. Returns false if failed. Use takeidx=-1 to get/alter the active take.\nNote: this function does not use a MediaItem_Take* param in order to manage empty takes (i.e. takes with MediaItem_Take*==NULL), see SNM_GetSetSourceState2.\n\n"
	},

	"SNM_GetSetSourceState2 lua": {
	"prefix": "reaper.SNM_GetSetSourceState2",
	"scope": "lua",
	"body": "reaper.SNM_GetSetSourceState2(${1:MediaItem_Take_state}, ${2:setnewvalue})$0",
	"description": "[S&M] Gets or sets a take source state. Returns false if failed.\nNote: this function cannot deal with empty takes, see SNM_GetSetSourceState.\n\n"
	},

	"SNM_GetSourceType lua": {
	"prefix": "reaper.SNM_GetSourceType",
	"scope": "lua",
	"body": "reaper.SNM_GetSourceType(${1:MediaItem_Take_type})$0",
	"description": "[S&M] Deprecated, see GetMediaSourceType. Gets the source type of a take. Returns false if failed (e.g. take with empty source, etc..)\n\n"
	},

	"SNM_MoveOrRemoveTrackFX lua": {
	"prefix": "reaper.SNM_MoveOrRemoveTrackFX",
	"scope": "lua",
	"body": "reaper.SNM_MoveOrRemoveTrackFX(${1:tr}, ${2:fxId}, ${3:what})$0",
	"description": "[S&M] Deprecated, see TakeFX_/TrackFX_ CopyToTrack/Take, TrackFX/TakeFX _Delete (v5.95pre2+). Move or removes a track FX. Returns true if tr has been updated.\nfxId: fx index in chain or -1 for the selected fx. what: 0 to remove, -1 to move fx up in chain, 1 to move fx down in chain.\n\n"
	},

	"SNM_ReadMediaFileTag lua": {
	"prefix": "reaper.SNM_ReadMediaFileTag",
	"scope": "lua",
	"body": "retval, tagval = reaper.SNM_ReadMediaFileTag(${1:fn}, ${2:tag})$0",
	"description": "[S&M] Reads a media file tag. Supported tags: 'artist', 'album', 'genre', 'comment', 'title', 'track' (track number) or 'year'. Returns false if tag was not found. See SNM_TagMediaFile.\n\n"
	},

	"SNM_RemoveReceive lua": {
	"prefix": "reaper.SNM_RemoveReceive",
	"scope": "lua",
	"body": "reaper.SNM_RemoveReceive(${1:tr}, ${2:rcvidx})$0",
	"description": "[S&M] Deprecated, see RemoveTrackSend (v5.15pre1+). Removes a receive. Returns false if nothing updated.\n\n"
	},

	"SNM_RemoveReceivesFrom lua": {
	"prefix": "reaper.SNM_RemoveReceivesFrom",
	"scope": "lua",
	"body": "reaper.SNM_RemoveReceivesFrom(${1:tr}, ${2:srctr})$0",
	"description": "[S&M] Removes all receives from srctr. Returns false if nothing updated.\n\n"
	},

	"SNM_SelectResourceBookmark lua": {
	"prefix": "reaper.SNM_SelectResourceBookmark",
	"scope": "lua",
	"body": "reaper.SNM_SelectResourceBookmark(${1:name})$0",
	"description": "[S&M] Select a bookmark of the Resources window. Returns the related bookmark id (or -1 if failed).\n\n"
	},

	"SNM_SetDoubleConfigVar lua": {
	"prefix": "reaper.SNM_SetDoubleConfigVar",
	"scope": "lua",
	"body": "reaper.SNM_SetDoubleConfigVar(${1:varname}, ${2:newvalue})$0",
	"description": "[S&M] Sets a floating-point preference (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found or newvalue out of range).\n\n"
	},

	"SNM_SetFastString lua": {
	"prefix": "reaper.SNM_SetFastString",
	"scope": "lua",
	"body": "reaper.SNM_SetFastString(${1:str}, ${2:newstr})$0",
	"description": "[S&M] Sets the 'fast string' content. Returns str for facility.\n\n"
	},

	"SNM_SetIntConfigVar lua": {
	"prefix": "reaper.SNM_SetIntConfigVar",
	"scope": "lua",
	"body": "reaper.SNM_SetIntConfigVar(${1:varname}, ${2:newvalue})$0",
	"description": "[S&M] Sets an integer preference (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found or newvalue out of range).\n\n"
	},

	"SNM_SetLongConfigVar lua": {
	"prefix": "reaper.SNM_SetLongConfigVar",
	"scope": "lua",
	"body": "reaper.SNM_SetLongConfigVar(${1:varname}, ${2:newHighValue}, ${3:newLowValue})$0",
	"description": "[S&M] Sets a 64-bit integer preference from two 32-bit integers (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found).\n\n"
	},

	"SNM_SetProjectMarker lua": {
	"prefix": "reaper.SNM_SetProjectMarker",
	"scope": "lua",
	"body": "reaper.SNM_SetProjectMarker(${1:proj}, ${2:num}, ${3:isrgn}, ${4:pos}, ${5:rgnend}, ${6:name}, ${7:color})$0",
	"description": "[S&M] Deprecated, see SetProjectMarker4 -- Same function as SetProjectMarker3() except it can set empty names ''.\n\n"
	},

	"SNM_SetStringConfigVar lua": {
	"prefix": "reaper.SNM_SetStringConfigVar",
	"scope": "lua",
	"body": "reaper.SNM_SetStringConfigVar(${1:varname}, ${2:newvalue})$0",
	"description": "[S&M] Sets a string preference (general prefs only). Returns false if failed (e.g. varname not found or value too long). See get_config_var_string.\n\n"
	},

	"SNM_TagMediaFile lua": {
	"prefix": "reaper.SNM_TagMediaFile",
	"scope": "lua",
	"body": "reaper.SNM_TagMediaFile(${1:fn}, ${2:tag}, ${3:tagval})$0",
	"description": "[S&M] Tags a media file thanks to TagLib. Supported tags: 'artist', 'album', 'genre', 'comment', 'title', 'track' (track number) or 'year'. Use an empty tagval to clear a tag. When a file is opened in REAPER, turn it offline before using this function. Returns false if nothing updated. See SNM_ReadMediaFileTag.\n\n"
	},

	"SNM_TieResourceSlotActions lua": {
	"prefix": "reaper.SNM_TieResourceSlotActions",
	"scope": "lua",
	"body": "reaper.SNM_TieResourceSlotActions(${1:bookmarkId})$0",
	"description": "[S&M] Attach Resources slot actions to a given bookmark.\n\n"
	},

	"SN_FocusMIDIEditor lua": {
	"prefix": "reaper.SN_FocusMIDIEditor",
	"scope": "lua",
	"body": "reaper.SN_FocusMIDIEditor()\n\n",
	"description": "Focuses the active/open MIDI editor.\n\n"
	},

	"ULT_GetMediaItemNote lua": {
	"prefix": "reaper.ULT_GetMediaItemNote",
	"scope": "lua",
	"body": "reaper.ULT_GetMediaItemNote(${1:item})$0",
	"description": "[ULT] Deprecated, see GetSetMediaItemInfo_String (v5.95+). Get item notes.\n\n"
	},

	"ULT_SetMediaItemNote lua": {
	"prefix": "reaper.ULT_SetMediaItemNote",
	"scope": "lua",
	"body": "reaper.ULT_SetMediaItemNote(${1:item}, ${2:note})$0",
	"description": "[ULT] Deprecated, see GetSetMediaItemInfo_String (v5.95+). Set item notes.\n\n"
	},

	"Xen_AudioWriter_Create lua": {
	"prefix": "reaper.Xen_AudioWriter_Create",
	"scope": "lua",
	"body": "reaper.Xen_AudioWriter_Create(${1:filename}, ${2:numchans}, ${3:samplerate})$0",
	"description": "Creates writer for 32 bit floating point WAV\n\n"
	},

	"Xen_AudioWriter_Destroy lua": {
	"prefix": "reaper.Xen_AudioWriter_Destroy",
	"scope": "lua",
	"body": "reaper.Xen_AudioWriter_Destroy(${1:writer})$0",
	"description": "Destroys writer\n\n"
	},

	"Xen_AudioWriter_Write lua": {
	"prefix": "reaper.Xen_AudioWriter_Write",
	"scope": "lua",
	"body": "reaper.Xen_AudioWriter_Write(${1:writer}, ${2:numframes}, ${3:data}, ${4:offset})$0",
	"description": "Write interleaved audio data to disk\n\n"
	},

	"Xen_GetMediaSourceSamples lua": {
	"prefix": "reaper.Xen_GetMediaSourceSamples",
	"scope": "lua",
	"body": "reaper.Xen_GetMediaSourceSamples(${1:src}, ${2:destbuf}, ${3:destbufoffset}, ${4:numframes}, ${5:numchans}, ${6:samplerate}, ${7:sourceposition})$0",
	"description": "Get interleaved audio data from media source\n\n"
	},

	"Xen_StartSourcePreview lua": {
	"prefix": "reaper.Xen_StartSourcePreview",
	"scope": "lua",
	"body": "reaper.Xen_StartSourcePreview(${1:source}, ${2:gain}, ${3:loop}, ${4:optional_outputchanindexIn})$0",
	"description": "Start audio preview of a PCM_source. Returns id of a preview handle that can be provided to Xen_StopSourcePreview.\nIf the given PCM_source does not belong to an existing MediaItem/Take, it will be deleted by the preview system when the preview is stopped.\n\n"
	},

	"Xen_StopSourcePreview lua": {
	"prefix": "reaper.Xen_StopSourcePreview",
	"scope": "lua",
	"body": "reaper.Xen_StopSourcePreview(${1:preview_id})$0",
	"description": "Stop audio preview. id -1 stops all.\n\n"
	},


}
	"AddMediaItemToTrack lua": {
	"prefix": "reaper.AddMediaItemToTrack",
	"scope": "lua",
	"body": "reaper.AddMediaItemToTrack(${1:tr})$0",
	"description": "creates a new media item.\n\n"
	},

	"AddProjectMarker lua": {
	"prefix": "reaper.AddProjectMarker",
	"scope": "lua",
	"body": "reaper.AddProjectMarker(${1:proj}, ${2:isrgn}, ${3:pos}, ${4:rgnend}, ${5:name}, ${6:wantidx})$0",
	"description": "Returns the index of the created marker/region, or -1 on failure. Supply wantidx>=0 if you want a particular index number, but you'll get a different index number a region and wantidx is already in use.\n\n"
	},

	"AddProjectMarker2 lua": {
	"prefix": "reaper.AddProjectMarker2",
	"scope": "lua",
	"body": "reaper.AddProjectMarker2(${1:proj}, ${2:isrgn}, ${3:pos}, ${4:rgnend}, ${5:name}, ${6:wantidx}, ${7:color})$0",
	"description": "Returns the index of the created marker/region, or -1 on failure. Supply wantidx>=0 if you want a particular index number, but you'll get a different index number a region and wantidx is already in use. color should be 0 (default color), or ColorToNative(r,g,b)|0x1000000\n\n"
	},

	"AddRemoveReaScript lua": {
	"prefix": "reaper.AddRemoveReaScript",
	"scope": "lua",
	"body": "reaper.AddRemoveReaScript(${1:add}, ${2:sectionID}, ${3:scriptfn}, ${4:commit})$0",
	"description": "Add a ReaScript (return the new command ID, or 0 if failed) or remove a ReaScript (return >0 on success). Use commit==true when adding/removing a single script. When bulk adding/removing n scripts, you can optimize the n-1 first calls with commit==false and commit==true for the last call.\n\n"
	},

	"AddTakeToMediaItem lua": {
	"prefix": "reaper.AddTakeToMediaItem",
	"scope": "lua",
	"body": "reaper.AddTakeToMediaItem(${1:item})$0",
	"description": "creates a new take in an item\n\n"
	},

	"AddTempoTimeSigMarker lua": {
	"prefix": "reaper.AddTempoTimeSigMarker",
	"scope": "lua",
	"body": "reaper.AddTempoTimeSigMarker(${1:proj}, ${2:timepos}, ${3:bpm}, ${4:timesig_num}, ${5:timesig_denom}, ${6:lineartempochange})$0",
	"description": "Deprecated. Use SetTempoTimeSigMarker with ptidx=-1.\n\n"
	},

	"adjustZoom lua": {
	"prefix": "reaper.adjustZoom",
	"scope": "lua",
	"body": "reaper.adjustZoom(${1:amt}, ${2:forceset}, ${3:doupd}, ${4:centermode})$0",
	"description": "forceset=0,doupd=true,centermode=-1 for default\n\n"
	},

	"AnyTrackSolo lua": {
	"prefix": "reaper.AnyTrackSolo",
	"scope": "lua",
	"body": "reaper.AnyTrackSolo(${1:proj})$0",
	"description": ""
	},

	"APIExists lua": {
	"prefix": "reaper.APIExists",
	"scope": "lua",
	"body": "reaper.APIExists(${1:function_name})$0",
	"description": "Returns true if function_name exists in the REAPER API\n\n"
	},

	"APITest lua": {
	"prefix": "reaper.APITest",
	"scope": "lua",
	"body": "reaper.APITest()\n\n",
	"description": "Displays a message window if the API was successfully called.\n\n"
	},

	"ApplyNudge lua": {
	"prefix": "reaper.ApplyNudge",
	"scope": "lua",
	"body": "reaper.ApplyNudge(${1:project}, ${2:nudgeflag}, ${3:nudgewhat}, ${4:nudgeunits}, ${5:value}, ${6:reverse}, ${7:copies})$0",
	"description": "nudgeflag: &1=set to value (otherwise nudge by value), &2=snap\nnudgewhat: 0=position, 1=left trim, 2=left edge, 3=right edge, 4=contents, 5=duplicate, 6=edit cursor\nnudgeunit: 0=ms, 1=seconds, 2=grid, 3=256th notes, ..., 15=whole notes, 16=measures.beats (1.15 = 1 measure + 1.5 beats), 17=samples, 18=frames, 19=pixels, 20=item lengths, 21=item selections\nvalue: amount to nudge by, or value to set to\nreverse: in nudge mode, nudges left (otherwise ignored)\ncopies: in nudge duplicate mode, number of copies (otherwise ignored)\n\n"
	},

	"ArmCommand lua": {
	"prefix": "reaper.ArmCommand",
	"scope": "lua",
	"body": "reaper.ArmCommand(${1:cmd}, ${2:sectionname})$0",
	"description": "arms a command (or disarms if 0 passed) in section sectionname (empty string for main)\n\n"
	},

	"Audio_Init lua": {
	"prefix": "reaper.Audio_Init",
	"scope": "lua",
	"body": "reaper.Audio_Init()\n\n",
	"description": "open all audio and MIDI devices, if not open\n\n"
	},

	"Audio_IsPreBuffer lua": {
	"prefix": "reaper.Audio_IsPreBuffer",
	"scope": "lua",
	"body": "reaper.Audio_IsPreBuffer()\n\n",
	"description": "is in pre-buffer? threadsafe\n\n"
	},

	"Audio_IsRunning lua": {
	"prefix": "reaper.Audio_IsRunning",
	"scope": "lua",
	"body": "reaper.Audio_IsRunning()\n\n",
	"description": "is audio running at all? threadsafe\n\n"
	},

	"Audio_Quit lua": {
	"prefix": "reaper.Audio_Quit",
	"scope": "lua",
	"body": "reaper.Audio_Quit()\n\n",
	"description": "close all audio and MIDI devices, if open\n\n"
	},

	"AudioAccessorStateChanged lua": {
	"prefix": "reaper.AudioAccessorStateChanged",
	"scope": "lua",
	"body": "reaper.AudioAccessorStateChanged(${1:accessor})$0",
	"description": "Returns true if the underlying samples (track or media item take) have changed, but does not update the audio accessor, so the user can selectively call AudioAccessorValidateState only when needed. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, GetAudioAccessorEndTime, GetAudioAccessorSamples.\n\n"
	},

	"AudioAccessorUpdate lua": {
	"prefix": "reaper.AudioAccessorUpdate",
	"scope": "lua",
	"body": "reaper.AudioAccessorUpdate(${1:accessor})$0",
	"description": "Force the accessor to reload its state from the underlying track or media item take. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples.\n\n"
	},

	"AudioAccessorValidateState lua": {
	"prefix": "reaper.AudioAccessorValidateState",
	"scope": "lua",
	"body": "reaper.AudioAccessorValidateState(${1:accessor})$0",
	"description": "Validates the current state of the audio accessor -- must ONLY call this from the main thread. Returns true if the state changed.\n\n"
	},

	"BypassFxAllTracks lua": {
	"prefix": "reaper.BypassFxAllTracks",
	"scope": "lua",
	"body": "reaper.BypassFxAllTracks(${1:bypass})$0",
	"description": "-1 = bypass all if not all bypassed,otherwise unbypass all\n\n"
	},

	"CalcMediaSrcLoudness lua": {
	"prefix": "reaper.CalcMediaSrcLoudness",
	"scope": "lua",
	"body": "reaper.CalcMediaSrcLoudness(${1:mediasource})$0",
	"description": "Calculates loudness statistics of media via dry run render. Statistics will be displayed to the user; call GetSetProjectInfo_String('RENDER_STATS') to retrieve via API. Returns 1 if loudness was calculated successfully, -1 if user canceled the dry run render.\n\n"
	},

	"CalculateNormalization lua": {
	"prefix": "reaper.CalculateNormalization",
	"scope": "lua",
	"body": "reaper.CalculateNormalization(${1:source}, ${2:normalizeTo}, ${3:normalizeTarget}, ${4:normalizeStart}, ${5:normalizeEnd})$0",
	"description": "Calculate normalize adjustment for source media. normalizeTo: 0=LUFS-I, 1=RMS-I, 2=peak, 3=true peak, 4=LUFS-M max, 5=LUFS-S max. normalizeTarget: dBFS or LUFS value. normalizeStart, normalizeEnd: time bounds within source media for normalization calculation. If normalizationStart=0 and normalizationEnd=0, the full duration of the media will be used for the calculation.\n\n"
	},

	"ClearAllRecArmed lua": {
	"prefix": "reaper.ClearAllRecArmed",
	"scope": "lua",
	"body": "reaper.ClearAllRecArmed()\n\n",
	"description": ""
	},

	"ClearConsole lua": {
	"prefix": "reaper.ClearConsole",
	"scope": "lua",
	"body": "reaper.ClearConsole()\n\n",
	"description": "Clear the ReaScript console. See ShowConsoleMsg\n\n"
	},

	"ClearPeakCache lua": {
	"prefix": "reaper.ClearPeakCache",
	"scope": "lua",
	"body": "reaper.ClearPeakCache()\n\n",
	"description": "resets the global peak caches\n\n"
	},

	"ColorFromNative lua": {
	"prefix": "reaper.ColorFromNative",
	"scope": "lua",
	"body": "r, g, b = reaper.ColorFromNative(${1:col})$0",
	"description": "Extract RGB values from an OS dependent color. See ColorToNative.\n\n"
	},

	"ColorToNative lua": {
	"prefix": "reaper.ColorToNative",
	"scope": "lua",
	"body": "reaper.ColorToNative(${1:r}, ${2:g}, ${3:b})$0",
	"description": "Make an OS dependent color from RGB values (e.g. RGB() macro on Windows). r,g and b are in [0..255]. See ColorFromNative.\n\n"
	},

	"CountActionShortcuts lua": {
	"prefix": "reaper.CountActionShortcuts",
	"scope": "lua",
	"body": "reaper.CountActionShortcuts(${1:section}, ${2:cmdID})$0",
	"description": "Returns the number of shortcuts that exist for the given command ID.\nsee GetActionShortcutDesc, DeleteActionShortcut, DoActionShortcutDialog.\n\n"
	},

	"CountAutomationItems lua": {
	"prefix": "reaper.CountAutomationItems",
	"scope": "lua",
	"body": "reaper.CountAutomationItems(${1:env})$0",
	"description": "Returns the number of automation items on this envelope. See GetSetAutomationItemInfo\n\n"
	},

	"CountEnvelopePoints lua": {
	"prefix": "reaper.CountEnvelopePoints",
	"scope": "lua",
	"body": "reaper.CountEnvelopePoints(${1:envelope})$0",
	"description": "Returns the number of points in the envelope. See CountEnvelopePointsEx.\n\n"
	},

	"CountEnvelopePointsEx lua": {
	"prefix": "reaper.CountEnvelopePointsEx",
	"scope": "lua",
	"body": "reaper.CountEnvelopePointsEx(${1:envelope}, ${2:autoitem_idx})$0",
	"description": "Returns the number of points in the envelope.\nautoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\nFor automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.\nSee GetEnvelopePointEx, SetEnvelopePointEx, InsertEnvelopePointEx, DeleteEnvelopePointEx.\n\n"
	},

	"CountMediaItems lua": {
	"prefix": "reaper.CountMediaItems",
	"scope": "lua",
	"body": "reaper.CountMediaItems(${1:proj})$0",
	"description": "count the number of items in the project (proj=0 for active project)\n\n"
	},

	"CountProjectMarkers lua": {
	"prefix": "reaper.CountProjectMarkers",
	"scope": "lua",
	"body": "retval, num_markers, num_regions = reaper.CountProjectMarkers(${1:proj})$0",
	"description": "num_markersOut and num_regionsOut may be NULL.\n\n"
	},

	"CountSelectedMediaItems lua": {
	"prefix": "reaper.CountSelectedMediaItems",
	"scope": "lua",
	"body": "reaper.CountSelectedMediaItems(${1:proj})$0",
	"description": "count the number of selected items in the project (proj=0 for active project)\n\n"
	},

	"CountSelectedTracks lua": {
	"prefix": "reaper.CountSelectedTracks",
	"scope": "lua",
	"body": "reaper.CountSelectedTracks(${1:proj})$0",
	"description": "Count the number of selected tracks in the project (proj=0 for active project). This function ignores the master track, see CountSelectedTracks2.\n\n"
	},

	"CountSelectedTracks2 lua": {
	"prefix": "reaper.CountSelectedTracks2",
	"scope": "lua",
	"body": "reaper.CountSelectedTracks2(${1:proj}, ${2:wantmaster})$0",
	"description": "Count the number of selected tracks in the project (proj=0 for active project).\n\n"
	},

	"CountTakeEnvelopes lua": {
	"prefix": "reaper.CountTakeEnvelopes",
	"scope": "lua",
	"body": "reaper.CountTakeEnvelopes(${1:take})$0",
	"description": "See GetTakeEnvelope\n\n"
	},

	"CountTakes lua": {
	"prefix": "reaper.CountTakes",
	"scope": "lua",
	"body": "reaper.CountTakes(${1:item})$0",
	"description": "count the number of takes in the item\n\n"
	},

	"CountTCPFXParms lua": {
	"prefix": "reaper.CountTCPFXParms",
	"scope": "lua",
	"body": "reaper.CountTCPFXParms(${1:project}, ${2:track})$0",
	"description": "Count the number of FX parameter knobs displayed on the track control panel.\n\n"
	},

	"CountTempoTimeSigMarkers lua": {
	"prefix": "reaper.CountTempoTimeSigMarkers",
	"scope": "lua",
	"body": "reaper.CountTempoTimeSigMarkers(${1:proj})$0",
	"description": "Count the number of tempo/time signature markers in the project. See GetTempoTimeSigMarker, SetTempoTimeSigMarker, AddTempoTimeSigMarker.\n\n"
	},

	"CountTrackEnvelopes lua": {
	"prefix": "reaper.CountTrackEnvelopes",
	"scope": "lua",
	"body": "reaper.CountTrackEnvelopes(${1:track})$0",
	"description": "see GetTrackEnvelope\n\n"
	},

	"CountTrackMediaItems lua": {
	"prefix": "reaper.CountTrackMediaItems",
	"scope": "lua",
	"body": "reaper.CountTrackMediaItems(${1:track})$0",
	"description": "count the number of items in the track\n\n"
	},

	"CountTracks lua": {
	"prefix": "reaper.CountTracks",
	"scope": "lua",
	"body": "reaper.CountTracks(${1:proj})$0",
	"description": "count the number of tracks in the project (proj=0 for active project)\n\n"
	},

	"CreateNewMIDIItemInProj lua": {
	"prefix": "reaper.CreateNewMIDIItemInProj",
	"scope": "lua",
	"body": "reaper.CreateNewMIDIItemInProj(${1:track}, ${2:starttime}, ${3:endtime}, ${4:optional_qnIn})$0",
	"description": "Create a new MIDI media item, containing no MIDI events. Time is in seconds unless qn is set.\n\n"
	},

	"CreateTakeAudioAccessor lua": {
	"prefix": "reaper.CreateTakeAudioAccessor",
	"scope": "lua",
	"body": "reaper.CreateTakeAudioAccessor(${1:take})$0",
	"description": "Create an audio accessor object for this take. Must only call from the main thread. See CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples.\n\n"
	},

	"CreateTrackAudioAccessor lua": {
	"prefix": "reaper.CreateTrackAudioAccessor",
	"scope": "lua",
	"body": "reaper.CreateTrackAudioAccessor(${1:track})$0",
	"description": "Create an audio accessor object for this track. Must only call from the main thread. See CreateTakeAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples.\n\n"
	},

	"CreateTrackSend lua": {
	"prefix": "reaper.CreateTrackSend",
	"scope": "lua",
	"body": "reaper.CreateTrackSend(${1:tr}, ${2:desttrIn})$0",
	"description": "Create a send/receive (desttrInOptional!=NULL), or a hardware output (desttrInOptional==NULL) with default properties, return >=0 on success (== new send/receive index). See RemoveTrackSend, GetSetTrackSendInfo, GetTrackSendInfo_Value, SetTrackSendInfo_Value.\n\n"
	},

	"CSurf_FlushUndo lua": {
	"prefix": "reaper.CSurf_FlushUndo",
	"scope": "lua",
	"body": "reaper.CSurf_FlushUndo(${1:force})$0",
	"description": "call this to force flushing of the undo states after using CSurf_On*Change()\n\n"
	},

	"CSurf_GetTouchState lua": {
	"prefix": "reaper.CSurf_GetTouchState",
	"scope": "lua",
	"body": "reaper.CSurf_GetTouchState(${1:trackid}, ${2:isPan})$0",
	"description": ""
	},

	"CSurf_GoEnd lua": {
	"prefix": "reaper.CSurf_GoEnd",
	"scope": "lua",
	"body": "reaper.CSurf_GoEnd()\n\n",
	"description": ""
	},

	"CSurf_GoStart lua": {
	"prefix": "reaper.CSurf_GoStart",
	"scope": "lua",
	"body": "reaper.CSurf_GoStart()\n\n",
	"description": ""
	},

	"CSurf_NumTracks lua": {
	"prefix": "reaper.CSurf_NumTracks",
	"scope": "lua",
	"body": "reaper.CSurf_NumTracks(${1:mcpView})$0",
	"description": ""
	},

	"CSurf_OnArrow lua": {
	"prefix": "reaper.CSurf_OnArrow",
	"scope": "lua",
	"body": "reaper.CSurf_OnArrow(${1:whichdir}, ${2:wantzoom})$0",
	"description": ""
	},

	"CSurf_OnFwd lua": {
	"prefix": "reaper.CSurf_OnFwd",
	"scope": "lua",
	"body": "reaper.CSurf_OnFwd(${1:seekplay})$0",
	"description": ""
	},

	"CSurf_OnFXChange lua": {
	"prefix": "reaper.CSurf_OnFXChange",
	"scope": "lua",
	"body": "reaper.CSurf_OnFXChange(${1:trackid}, ${2:en})$0",
	"description": ""
	},

	"CSurf_OnInputMonitorChange lua": {
	"prefix": "reaper.CSurf_OnInputMonitorChange",
	"scope": "lua",
	"body": "reaper.CSurf_OnInputMonitorChange(${1:trackid}, ${2:monitor})$0",
	"description": ""
	},

	"CSurf_OnInputMonitorChangeEx lua": {
	"prefix": "reaper.CSurf_OnInputMonitorChangeEx",
	"scope": "lua",
	"body": "reaper.CSurf_OnInputMonitorChangeEx(${1:trackid}, ${2:monitor}, ${3:allowgang})$0",
	"description": ""
	},

	"CSurf_OnMuteChange lua": {
	"prefix": "reaper.CSurf_OnMuteChange",
	"scope": "lua",
	"body": "reaper.CSurf_OnMuteChange(${1:trackid}, ${2:mute})$0",
	"description": ""
	},

	"CSurf_OnMuteChangeEx lua": {
	"prefix": "reaper.CSurf_OnMuteChangeEx",
	"scope": "lua",
	"body": "reaper.CSurf_OnMuteChangeEx(${1:trackid}, ${2:mute}, ${3:allowgang})$0",
	"description": ""
	},

	"CSurf_OnPanChange lua": {
	"prefix": "reaper.CSurf_OnPanChange",
	"scope": "lua",
	"body": "reaper.CSurf_OnPanChange(${1:trackid}, ${2:pan}, ${3:relative})$0",
	"description": ""
	},

	"CSurf_OnPanChangeEx lua": {
	"prefix": "reaper.CSurf_OnPanChangeEx",
	"scope": "lua",
	"body": "reaper.CSurf_OnPanChangeEx(${1:trackid}, ${2:pan}, ${3:relative}, ${4:allowGang})$0",
	"description": ""
	},

	"CSurf_OnPause lua": {
	"prefix": "reaper.CSurf_OnPause",
	"scope": "lua",
	"body": "reaper.CSurf_OnPause()\n\n",
	"description": ""
	},

	"CSurf_OnPlay lua": {
	"prefix": "reaper.CSurf_OnPlay",
	"scope": "lua",
	"body": "reaper.CSurf_OnPlay()\n\n",
	"description": ""
	},

	"CSurf_OnPlayRateChange lua": {
	"prefix": "reaper.CSurf_OnPlayRateChange",
	"scope": "lua",
	"body": "reaper.CSurf_OnPlayRateChange(${1:playrate})$0",
	"description": ""
	},

	"CSurf_OnRecArmChange lua": {
	"prefix": "reaper.CSurf_OnRecArmChange",
	"scope": "lua",
	"body": "reaper.CSurf_OnRecArmChange(${1:trackid}, ${2:recarm})$0",
	"description": ""
	},

	"CSurf_OnRecArmChangeEx lua": {
	"prefix": "reaper.CSurf_OnRecArmChangeEx",
	"scope": "lua",
	"body": "reaper.CSurf_OnRecArmChangeEx(${1:trackid}, ${2:recarm}, ${3:allowgang})$0",
	"description": ""
	},

	"CSurf_OnRecord lua": {
	"prefix": "reaper.CSurf_OnRecord",
	"scope": "lua",
	"body": "reaper.CSurf_OnRecord()\n\n",
	"description": ""
	},

	"CSurf_OnRecvPanChange lua": {
	"prefix": "reaper.CSurf_OnRecvPanChange",
	"scope": "lua",
	"body": "reaper.CSurf_OnRecvPanChange(${1:trackid}, ${2:recv_index}, ${3:pan}, ${4:relative})$0",
	"description": ""
	},

	"CSurf_OnRecvVolumeChange lua": {
	"prefix": "reaper.CSurf_OnRecvVolumeChange",
	"scope": "lua",
	"body": "reaper.CSurf_OnRecvVolumeChange(${1:trackid}, ${2:recv_index}, ${3:volume}, ${4:relative})$0",
	"description": ""
	},

	"CSurf_OnRew lua": {
	"prefix": "reaper.CSurf_OnRew",
	"scope": "lua",
	"body": "reaper.CSurf_OnRew(${1:seekplay})$0",
	"description": ""
	},

	"CSurf_OnRewFwd lua": {
	"prefix": "reaper.CSurf_OnRewFwd",
	"scope": "lua",
	"body": "reaper.CSurf_OnRewFwd(${1:seekplay}, ${2:dir})$0",
	"description": ""
	},

	"CSurf_OnScroll lua": {
	"prefix": "reaper.CSurf_OnScroll",
	"scope": "lua",
	"body": "reaper.CSurf_OnScroll(${1:xdir}, ${2:ydir})$0",
	"description": ""
	},

	"CSurf_OnSelectedChange lua": {
	"prefix": "reaper.CSurf_OnSelectedChange",
	"scope": "lua",
	"body": "reaper.CSurf_OnSelectedChange(${1:trackid}, ${2:selected})$0",
	"description": ""
	},

	"CSurf_OnSendPanChange lua": {
	"prefix": "reaper.CSurf_OnSendPanChange",
	"scope": "lua",
	"body": "reaper.CSurf_OnSendPanChange(${1:trackid}, ${2:send_index}, ${3:pan}, ${4:relative})$0",
	"description": ""
	},

	"CSurf_OnSendVolumeChange lua": {
	"prefix": "reaper.CSurf_OnSendVolumeChange",
	"scope": "lua",
	"body": "reaper.CSurf_OnSendVolumeChange(${1:trackid}, ${2:send_index}, ${3:volume}, ${4:relative})$0",
	"description": ""
	},

	"CSurf_OnSoloChange lua": {
	"prefix": "reaper.CSurf_OnSoloChange",
	"scope": "lua",
	"body": "reaper.CSurf_OnSoloChange(${1:trackid}, ${2:solo})$0",
	"description": ""
	},

	"CSurf_OnSoloChangeEx lua": {
	"prefix": "reaper.CSurf_OnSoloChangeEx",
	"scope": "lua",
	"body": "reaper.CSurf_OnSoloChangeEx(${1:trackid}, ${2:solo}, ${3:allowgang})$0",
	"description": ""
	},

	"CSurf_OnStop lua": {
	"prefix": "reaper.CSurf_OnStop",
	"scope": "lua",
	"body": "reaper.CSurf_OnStop()\n\n",
	"description": ""
	},

	"CSurf_OnTempoChange lua": {
	"prefix": "reaper.CSurf_OnTempoChange",
	"scope": "lua",
	"body": "reaper.CSurf_OnTempoChange(${1:bpm})$0",
	"description": ""
	},

	"CSurf_OnTrackSelection lua": {
	"prefix": "reaper.CSurf_OnTrackSelection",
	"scope": "lua",
	"body": "reaper.CSurf_OnTrackSelection(${1:trackid})$0",
	"description": ""
	},

	"CSurf_OnVolumeChange lua": {
	"prefix": "reaper.CSurf_OnVolumeChange",
	"scope": "lua",
	"body": "reaper.CSurf_OnVolumeChange(${1:trackid}, ${2:volume}, ${3:relative})$0",
	"description": ""
	},

	"CSurf_OnVolumeChangeEx lua": {
	"prefix": "reaper.CSurf_OnVolumeChangeEx",
	"scope": "lua",
	"body": "reaper.CSurf_OnVolumeChangeEx(${1:trackid}, ${2:volume}, ${3:relative}, ${4:allowGang})$0",
	"description": ""
	},

	"CSurf_OnWidthChange lua": {
	"prefix": "reaper.CSurf_OnWidthChange",
	"scope": "lua",
	"body": "reaper.CSurf_OnWidthChange(${1:trackid}, ${2:width}, ${3:relative})$0",
	"description": ""
	},

	"CSurf_OnWidthChangeEx lua": {
	"prefix": "reaper.CSurf_OnWidthChangeEx",
	"scope": "lua",
	"body": "reaper.CSurf_OnWidthChangeEx(${1:trackid}, ${2:width}, ${3:relative}, ${4:allowGang})$0",
	"description": ""
	},

	"CSurf_OnZoom lua": {
	"prefix": "reaper.CSurf_OnZoom",
	"scope": "lua",
	"body": "reaper.CSurf_OnZoom(${1:xdir}, ${2:ydir})$0",
	"description": ""
	},

	"CSurf_ResetAllCachedVolPanStates lua": {
	"prefix": "reaper.CSurf_ResetAllCachedVolPanStates",
	"scope": "lua",
	"body": "reaper.CSurf_ResetAllCachedVolPanStates()\n\n",
	"description": ""
	},

	"CSurf_ScrubAmt lua": {
	"prefix": "reaper.CSurf_ScrubAmt",
	"scope": "lua",
	"body": "reaper.CSurf_ScrubAmt(${1:amt})$0",
	"description": ""
	},

	"CSurf_SetAutoMode lua": {
	"prefix": "reaper.CSurf_SetAutoMode",
	"scope": "lua",
	"body": "reaper.CSurf_SetAutoMode(${1:mode}, ${2:ignoresurf})$0",
	"description": ""
	},

	"CSurf_SetPlayState lua": {
	"prefix": "reaper.CSurf_SetPlayState",
	"scope": "lua",
	"body": "reaper.CSurf_SetPlayState(${1:play}, ${2:pause}, ${3:rec}, ${4:ignoresurf})$0",
	"description": ""
	},

	"CSurf_SetRepeatState lua": {
	"prefix": "reaper.CSurf_SetRepeatState",
	"scope": "lua",
	"body": "reaper.CSurf_SetRepeatState(${1:rep}, ${2:ignoresurf})$0",
	"description": ""
	},

	"CSurf_SetSurfaceMute lua": {
	"prefix": "reaper.CSurf_SetSurfaceMute",
	"scope": "lua",
	"body": "reaper.CSurf_SetSurfaceMute(${1:trackid}, ${2:mute}, ${3:ignoresurf})$0",
	"description": ""
	},

	"CSurf_SetSurfacePan lua": {
	"prefix": "reaper.CSurf_SetSurfacePan",
	"scope": "lua",
	"body": "reaper.CSurf_SetSurfacePan(${1:trackid}, ${2:pan}, ${3:ignoresurf})$0",
	"description": ""
	},

	"CSurf_SetSurfaceRecArm lua": {
	"prefix": "reaper.CSurf_SetSurfaceRecArm",
	"scope": "lua",
	"body": "reaper.CSurf_SetSurfaceRecArm(${1:trackid}, ${2:recarm}, ${3:ignoresurf})$0",
	"description": ""
	},

	"CSurf_SetSurfaceSelected lua": {
	"prefix": "reaper.CSurf_SetSurfaceSelected",
	"scope": "lua",
	"body": "reaper.CSurf_SetSurfaceSelected(${1:trackid}, ${2:selected}, ${3:ignoresurf})$0",
	"description": ""
	},

	"CSurf_SetSurfaceSolo lua": {
	"prefix": "reaper.CSurf_SetSurfaceSolo",
	"scope": "lua",
	"body": "reaper.CSurf_SetSurfaceSolo(${1:trackid}, ${2:solo}, ${3:ignoresurf})$0",
	"description": ""
	},

	"CSurf_SetSurfaceVolume lua": {
	"prefix": "reaper.CSurf_SetSurfaceVolume",
	"scope": "lua",
	"body": "reaper.CSurf_SetSurfaceVolume(${1:trackid}, ${2:volume}, ${3:ignoresurf})$0",
	"description": ""
	},

	"CSurf_SetTrackListChange lua": {
	"prefix": "reaper.CSurf_SetTrackListChange",
	"scope": "lua",
	"body": "reaper.CSurf_SetTrackListChange()\n\n",
	"description": ""
	},

	"CSurf_TrackFromID lua": {
	"prefix": "reaper.CSurf_TrackFromID",
	"scope": "lua",
	"body": "reaper.CSurf_TrackFromID(${1:idx}, ${2:mcpView})$0",
	"description": ""
	},

	"CSurf_TrackToID lua": {
	"prefix": "reaper.CSurf_TrackToID",
	"scope": "lua",
	"body": "reaper.CSurf_TrackToID(${1:track}, ${2:mcpView})$0",
	"description": ""
	},

	"DB2SLIDER lua": {
	"prefix": "reaper.DB2SLIDER",
	"scope": "lua",
	"body": "reaper.DB2SLIDER(${1:x})$0",
	"description": ""
	},

	"DeleteActionShortcut lua": {
	"prefix": "reaper.DeleteActionShortcut",
	"scope": "lua",
	"body": "reaper.DeleteActionShortcut(${1:section}, ${2:cmdID}, ${3:shortcutidx})$0",
	"description": "Delete the specific shortcut for the given command ID.\nSee CountActionShortcuts, GetActionShortcutDesc, DoActionShortcutDialog.\n\n"
	},

	"DeleteEnvelopePointEx lua": {
	"prefix": "reaper.DeleteEnvelopePointEx",
	"scope": "lua",
	"body": "reaper.DeleteEnvelopePointEx(${1:envelope}, ${2:autoitem_idx}, ${3:ptidx})$0",
	"description": "Delete an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done.\nautoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\nFor automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.\nSee CountEnvelopePointsEx, GetEnvelopePointEx, SetEnvelopePointEx, InsertEnvelopePointEx.\n\n"
	},

	"DeleteEnvelopePointRange lua": {
	"prefix": "reaper.DeleteEnvelopePointRange",
	"scope": "lua",
	"body": "reaper.DeleteEnvelopePointRange(${1:envelope}, ${2:time_start}, ${3:time_end})$0",
	"description": "Delete a range of envelope points. See DeleteEnvelopePointRangeEx, DeleteEnvelopePointEx.\n\n"
	},

	"DeleteEnvelopePointRangeEx lua": {
	"prefix": "reaper.DeleteEnvelopePointRangeEx",
	"scope": "lua",
	"body": "reaper.DeleteEnvelopePointRangeEx(${1:envelope}, ${2:autoitem_idx}, ${3:time_start}, ${4:time_end})$0",
	"description": "Delete a range of envelope points. autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\n\n"
	},

	"DeleteExtState lua": {
	"prefix": "reaper.DeleteExtState",
	"scope": "lua",
	"body": "reaper.DeleteExtState(${1:section}, ${2:key}, ${3:persist})$0",
	"description": "Delete the extended state value for a specific section and key. persist=true means the value should remain deleted the next time REAPER is opened. See SetExtState, GetExtState, HasExtState.\n\n"
	},

	"DeleteProjectMarker lua": {
	"prefix": "reaper.DeleteProjectMarker",
	"scope": "lua",
	"body": "reaper.DeleteProjectMarker(${1:proj}, ${2:markrgnindexnumber}, ${3:isrgn})$0",
	"description": "Delete a marker.  proj==NULL for the active project.\n\n"
	},

	"DeleteProjectMarkerByIndex lua": {
	"prefix": "reaper.DeleteProjectMarkerByIndex",
	"scope": "lua",
	"body": "reaper.DeleteProjectMarkerByIndex(${1:proj}, ${2:markrgnidx})$0",
	"description": "Differs from DeleteProjectMarker only in that markrgnidx is 0 for the first marker/region, 1 for the next, etc (see EnumProjectMarkers3), rather than representing the displayed marker/region ID number (see SetProjectMarker4).\n\n"
	},

	"DeleteTakeMarker lua": {
	"prefix": "reaper.DeleteTakeMarker",
	"scope": "lua",
	"body": "reaper.DeleteTakeMarker(${1:take}, ${2:idx})$0",
	"description": "Delete a take marker. Note that idx will change for all following take markers. See GetNumTakeMarkers, GetTakeMarker, SetTakeMarker\n\n"
	},

	"DeleteTakeStretchMarkers lua": {
	"prefix": "reaper.DeleteTakeStretchMarkers",
	"scope": "lua",
	"body": "reaper.DeleteTakeStretchMarkers(${1:take}, ${2:idx}, ${3:optional_countIn})$0",
	"description": "Deletes one or more stretch markers. Returns number of stretch markers deleted.\n\n"
	},

	"DeleteTempoTimeSigMarker lua": {
	"prefix": "reaper.DeleteTempoTimeSigMarker",
	"scope": "lua",
	"body": "reaper.DeleteTempoTimeSigMarker(${1:project}, ${2:markerindex})$0",
	"description": "Delete a tempo/time signature marker.\n\n"
	},

	"DeleteTrack lua": {
	"prefix": "reaper.DeleteTrack",
	"scope": "lua",
	"body": "reaper.DeleteTrack(${1:tr})$0",
	"description": "deletes a track\n\n"
	},

	"DeleteTrackMediaItem lua": {
	"prefix": "reaper.DeleteTrackMediaItem",
	"scope": "lua",
	"body": "reaper.DeleteTrackMediaItem(${1:tr}, ${2:it})$0",
	"description": ""
	},

	"DestroyAudioAccessor lua": {
	"prefix": "reaper.DestroyAudioAccessor",
	"scope": "lua",
	"body": "reaper.DestroyAudioAccessor(${1:accessor})$0",
	"description": "Destroy an audio accessor. Must only call from the main thread. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime, GetAudioAccessorSamples. \n\n"
	},

	"DoActionShortcutDialog lua": {
	"prefix": "reaper.DoActionShortcutDialog",
	"scope": "lua",
	"body": "reaper.DoActionShortcutDialog(${1:hwnd}, ${2:section}, ${3:cmdID}, ${4:shortcutidx})$0",
	"description": "Open the action shortcut dialog to edit or add a shortcut for the given command ID. If (shortcutidx >= 0 && shortcutidx < CountActionShortcuts()), that specific shortcut will be replaced, otherwise a new shortcut will be added.\nSee CountActionShortcuts, GetActionShortcutDesc, DeleteActionShortcut.\n\n"
	},

	"Dock_UpdateDockID lua": {
	"prefix": "reaper.Dock_UpdateDockID",
	"scope": "lua",
	"body": "reaper.Dock_UpdateDockID(${1:ident_str}, ${2:whichDock})$0",
	"description": "updates preference for docker window ident_str to be in dock whichDock on next open\n\n"
	},

	"DockGetPosition lua": {
	"prefix": "reaper.DockGetPosition",
	"scope": "lua",
	"body": "reaper.DockGetPosition(${1:whichDock})$0",
	"description": "-1=not found, 0=bottom, 1=left, 2=top, 3=right, 4=floating\n\n"
	},

	"DockIsChildOfDock lua": {
	"prefix": "reaper.DockIsChildOfDock",
	"scope": "lua",
	"body": "retval, isFloatingDocker = reaper.DockIsChildOfDock(${1:hwnd})$0",
	"description": "returns dock index that contains hwnd, or -1\n\n"
	},

	"DockWindowActivate lua": {
	"prefix": "reaper.DockWindowActivate",
	"scope": "lua",
	"body": "reaper.DockWindowActivate(${1:hwnd})$0",
	"description": ""
	},

	"DockWindowAdd lua": {
	"prefix": "reaper.DockWindowAdd",
	"scope": "lua",
	"body": "reaper.DockWindowAdd(${1:hwnd}, ${2:name}, ${3:pos}, ${4:allowShow})$0",
	"description": ""
	},

	"DockWindowAddEx lua": {
	"prefix": "reaper.DockWindowAddEx",
	"scope": "lua",
	"body": "reaper.DockWindowAddEx(${1:hwnd}, ${2:name}, ${3:identstr}, ${4:allowShow})$0",
	"description": ""
	},

	"DockWindowRefresh lua": {
	"prefix": "reaper.DockWindowRefresh",
	"scope": "lua",
	"body": "reaper.DockWindowRefresh()\n\n",
	"description": ""
	},

	"DockWindowRefreshForHWND lua": {
	"prefix": "reaper.DockWindowRefreshForHWND",
	"scope": "lua",
	"body": "reaper.DockWindowRefreshForHWND(${1:hwnd})$0",
	"description": ""
	},

	"DockWindowRemove lua": {
	"prefix": "reaper.DockWindowRemove",
	"scope": "lua",
	"body": "reaper.DockWindowRemove(${1:hwnd})$0",
	"description": ""
	},

	"EditTempoTimeSigMarker lua": {
	"prefix": "reaper.EditTempoTimeSigMarker",
	"scope": "lua",
	"body": "reaper.EditTempoTimeSigMarker(${1:project}, ${2:markerindex})$0",
	"description": "Open the tempo/time signature marker editor dialog.\n\n"
	},

	"EnsureNotCompletelyOffscreen lua": {
	"prefix": "reaper.EnsureNotCompletelyOffscreen",
	"scope": "lua",
	"body": "integerr.left,  integerr.top,  integerr.right,  integerr.bot = reaper.EnsureNotCompletelyOffscreen(${1:integerr.left}, ${2:integerr.top}, ${3:integerr.right}, ${4:integerr.bot})$0",
	"description": "call with a saved window rect for your window and it'll correct any positioning info.\n\n"
	},

	"EnumerateFiles lua": {
	"prefix": "reaper.EnumerateFiles",
	"scope": "lua",
	"body": "reaper.EnumerateFiles(${1:path}, ${2:fileindex})$0",
	"description": "List the files in the 'path' directory. Returns NULL/nil when all files have been listed. Use fileindex = -1 to force re-read of directory (invalidate cache). See EnumerateSubdirectories\n\n"
	},

	"EnumerateSubdirectories lua": {
	"prefix": "reaper.EnumerateSubdirectories",
	"scope": "lua",
	"body": "reaper.EnumerateSubdirectories(${1:path}, ${2:subdirindex})$0",
	"description": "List the subdirectories in the 'path' directory. Use subdirindex = -1 to force re-read of directory (invalidate cache). Returns NULL/nil when all subdirectories have been listed. See EnumerateFiles\n\n"
	},

	"EnumPitchShiftModes lua": {
	"prefix": "reaper.EnumPitchShiftModes",
	"scope": "lua",
	"body": "retval, str = reaper.EnumPitchShiftModes(${1:mode})$0",
	"description": "Start querying modes at 0, returns FALSE when no more modes possible, sets strOut to NULL if a mode is currently unsupported\n\n"
	},

	"EnumPitchShiftSubModes lua": {
	"prefix": "reaper.EnumPitchShiftSubModes",
	"scope": "lua",
	"body": "reaper.EnumPitchShiftSubModes(${1:mode}, ${2:submode})$0",
	"description": "Returns submode name, or NULL\n\n"
	},

	"EnumProjectMarkers lua": {
	"prefix": "reaper.EnumProjectMarkers",
	"scope": "lua",
	"body": "retval, isrgn, pos, rgnend, name, markrgnindexnumber = reaper.EnumProjectMarkers(${1:idx})$0",
	"description": ""
	},

	"EnumProjectMarkers2 lua": {
	"prefix": "reaper.EnumProjectMarkers2",
	"scope": "lua",
	"body": "retval, isrgn, pos, rgnend, name, markrgnindexnumber = reaper.EnumProjectMarkers2(${1:proj}, ${2:idx})$0",
	"description": ""
	},

	"EnumProjectMarkers3 lua": {
	"prefix": "reaper.EnumProjectMarkers3",
	"scope": "lua",
	"body": "retval, isrgn, pos, rgnend, name, markrgnindexnumber, color = reaper.EnumProjectMarkers3(${1:proj}, ${2:idx})$0",
	"description": ""
	},

	"EnumProjects lua": {
	"prefix": "reaper.EnumProjects",
	"scope": "lua",
	"body": "retval, optional_projfn = reaper.EnumProjects(${1:idx})$0",
	"description": "idx=-1 for current project,projfn can be NULL if not interested in filename. use idx 0x40000000 for currently rendering project, if any.\n\n"
	},

	"EnumProjExtState lua": {
	"prefix": "reaper.EnumProjExtState",
	"scope": "lua",
	"body": "retval, optional_key, optional_val = reaper.EnumProjExtState(${1:proj}, ${2:extname}, ${3:idx})$0",
	"description": "Enumerate the data stored with the project for a specific extname. Returns false when there is no more data. See SetProjExtState, GetProjExtState.\n\n"
	},

	"EnumRegionRenderMatrix lua": {
	"prefix": "reaper.EnumRegionRenderMatrix",
	"scope": "lua",
	"body": "reaper.EnumRegionRenderMatrix(${1:proj}, ${2:regionindex}, ${3:rendertrack})$0",
	"description": "Enumerate which tracks will be rendered within this region when using the region render matrix. When called with rendertrack==0, the function returns the first track that will be rendered (which may be the master track); rendertrack==1 will return the next track rendered, and so on. The function returns NULL when there are no more tracks that will be rendered within this region.\n\n"
	},

	"EnumTrackMIDIProgramNames lua": {
	"prefix": "reaper.EnumTrackMIDIProgramNames",
	"scope": "lua",
	"body": "retval, programName = reaper.EnumTrackMIDIProgramNames(${1:track}, ${2:programNumber}, ${3:programName})$0",
	"description": "returns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated\n\n"
	},

	"EnumTrackMIDIProgramNamesEx lua": {
	"prefix": "reaper.EnumTrackMIDIProgramNamesEx",
	"scope": "lua",
	"body": "retval, programName = reaper.EnumTrackMIDIProgramNamesEx(${1:proj}, ${2:track}, ${3:programNumber}, ${4:programName})$0",
	"description": "returns false if there are no plugins on the track that support MIDI programs,or if all programs have been enumerated\n\n"
	},

	"Envelope_Evaluate lua": {
	"prefix": "reaper.Envelope_Evaluate",
	"scope": "lua",
	"body": "retval, value, dVdS, ddVdS, dddVdS = reaper.Envelope_Evaluate(${1:envelope}, ${2:time}, ${3:samplerate}, ${4:samplesRequested})$0",
	"description": "Get the effective envelope value at a given time position. samplesRequested is how long the caller expects until the next call to Envelope_Evaluate (often, the buffer block size). The return value is how many samples beyond that time position that the returned values are valid. dVdS is the change in value per sample (first derivative), ddVdS is the second derivative, dddVdS is the third derivative. See GetEnvelopeScalingMode.\n\n"
	},

	"Envelope_FormatValue lua": {
	"prefix": "reaper.Envelope_FormatValue",
	"scope": "lua",
	"body": "buf = reaper.Envelope_FormatValue(${1:env}, ${2:value})$0",
	"description": "Formats the value of an envelope to a user-readable form\n\n"
	},

	"Envelope_GetParentTake lua": {
	"prefix": "reaper.Envelope_GetParentTake",
	"scope": "lua",
	"body": "retval, index, index2 = reaper.Envelope_GetParentTake(${1:env})$0",
	"description": "If take envelope, gets the take from the envelope. If FX, indexOut set to FX index, index2Out set to parameter index, otherwise -1.\n\n"
	},

	"Envelope_GetParentTrack lua": {
	"prefix": "reaper.Envelope_GetParentTrack",
	"scope": "lua",
	"body": "retval, index, index2 = reaper.Envelope_GetParentTrack(${1:env})$0",
	"description": "If track envelope, gets the track from the envelope. If FX, indexOut set to FX index, index2Out set to parameter index, otherwise -1.\n\n"
	},

	"Envelope_SortPoints lua": {
	"prefix": "reaper.Envelope_SortPoints",
	"scope": "lua",
	"body": "reaper.Envelope_SortPoints(${1:envelope})$0",
	"description": "Sort envelope points by time. See SetEnvelopePoint, InsertEnvelopePoint.\n\n"
	},

	"Envelope_SortPointsEx lua": {
	"prefix": "reaper.Envelope_SortPointsEx",
	"scope": "lua",
	"body": "reaper.Envelope_SortPointsEx(${1:envelope}, ${2:autoitem_idx})$0",
	"description": "Sort envelope points by time. autoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc. See SetEnvelopePoint, InsertEnvelopePoint.\n\n"
	},

	"ExecProcess lua": {
	"prefix": "reaper.ExecProcess",
	"scope": "lua",
	"body": "reaper.ExecProcess(${1:cmdline}, ${2:timeoutmsec})$0",
	"description": "Executes command line, returns NULL on total failure, otherwise the return value, a newline, and then the output of the command. If timeoutmsec is 0, command will be allowed to run indefinitely (recommended for large amounts of returned output). timeoutmsec is -1 for no wait/terminate, -2 for no wait and minimize\n\n"
	},

	"file_exists lua": {
	"prefix": "reaper.file_exists",
	"scope": "lua",
	"body": "reaper.file_exists(${1:path})$0",
	"description": "returns true if path points to a valid, readable file\n\n"
	},

	"FindTempoTimeSigMarker lua": {
	"prefix": "reaper.FindTempoTimeSigMarker",
	"scope": "lua",
	"body": "reaper.FindTempoTimeSigMarker(${1:project}, ${2:time})$0",
	"description": "Find the tempo/time signature marker that falls at or before this time position (the marker that is in effect as of this time position).\n\n"
	},

	"format_timestr lua": {
	"prefix": "reaper.format_timestr",
	"scope": "lua",
	"body": "buf = reaper.format_timestr(${1:tpos}, ${2:buf})$0",
	"description": "Format tpos (which is time in seconds) as hh:mm:ss.sss. See format_timestr_pos, format_timestr_len.\n\n"
	},

	"format_timestr_len lua": {
	"prefix": "reaper.format_timestr_len",
	"scope": "lua",
	"body": "buf = reaper.format_timestr_len(${1:tpos}, ${2:buf}, ${3:offset}, ${4:modeoverride})$0",
	"description": "time formatting mode overrides: -1=proj default.\n0=time\n1=measures.beats + time\n2=measures.beats\n3=seconds\n4=samples\n5=h:m:s:f\noffset is start of where the length will be calculated from\n\n"
	},

	"format_timestr_pos lua": {
	"prefix": "reaper.format_timestr_pos",
	"scope": "lua",
	"body": "buf = reaper.format_timestr_pos(${1:tpos}, ${2:buf}, ${3:modeoverride})$0",
	"description": "time formatting mode overrides: -1=proj default.\n0=time\n1=measures.beats + time\n2=measures.beats\n3=seconds\n4=samples\n5=h:m:s:f\n"
	},

	"genGuid lua": {
	"prefix": "reaper.genGuid",
	"scope": "lua",
	"body": "gGUID = reaper.genGuid(${1:gGUID})$0",
	"description": ""
	},

	"get_config_var_string lua": {
	"prefix": "reaper.get_config_var_string",
	"scope": "lua",
	"body": "retval, buf = reaper.get_config_var_string(${1:name})$0",
	"description": "gets ini configuration variable value as string\n\n"
	},

	"get_ini_file lua": {
	"prefix": "reaper.get_ini_file",
	"scope": "lua",
	"body": "reaper.get_ini_file()\n\n",
	"description": "Get reaper.ini full filename.\n\n"
	},

	"GetActionShortcutDesc lua": {
	"prefix": "reaper.GetActionShortcutDesc",
	"scope": "lua",
	"body": "retval, desc = reaper.GetActionShortcutDesc(${1:section}, ${2:cmdID}, ${3:shortcutidx})$0",
	"description": "Get the text description of a specific shortcut for the given command ID.\nSee CountActionShortcuts,DeleteActionShortcut,DoActionShortcutDialog.\n\n"
	},

	"GetActiveTake lua": {
	"prefix": "reaper.GetActiveTake",
	"scope": "lua",
	"body": "reaper.GetActiveTake(${1:item})$0",
	"description": "get the active take in this item\n\n"
	},

	"GetAllProjectPlayStates lua": {
	"prefix": "reaper.GetAllProjectPlayStates",
	"scope": "lua",
	"body": "reaper.GetAllProjectPlayStates(${1:ignoreProject})$0",
	"description": "returns the bitwise OR of all project play states (1=playing, 2=pause, 4=recording)\n\n"
	},

	"GetAppVersion lua": {
	"prefix": "reaper.GetAppVersion",
	"scope": "lua",
	"body": "reaper.GetAppVersion()\n\n",
	"description": "Returns app version which may include an OS/arch signifier, such as: '6.17' (windows 32-bit), '6.17/x64' (windows 64-bit), '6.17/OSX64' (macOS 64-bit Intel), '6.17/OSX' (macOS 32-bit), '6.17/macOS-arm64', '6.17/linux-x86_64', '6.17/linux-i686', '6.17/linux-aarch64', '6.17/linux-armv7l', etc\n\n"
	},

	"GetArmedCommand lua": {
	"prefix": "reaper.GetArmedCommand",
	"scope": "lua",
	"body": "retval, sec = reaper.GetArmedCommand()\n\n",
	"description": "gets the currently armed command and section name (returns 0 if nothing armed). section name is empty-string for main section.\n\n"
	},

	"GetAudioAccessorEndTime lua": {
	"prefix": "reaper.GetAudioAccessorEndTime",
	"scope": "lua",
	"body": "reaper.GetAudioAccessorEndTime(${1:accessor})$0",
	"description": "Get the end time of the audio that can be returned from this accessor. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorSamples.\n\n"
	},

	"GetAudioAccessorHash lua": {
	"prefix": "reaper.GetAudioAccessorHash",
	"scope": "lua",
	"body": "hashNeed128 = reaper.GetAudioAccessorHash(${1:accessor}, ${2:hashNeed128})$0",
	"description": "Deprecated. See AudioAccessorStateChanged instead.\n\n"
	},

	"GetAudioAccessorSamples lua": {
	"prefix": "reaper.GetAudioAccessorSamples",
	"scope": "lua",
	"body": "reaper.GetAudioAccessorSamples(${1:accessor}, ${2:samplerate}, ${3:numchannels}, ${4:starttime_sec}, ${5:numsamplesperchannel}, ${6:samplebuffer})$0",
	"description": "Get a block of samples from the audio accessor. Samples are extracted immediately pre-FX, and returned interleaved (first sample of first channel, first sample of second channel...). Returns 0 if no audio, 1 if audio, -1 on error. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorStartTime, GetAudioAccessorEndTime.\nThis function has special handling in Python, and only returns two objects, the API function return value, and the sample buffer. Example usage:\naa = RPR_CreateTrackAudioAccessor(tr)\nbuf = list([0]*2*1024) # 2 channels, 1024 samples each, initialized to zero\npos = 0.0\n(ret, buf) = GetAudioAccessorSamples(aa, 44100, 2, pos, 1024, buf)\n# buf now holds the first 2*1024 audio samples from the track.\n# typically GetAudioAccessorSamples() would be called within a loop, increasing pos each time.\n"
	},

	"GetAudioAccessorStartTime lua": {
	"prefix": "reaper.GetAudioAccessorStartTime",
	"scope": "lua",
	"body": "reaper.GetAudioAccessorStartTime(${1:accessor})$0",
	"description": "Get the start time of the audio that can be returned from this accessor. See CreateTakeAudioAccessor, CreateTrackAudioAccessor, DestroyAudioAccessor, AudioAccessorStateChanged, GetAudioAccessorEndTime, GetAudioAccessorSamples.\n\n"
	},

	"GetAudioDeviceInfo lua": {
	"prefix": "reaper.GetAudioDeviceInfo",
	"scope": "lua",
	"body": "retval, desc = reaper.GetAudioDeviceInfo(${1:attribute})$0",
	"description": "get information about the currently open audio device. attribute can be MODE, IDENT_IN, IDENT_OUT, BSIZE, SRATE, BPS. returns false if unknown attribute or device not open.\n\n"
	},

	"GetConfigWantsDock lua": {
	"prefix": "reaper.GetConfigWantsDock",
	"scope": "lua",
	"body": "reaper.GetConfigWantsDock(${1:ident_str})$0",
	"description": "gets the dock ID desired by ident_str, if any\n\n"
	},

	"GetCurrentProjectInLoadSave lua": {
	"prefix": "reaper.GetCurrentProjectInLoadSave",
	"scope": "lua",
	"body": "reaper.GetCurrentProjectInLoadSave()\n\n",
	"description": "returns current project if in load/save (usually only used from project_config_extension_t)\n\n"
	},

	"GetCursorContext lua": {
	"prefix": "reaper.GetCursorContext",
	"scope": "lua",
	"body": "reaper.GetCursorContext()\n\n",
	"description": "return the current cursor context: 0 if track panels, 1 if items, 2 if envelopes, otherwise unknown\n\n"
	},

	"GetCursorContext2 lua": {
	"prefix": "reaper.GetCursorContext2",
	"scope": "lua",
	"body": "reaper.GetCursorContext2(${1:want_last_valid})$0",
	"description": "0 if track panels, 1 if items, 2 if envelopes, otherwise unknown (unlikely when want_last_valid is true)\n\n"
	},

	"GetCursorPosition lua": {
	"prefix": "reaper.GetCursorPosition",
	"scope": "lua",
	"body": "reaper.GetCursorPosition()\n\n",
	"description": "edit cursor position\n\n"
	},

	"GetCursorPositionEx lua": {
	"prefix": "reaper.GetCursorPositionEx",
	"scope": "lua",
	"body": "reaper.GetCursorPositionEx(${1:proj})$0",
	"description": "edit cursor position\n\n"
	},

	"GetDisplayedMediaItemColor lua": {
	"prefix": "reaper.GetDisplayedMediaItemColor",
	"scope": "lua",
	"body": "reaper.GetDisplayedMediaItemColor(${1:item})$0",
	"description": "see GetDisplayedMediaItemColor2.\n\n"
	},

	"GetDisplayedMediaItemColor2 lua": {
	"prefix": "reaper.GetDisplayedMediaItemColor2",
	"scope": "lua",
	"body": "reaper.GetDisplayedMediaItemColor2(${1:item}, ${2:take})$0",
	"description": "Returns the custom take, item, or track color that is used (according to the user preference) to color the media item. The returned color is OS dependent|0x01000000 (i.e. ColorToNative(r,g,b)|0x01000000), so a return of zero means 'no color', not black.\n\n"
	},

	"GetEnvelopeInfo_Value lua": {
	"prefix": "reaper.GetEnvelopeInfo_Value",
	"scope": "lua",
	"body": "reaper.GetEnvelopeInfo_Value(${1:env}, ${2:parmname})$0",
	"description": "Gets an envelope numerical-value attribute:\nI_TCPY : int : Y offset of envelope relative to parent track (may be separate lane or overlap with track contents)\nI_TCPH : int : visible height of envelope\nI_TCPY_USED : int : Y offset of envelope relative to parent track, exclusive of padding\nI_TCPH_USED : int : visible height of envelope, exclusive of padding\nP_TRACK : MediaTrack * : parent track pointer (if any)\nP_DESTTRACK : MediaTrack * : destination track pointer, if on a send\nP_ITEM : MediaItem * : parent item pointer (if any)\nP_TAKE : MediaItem_Take * : parent take pointer (if any)\nI_SEND_IDX : int : 1-based index of send in P_TRACK, or 0 if not a send\nI_HWOUT_IDX : int : 1-based index of hardware output in P_TRACK or 0 if not a hardware output\nI_RECV_IDX : int : 1-based index of receive in P_DESTTRACK or 0 if not a send/receive\n"
	},

	"GetEnvelopeName lua": {
	"prefix": "reaper.GetEnvelopeName",
	"scope": "lua",
	"body": "retval, buf = reaper.GetEnvelopeName(${1:env})$0",
	"description": ""
	},

	"GetEnvelopePoint lua": {
	"prefix": "reaper.GetEnvelopePoint",
	"scope": "lua",
	"body": "retval, time, value, shape, tension, selected = reaper.GetEnvelopePoint(${1:envelope}, ${2:ptidx})$0",
	"description": "Get the attributes of an envelope point. See GetEnvelopePointEx.\n\n"
	},

	"GetEnvelopePointByTime lua": {
	"prefix": "reaper.GetEnvelopePointByTime",
	"scope": "lua",
	"body": "reaper.GetEnvelopePointByTime(${1:envelope}, ${2:time})$0",
	"description": "Returns the envelope point at or immediately prior to the given time position. See GetEnvelopePointByTimeEx.\n\n"
	},

	"GetEnvelopePointByTimeEx lua": {
	"prefix": "reaper.GetEnvelopePointByTimeEx",
	"scope": "lua",
	"body": "reaper.GetEnvelopePointByTimeEx(${1:envelope}, ${2:autoitem_idx}, ${3:time})$0",
	"description": "Returns the envelope point at or immediately prior to the given time position.\nautoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\nFor automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.\nSee GetEnvelopePointEx, SetEnvelopePointEx, InsertEnvelopePointEx, DeleteEnvelopePointEx.\n\n"
	},

	"GetEnvelopePointEx lua": {
	"prefix": "reaper.GetEnvelopePointEx",
	"scope": "lua",
	"body": "retval, time, value, shape, tension, selected = reaper.GetEnvelopePointEx(${1:envelope}, ${2:autoitem_idx}, ${3:ptidx})$0",
	"description": "Get the attributes of an envelope point.\nautoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\nFor automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.\nSee CountEnvelopePointsEx, SetEnvelopePointEx, InsertEnvelopePointEx, DeleteEnvelopePointEx.\n\n"
	},

	"GetEnvelopeScalingMode lua": {
	"prefix": "reaper.GetEnvelopeScalingMode",
	"scope": "lua",
	"body": "reaper.GetEnvelopeScalingMode(${1:env})$0",
	"description": "Returns the envelope scaling mode: 0=no scaling, 1=fader scaling. All API functions deal with raw envelope point values, to convert raw from/to scaled values see ScaleFromEnvelopeMode, ScaleToEnvelopeMode.\n\n"
	},

	"GetEnvelopeStateChunk lua": {
	"prefix": "reaper.GetEnvelopeStateChunk",
	"scope": "lua",
	"body": "retval, str = reaper.GetEnvelopeStateChunk(${1:env}, ${2:str}, ${3:isundo})$0",
	"description": "Gets the RPPXML state of an envelope, returns true if successful. Undo flag is a performance/caching hint.\n\n"
	},

	"GetEnvelopeUIState lua": {
	"prefix": "reaper.GetEnvelopeUIState",
	"scope": "lua",
	"body": "reaper.GetEnvelopeUIState(${1:env})$0",
	"description": "gets information on the UI state of an envelope: returns &1 if automation/modulation is playing back, &2 if automation is being actively written, &4 if the envelope recently had an effective automation mode change\n\n"
	},

	"GetExePath lua": {
	"prefix": "reaper.GetExePath",
	"scope": "lua",
	"body": "reaper.GetExePath()\n\n",
	"description": "returns path of REAPER.exe (not including EXE), i.e. C:\Program Files\REAPER\n\n"
	},

	"GetExtState lua": {
	"prefix": "reaper.GetExtState",
	"scope": "lua",
	"body": "reaper.GetExtState(${1:section}, ${2:key})$0",
	"description": "Get the extended state value for a specific section and key. See SetExtState, DeleteExtState, HasExtState.\n\n"
	},

	"GetFocusedFX lua": {
	"prefix": "reaper.GetFocusedFX",
	"scope": "lua",
	"body": "retval, tracknumber, itemnumber, fxnumber = reaper.GetFocusedFX()\n\n",
	"description": "This function is deprecated (returns GetFocusedFX2()&3), see GetFocusedFX2.\n\n"
	},

	"GetFocusedFX2 lua": {
	"prefix": "reaper.GetFocusedFX2",
	"scope": "lua",
	"body": "retval, tracknumber, itemnumber, fxnumber = reaper.GetFocusedFX2()\n\n",
	"description": "Return value has 1 set if track FX, 2 if take/item FX, 4 set if FX is no longer focused but still open. tracknumber==0 means the master track, 1 means track 1, etc. itemnumber is zero-based (or -1 if not an item). For interpretation of fxnumber, see GetLastTouchedFX.\n\n"
	},

	"GetFreeDiskSpaceForRecordPath lua": {
	"prefix": "reaper.GetFreeDiskSpaceForRecordPath",
	"scope": "lua",
	"body": "reaper.GetFreeDiskSpaceForRecordPath(${1:proj}, ${2:pathidx})$0",
	"description": "returns free disk space in megabytes, pathIdx 0 for normal, 1 for alternate.\n\n"
	},

	"GetFXEnvelope lua": {
	"prefix": "reaper.GetFXEnvelope",
	"scope": "lua",
	"body": "reaper.GetFXEnvelope(${1:track}, ${2:fxindex}, ${3:parameterindex}, ${4:create})$0",
	"description": "Returns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created.\n\n"
	},

	"GetGlobalAutomationOverride lua": {
	"prefix": "reaper.GetGlobalAutomationOverride",
	"scope": "lua",
	"body": "reaper.GetGlobalAutomationOverride()\n\n",
	"description": "return -1=no override, 0=trim/read, 1=read, 2=touch, 3=write, 4=latch, 5=bypass\n\n"
	},

	"GetHZoomLevel lua": {
	"prefix": "reaper.GetHZoomLevel",
	"scope": "lua",
	"body": "reaper.GetHZoomLevel()\n\n",
	"description": "returns pixels/second\n\n"
	},

	"GetInputActivityLevel lua": {
	"prefix": "reaper.GetInputActivityLevel",
	"scope": "lua",
	"body": "reaper.GetInputActivityLevel(${1:input_id})$0",
	"description": "returns approximate input level if available, 0-511 mono inputs, |1024 for stereo pairs, 4096+devidx*32 for MIDI devices\n\n"
	},

	"GetInputChannelName lua": {
	"prefix": "reaper.GetInputChannelName",
	"scope": "lua",
	"body": "reaper.GetInputChannelName(${1:channelIndex})$0",
	"description": ""
	},

	"GetInputOutputLatency lua": {
	"prefix": "reaper.GetInputOutputLatency",
	"scope": "lua",
	"body": "inputlatency, outputLatency = reaper.GetInputOutputLatency()\n\n",
	"description": "Gets the audio device input/output latency in samples\n\n"
	},

	"GetItemEditingTime2 lua": {
	"prefix": "reaper.GetItemEditingTime2",
	"scope": "lua",
	"body": "number, which_item, flags = reaper.GetItemEditingTime2()\n\n",
	"description": "returns time of relevant edit, set which_item to the pcm_source (if applicable), flags (if specified) will be set to 1 for edge resizing, 2 for fade change, 4 for item move, 8 for item slip edit (edit cursor time or start of item)\n\n"
	},

	"GetItemFromPoint lua": {
	"prefix": "reaper.GetItemFromPoint",
	"scope": "lua",
	"body": "MediaItem, take = reaper.GetItemFromPoint(${1:screen_x}, ${2:screen_y}, ${3:allow_locked})$0",
	"description": "Returns the first item at the screen coordinates specified. If allow_locked is false, locked items are ignored. If takeOutOptional specified, returns the take hit. See GetThingFromPoint.\n\n"
	},

	"GetItemProjectContext lua": {
	"prefix": "reaper.GetItemProjectContext",
	"scope": "lua",
	"body": "reaper.GetItemProjectContext(${1:item})$0",
	"description": ""
	},

	"GetItemStateChunk lua": {
	"prefix": "reaper.GetItemStateChunk",
	"scope": "lua",
	"body": "retval, str = reaper.GetItemStateChunk(${1:item}, ${2:str}, ${3:isundo})$0",
	"description": "Gets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint.\n\n"
	},

	"GetLastColorThemeFile lua": {
	"prefix": "reaper.GetLastColorThemeFile",
	"scope": "lua",
	"body": "reaper.GetLastColorThemeFile()\n\n",
	"description": ""
	},

	"GetLastMarkerAndCurRegion lua": {
	"prefix": "reaper.GetLastMarkerAndCurRegion",
	"scope": "lua",
	"body": "markeridx, regionidx = reaper.GetLastMarkerAndCurRegion(${1:proj}, ${2:time})$0",
	"description": "Get the last project marker before time, and/or the project region that includes time. markeridx and regionidx are returned not necessarily as the displayed marker/region index, but as the index that can be passed to EnumProjectMarkers. Either or both of markeridx and regionidx may be NULL. See EnumProjectMarkers.\n\n"
	},

	"GetLastTouchedFX lua": {
	"prefix": "reaper.GetLastTouchedFX",
	"scope": "lua",
	"body": "retval, tracknumber, fxnumber, paramnumber = reaper.GetLastTouchedFX()\n\n",
	"description": "Returns true if the last touched FX parameter is valid, false otherwise. The low word of tracknumber is the 1-based track index -- 0 means the master track, 1 means track 1, etc. If the high word of tracknumber is nonzero, it refers to the 1-based item index (1 is the first item on the track, etc). For track FX, the low 24 bits of fxnumber refer to the FX index in the chain, and if the next 8 bits are 01, then the FX is record FX. For item FX, the low word defines the FX index in the chain, and the high word defines the take number.\n\n"
	},

	"GetLastTouchedTrack lua": {
	"prefix": "reaper.GetLastTouchedTrack",
	"scope": "lua",
	"body": "reaper.GetLastTouchedTrack()\n\n",
	"description": ""
	},

	"GetMainHwnd lua": {
	"prefix": "reaper.GetMainHwnd",
	"scope": "lua",
	"body": "reaper.GetMainHwnd()\n\n",
	"description": ""
	},

	"GetMasterMuteSoloFlags lua": {
	"prefix": "reaper.GetMasterMuteSoloFlags",
	"scope": "lua",
	"body": "reaper.GetMasterMuteSoloFlags()\n\n",
	"description": "&1=master mute,&2=master solo. This is deprecated as you can just query the master track as well.\n\n"
	},

	"GetMasterTrack lua": {
	"prefix": "reaper.GetMasterTrack",
	"scope": "lua",
	"body": "reaper.GetMasterTrack(${1:proj})$0",
	"description": ""
	},

	"GetMasterTrackVisibility lua": {
	"prefix": "reaper.GetMasterTrackVisibility",
	"scope": "lua",
	"body": "reaper.GetMasterTrackVisibility()\n\n",
	"description": "returns &1 if the master track is visible in the TCP, &2 if NOT visible in the mixer. See SetMasterTrackVisibility.\n\n"
	},

	"GetMaxMidiInputs lua": {
	"prefix": "reaper.GetMaxMidiInputs",
	"scope": "lua",
	"body": "reaper.GetMaxMidiInputs()\n\n",
	"description": "returns max dev for midi inputs/outputs\n\n"
	},

	"GetMaxMidiOutputs lua": {
	"prefix": "reaper.GetMaxMidiOutputs",
	"scope": "lua",
	"body": "reaper.GetMaxMidiOutputs()\n\n",
	"description": ""
	},

	"GetMediaFileMetadata lua": {
	"prefix": "reaper.GetMediaFileMetadata",
	"scope": "lua",
	"body": "retval, buf = reaper.GetMediaFileMetadata(${1:mediaSource}, ${2:identifier})$0",
	"description": "Get text-based metadata from a media file for a given identifier. Call with identifier='' to list all identifiers contained in the file, separated by newlines. May return '[Binary data]' for metadata that REAPER doesn't handle.\n\n"
	},

	"GetMediaItem lua": {
	"prefix": "reaper.GetMediaItem",
	"scope": "lua",
	"body": "reaper.GetMediaItem(${1:proj}, ${2:itemidx})$0",
	"description": "get an item from a project by item count (zero-based) (proj=0 for active project)\n\n"
	},

	"GetMediaItem_Track lua": {
	"prefix": "reaper.GetMediaItem_Track",
	"scope": "lua",
	"body": "reaper.GetMediaItem_Track(${1:item})$0",
	"description": "Get parent track of media item\n\n"
	},

	"GetMediaItemInfo_Value lua": {
	"prefix": "reaper.GetMediaItemInfo_Value",
	"scope": "lua",
	"body": "reaper.GetMediaItemInfo_Value(${1:item}, ${2:parmname})$0",
	"description": "Get media item numerical-value attributes.\nB_MUTE : bool * : muted (item solo overrides). setting this value will clear C_MUTE_SOLO.\nB_MUTE_ACTUAL : bool * : muted (ignores solo). setting this value will not affect C_MUTE_SOLO.\nC_MUTE_SOLO : char * : solo override (-1=soloed, 0=no override, 1=unsoloed). note that this API does not automatically unsolo other items when soloing (nor clear the unsolos when clearing the last soloed item), it must be done by the caller via action or via this API.\nB_LOOPSRC : bool * : loop source\nB_ALLTAKESPLAY : bool * : all takes play\nB_UISEL : bool * : selected in arrange view\nC_BEATATTACHMODE : char * : item timebase, -1=track or project default, 1=beats (position, length, rate), 2=beats (position only). for auto-stretch timebase: C_BEATATTACHMODE=1, C_AUTOSTRETCH=1\nC_AUTOSTRETCH: : char * : auto-stretch at project tempo changes, 1=enabled, requires C_BEATATTACHMODE=1\nC_LOCK : char * : locked, &1=locked\nD_VOL : double * : item volume,  0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc\nD_POSITION : double * : item position in seconds\nD_LENGTH : double * : item length in seconds\nD_SNAPOFFSET : double * : item snap offset in seconds\nD_FADEINLEN : double * : item manual fadein length in seconds\nD_FADEOUTLEN : double * : item manual fadeout length in seconds\nD_FADEINDIR : double * : item fadein curvature, -1..1\nD_FADEOUTDIR : double * : item fadeout curvature, -1..1\nD_FADEINLEN_AUTO : double * : item auto-fadein length in seconds, -1=no auto-fadein\nD_FADEOUTLEN_AUTO : double * : item auto-fadeout length in seconds, -1=no auto-fadeout\nC_FADEINSHAPE : int * : fadein shape, 0..6, 0=linear\nC_FADEOUTSHAPE : int * : fadeout shape, 0..6, 0=linear\nI_GROUPID : int * : group ID, 0=no group\nI_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)\nI_LASTH : int * : height in pixels (read-only)\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color\nI_CURTAKE : int * : active take number\nIP_ITEMNUMBER : int : item number on this track (read-only, returns the item number directly)\nF_FREEMODE_Y : float * : free item positioning Y-position, 0=top of track, 1=bottom of track (will never be 1)\nF_FREEMODE_H : float * : free item positioning height, 0=no height, 1=full height of track (will never be 0)\nP_TRACK : MediaTrack * : (read-only)\n"
	},

	"GetMediaItemNumTakes lua": {
	"prefix": "reaper.GetMediaItemNumTakes",
	"scope": "lua",
	"body": "reaper.GetMediaItemNumTakes(${1:item})$0",
	"description": ""
	},

	"GetMediaItemTake lua": {
	"prefix": "reaper.GetMediaItemTake",
	"scope": "lua",
	"body": "reaper.GetMediaItemTake(${1:item}, ${2:tk})$0",
	"description": ""
	},

	"GetMediaItemTake_Item lua": {
	"prefix": "reaper.GetMediaItemTake_Item",
	"scope": "lua",
	"body": "reaper.GetMediaItemTake_Item(${1:take})$0",
	"description": "Get parent item of media item take\n\n"
	},

	"GetMediaItemTake_Peaks lua": {
	"prefix": "reaper.GetMediaItemTake_Peaks",
	"scope": "lua",
	"body": "reaper.GetMediaItemTake_Peaks(${1:take}, ${2:peakrate}, ${3:starttime}, ${4:numchannels}, ${5:numsamplesperchannel}, ${6:want_extra_type}, ${7:buf})$0",
	"description": "Gets block of peak samples to buf. Note that the peak samples are interleaved, but in two or three blocks (maximums, then minimums, then extra). Return value has 20 bits of returned sample count, then 4 bits of output_mode (0xf00000), then a bit to signify whether extra_type was available (0x1000000). extra_type can be 115 ('s') for spectral information, which will return peak samples as integers with the low 15 bits frequency, next 14 bits tonality.\n\n"
	},

	"GetMediaItemTake_Source lua": {
	"prefix": "reaper.GetMediaItemTake_Source",
	"scope": "lua",
	"body": "reaper.GetMediaItemTake_Source(${1:take})$0",
	"description": "Get media source of media item take\n\n"
	},

	"GetMediaItemTake_Track lua": {
	"prefix": "reaper.GetMediaItemTake_Track",
	"scope": "lua",
	"body": "reaper.GetMediaItemTake_Track(${1:take})$0",
	"description": "Get parent track of media item take\n\n"
	},

	"GetMediaItemTakeByGUID lua": {
	"prefix": "reaper.GetMediaItemTakeByGUID",
	"scope": "lua",
	"body": "reaper.GetMediaItemTakeByGUID(${1:project}, ${2:guidGUID})$0",
	"description": ""
	},

	"GetMediaItemTakeInfo_Value lua": {
	"prefix": "reaper.GetMediaItemTakeInfo_Value",
	"scope": "lua",
	"body": "reaper.GetMediaItemTakeInfo_Value(${1:take}, ${2:parmname})$0",
	"description": "Get media item take numerical-value attributes.\nD_STARTOFFS : double * : start offset in source media, in seconds\nD_VOL : double * : take volume, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc, negative if take polarity is flipped\nD_PAN : double * : take pan, -1..1\nD_PANLAW : double * : take pan law, -1=default, 0.5=-6dB, 1.0=+0dB, etc\nD_PLAYRATE : double * : take playback rate, 0.5=half speed, 1=normal, 2=double speed, etc\nD_PITCH : double * : take pitch adjustment in semitones, -12=one octave down, 0=normal, +12=one octave up, etc\nB_PPITCH : bool * : preserve pitch when changing playback rate\nI_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)\nI_LASTH : int * : height in pixels (read-only)\nI_CHANMODE : int * : channel mode, 0=normal, 1=reverse stereo, 2=downmix, 3=left, 4=right\nI_PITCHMODE : int * : pitch shifter mode, -1=projext default, otherwise high 2 bytes=shifter, low 2 bytes=parameter\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color\nIP_TAKENUMBER : int : take number (read-only, returns the take number directly)\nP_TRACK : pointer to MediaTrack (read-only)\nP_ITEM : pointer to MediaItem (read-only)\nP_SOURCE : PCM_source *. Note that if setting this, you should first retrieve the old source, set the new, THEN delete the old.\n"
	},

	"GetMediaItemTrack lua": {
	"prefix": "reaper.GetMediaItemTrack",
	"scope": "lua",
	"body": "reaper.GetMediaItemTrack(${1:item})$0",
	"description": ""
	},

	"GetMediaSourceFileName lua": {
	"prefix": "reaper.GetMediaSourceFileName",
	"scope": "lua",
	"body": "filenamebuf = reaper.GetMediaSourceFileName(${1:source})$0",
	"description": "Copies the media source filename to filenamebuf. Note that in-project MIDI media sources have no associated filename. See GetMediaSourceParent.\n\n"
	},

	"GetMediaSourceLength lua": {
	"prefix": "reaper.GetMediaSourceLength",
	"scope": "lua",
	"body": "retval, lengthIsQN = reaper.GetMediaSourceLength(${1:source})$0",
	"description": "Returns the length of the source media. If the media source is beat-based, the length will be in quarter notes, otherwise it will be in seconds.\n\n"
	},

	"GetMediaSourceNumChannels lua": {
	"prefix": "reaper.GetMediaSourceNumChannels",
	"scope": "lua",
	"body": "reaper.GetMediaSourceNumChannels(${1:source})$0",
	"description": "Returns the number of channels in the source media.\n\n"
	},

	"GetMediaSourceParent lua": {
	"prefix": "reaper.GetMediaSourceParent",
	"scope": "lua",
	"body": "reaper.GetMediaSourceParent(${1:src})$0",
	"description": "Returns the parent source, or NULL if src is the root source. This can be used to retrieve the parent properties of sections or reversed sources for example.\n\n"
	},

	"GetMediaSourceSampleRate lua": {
	"prefix": "reaper.GetMediaSourceSampleRate",
	"scope": "lua",
	"body": "reaper.GetMediaSourceSampleRate(${1:source})$0",
	"description": "Returns the sample rate. MIDI source media will return zero.\n\n"
	},

	"GetMediaSourceType lua": {
	"prefix": "reaper.GetMediaSourceType",
	"scope": "lua",
	"body": "typebuf = reaper.GetMediaSourceType(${1:source})$0",
	"description": "copies the media source type ('WAV', 'MIDI', etc) to typebuf\n\n"
	},

	"GetMediaTrackInfo_Value lua": {
	"prefix": "reaper.GetMediaTrackInfo_Value",
	"scope": "lua",
	"body": "reaper.GetMediaTrackInfo_Value(${1:tr}, ${2:parmname})$0",
	"description": "Get track numerical-value attributes.\nB_MUTE : bool * : muted\nB_PHASE : bool * : track phase inverted\nB_RECMON_IN_EFFECT : bool * : record monitoring in effect (current audio-thread playback state, read-only)\nIP_TRACKNUMBER : int : track number 1-based, 0=not found, -1=master track (read-only, returns the int directly)\nI_SOLO : int * : soloed, 0=not soloed, 1=soloed, 2=soloed in place, 5=safe soloed, 6=safe soloed in place\nB_SOLO_DEFEAT : bool * : when set, if anything else is soloed and this track is not muted, this track acts soloed\nI_FXEN : int * : fx enabled, 0=bypassed, !0=fx active\nI_RECARM : int * : record armed, 0=not record armed, 1=record armed\nI_RECINPUT : int * : record input, <0=no input. if 4096 set, input is MIDI and low 5 bits represent channel (0=all, 1-16=only chan), next 6 bits represent physical input (63=all, 62=VKB). If 4096 is not set, low 10 bits (0..1023) are input start channel (ReaRoute/Loopback start at 512). If 2048 is set, input is multichannel input (using track channel count), or if 1024 is set, input is stereo input, otherwise input is mono.\nI_RECMODE : int * : record mode, 0=input, 1=stereo out, 2=none, 3=stereo out w/latency compensation, 4=midi output, 5=mono out, 6=mono out w/ latency compensation, 7=midi overdub, 8=midi replace\nI_RECMODE_FLAGS : int * : record mode flags, &3=output recording mode (0=post fader, 1=pre-fx, 2=post-fx/pre-fader)\nI_RECMON : int * : record monitoring, 0=off, 1=normal, 2=not when playing (tape style)\nI_RECMONITEMS : int * : monitor items while recording, 0=off, 1=on\nB_AUTO_RECARM : bool * : automatically set record arm when selected (does not immediately affect recarm state, script should set directly if desired)\nI_VUMODE : int * : track vu mode, &1:disabled, &30==0:stereo peaks, &30==2:multichannel peaks, &30==4:stereo RMS, &30==8:combined RMS, &30==12:LUFS-M, &30==16:LUFS-S (readout=max), &30==20:LUFS-S (readout=current), &32:LUFS calculation on channels 1+2 only\nI_AUTOMODE : int * : track automation mode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch\nI_NCHAN : int * : number of track channels, 2-64, even numbers only\nI_SELECTED : int * : track selected, 0=unselected, 1=selected\nI_WNDH : int * : current TCP window height in pixels including envelopes (read-only)\nI_TCPH : int * : current TCP window height in pixels not including envelopes (read-only)\nI_TCPY : int * : current TCP window Y-position in pixels relative to top of arrange view (read-only)\nI_MCPX : int * : current MCP X-position in pixels relative to mixer container (read-only)\nI_MCPY : int * : current MCP Y-position in pixels relative to mixer container (read-only)\nI_MCPW : int * : current MCP width in pixels (read-only)\nI_MCPH : int * : current MCP height in pixels (read-only)\nI_FOLDERDEPTH : int * : folder depth change, 0=normal, 1=track is a folder parent, -1=track is the last in the innermost folder, -2=track is the last in the innermost and next-innermost folders, etc\nI_FOLDERCOMPACT : int * : folder compacted state (only valid on folders), 0=normal, 1=small, 2=tiny children\nI_MIDIHWOUT : int * : track midi hardware output index, <0=disabled, low 5 bits are which channels (0=all, 1-16), next 5 bits are output device index (0-31)\nI_PERFFLAGS : int * : track performance flags, &1=no media buffering, &2=no anticipative FX\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color\nI_HEIGHTOVERRIDE : int * : custom height override for TCP window, 0 for none, otherwise size in pixels\nB_HEIGHTLOCK : bool * : track height lock (must set I_HEIGHTOVERRIDE before locking)\nD_VOL : double * : trim volume of track, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc\nD_PAN : double * : trim pan of track, -1..1\nD_WIDTH : double * : width of track, -1..1\nD_DUALPANL : double * : dualpan position 1, -1..1, only if I_PANMODE==6\nD_DUALPANR : double * : dualpan position 2, -1..1, only if I_PANMODE==6\nI_PANMODE : int * : pan mode, 0=classic 3.x, 3=new balance, 5=stereo pan, 6=dual pan\nD_PANLAW : double * : pan law of track, <0=project default, 0.5=-6dB, 0.707..=-3dB, 1=+0dB, 1.414..=-3dB with gain compensation, 2=-6dB with gain compensation, etc\nI_PANLAW_FLAGS : int * : pan law flags, 0=sine taper, 1=hybrid taper with deprecated behavior when gain compensation enabled, 2=linear taper, 3=hybrid taper\nP_ENV:<envchunkname or P_ENV:{GUID... : TrackEnvelope * : (read-only) chunkname can be <VOLENV, <PANENV, etc; GUID is the stringified envelope GUID.\nB_SHOWINMIXER : bool * : track control panel visible in mixer (do not use on master track)\nB_SHOWINTCP : bool * : track control panel visible in arrange view (do not use on master track)\nB_MAINSEND : bool * : track sends audio to parent\nC_MAINSEND_OFFS : char * : channel offset of track send to parent\nC_MAINSEND_NCH : char * : channel count of track send to parent (0=use all child track channels, 1=use one channel only)\nI_FREEMODE : int * : 1=track free item positioning enabled, 2=track fixed lanes enabled (call UpdateTimeline() after changing)\nC_BEATATTACHMODE : char * : track timebase, -1=project default, 0=time, 1=beats (position, length, rate), 2=beats (position only)\nF_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0=minimum allowed, 1=maximum allowed)\nF_MCP_FXPARM_SCALE : float * : scale of fx parameter area in MCP (0=minimum allowed, 1=maximum allowed)\nF_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send total area (0=minimum allowed, 1=maximum allowed)\nF_TCP_FXPARM_SCALE : float * : scale of TCP parameter area when TCP FX are embedded (0=min allowed, default, 1=max allowed)\nI_PLAY_OFFSET_FLAG : int * : track media playback offset state, &1=bypassed, &2=offset value is measured in samples (otherwise measured in seconds)\nD_PLAY_OFFSET : double * : track media playback offset, units depend on I_PLAY_OFFSET_FLAG\nP_PARTRACK : MediaTrack * : parent track (read-only)\nP_PROJECT : ReaProject * : parent project (read-only)\n"
	},

	"GetMIDIInputName lua": {
	"prefix": "reaper.GetMIDIInputName",
	"scope": "lua",
	"body": "retval, nameout = reaper.GetMIDIInputName(${1:dev}, ${2:nameout})$0",
	"description": "returns true if device present\n\n"
	},

	"GetMIDIOutputName lua": {
	"prefix": "reaper.GetMIDIOutputName",
	"scope": "lua",
	"body": "retval, nameout = reaper.GetMIDIOutputName(${1:dev}, ${2:nameout})$0",
	"description": "returns true if device present\n\n"
	},

	"GetMixerScroll lua": {
	"prefix": "reaper.GetMixerScroll",
	"scope": "lua",
	"body": "reaper.GetMixerScroll()\n\n",
	"description": "Get the leftmost track visible in the mixer\n\n"
	},

	"GetMouseModifier lua": {
	"prefix": "reaper.GetMouseModifier",
	"scope": "lua",
	"body": "action = reaper.GetMouseModifier(${1:context}, ${2:modifier_flag})$0",
	"description": "Get the current mouse modifier assignment for a specific modifier key assignment, in a specific context.\naction will be filled in with the command ID number for a built-in mouse modifier\nor built-in REAPER command ID, or the custom action ID string.\nNote: the action string may have a space and 'c' or 'm' appended to it to specify command ID vs mouse modifier ID.\nSee SetMouseModifier for more information.\n"
	},

	"GetMousePosition lua": {
	"prefix": "reaper.GetMousePosition",
	"scope": "lua",
	"body": "x, y = reaper.GetMousePosition()\n\n",
	"description": "get mouse position in screen coordinates\n\n"
	},

	"GetNumAudioInputs lua": {
	"prefix": "reaper.GetNumAudioInputs",
	"scope": "lua",
	"body": "reaper.GetNumAudioInputs()\n\n",
	"description": "Return number of normal audio hardware inputs available\n\n"
	},

	"GetNumAudioOutputs lua": {
	"prefix": "reaper.GetNumAudioOutputs",
	"scope": "lua",
	"body": "reaper.GetNumAudioOutputs()\n\n",
	"description": "Return number of normal audio hardware outputs available\n\n"
	},

	"GetNumMIDIInputs lua": {
	"prefix": "reaper.GetNumMIDIInputs",
	"scope": "lua",
	"body": "reaper.GetNumMIDIInputs()\n\n",
	"description": "returns max number of real midi hardware inputs\n\n"
	},

	"GetNumMIDIOutputs lua": {
	"prefix": "reaper.GetNumMIDIOutputs",
	"scope": "lua",
	"body": "reaper.GetNumMIDIOutputs()\n\n",
	"description": "returns max number of real midi hardware outputs\n\n"
	},

	"GetNumTakeMarkers lua": {
	"prefix": "reaper.GetNumTakeMarkers",
	"scope": "lua",
	"body": "reaper.GetNumTakeMarkers(${1:take})$0",
	"description": "Returns number of take markers. See GetTakeMarker, SetTakeMarker, DeleteTakeMarker\n\n"
	},

	"GetNumTracks lua": {
	"prefix": "reaper.GetNumTracks",
	"scope": "lua",
	"body": "reaper.GetNumTracks()\n\n",
	"description": ""
	},

	"GetOS lua": {
	"prefix": "reaper.GetOS",
	"scope": "lua",
	"body": "reaper.GetOS()\n\n",
	"description": "Returns 'Win32', 'Win64', 'OSX32', 'OSX64', 'macOS-arm64', or 'Other'.\n\n"
	},

	"GetOutputChannelName lua": {
	"prefix": "reaper.GetOutputChannelName",
	"scope": "lua",
	"body": "reaper.GetOutputChannelName(${1:channelIndex})$0",
	"description": ""
	},

	"GetOutputLatency lua": {
	"prefix": "reaper.GetOutputLatency",
	"scope": "lua",
	"body": "reaper.GetOutputLatency()\n\n",
	"description": "returns output latency in seconds\n\n"
	},

	"GetParentTrack lua": {
	"prefix": "reaper.GetParentTrack",
	"scope": "lua",
	"body": "reaper.GetParentTrack(${1:track})$0",
	"description": ""
	},

	"GetPeakFileName lua": {
	"prefix": "reaper.GetPeakFileName",
	"scope": "lua",
	"body": "buf = reaper.GetPeakFileName(${1:fn})$0",
	"description": "get the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)\n\n"
	},

	"GetPeakFileNameEx lua": {
	"prefix": "reaper.GetPeakFileNameEx",
	"scope": "lua",
	"body": "buf = reaper.GetPeakFileNameEx(${1:fn}, ${2:buf}, ${3:forWrite})$0",
	"description": "get the peak file name for a given file (can be either filename.reapeaks,or a hashed filename in another path)\n\n"
	},

	"GetPeakFileNameEx2 lua": {
	"prefix": "reaper.GetPeakFileNameEx2",
	"scope": "lua",
	"body": "buf = reaper.GetPeakFileNameEx2(${1:fn}, ${2:buf}, ${3:forWrite}, ${4:peaksfileextension})$0",
	"description": "Like GetPeakFileNameEx, but you can specify peaksfileextension such as '.reapeaks'\n\n"
	},

	"GetPlayPosition lua": {
	"prefix": "reaper.GetPlayPosition",
	"scope": "lua",
	"body": "reaper.GetPlayPosition()\n\n",
	"description": "returns latency-compensated actual-what-you-hear position\n\n"
	},

	"GetPlayPosition2 lua": {
	"prefix": "reaper.GetPlayPosition2",
	"scope": "lua",
	"body": "reaper.GetPlayPosition2()\n\n",
	"description": "returns position of next audio block being processed\n\n"
	},

	"GetPlayPosition2Ex lua": {
	"prefix": "reaper.GetPlayPosition2Ex",
	"scope": "lua",
	"body": "reaper.GetPlayPosition2Ex(${1:proj})$0",
	"description": "returns position of next audio block being processed\n\n"
	},

	"GetPlayPositionEx lua": {
	"prefix": "reaper.GetPlayPositionEx",
	"scope": "lua",
	"body": "reaper.GetPlayPositionEx(${1:proj})$0",
	"description": "returns latency-compensated actual-what-you-hear position\n\n"
	},

	"GetPlayState lua": {
	"prefix": "reaper.GetPlayState",
	"scope": "lua",
	"body": "reaper.GetPlayState()\n\n",
	"description": "&1=playing, &2=paused, &4=is recording\n\n"
	},

	"GetPlayStateEx lua": {
	"prefix": "reaper.GetPlayStateEx",
	"scope": "lua",
	"body": "reaper.GetPlayStateEx(${1:proj})$0",
	"description": "&1=playing, &2=paused, &4=is recording\n\n"
	},

	"GetProjectLength lua": {
	"prefix": "reaper.GetProjectLength",
	"scope": "lua",
	"body": "reaper.GetProjectLength(${1:proj})$0",
	"description": "returns length of project (maximum of end of media item, markers, end of regions, tempo map\n\n"
	},

	"GetProjectName lua": {
	"prefix": "reaper.GetProjectName",
	"scope": "lua",
	"body": "buf = reaper.GetProjectName(${1:proj})$0",
	"description": ""
	},

	"GetProjectPath lua": {
	"prefix": "reaper.GetProjectPath",
	"scope": "lua",
	"body": "buf = reaper.GetProjectPath()\n\n",
	"description": "Get the project recording path.\n\n"
	},

	"GetProjectPathEx lua": {
	"prefix": "reaper.GetProjectPathEx",
	"scope": "lua",
	"body": "buf = reaper.GetProjectPathEx(${1:proj})$0",
	"description": "Get the project recording path.\n\n"
	},

	"GetProjectStateChangeCount lua": {
	"prefix": "reaper.GetProjectStateChangeCount",
	"scope": "lua",
	"body": "reaper.GetProjectStateChangeCount(${1:proj})$0",
	"description": "returns an integer that changes when the project state changes\n\n"
	},

	"GetProjectTimeOffset lua": {
	"prefix": "reaper.GetProjectTimeOffset",
	"scope": "lua",
	"body": "reaper.GetProjectTimeOffset(${1:proj}, ${2:rndframe})$0",
	"description": "Gets project time offset in seconds (project settings - project start time). If rndframe is true, the offset is rounded to a multiple of the project frame size.\n\n"
	},

	"GetProjectTimeSignature lua": {
	"prefix": "reaper.GetProjectTimeSignature",
	"scope": "lua",
	"body": "bpm, bpi = reaper.GetProjectTimeSignature()\n\n",
	"description": "deprecated\n\n"
	},

	"GetProjectTimeSignature2 lua": {
	"prefix": "reaper.GetProjectTimeSignature2",
	"scope": "lua",
	"body": "bpm, bpi = reaper.GetProjectTimeSignature2(${1:proj})$0",
	"description": "Gets basic time signature (beats per minute, numerator of time signature in bpi)\nthis does not reflect tempo envelopes but is purely what is set in the project settings.\n\n"
	},

	"GetProjExtState lua": {
	"prefix": "reaper.GetProjExtState",
	"scope": "lua",
	"body": "retval, val = reaper.GetProjExtState(${1:proj}, ${2:extname}, ${3:key})$0",
	"description": "Get the value previously associated with this extname and key, the last time the project was saved. See SetProjExtState, EnumProjExtState.\n\n"
	},

	"GetResourcePath lua": {
	"prefix": "reaper.GetResourcePath",
	"scope": "lua",
	"body": "reaper.GetResourcePath()\n\n",
	"description": "returns path where ini files are stored, other things are in subdirectories.\n\n"
	},

	"GetSelectedEnvelope lua": {
	"prefix": "reaper.GetSelectedEnvelope",
	"scope": "lua",
	"body": "reaper.GetSelectedEnvelope(${1:proj})$0",
	"description": "get the currently selected envelope, returns NULL/nil if no envelope is selected\n\n"
	},

	"GetSelectedMediaItem lua": {
	"prefix": "reaper.GetSelectedMediaItem",
	"scope": "lua",
	"body": "reaper.GetSelectedMediaItem(${1:proj}, ${2:selitem})$0",
	"description": "get a selected item by selected item count (zero-based) (proj=0 for active project)\n\n"
	},

	"GetSelectedTrack lua": {
	"prefix": "reaper.GetSelectedTrack",
	"scope": "lua",
	"body": "reaper.GetSelectedTrack(${1:proj}, ${2:seltrackidx})$0",
	"description": "Get a selected track from a project (proj=0 for active project) by selected track count (zero-based). This function ignores the master track, see GetSelectedTrack2.\n\n"
	},

	"GetSelectedTrack2 lua": {
	"prefix": "reaper.GetSelectedTrack2",
	"scope": "lua",
	"body": "reaper.GetSelectedTrack2(${1:proj}, ${2:seltrackidx}, ${3:wantmaster})$0",
	"description": "Get a selected track from a project (proj=0 for active project) by selected track count (zero-based).\n\n"
	},

	"GetSelectedTrackEnvelope lua": {
	"prefix": "reaper.GetSelectedTrackEnvelope",
	"scope": "lua",
	"body": "reaper.GetSelectedTrackEnvelope(${1:proj})$0",
	"description": "get the currently selected track envelope, returns NULL/nil if no envelope is selected\n\n"
	},

	"GetSet_ArrangeView2 lua": {
	"prefix": "reaper.GetSet_ArrangeView2",
	"scope": "lua",
	"body": "start_time, end_time = reaper.GetSet_ArrangeView2(${1:proj}, ${2:isSet}, ${3:screen_x_start}, ${4:screen_x_end}, ${5:start_time}, ${6:end_time})$0",
	"description": "Gets or sets the arrange view start/end time for screen coordinates. use screen_x_start=screen_x_end=0 to use the full arrange view's start/end time\n\n"
	},

	"GetSet_LoopTimeRange lua": {
	"prefix": "reaper.GetSet_LoopTimeRange",
	"scope": "lua",
	"body": "start, end = reaper.GetSet_LoopTimeRange(${1:isSet}, ${2:isLoop}, ${3:start}, ${4:end}, ${5:allowautoseek})$0",
	"description": ""
	},

	"GetSet_LoopTimeRange2 lua": {
	"prefix": "reaper.GetSet_LoopTimeRange2",
	"scope": "lua",
	"body": "start, end = reaper.GetSet_LoopTimeRange2(${1:proj}, ${2:isSet}, ${3:isLoop}, ${4:start}, ${5:end}, ${6:allowautoseek})$0",
	"description": ""
	},

	"GetSetAutomationItemInfo lua": {
	"prefix": "reaper.GetSetAutomationItemInfo",
	"scope": "lua",
	"body": "reaper.GetSetAutomationItemInfo(${1:env}, ${2:autoitem_idx}, ${3:desc}, ${4:value}, ${5:is_set})$0",
	"description": "Get or set automation item information. autoitem_idx=0 for the first automation item on an envelope, 1 for the second item, etc. desc can be any of the following:\nD_POOL_ID : double * : automation item pool ID (as an integer); edits are propagated to all other automation items that share a pool ID\nD_POSITION : double * : automation item timeline position in seconds\nD_LENGTH : double * : automation item length in seconds\nD_STARTOFFS : double * : automation item start offset in seconds\nD_PLAYRATE : double * : automation item playback rate\nD_BASELINE : double * : automation item baseline value in the range [0,1]\nD_AMPLITUDE : double * : automation item amplitude in the range [-1,1]\nD_LOOPSRC : double * : nonzero if the automation item contents are looped\nD_UISEL : double * : nonzero if the automation item is selected in the arrange view\nD_POOL_QNLEN : double * : automation item pooled source length in quarter notes (setting will affect all pooled instances)\n"
	},

	"GetSetAutomationItemInfo_String lua": {
	"prefix": "reaper.GetSetAutomationItemInfo_String",
	"scope": "lua",
	"body": "retval, valuestrNeedBig = reaper.GetSetAutomationItemInfo_String(${1:env}, ${2:autoitem_idx}, ${3:desc}, ${4:valuestrNeedBig}, ${5:is_set})$0",
	"description": "Get or set automation item information. autoitem_idx=0 for the first automation item on an envelope, 1 for the second item, etc. returns true on success. desc can be any of the following:\nP_POOL_NAME : char * : name of the underlying automation item pool\nP_POOL_EXT:xyz : char * : extension-specific persistent data\n"
	},

	"GetSetEnvelopeInfo_String lua": {
	"prefix": "reaper.GetSetEnvelopeInfo_String",
	"scope": "lua",
	"body": "retval, stringNeedBig = reaper.GetSetEnvelopeInfo_String(${1:env}, ${2:parmname}, ${3:stringNeedBig}, ${4:setNewValue})$0",
	"description": "Gets/sets an attribute string:\nP_EXT:xyz : char * : extension-specific persistent data\nGUID : GUID * : 16-byte GUID, can query only, not set. If using a _String() function, GUID is a string {xyz-...}.\n"
	},

	"GetSetEnvelopeState lua": {
	"prefix": "reaper.GetSetEnvelopeState",
	"scope": "lua",
	"body": "retval, str = reaper.GetSetEnvelopeState(${1:env}, ${2:str})$0",
	"description": "deprecated -- see SetEnvelopeStateChunk, GetEnvelopeStateChunk\n\n"
	},

	"GetSetEnvelopeState2 lua": {
	"prefix": "reaper.GetSetEnvelopeState2",
	"scope": "lua",
	"body": "retval, str = reaper.GetSetEnvelopeState2(${1:env}, ${2:str}, ${3:isundo})$0",
	"description": "deprecated -- see SetEnvelopeStateChunk, GetEnvelopeStateChunk\n\n"
	},

	"GetSetItemState lua": {
	"prefix": "reaper.GetSetItemState",
	"scope": "lua",
	"body": "retval, str = reaper.GetSetItemState(${1:item}, ${2:str})$0",
	"description": "deprecated -- see SetItemStateChunk, GetItemStateChunk\n\n"
	},

	"GetSetItemState2 lua": {
	"prefix": "reaper.GetSetItemState2",
	"scope": "lua",
	"body": "retval, str = reaper.GetSetItemState2(${1:item}, ${2:str}, ${3:isundo})$0",
	"description": "deprecated -- see SetItemStateChunk, GetItemStateChunk\n\n"
	},

	"GetSetMediaItemInfo_String lua": {
	"prefix": "reaper.GetSetMediaItemInfo_String",
	"scope": "lua",
	"body": "retval, stringNeedBig = reaper.GetSetMediaItemInfo_String(${1:item}, ${2:parmname}, ${3:stringNeedBig}, ${4:setNewValue})$0",
	"description": "Gets/sets an item attribute string:\nP_NOTES : char * : item note text (do not write to returned pointer, use setNewValue to update)\nP_EXT:xyz : char * : extension-specific persistent data\nGUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.\n"
	},

	"GetSetMediaItemTakeInfo_String lua": {
	"prefix": "reaper.GetSetMediaItemTakeInfo_String",
	"scope": "lua",
	"body": "retval, stringNeedBig = reaper.GetSetMediaItemTakeInfo_String(${1:tk}, ${2:parmname}, ${3:stringNeedBig}, ${4:setNewValue})$0",
	"description": "Gets/sets a take attribute string:\nP_NAME : char * : take name\nP_EXT:xyz : char * : extension-specific persistent data\nGUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.\n"
	},

	"GetSetMediaTrackInfo_String lua": {
	"prefix": "reaper.GetSetMediaTrackInfo_String",
	"scope": "lua",
	"body": "retval, stringNeedBig = reaper.GetSetMediaTrackInfo_String(${1:tr}, ${2:parmname}, ${3:stringNeedBig}, ${4:setNewValue})$0",
	"description": "Get or set track string attributes.\nP_NAME : char * : track name (on master returns NULL)\nP_ICON : const char * : track icon (full filename, or relative to resource_path/data/track_icons)\nP_MCP_LAYOUT : const char * : layout name\nP_RAZOREDITS : const char * : list of razor edit areas, as space-separated triples of start time, end time, and envelope GUID string.\nExample: '0.0 1.0 \'\' 0.0 1.0 '{xyz-...}'\nP_RAZOREDITS_EXT : const char * : list of razor edit areas, as comma-separated sets of space-separated tuples of start time, end time, optional envelope GUID string, optional fixed/fipm top y-position, optional fixed/fipm bottom y-position.\nExample: '0.0 1.0,0.0 1.0 '{xyz-...}',1.0 2.0 '' 0.25 0.5'\nP_TCP_LAYOUT : const char * : layout name\nP_EXT:xyz : char * : extension-specific persistent data\nP_UI_RECT:tcp.mute : char * : read-only, allows querying screen position + size of track WALTER elements (tcp.size queries screen position and size of entire TCP, etc).\nGUID : GUID * : 16-byte GUID, can query or update. If using a _String() function, GUID is a string {xyz-...}.\n"
	},

	"GetSetProjectAuthor lua": {
	"prefix": "reaper.GetSetProjectAuthor",
	"scope": "lua",
	"body": "author = reaper.GetSetProjectAuthor(${1:proj}, ${2:set}, ${3:author})$0",
	"description": "deprecated, see GetSetProjectInfo_String with desc='PROJECT_AUTHOR'\n\n"
	},

	"GetSetProjectGrid lua": {
	"prefix": "reaper.GetSetProjectGrid",
	"scope": "lua",
	"body": "retval, optional_division, optional_swingmode, optional_swingamt = reaper.GetSetProjectGrid(${1:project}, ${2:set}, ${3:optional_division}, ${4:optional_swingmode}, ${5:optional_swingamt})$0",
	"description": "Get or set the arrange view grid division. 0.25=quarter note, 1.0/3.0=half note triplet, etc. swingmode can be 1 for swing enabled, swingamt is -1..1. swingmode can be 3 for measure-grid. Returns grid configuration flags\n\n"
	},

	"GetSetProjectInfo lua": {
	"prefix": "reaper.GetSetProjectInfo",
	"scope": "lua",
	"body": "reaper.GetSetProjectInfo(${1:project}, ${2:desc}, ${3:value}, ${4:is_set})$0",
	"description": "Get or set project information.\nRENDER_SETTINGS : &(1|2)=0:master mix, &1=stems+master mix, &2=stems only, &4=multichannel tracks to multichannel files, &8=use render matrix, &16=tracks with only mono media to mono files, &32=selected media items, &64=selected media items via master, &128=selected tracks via master, &256=embed transients if format supports, &512=embed metadata if format supports, &1024=embed take markers if format supports, &2048=2nd pass render\nRENDER_BOUNDSFLAG : 0=custom time bounds, 1=entire project, 2=time selection, 3=all project regions, 4=selected media items, 5=selected project regions, 6=all project markers, 7=selected project markers\nRENDER_CHANNELS : number of channels in rendered file\nRENDER_SRATE : sample rate of rendered file (or 0 for project sample rate)\nRENDER_STARTPOS : render start time when RENDER_BOUNDSFLAG=0\nRENDER_ENDPOS : render end time when RENDER_BOUNDSFLAG=0\nRENDER_TAILFLAG : apply render tail setting when rendering: &1=custom time bounds, &2=entire project, &4=time selection, &8=all project markers/regions, &16=selected media items, &32=selected project markers/regions\nRENDER_TAILMS : tail length in ms to render (only used if RENDER_BOUNDSFLAG and RENDER_TAILFLAG are set)\nRENDER_ADDTOPROJ : &1=add rendered files to project, &2=do not render files that are likely silent\nRENDER_DITHER : &1=dither, &2=noise shaping, &4=dither stems, &8=noise shaping on stems\nRENDER_NORMALIZE: &1=enable, (&14==0)=LUFS-I, (&14==2)=RMS, (&14==4)=peak, (&14==6)=true peak, (&14==8)=LUFS-M max, (&14==10)=LUFS-S max, &32=normalize stems to common gain based on master, &64=enable brickwall limit, &128=brickwall limit true peak, &256=only normalize files that are too loud, &512=apply fade-in, &1024=apply fade-out\nRENDER_NORMALIZE_TARGET: render normalization target as amplitude, so 0.5 means -6.02dB, 0.25 means -12.04dB, etc\nRENDER_BRICKWALL: render brickwall limit as amplitude, so 0.5 means -6.02dB, 0.25 means -12.04dB, etc\nRENDER_FADEIN: render fade-in (0.001 means 1 ms, requires RENDER_NORMALIZE&512)\nRENDER_FADEOUT: render fade-out (0.001 means 1 ms, requires RENDER_NORMALIZE&1024)\nRENDER_FADEINSHAPE: render fade-in shape\nRENDER_FADEOUTSHAPE: render fade-out shape\nPROJECT_SRATE : samplerate (ignored unless PROJECT_SRATE_USE set)\nPROJECT_SRATE_USE : set to 1 if project samplerate is used\n"
	},

	"GetSetProjectInfo_String lua": {
	"prefix": "reaper.GetSetProjectInfo_String",
	"scope": "lua",
	"body": "retval, valuestrNeedBig = reaper.GetSetProjectInfo_String(${1:project}, ${2:desc}, ${3:valuestrNeedBig}, ${4:is_set})$0",
	"description": "Get or set project information.\nPROJECT_NAME : project file name (read-only, is_set will be ignored)\nPROJECT_TITLE : title field from Project Settings/Notes dialog\nPROJECT_AUTHOR : author field from Project Settings/Notes dialog\nTRACK_GROUP_NAME:X : track group name, X should be 1..64\nMARKER_GUID:X : get the GUID (unique ID) of the marker or region with index X, where X is the index passed to EnumProjectMarkers, not necessarily the displayed number (read-only)\nMARKER_INDEX_FROM_GUID:{GUID} : get the GUID index of the marker or region with GUID {GUID} (read-only)\nRECORD_PATH : recording directory -- may be blank or a relative path, to get the effective path see GetProjectPathEx()\nRECORD_PATH_SECONDARY : secondary recording directory\nRENDER_FILE : render directory\nRENDER_PATTERN : render file name (may contain wildcards)\nRENDER_METADATA : get or set the metadata saved with the project (not metadata embedded in project media). Example, ID3 album name metadata: valuestr='ID3:TALB' to get, valuestr='ID3:TALB|my album name' to set. Call with valuestr='' and is_set=false to get a semicolon-separated list of defined project metadata identifiers.\nRENDER_TARGETS : semicolon separated list of files that would be written if the project is rendered using the most recent render settings\nRENDER_STATS : (read-only) semicolon separated list of statistics for the most recently rendered files. call with valuestr='XXX' to run an action (for example, '42437'=dry run render selected items) before returning statistics.\nRENDER_FORMAT : base64-encoded sink configuration (see project files, etc). Callers can also pass a simple 4-byte string (non-base64-encoded), e.g. 'evaw' or 'l3pm', to use default settings for that sink type.\nRENDER_FORMAT2 : base64-encoded secondary sink configuration. Callers can also pass a simple 4-byte string (non-base64-encoded), e.g. 'evaw' or 'l3pm', to use default settings for that sink type, or '' to disable secondary render.\nFormats available on this machine:\n'wave' 'aiff' 'caff' 'iso ' 'ddp ' 'flac' 'mp3l' 'oggv' 'OggS' 'FFMP' 'WMF ' 'GIF ' 'LCF ' 'wvpk' \n\n"
	},

	"GetSetProjectNotes lua": {
	"prefix": "reaper.GetSetProjectNotes",
	"scope": "lua",
	"body": "notes = reaper.GetSetProjectNotes(${1:proj}, ${2:set}, ${3:notes})$0",
	"description": "gets or sets project notes, notesNeedBig_sz is ignored when setting\n\n"
	},

	"GetSetRepeat lua": {
	"prefix": "reaper.GetSetRepeat",
	"scope": "lua",
	"body": "reaper.GetSetRepeat(${1:val})$0",
	"description": "-1 == query,0=clear,1=set,>1=toggle . returns new value\n\n"
	},

	"GetSetRepeatEx lua": {
	"prefix": "reaper.GetSetRepeatEx",
	"scope": "lua",
	"body": "reaper.GetSetRepeatEx(${1:proj}, ${2:val})$0",
	"description": "-1 == query,0=clear,1=set,>1=toggle . returns new value\n\n"
	},

	"GetSetTrackGroupMembership lua": {
	"prefix": "reaper.GetSetTrackGroupMembership",
	"scope": "lua",
	"body": "reaper.GetSetTrackGroupMembership(${1:tr}, ${2:groupname}, ${3:setmask}, ${4:setvalue})$0",
	"description": "Gets or modifies the group membership for a track. Returns group state prior to call (each bit represents one of the 32 group numbers). if setmask has bits set, those bits in setvalue will be applied to group. Group can be one of:\nMEDIA_EDIT_LEAD\nMEDIA_EDIT_FOLLOW\nVOLUME_LEAD\nVOLUME_FOLLOW\nVOLUME_VCA_LEAD\nVOLUME_VCA_FOLLOW\nPAN_LEAD\nPAN_FOLLOW\nWIDTH_LEAD\nWIDTH_FOLLOW\nMUTE_LEAD\nMUTE_FOLLOW\nSOLO_LEAD\nSOLO_FOLLOW\nRECARM_LEAD\nRECARM_FOLLOW\nPOLARITY_LEAD\nPOLARITY_FOLLOW\nAUTOMODE_LEAD\nAUTOMODE_FOLLOW\nVOLUME_REVERSE\nPAN_REVERSE\nWIDTH_REVERSE\nNO_LEAD_WHEN_FOLLOW\nVOLUME_VCA_FOLLOW_ISPREFX\nNote: REAPER v6.11 and earlier used _MASTER and _SLAVE rather than _LEAD and _FOLLOW, which is deprecated but still supported (scripts that must support v6.11 and earlier can use the deprecated strings).\n"
	},

	"GetSetTrackGroupMembershipHigh lua": {
	"prefix": "reaper.GetSetTrackGroupMembershipHigh",
	"scope": "lua",
	"body": "reaper.GetSetTrackGroupMembershipHigh(${1:tr}, ${2:groupname}, ${3:setmask}, ${4:setvalue})$0",
	"description": "Gets or modifies the group membership for a track. Returns group state prior to call (each bit represents one of the high 32 group numbers). if setmask has bits set, those bits in setvalue will be applied to group. Group can be one of:\nMEDIA_EDIT_LEAD\nMEDIA_EDIT_FOLLOW\nVOLUME_LEAD\nVOLUME_FOLLOW\nVOLUME_VCA_LEAD\nVOLUME_VCA_FOLLOW\nPAN_LEAD\nPAN_FOLLOW\nWIDTH_LEAD\nWIDTH_FOLLOW\nMUTE_LEAD\nMUTE_FOLLOW\nSOLO_LEAD\nSOLO_FOLLOW\nRECARM_LEAD\nRECARM_FOLLOW\nPOLARITY_LEAD\nPOLARITY_FOLLOW\nAUTOMODE_LEAD\nAUTOMODE_FOLLOW\nVOLUME_REVERSE\nPAN_REVERSE\nWIDTH_REVERSE\nNO_LEAD_WHEN_FOLLOW\nVOLUME_VCA_FOLLOW_ISPREFX\nNote: REAPER v6.11 and earlier used _MASTER and _SLAVE rather than _LEAD and _FOLLOW, which is deprecated but still supported (scripts that must support v6.11 and earlier can use the deprecated strings).\n"
	},

	"GetSetTrackSendInfo_String lua": {
	"prefix": "reaper.GetSetTrackSendInfo_String",
	"scope": "lua",
	"body": "retval, stringNeedBig = reaper.GetSetTrackSendInfo_String(${1:tr}, ${2:category}, ${3:sendidx}, ${4:parmname}, ${5:stringNeedBig}, ${6:setNewValue})$0",
	"description": "Gets/sets a send attribute string:\nP_EXT:xyz : char * : extension-specific persistent data\n"
	},

	"GetSetTrackState lua": {
	"prefix": "reaper.GetSetTrackState",
	"scope": "lua",
	"body": "retval, str = reaper.GetSetTrackState(${1:track}, ${2:str})$0",
	"description": "deprecated -- see SetTrackStateChunk, GetTrackStateChunk\n\n"
	},

	"GetSetTrackState2 lua": {
	"prefix": "reaper.GetSetTrackState2",
	"scope": "lua",
	"body": "retval, str = reaper.GetSetTrackState2(${1:track}, ${2:str}, ${3:isundo})$0",
	"description": "deprecated -- see SetTrackStateChunk, GetTrackStateChunk\n\n"
	},

	"GetSubProjectFromSource lua": {
	"prefix": "reaper.GetSubProjectFromSource",
	"scope": "lua",
	"body": "reaper.GetSubProjectFromSource(${1:src})$0",
	"description": ""
	},

	"GetTake lua": {
	"prefix": "reaper.GetTake",
	"scope": "lua",
	"body": "reaper.GetTake(${1:item}, ${2:takeidx})$0",
	"description": "get a take from an item by take count (zero-based)\n\n"
	},

	"GetTakeEnvelope lua": {
	"prefix": "reaper.GetTakeEnvelope",
	"scope": "lua",
	"body": "reaper.GetTakeEnvelope(${1:take}, ${2:envidx})$0",
	"description": ""
	},

	"GetTakeEnvelopeByName lua": {
	"prefix": "reaper.GetTakeEnvelopeByName",
	"scope": "lua",
	"body": "reaper.GetTakeEnvelopeByName(${1:take}, ${2:envname})$0",
	"description": ""
	},

	"GetTakeMarker lua": {
	"prefix": "reaper.GetTakeMarker",
	"scope": "lua",
	"body": "retval, name, optional_color = reaper.GetTakeMarker(${1:take}, ${2:idx})$0",
	"description": "Get information about a take marker. Returns the position in media item source time, or -1 if the take marker does not exist. See GetNumTakeMarkers, SetTakeMarker, DeleteTakeMarker\n\n"
	},

	"GetTakeName lua": {
	"prefix": "reaper.GetTakeName",
	"scope": "lua",
	"body": "reaper.GetTakeName(${1:take})$0",
	"description": "returns NULL if the take is not valid\n\n"
	},

	"GetTakeNumStretchMarkers lua": {
	"prefix": "reaper.GetTakeNumStretchMarkers",
	"scope": "lua",
	"body": "reaper.GetTakeNumStretchMarkers(${1:take})$0",
	"description": "Returns number of stretch markers in take\n\n"
	},

	"GetTakeStretchMarker lua": {
	"prefix": "reaper.GetTakeStretchMarker",
	"scope": "lua",
	"body": "retval, pos, optional_srcpos = reaper.GetTakeStretchMarker(${1:take}, ${2:idx})$0",
	"description": "Gets information on a stretch marker, idx is 0..n. Returns -1 if stretch marker not valid. posOut will be set to position in item, srcposOutOptional will be set to source media position. Returns index. if input index is -1, the following marker is found using position (or source position if position is -1). If position/source position are used to find marker position, their values are not updated.\n\n"
	},

	"GetTakeStretchMarkerSlope lua": {
	"prefix": "reaper.GetTakeStretchMarkerSlope",
	"scope": "lua",
	"body": "reaper.GetTakeStretchMarkerSlope(${1:take}, ${2:idx})$0",
	"description": "See SetTakeStretchMarkerSlope\n\n"
	},

	"GetTCPFXParm lua": {
	"prefix": "reaper.GetTCPFXParm",
	"scope": "lua",
	"body": "retval, fxindex, parmidx = reaper.GetTCPFXParm(${1:project}, ${2:track}, ${3:index})$0",
	"description": "Get information about a specific FX parameter knob (see CountTCPFXParms).\n\n"
	},

	"GetTempoMatchPlayRate lua": {
	"prefix": "reaper.GetTempoMatchPlayRate",
	"scope": "lua",
	"body": "retval, rate, targetlen = reaper.GetTempoMatchPlayRate(${1:source}, ${2:srcscale}, ${3:position}, ${4:mult})$0",
	"description": "finds the playrate and target length to insert this item stretched to a round power-of-2 number of bars, between 1/8 and 256\n\n"
	},

	"GetTempoTimeSigMarker lua": {
	"prefix": "reaper.GetTempoTimeSigMarker",
	"scope": "lua",
	"body": "retval, timepos, measurepos, beatpos, bpm, timesig_num, timesig_denom, lineartempo = reaper.GetTempoTimeSigMarker(${1:proj}, ${2:ptidx})$0",
	"description": "Get information about a tempo/time signature marker. See CountTempoTimeSigMarkers, SetTempoTimeSigMarker, AddTempoTimeSigMarker.\n\n"
	},

	"GetThemeColor lua": {
	"prefix": "reaper.GetThemeColor",
	"scope": "lua",
	"body": "reaper.GetThemeColor(${1:ini_key}, ${2:flags})$0",
	"description": "Returns the theme color specified, or -1 on failure. If the low bit of flags is set, the color as originally specified by the theme (before any transformations) is returned, otherwise the current (possibly transformed and modified) color is returned. See SetThemeColor for a list of valid ini_key.\n\n"
	},

	"GetThingFromPoint lua": {
	"prefix": "reaper.GetThingFromPoint",
	"scope": "lua",
	"body": "retval, info = reaper.GetThingFromPoint(${1:screen_x}, ${2:screen_y})$0",
	"description": "Hit tests a point in screen coordinates. Updates infoOut with information such as 'arrange', 'fx_chain', 'fx_0' (first FX in chain, floating). If a track panel is hit, string will begin with 'tcp' or 'mcp' or 'tcp.mute' etc (future versions may append additional information). May return NULL with valid info string to indicate non-track thing.\n\n"
	},

	"GetToggleCommandState lua": {
	"prefix": "reaper.GetToggleCommandState",
	"scope": "lua",
	"body": "reaper.GetToggleCommandState(${1:command_id})$0",
	"description": "See GetToggleCommandStateEx.\n\n"
	},

	"GetToggleCommandStateEx lua": {
	"prefix": "reaper.GetToggleCommandStateEx",
	"scope": "lua",
	"body": "reaper.GetToggleCommandStateEx(${1:section_id}, ${2:command_id})$0",
	"description": "For the main action context, the MIDI editor, or the media explorer, returns the toggle state of the action. 0=off, 1=on, -1=NA because the action does not have on/off states. For the MIDI editor, the action state for the most recently focused window will be returned.\n\n"
	},

	"GetTooltipWindow lua": {
	"prefix": "reaper.GetTooltipWindow",
	"scope": "lua",
	"body": "reaper.GetTooltipWindow()\n\n",
	"description": "gets a tooltip window,in case you want to ask it for font information. Can return NULL.\n\n"
	},

	"GetTrack lua": {
	"prefix": "reaper.GetTrack",
	"scope": "lua",
	"body": "reaper.GetTrack(${1:proj}, ${2:trackidx})$0",
	"description": "get a track from a project by track count (zero-based) (proj=0 for active project)\n\n"
	},

	"GetTrackAutomationMode lua": {
	"prefix": "reaper.GetTrackAutomationMode",
	"scope": "lua",
	"body": "reaper.GetTrackAutomationMode(${1:tr})$0",
	"description": "return the track mode, regardless of global override\n\n"
	},

	"GetTrackColor lua": {
	"prefix": "reaper.GetTrackColor",
	"scope": "lua",
	"body": "reaper.GetTrackColor(${1:track})$0",
	"description": "Returns the track custom color as OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). Black is returned as 0x1000000, no color setting is returned as 0.\n\n"
	},

	"GetTrackDepth lua": {
	"prefix": "reaper.GetTrackDepth",
	"scope": "lua",
	"body": "reaper.GetTrackDepth(${1:track})$0",
	"description": ""
	},

	"GetTrackEnvelope lua": {
	"prefix": "reaper.GetTrackEnvelope",
	"scope": "lua",
	"body": "reaper.GetTrackEnvelope(${1:track}, ${2:envidx})$0",
	"description": ""
	},

	"GetTrackEnvelopeByChunkName lua": {
	"prefix": "reaper.GetTrackEnvelopeByChunkName",
	"scope": "lua",
	"body": "reaper.GetTrackEnvelopeByChunkName(${1:tr}, ${2:cfgchunkname_or_guid})$0",
	"description": "Gets a built-in track envelope by configuration chunk name, like '<VOLENV', or GUID string, like '{B577250D-146F-B544-9B34-F24FBE488F1F}'.\n"
	},

	"GetTrackEnvelopeByName lua": {
	"prefix": "reaper.GetTrackEnvelopeByName",
	"scope": "lua",
	"body": "reaper.GetTrackEnvelopeByName(${1:track}, ${2:envname})$0",
	"description": ""
	},

	"GetTrackFromPoint lua": {
	"prefix": "reaper.GetTrackFromPoint",
	"scope": "lua",
	"body": "retval, optional_info = reaper.GetTrackFromPoint(${1:screen_x}, ${2:screen_y})$0",
	"description": "Returns the track from the screen coordinates specified. If the screen coordinates refer to a window associated to the track (such as FX), the track will be returned. infoOutOptional will be set to 1 if it is likely an envelope, 2 if it is likely a track FX. See GetThingFromPoint.\n\n"
	},

	"GetTrackGUID lua": {
	"prefix": "reaper.GetTrackGUID",
	"scope": "lua",
	"body": "GUID = reaper.GetTrackGUID(${1:tr})$0",
	"description": ""
	},

	"GetTrackMediaItem lua": {
	"prefix": "reaper.GetTrackMediaItem",
	"scope": "lua",
	"body": "reaper.GetTrackMediaItem(${1:tr}, ${2:itemidx})$0",
	"description": ""
	},

	"GetTrackMIDILyrics lua": {
	"prefix": "reaper.GetTrackMIDILyrics",
	"scope": "lua",
	"body": "retval, buf = reaper.GetTrackMIDILyrics(${1:track}, ${2:flag})$0",
	"description": "Get all MIDI lyrics on the track. Lyrics will be returned as one string with tabs between each word. flag&1: double tabs at the end of each measure and triple tabs when skipping measures, flag&2: each lyric is preceded by its beat position in the project (example with flag=2: '1.1.2\tLyric for measure 1 beat 2\t2.1.1\tLyric for measure 2 beat 1	'). See SetTrackMIDILyrics\n\n"
	},

	"GetTrackMIDINoteName lua": {
	"prefix": "reaper.GetTrackMIDINoteName",
	"scope": "lua",
	"body": "reaper.GetTrackMIDINoteName(${1:track}, ${2:pitch}, ${3:chan})$0",
	"description": "see GetTrackMIDINoteNameEx\n\n"
	},

	"GetTrackMIDINoteNameEx lua": {
	"prefix": "reaper.GetTrackMIDINoteNameEx",
	"scope": "lua",
	"body": "reaper.GetTrackMIDINoteNameEx(${1:proj}, ${2:track}, ${3:pitch}, ${4:chan})$0",
	"description": "Get note/CC name. pitch 128 for CC0 name, 129 for CC1 name, etc. See SetTrackMIDINoteNameEx\n\n"
	},

	"GetTrackMIDINoteRange lua": {
	"prefix": "reaper.GetTrackMIDINoteRange",
	"scope": "lua",
	"body": "note_lo, note_hi = reaper.GetTrackMIDINoteRange(${1:proj}, ${2:track})$0",
	"description": ""
	},

	"GetTrackName lua": {
	"prefix": "reaper.GetTrackName",
	"scope": "lua",
	"body": "retval, buf = reaper.GetTrackName(${1:track})$0",
	"description": "Returns 'MASTER' for master track, 'Track N' if track has no name.\n\n"
	},

	"GetTrackNumMediaItems lua": {
	"prefix": "reaper.GetTrackNumMediaItems",
	"scope": "lua",
	"body": "reaper.GetTrackNumMediaItems(${1:tr})$0",
	"description": ""
	},

	"GetTrackNumSends lua": {
	"prefix": "reaper.GetTrackNumSends",
	"scope": "lua",
	"body": "reaper.GetTrackNumSends(${1:tr}, ${2:category})$0",
	"description": "returns number of sends/receives/hardware outputs - category is <0 for receives, 0=sends, >0 for hardware outputs\n\n"
	},

	"GetTrackReceiveName lua": {
	"prefix": "reaper.GetTrackReceiveName",
	"scope": "lua",
	"body": "retval, buf = reaper.GetTrackReceiveName(${1:track}, ${2:recv_index})$0",
	"description": "See GetTrackSendName.\n\n"
	},

	"GetTrackReceiveUIMute lua": {
	"prefix": "reaper.GetTrackReceiveUIMute",
	"scope": "lua",
	"body": "retval, mute = reaper.GetTrackReceiveUIMute(${1:track}, ${2:recv_index})$0",
	"description": "See GetTrackSendUIMute.\n\n"
	},

	"GetTrackReceiveUIVolPan lua": {
	"prefix": "reaper.GetTrackReceiveUIVolPan",
	"scope": "lua",
	"body": "retval, volume, pan = reaper.GetTrackReceiveUIVolPan(${1:track}, ${2:recv_index})$0",
	"description": "See GetTrackSendUIVolPan.\n\n"
	},

	"GetTrackSendInfo_Value lua": {
	"prefix": "reaper.GetTrackSendInfo_Value",
	"scope": "lua",
	"body": "reaper.GetTrackSendInfo_Value(${1:tr}, ${2:category}, ${3:sendidx}, ${4:parmname})$0",
	"description": "Get send/receive/hardware output numerical-value attributes.\ncategory is <0 for receives, 0=sends, >0 for hardware outputs\nparameter names:\nB_MUTE : bool *\nB_PHASE : bool * : true to flip phase\nB_MONO : bool *\nD_VOL : double * : 1.0 = +0dB etc\nD_PAN : double * : -1..+1\nD_PANLAW : double * : 1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc\nI_SENDMODE : int * : 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx\nI_AUTOMODE : int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)\nI_SRCCHAN : int * : index,&1024=mono, -1 for none\nI_DSTCHAN : int * : index, &1024=mono, otherwise stereo pair, hwout:&512=rearoute\nI_MIDIFLAGS : int * : low 5 bits=source channel 0=all, 1-16, next 5 bits=dest channel, 0=orig, 1-16=chan\nP_DESTTRACK : MediaTrack * : destination track, only applies for sends/recvs (read-only)\nP_SRCTRACK : MediaTrack * : source track, only applies for sends/recvs (read-only)\nP_ENV:<envchunkname : TrackEnvelope * : call with :<VOLENV, :<PANENV, etc appended (read-only)\nSee CreateTrackSend, RemoveTrackSend, GetTrackNumSends.\n\n"
	},

	"GetTrackSendName lua": {
	"prefix": "reaper.GetTrackSendName",
	"scope": "lua",
	"body": "retval, buf = reaper.GetTrackSendName(${1:track}, ${2:send_index})$0",
	"description": "send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveName.\n\n"
	},

	"GetTrackSendUIMute lua": {
	"prefix": "reaper.GetTrackSendUIMute",
	"scope": "lua",
	"body": "retval, mute = reaper.GetTrackSendUIMute(${1:track}, ${2:send_index})$0",
	"description": "send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveUIMute.\n\n"
	},

	"GetTrackSendUIVolPan lua": {
	"prefix": "reaper.GetTrackSendUIVolPan",
	"scope": "lua",
	"body": "retval, volume, pan = reaper.GetTrackSendUIVolPan(${1:track}, ${2:send_index})$0",
	"description": "send_idx>=0 for hw ouputs, >=nb_of_hw_ouputs for sends. See GetTrackReceiveUIVolPan.\n\n"
	},

	"GetTrackState lua": {
	"prefix": "reaper.GetTrackState",
	"scope": "lua",
	"body": "retval, flags = reaper.GetTrackState(${1:track})$0",
	"description": "Gets track state, returns track name.\nflags will be set to:\n&1=folder\n&2=selected\n&4=has fx enabled\n&8=muted\n&16=soloed\n&32=SIP'd (with &16)\n&64=rec armed\n&128=rec monitoring on\n&256=rec monitoring auto\n&512=hide from TCP\n&1024=hide from MCP\n\n"
	},

	"GetTrackStateChunk lua": {
	"prefix": "reaper.GetTrackStateChunk",
	"scope": "lua",
	"body": "retval, str = reaper.GetTrackStateChunk(${1:track}, ${2:str}, ${3:isundo})$0",
	"description": "Gets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint.\n\n"
	},

	"GetTrackUIMute lua": {
	"prefix": "reaper.GetTrackUIMute",
	"scope": "lua",
	"body": "retval, mute = reaper.GetTrackUIMute(${1:track})$0",
	"description": ""
	},

	"GetTrackUIPan lua": {
	"prefix": "reaper.GetTrackUIPan",
	"scope": "lua",
	"body": "retval, pan1, pan2, panmode = reaper.GetTrackUIPan(${1:track})$0",
	"description": ""
	},

	"GetTrackUIVolPan lua": {
	"prefix": "reaper.GetTrackUIVolPan",
	"scope": "lua",
	"body": "retval, volume, pan = reaper.GetTrackUIVolPan(${1:track})$0",
	"description": ""
	},

	"GetUnderrunTime lua": {
	"prefix": "reaper.GetUnderrunTime",
	"scope": "lua",
	"body": "audio_xrun, media_xrun, curtime = reaper.GetUnderrunTime()\n\n",
	"description": "retrieves the last timestamps of audio xrun (yellow-flash, if available), media xrun (red-flash), and the current time stamp (all milliseconds)\n\n"
	},

	"GetUserFileNameForRead lua": {
	"prefix": "reaper.GetUserFileNameForRead",
	"scope": "lua",
	"body": "retval, filenameNeed4096 = reaper.GetUserFileNameForRead(${1:filenameNeed4096}, ${2:title}, ${3:defext})$0",
	"description": "returns true if the user selected a valid file, false if the user canceled the dialog\n\n"
	},

	"GetUserInputs lua": {
	"prefix": "reaper.GetUserInputs",
	"scope": "lua",
	"body": "retval, retvals_csv = reaper.GetUserInputs(${1:title}, ${2:num_inputs}, ${3:captions_csv}, ${4:retvals_csv})$0",
	"description": "Get values from the user.\nIf a caption begins with *, for example '*password', the edit field will not display the input text.\nMaximum fields is 16. Values are returned as a comma-separated string. Returns false if the user canceled the dialog. You can supply special extra information via additional caption fields: extrawidth=XXX to increase text field width, separator=X to use a different separator for returned fields.\n\n"
	},

	"GoToMarker lua": {
	"prefix": "reaper.GoToMarker",
	"scope": "lua",
	"body": "reaper.GoToMarker(${1:proj}, ${2:marker_index}, ${3:use_timeline_order})$0",
	"description": "Go to marker. If use_timeline_order==true, marker_index 1 refers to the first marker on the timeline.  If use_timeline_order==false, marker_index 1 refers to the first marker with the user-editable index of 1.\n\n"
	},

	"GoToRegion lua": {
	"prefix": "reaper.GoToRegion",
	"scope": "lua",
	"body": "reaper.GoToRegion(${1:proj}, ${2:region_index}, ${3:use_timeline_order})$0",
	"description": "Seek to region after current region finishes playing (smooth seek). If use_timeline_order==true, region_index 1 refers to the first region on the timeline.  If use_timeline_order==false, region_index 1 refers to the first region with the user-editable index of 1.\n\n"
	},

	"GR_SelectColor lua": {
	"prefix": "reaper.GR_SelectColor",
	"scope": "lua",
	"body": "retval, color = reaper.GR_SelectColor(${1:hwnd})$0",
	"description": "Runs the system color chooser dialog.  Returns 0 if the user cancels the dialog.\n\n"
	},

	"GSC_mainwnd lua": {
	"prefix": "reaper.GSC_mainwnd",
	"scope": "lua",
	"body": "reaper.GSC_mainwnd(${1:t})$0",
	"description": "this is just like win32 GetSysColor() but can have overrides.\n\n"
	},

	"guidToString lua": {
	"prefix": "reaper.guidToString",
	"scope": "lua",
	"body": "destNeed64 = reaper.guidToString(${1:gGUID}, ${2:destNeed64})$0",
	"description": "dest should be at least 64 chars long to be safe\n\n"
	},

	"HasExtState lua": {
	"prefix": "reaper.HasExtState",
	"scope": "lua",
	"body": "reaper.HasExtState(${1:section}, ${2:key})$0",
	"description": "Returns true if there exists an extended state value for a specific section and key. See SetExtState, GetExtState, DeleteExtState.\n\n"
	},

	"HasTrackMIDIPrograms lua": {
	"prefix": "reaper.HasTrackMIDIPrograms",
	"scope": "lua",
	"body": "reaper.HasTrackMIDIPrograms(${1:track})$0",
	"description": "returns name of track plugin that is supplying MIDI programs,or NULL if there is none\n\n"
	},

	"HasTrackMIDIProgramsEx lua": {
	"prefix": "reaper.HasTrackMIDIProgramsEx",
	"scope": "lua",
	"body": "reaper.HasTrackMIDIProgramsEx(${1:proj}, ${2:track})$0",
	"description": "returns name of track plugin that is supplying MIDI programs,or NULL if there is none\n\n"
	},

	"Help_Set lua": {
	"prefix": "reaper.Help_Set",
	"scope": "lua",
	"body": "reaper.Help_Set(${1:helpstring}, ${2:is_temporary_help})$0",
	"description": ""
	},

	"image_resolve_fn lua": {
	"prefix": "reaper.image_resolve_fn",
	"scope": "lua",
	"body": "out = reaper.image_resolve_fn(${1:in}, ${2:out})$0",
	"description": ""
	},

	"InsertAutomationItem lua": {
	"prefix": "reaper.InsertAutomationItem",
	"scope": "lua",
	"body": "reaper.InsertAutomationItem(${1:env}, ${2:pool_id}, ${3:position}, ${4:length})$0",
	"description": "Insert a new automation item. pool_id < 0 collects existing envelope points into the automation item; if pool_id is >= 0 the automation item will be a new instance of that pool (which will be created as an empty instance if it does not exist). Returns the index of the item, suitable for passing to other automation item API functions. See GetSetAutomationItemInfo.\n\n"
	},

	"InsertEnvelopePoint lua": {
	"prefix": "reaper.InsertEnvelopePoint",
	"scope": "lua",
	"body": "reaper.InsertEnvelopePoint(${1:envelope}, ${2:time}, ${3:value}, ${4:shape}, ${5:tension}, ${6:selected}, ${7:optional_noSortIn})$0",
	"description": "Insert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. See InsertEnvelopePointEx.\n\n"
	},

	"InsertEnvelopePointEx lua": {
	"prefix": "reaper.InsertEnvelopePointEx",
	"scope": "lua",
	"body": "reaper.InsertEnvelopePointEx(${1:envelope}, ${2:autoitem_idx}, ${3:time}, ${4:value}, ${5:shape}, ${6:tension}, ${7:selected}, ${8:optional_noSortIn})$0",
	"description": "Insert an envelope point. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done.\nautoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\nFor automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.\nSee CountEnvelopePointsEx, GetEnvelopePointEx, SetEnvelopePointEx, DeleteEnvelopePointEx.\n\n"
	},

	"InsertMedia lua": {
	"prefix": "reaper.InsertMedia",
	"scope": "lua",
	"body": "reaper.InsertMedia(${1:file}, ${2:mode})$0",
	"description": "mode: 0=add to current track, 1=add new track, 3=add to selected items as takes, &4=stretch/loop to fit time sel, &8=try to match tempo 1x, &16=try to match tempo 0.5x, &32=try to match tempo 2x, &64=don't preserve pitch when matching tempo, &128=no loop/section if startpct/endpct set, &256=force loop regardless of global preference for looping imported items, &512=use high word as absolute track index if mode&3==0 or mode&2048, &1024=insert into reasamplomatic on a new track (add 1 to insert on last selected track), &2048=insert into open reasamplomatic instance (add 512 to use high word as absolute track index), &4096=move to source preferred position (BWF start offset), &8192=reverse\n\n"
	},

	"InsertMediaSection lua": {
	"prefix": "reaper.InsertMediaSection",
	"scope": "lua",
	"body": "reaper.InsertMediaSection(${1:file}, ${2:mode}, ${3:startpct}, ${4:endpct}, ${5:pitchshift})$0",
	"description": "See InsertMedia.\n\n"
	},

	"InsertTrackAtIndex lua": {
	"prefix": "reaper.InsertTrackAtIndex",
	"scope": "lua",
	"body": "reaper.InsertTrackAtIndex(${1:idx}, ${2:wantDefaults})$0",
	"description": "inserts a track at idx,of course this will be clamped to 0..GetNumTracks(). wantDefaults=TRUE for default envelopes/FX,otherwise no enabled fx/env\n\n"
	},

	"IsMediaExtension lua": {
	"prefix": "reaper.IsMediaExtension",
	"scope": "lua",
	"body": "reaper.IsMediaExtension(${1:ext}, ${2:wantOthers})$0",
	"description": "Tests a file extension (i.e. 'wav' or 'mid') to see if it's a media extension.\nIf wantOthers is set, then 'RPP', 'TXT' and other project-type formats will also pass.\n\n"
	},

	"IsMediaItemSelected lua": {
	"prefix": "reaper.IsMediaItemSelected",
	"scope": "lua",
	"body": "reaper.IsMediaItemSelected(${1:item})$0",
	"description": ""
	},

	"IsProjectDirty lua": {
	"prefix": "reaper.IsProjectDirty",
	"scope": "lua",
	"body": "reaper.IsProjectDirty(${1:proj})$0",
	"description": "Is the project dirty (needing save)? Always returns 0 if 'undo/prompt to save' is disabled in preferences.\n\n"
	},

	"IsTrackSelected lua": {
	"prefix": "reaper.IsTrackSelected",
	"scope": "lua",
	"body": "reaper.IsTrackSelected(${1:track})$0",
	"description": ""
	},

	"IsTrackVisible lua": {
	"prefix": "reaper.IsTrackVisible",
	"scope": "lua",
	"body": "reaper.IsTrackVisible(${1:track}, ${2:mixer})$0",
	"description": "If mixer==true, returns true if the track is visible in the mixer.  If mixer==false, returns true if the track is visible in the track control panel.\n\n"
	},

	"joystick_create lua": {
	"prefix": "reaper.joystick_create",
	"scope": "lua",
	"body": "reaper.joystick_create(${1:guidGUID})$0",
	"description": "creates a joystick device\n\n"
	},

	"joystick_destroy lua": {
	"prefix": "reaper.joystick_destroy",
	"scope": "lua",
	"body": "reaper.joystick_destroy(${1:device})$0",
	"description": "destroys a joystick device\n\n"
	},

	"joystick_enum lua": {
	"prefix": "reaper.joystick_enum",
	"scope": "lua",
	"body": "retval, optional_namestr = reaper.joystick_enum(${1:index})$0",
	"description": "enumerates installed devices, returns GUID as a string\n\n"
	},

	"joystick_getaxis lua": {
	"prefix": "reaper.joystick_getaxis",
	"scope": "lua",
	"body": "reaper.joystick_getaxis(${1:dev}, ${2:axis})$0",
	"description": "returns axis value (-1..1)\n\n"
	},

	"joystick_getbuttonmask lua": {
	"prefix": "reaper.joystick_getbuttonmask",
	"scope": "lua",
	"body": "reaper.joystick_getbuttonmask(${1:dev})$0",
	"description": "returns button pressed mask, 1=first button, 2=second...\n\n"
	},

	"joystick_getinfo lua": {
	"prefix": "reaper.joystick_getinfo",
	"scope": "lua",
	"body": "retval, optional_axes, optional_povs = reaper.joystick_getinfo(${1:dev})$0",
	"description": "returns button count\n\n"
	},

	"joystick_getpov lua": {
	"prefix": "reaper.joystick_getpov",
	"scope": "lua",
	"body": "reaper.joystick_getpov(${1:dev}, ${2:pov})$0",
	"description": "returns POV value (usually 0..655.35, or 655.35 on error)\n\n"
	},

	"joystick_update lua": {
	"prefix": "reaper.joystick_update",
	"scope": "lua",
	"body": "reaper.joystick_update(${1:dev})$0",
	"description": "Updates joystick state from hardware, returns true if successful (joystick_get* will not be valid until joystick_update() is called successfully)\n\n"
	},

	"kbd_enumerateActions lua": {
	"prefix": "reaper.kbd_enumerateActions",
	"scope": "lua",
	"body": "retval, name = reaper.kbd_enumerateActions(${1:section}, ${2:idx})$0",
	"description": ""
	},

	"kbd_getTextFromCmd lua": {
	"prefix": "reaper.kbd_getTextFromCmd",
	"scope": "lua",
	"body": "reaper.kbd_getTextFromCmd(${1:cmd}, ${2:section})$0",
	"description": ""
	},

	"LICE_ClipLine lua": {
	"prefix": "reaper.LICE_ClipLine",
	"scope": "lua",
	"body": "retval, pX1, pY1, pX2, pY2 = reaper.LICE_ClipLine(${1:pX1}, ${2:pY1}, ${3:pX2}, ${4:pY2}, ${5:xLo}, ${6:yLo}, ${7:xHi}, ${8:yHi})$0",
	"description": "Returns false if the line is entirely offscreen.\n\n"
	},

	"LocalizeString lua": {
	"prefix": "reaper.LocalizeString",
	"scope": "lua",
	"body": "reaper.LocalizeString(${1:src_string}, ${2:section}, ${3:flags})$0",
	"description": "Returns a localized version of src_string, in section section. flags can have 1 set to only localize if sprintf-style formatting matches the original.\n\n"
	},

	"Loop_OnArrow lua": {
	"prefix": "reaper.Loop_OnArrow",
	"scope": "lua",
	"body": "reaper.Loop_OnArrow(${1:project}, ${2:direction})$0",
	"description": "Move the loop selection left or right. Returns true if snap is enabled.\n\n"
	},

	"Main_OnCommand lua": {
	"prefix": "reaper.Main_OnCommand",
	"scope": "lua",
	"body": "reaper.Main_OnCommand(${1:command}, ${2:flag})$0",
	"description": "See Main_OnCommandEx.\n\n"
	},

	"Main_OnCommandEx lua": {
	"prefix": "reaper.Main_OnCommandEx",
	"scope": "lua",
	"body": "reaper.Main_OnCommandEx(${1:command}, ${2:flag}, ${3:proj})$0",
	"description": "Performs an action belonging to the main action section. To perform non-native actions (ReaScripts, custom or extension plugins' actions) safely, see NamedCommandLookup().\n\n"
	},

	"Main_openProject lua": {
	"prefix": "reaper.Main_openProject",
	"scope": "lua",
	"body": "reaper.Main_openProject(${1:name})$0",
	"description": "opens a project. will prompt the user to save unless name is prefixed with 'noprompt:'. If name is prefixed with 'template:', project file will be loaded as a template.\nIf passed a .RTrackTemplate file, adds the template to the existing project.\n\n"
	},

	"Main_SaveProject lua": {
	"prefix": "reaper.Main_SaveProject",
	"scope": "lua",
	"body": "reaper.Main_SaveProject(${1:proj}, ${2:forceSaveAsIn})$0",
	"description": "Save the project.\n\n"
	},

	"Main_SaveProjectEx lua": {
	"prefix": "reaper.Main_SaveProjectEx",
	"scope": "lua",
	"body": "reaper.Main_SaveProjectEx(${1:proj}, ${2:filename}, ${3:options})$0",
	"description": "Save the project. options: &1=save selected tracks as track template, &2=include media with track template, &4=include envelopes with track template. See Main_openProject, Main_SaveProject.\n\n"
	},

	"Main_UpdateLoopInfo lua": {
	"prefix": "reaper.Main_UpdateLoopInfo",
	"scope": "lua",
	"body": "reaper.Main_UpdateLoopInfo(${1:ignoremask})$0",
	"description": ""
	},

	"MarkProjectDirty lua": {
	"prefix": "reaper.MarkProjectDirty",
	"scope": "lua",
	"body": "reaper.MarkProjectDirty(${1:proj})$0",
	"description": "Marks project as dirty (needing save) if 'undo/prompt to save' is enabled in preferences.\n\n"
	},

	"MarkTrackItemsDirty lua": {
	"prefix": "reaper.MarkTrackItemsDirty",
	"scope": "lua",
	"body": "reaper.MarkTrackItemsDirty(${1:track}, ${2:item})$0",
	"description": "If track is supplied, item is ignored\n\n"
	},

	"Master_GetPlayRate lua": {
	"prefix": "reaper.Master_GetPlayRate",
	"scope": "lua",
	"body": "reaper.Master_GetPlayRate(${1:project})$0",
	"description": ""
	},

	"Master_GetPlayRateAtTime lua": {
	"prefix": "reaper.Master_GetPlayRateAtTime",
	"scope": "lua",
	"body": "reaper.Master_GetPlayRateAtTime(${1:time_s}, ${2:proj})$0",
	"description": ""
	},

	"Master_GetTempo lua": {
	"prefix": "reaper.Master_GetTempo",
	"scope": "lua",
	"body": "reaper.Master_GetTempo()\n\n",
	"description": ""
	},

	"Master_NormalizePlayRate lua": {
	"prefix": "reaper.Master_NormalizePlayRate",
	"scope": "lua",
	"body": "reaper.Master_NormalizePlayRate(${1:playrate}, ${2:isnormalized})$0",
	"description": "Convert play rate to/from a value between 0 and 1, representing the position on the project playrate slider.\n\n"
	},

	"Master_NormalizeTempo lua": {
	"prefix": "reaper.Master_NormalizeTempo",
	"scope": "lua",
	"body": "reaper.Master_NormalizeTempo(${1:bpm}, ${2:isnormalized})$0",
	"description": "Convert the tempo to/from a value between 0 and 1, representing bpm in the range of 40-296 bpm.\n\n"
	},

	"MB lua": {
	"prefix": "reaper.MB",
	"scope": "lua",
	"body": "reaper.MB(${1:msg}, ${2:title}, ${3:type})$0",
	"description": "type 0=OK,1=OKCANCEL,2=ABORTRETRYIGNORE,3=YESNOCANCEL,4=YESNO,5=RETRYCANCEL : ret 1=OK,2=CANCEL,3=ABORT,4=RETRY,5=IGNORE,6=YES,7=NO\n\n"
	},

	"MediaItemDescendsFromTrack lua": {
	"prefix": "reaper.MediaItemDescendsFromTrack",
	"scope": "lua",
	"body": "reaper.MediaItemDescendsFromTrack(${1:item}, ${2:track})$0",
	"description": "Returns 1 if the track holds the item, 2 if the track is a folder containing the track that holds the item, etc.\n\n"
	},

	"MIDI_CountEvts lua": {
	"prefix": "reaper.MIDI_CountEvts",
	"scope": "lua",
	"body": "retval, notecnt, ccevtcnt, textsyxevtcnt = reaper.MIDI_CountEvts(${1:take})$0",
	"description": "Count the number of notes, CC events, and text/sysex events in a given MIDI item.\n\n"
	},

	"MIDI_DeleteCC lua": {
	"prefix": "reaper.MIDI_DeleteCC",
	"scope": "lua",
	"body": "reaper.MIDI_DeleteCC(${1:take}, ${2:ccidx})$0",
	"description": "Delete a MIDI CC event.\n\n"
	},

	"MIDI_DeleteEvt lua": {
	"prefix": "reaper.MIDI_DeleteEvt",
	"scope": "lua",
	"body": "reaper.MIDI_DeleteEvt(${1:take}, ${2:evtidx})$0",
	"description": "Delete a MIDI event.\n\n"
	},

	"MIDI_DeleteNote lua": {
	"prefix": "reaper.MIDI_DeleteNote",
	"scope": "lua",
	"body": "reaper.MIDI_DeleteNote(${1:take}, ${2:noteidx})$0",
	"description": "Delete a MIDI note.\n\n"
	},

	"MIDI_DeleteTextSysexEvt lua": {
	"prefix": "reaper.MIDI_DeleteTextSysexEvt",
	"scope": "lua",
	"body": "reaper.MIDI_DeleteTextSysexEvt(${1:take}, ${2:textsyxevtidx})$0",
	"description": "Delete a MIDI text or sysex event.\n\n"
	},

	"MIDI_DisableSort lua": {
	"prefix": "reaper.MIDI_DisableSort",
	"scope": "lua",
	"body": "reaper.MIDI_DisableSort(${1:take})$0",
	"description": "Disable sorting for all MIDI insert, delete, get and set functions, until MIDI_Sort is called.\n\n"
	},

	"MIDI_EnumSelCC lua": {
	"prefix": "reaper.MIDI_EnumSelCC",
	"scope": "lua",
	"body": "reaper.MIDI_EnumSelCC(${1:take}, ${2:ccidx})$0",
	"description": "Returns the index of the next selected MIDI CC event after ccidx (-1 if there are no more selected events).\n\n"
	},

	"MIDI_EnumSelEvts lua": {
	"prefix": "reaper.MIDI_EnumSelEvts",
	"scope": "lua",
	"body": "reaper.MIDI_EnumSelEvts(${1:take}, ${2:evtidx})$0",
	"description": "Returns the index of the next selected MIDI event after evtidx (-1 if there are no more selected events).\n\n"
	},

	"MIDI_EnumSelNotes lua": {
	"prefix": "reaper.MIDI_EnumSelNotes",
	"scope": "lua",
	"body": "reaper.MIDI_EnumSelNotes(${1:take}, ${2:noteidx})$0",
	"description": "Returns the index of the next selected MIDI note after noteidx (-1 if there are no more selected events).\n\n"
	},

	"MIDI_EnumSelTextSysexEvts lua": {
	"prefix": "reaper.MIDI_EnumSelTextSysexEvts",
	"scope": "lua",
	"body": "reaper.MIDI_EnumSelTextSysexEvts(${1:take}, ${2:textsyxidx})$0",
	"description": "Returns the index of the next selected MIDI text/sysex event after textsyxidx (-1 if there are no more selected events).\n\n"
	},

	"MIDI_GetAllEvts lua": {
	"prefix": "reaper.MIDI_GetAllEvts",
	"scope": "lua",
	"body": "retval, buf = reaper.MIDI_GetAllEvts(${1:take})$0",
	"description": "Get all MIDI data. MIDI buffer is returned as a list of { int offset, char flag, int msglen, unsigned char msg[] }.\noffset: MIDI ticks from previous event\nflag: &1=selected &2=muted\nflag high 4 bits for CC shape: &16=linear, &32=slow start/end, &16|32=fast start, &64=fast end, &64|16=bezier\nmsg: the MIDI message.\nA meta-event of type 0xF followed by 'CCBZ ' and 5 more bytes represents bezier curve data for the previous MIDI event: 1 byte for the bezier type (usually 0) and 4 bytes for the bezier tension as a float.\nFor tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events.\nSee MIDI_SetAllEvts.\n\n"
	},

	"MIDI_GetCC lua": {
	"prefix": "reaper.MIDI_GetCC",
	"scope": "lua",
	"body": "retval, selected, muted, ppqpos, chanmsg, chan, msg2, msg3 = reaper.MIDI_GetCC(${1:take}, ${2:ccidx})$0",
	"description": "Get MIDI CC event properties.\n\n"
	},

	"MIDI_GetCCShape lua": {
	"prefix": "reaper.MIDI_GetCCShape",
	"scope": "lua",
	"body": "retval, shape, beztension = reaper.MIDI_GetCCShape(${1:take}, ${2:ccidx})$0",
	"description": "Get CC shape and bezier tension. See MIDI_GetCC, MIDI_SetCCShape\n\n"
	},

	"MIDI_GetEvt lua": {
	"prefix": "reaper.MIDI_GetEvt",
	"scope": "lua",
	"body": "retval, selected, muted, ppqpos, msg = reaper.MIDI_GetEvt(${1:take}, ${2:evtidx})$0",
	"description": "Get MIDI event properties.\n\n"
	},

	"MIDI_GetGrid lua": {
	"prefix": "reaper.MIDI_GetGrid",
	"scope": "lua",
	"body": "retval, optional_swing, optional_noteLen = reaper.MIDI_GetGrid(${1:take})$0",
	"description": "Returns the most recent MIDI editor grid size for this MIDI take, in QN. Swing is between 0 and 1. Note length is 0 if it follows the grid size.\n\n"
	},

	"MIDI_GetHash lua": {
	"prefix": "reaper.MIDI_GetHash",
	"scope": "lua",
	"body": "retval, hash = reaper.MIDI_GetHash(${1:take}, ${2:notesonly})$0",
	"description": "Get a string that only changes when the MIDI data changes. If notesonly==true, then the string changes only when the MIDI notes change. See MIDI_GetTrackHash\n\n"
	},

	"MIDI_GetNote lua": {
	"prefix": "reaper.MIDI_GetNote",
	"scope": "lua",
	"body": "retval, selected, muted, startppqpos, endppqpos, chan, pitch, vel = reaper.MIDI_GetNote(${1:take}, ${2:noteidx})$0",
	"description": "Get MIDI note properties.\n\n"
	},

	"MIDI_GetPPQPos_EndOfMeasure lua": {
	"prefix": "reaper.MIDI_GetPPQPos_EndOfMeasure",
	"scope": "lua",
	"body": "reaper.MIDI_GetPPQPos_EndOfMeasure(${1:take}, ${2:ppqpos})$0",
	"description": "Returns the MIDI tick (ppq) position corresponding to the end of the measure.\n\n"
	},

	"MIDI_GetPPQPos_StartOfMeasure lua": {
	"prefix": "reaper.MIDI_GetPPQPos_StartOfMeasure",
	"scope": "lua",
	"body": "reaper.MIDI_GetPPQPos_StartOfMeasure(${1:take}, ${2:ppqpos})$0",
	"description": "Returns the MIDI tick (ppq) position corresponding to the start of the measure.\n\n"
	},

	"MIDI_GetPPQPosFromProjQN lua": {
	"prefix": "reaper.MIDI_GetPPQPosFromProjQN",
	"scope": "lua",
	"body": "reaper.MIDI_GetPPQPosFromProjQN(${1:take}, ${2:projqn})$0",
	"description": "Returns the MIDI tick (ppq) position corresponding to a specific project time in quarter notes.\n\n"
	},

	"MIDI_GetPPQPosFromProjTime lua": {
	"prefix": "reaper.MIDI_GetPPQPosFromProjTime",
	"scope": "lua",
	"body": "reaper.MIDI_GetPPQPosFromProjTime(${1:take}, ${2:projtime})$0",
	"description": "Returns the MIDI tick (ppq) position corresponding to a specific project time in seconds.\n\n"
	},

	"MIDI_GetProjQNFromPPQPos lua": {
	"prefix": "reaper.MIDI_GetProjQNFromPPQPos",
	"scope": "lua",
	"body": "reaper.MIDI_GetProjQNFromPPQPos(${1:take}, ${2:ppqpos})$0",
	"description": "Returns the project time in quarter notes corresponding to a specific MIDI tick (ppq) position.\n\n"
	},

	"MIDI_GetProjTimeFromPPQPos lua": {
	"prefix": "reaper.MIDI_GetProjTimeFromPPQPos",
	"scope": "lua",
	"body": "reaper.MIDI_GetProjTimeFromPPQPos(${1:take}, ${2:ppqpos})$0",
	"description": "Returns the project time in seconds corresponding to a specific MIDI tick (ppq) position.\n\n"
	},

	"MIDI_GetRecentInputEvent lua": {
	"prefix": "reaper.MIDI_GetRecentInputEvent",
	"scope": "lua",
	"body": "retval, buf, ts, devIdx, projPos, projLoopCnt = reaper.MIDI_GetRecentInputEvent(${1:idx})$0",
	"description": "Gets a recent MIDI input event from the global history. idx=0 for the most recent event, which also latches to the latest MIDI event state (to get a more recent list, calling with idx=0 is necessary). idx=1 next most recent event, returns a non-zero sequence number for the event, or zero if no more events. tsOut will be set to the timestamp in samples relative to the current position (0 is current, -48000 is one second ago, etc). devIdxOut will have the low 16 bits set to the input device index, and 0x10000 will be set if device was enabled only for control. projPosOut will be set to project position in seconds if project was playing back at time of event, otherwise -1. Large SysEx events will not be included in this event list.\n\n"
	},

	"MIDI_GetScale lua": {
	"prefix": "reaper.MIDI_GetScale",
	"scope": "lua",
	"body": "retval, root, scale, name = reaper.MIDI_GetScale(${1:take})$0",
	"description": "Get the active scale in the media source, if any. root 0=C, 1=C#, etc. scale &0x1=root, &0x2=minor 2nd, &0x4=major 2nd, &0x8=minor 3rd, &0xF=fourth, etc.\n\n"
	},

	"MIDI_GetTextSysexEvt lua": {
	"prefix": "reaper.MIDI_GetTextSysexEvt",
	"scope": "lua",
	"body": "retval, optional_selected, optional_muted, optional_ppqpos, optional_type, optional_msg = reaper.MIDI_GetTextSysexEvt(${1:take}, ${2:textsyxevtidx}, ${3:optional_selected}, ${4:optional_muted}, ${5:optional_ppqpos}, ${6:optional_type}, ${7:optional_msg})$0",
	"description": "Get MIDI meta-event properties. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-14:MIDI text event types, 15=REAPER notation event. For all other meta-messages, type is returned as -2 and msg returned as all zeroes. See MIDI_GetEvt.\n\n"
	},

	"MIDI_GetTrackHash lua": {
	"prefix": "reaper.MIDI_GetTrackHash",
	"scope": "lua",
	"body": "retval, hash = reaper.MIDI_GetTrackHash(${1:track}, ${2:notesonly})$0",
	"description": "Get a string that only changes when the MIDI data changes. If notesonly==true, then the string changes only when the MIDI notes change. See MIDI_GetHash\n\n"
	},

	"midi_init lua": {
	"prefix": "reaper.midi_init",
	"scope": "lua",
	"body": "reaper.midi_init(${1:force_reinit_input}, ${2:force_reinit_output})$0",
	"description": "Opens MIDI devices as configured in preferences. force_reinit_input and force_reinit_output force a particular device index to close/re-open (pass -1 to not force any devices to reopen).\n\n"
	},

	"MIDI_InsertCC lua": {
	"prefix": "reaper.MIDI_InsertCC",
	"scope": "lua",
	"body": "reaper.MIDI_InsertCC(${1:take}, ${2:selected}, ${3:muted}, ${4:ppqpos}, ${5:chanmsg}, ${6:chan}, ${7:msg2}, ${8:msg3})$0",
	"description": "Insert a new MIDI CC event.\n\n"
	},

	"MIDI_InsertEvt lua": {
	"prefix": "reaper.MIDI_InsertEvt",
	"scope": "lua",
	"body": "reaper.MIDI_InsertEvt(${1:take}, ${2:selected}, ${3:muted}, ${4:ppqpos}, ${5:bytestr})$0",
	"description": "Insert a new MIDI event.\n\n"
	},

	"MIDI_InsertNote lua": {
	"prefix": "reaper.MIDI_InsertNote",
	"scope": "lua",
	"body": "reaper.MIDI_InsertNote(${1:take}, ${2:selected}, ${3:muted}, ${4:startppqpos}, ${5:endppqpos}, ${6:chan}, ${7:pitch}, ${8:vel}, ${9:optional_noSortIn})$0",
	"description": "Insert a new MIDI note. Set noSort if inserting multiple events, then call MIDI_Sort when done.\n\n"
	},

	"MIDI_InsertTextSysexEvt lua": {
	"prefix": "reaper.MIDI_InsertTextSysexEvt",
	"scope": "lua",
	"body": "reaper.MIDI_InsertTextSysexEvt(${1:take}, ${2:selected}, ${3:muted}, ${4:ppqpos}, ${5:type}, ${6:bytestr})$0",
	"description": "Insert a new MIDI text or sysex event. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-14:MIDI text event types, 15=REAPER notation event.\n\n"
	},

	"midi_reinit lua": {
	"prefix": "reaper.midi_reinit",
	"scope": "lua",
	"body": "reaper.midi_reinit()\n\n",
	"description": "Reset (close and re-open) all MIDI devices\n\n"
	},

	"MIDI_SelectAll lua": {
	"prefix": "reaper.MIDI_SelectAll",
	"scope": "lua",
	"body": "reaper.MIDI_SelectAll(${1:take}, ${2:select})$0",
	"description": "Select or deselect all MIDI content.\n\n"
	},

	"MIDI_SetAllEvts lua": {
	"prefix": "reaper.MIDI_SetAllEvts",
	"scope": "lua",
	"body": "reaper.MIDI_SetAllEvts(${1:take}, ${2:buf})$0",
	"description": "Set all MIDI data. MIDI buffer is passed in as a list of { int offset, char flag, int msglen, unsigned char msg[] }.\noffset: MIDI ticks from previous event\nflag: &1=selected &2=muted\nflag high 4 bits for CC shape: &16=linear, &32=slow start/end, &16|32=fast start, &64=fast end, &64|16=bezier\nmsg: the MIDI message.\nA meta-event of type 0xF followed by 'CCBZ ' and 5 more bytes represents bezier curve data for the previous MIDI event: 1 byte for the bezier type (usually 0) and 4 bytes for the bezier tension as a float.\nFor tick intervals longer than a 32 bit word can represent, zero-length meta events may be placed between valid events.\nSee MIDI_GetAllEvts.\n\n"
	},

	"MIDI_SetCC lua": {
	"prefix": "reaper.MIDI_SetCC",
	"scope": "lua",
	"body": "reaper.MIDI_SetCC(${1:take}, ${2:ccidx}, ${3:optional_selectedIn}, ${4:optional_mutedIn}, ${5:optional_ppqposIn}, ${6:optional_chanmsgIn}, ${7:optional_chanIn}, ${8:optional_msg2In}, ${9:optional_msg3In}, ${10:optional_noSortIn})$0",
	"description": "Set MIDI CC event properties. Properties passed as NULL will not be set. set noSort if setting multiple events, then call MIDI_Sort when done.\n\n"
	},

	"MIDI_SetCCShape lua": {
	"prefix": "reaper.MIDI_SetCCShape",
	"scope": "lua",
	"body": "reaper.MIDI_SetCCShape(${1:take}, ${2:ccidx}, ${3:shape}, ${4:beztension}, ${5:optional_noSortIn})$0",
	"description": "Set CC shape and bezier tension. set noSort if setting multiple events, then call MIDI_Sort when done. See MIDI_SetCC, MIDI_GetCCShape\n\n"
	},

	"MIDI_SetEvt lua": {
	"prefix": "reaper.MIDI_SetEvt",
	"scope": "lua",
	"body": "reaper.MIDI_SetEvt(${1:take}, ${2:evtidx}, ${3:optional_selectedIn}, ${4:optional_mutedIn}, ${5:optional_ppqposIn}, ${6:optional_msg}, ${7:optional_noSortIn})$0",
	"description": "Set MIDI event properties. Properties passed as NULL will not be set.  set noSort if setting multiple events, then call MIDI_Sort when done.\n\n"
	},

	"MIDI_SetItemExtents lua": {
	"prefix": "reaper.MIDI_SetItemExtents",
	"scope": "lua",
	"body": "reaper.MIDI_SetItemExtents(${1:item}, ${2:startQN}, ${3:endQN})$0",
	"description": "Set the start/end positions of a media item that contains a MIDI take.\n\n"
	},

	"MIDI_SetNote lua": {
	"prefix": "reaper.MIDI_SetNote",
	"scope": "lua",
	"body": "reaper.MIDI_SetNote(${1:take}, ${2:noteidx}, ${3:optional_selectedIn}, ${4:optional_mutedIn}, ${5:optional_startppqposIn}, ${6:optional_endppqposIn}, ${7:optional_chanIn}, ${8:optional_pitchIn}, ${9:optional_velIn}, ${10:optional_noSortIn})$0",
	"description": "Set MIDI note properties. Properties passed as NULL (or negative values) will not be set. Set noSort if setting multiple events, then call MIDI_Sort when done. Setting multiple note start positions at once is done more safely by deleting and re-inserting the notes.\n\n"
	},

	"MIDI_SetTextSysexEvt lua": {
	"prefix": "reaper.MIDI_SetTextSysexEvt",
	"scope": "lua",
	"body": "reaper.MIDI_SetTextSysexEvt(${1:take}, ${2:textsyxevtidx}, ${3:optional_selectedIn}, ${4:optional_mutedIn}, ${5:optional_ppqposIn}, ${6:optional_typeIn}, ${7:optional_msg}, ${8:optional_noSortIn})$0",
	"description": "Set MIDI text or sysex event properties. Properties passed as NULL will not be set. Allowable types are -1:sysex (msg should not include bounding F0..F7), 1-14:MIDI text event types, 15=REAPER notation event. set noSort if setting multiple events, then call MIDI_Sort when done.\n\n"
	},

	"MIDI_Sort lua": {
	"prefix": "reaper.MIDI_Sort",
	"scope": "lua",
	"body": "reaper.MIDI_Sort(${1:take})$0",
	"description": "Sort MIDI events after multiple calls to MIDI_SetNote, MIDI_SetCC, etc.\n\n"
	},

	"MIDIEditor_EnumTakes lua": {
	"prefix": "reaper.MIDIEditor_EnumTakes",
	"scope": "lua",
	"body": "reaper.MIDIEditor_EnumTakes(${1:midieditor}, ${2:takeindex}, ${3:editable_only})$0",
	"description": "list the takes that are currently being edited in this MIDI editor, starting with the active take. See MIDIEditor_GetTake\n\n"
	},

	"MIDIEditor_GetActive lua": {
	"prefix": "reaper.MIDIEditor_GetActive",
	"scope": "lua",
	"body": "reaper.MIDIEditor_GetActive()\n\n",
	"description": "get a pointer to the focused MIDI editor window\nsee MIDIEditor_GetMode, MIDIEditor_OnCommand\n\n"
	},

	"MIDIEditor_GetMode lua": {
	"prefix": "reaper.MIDIEditor_GetMode",
	"scope": "lua",
	"body": "reaper.MIDIEditor_GetMode(${1:midieditor})$0",
	"description": "get the mode of a MIDI editor (0=piano roll, 1=event list, -1=invalid editor)\nsee MIDIEditor_GetActive, MIDIEditor_OnCommand\n\n"
	},

	"MIDIEditor_GetSetting_int lua": {
	"prefix": "reaper.MIDIEditor_GetSetting_int",
	"scope": "lua",
	"body": "reaper.MIDIEditor_GetSetting_int(${1:midieditor}, ${2:setting_desc})$0",
	"description": "Get settings from a MIDI editor. setting_desc can be:\nsnap_enabled: returns 0 or 1\nactive_note_row: returns 0-127\nlast_clicked_cc_lane: returns 0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207=off velocity, 0x208=notation events, 0x210=media item lane\ndefault_note_vel: returns 0-127\ndefault_note_chan: returns 0-15\ndefault_note_len: returns default length in MIDI ticks\nscale_enabled: returns 0-1\nscale_root: returns 0-12 (0=C)\nlist_cnt: if viewing list view, returns event count\nif setting_desc is unsupported, the function returns -1.\nSee MIDIEditor_SetSetting_int, MIDIEditor_GetActive, MIDIEditor_GetSetting_str\n"
	},

	"MIDIEditor_GetSetting_str lua": {
	"prefix": "reaper.MIDIEditor_GetSetting_str",
	"scope": "lua",
	"body": "retval, buf = reaper.MIDIEditor_GetSetting_str(${1:midieditor}, ${2:setting_desc})$0",
	"description": "Get settings from a MIDI editor. setting_desc can be:\nlast_clicked_cc_lane: returns text description ('velocity', 'pitch', etc)\nscale: returns the scale record, for example '102034050607' for a major scale\nlist_X: if viewing list view, returns string describing event at row X (0-based). String will have a list of key=value pairs, e.g. 'pos=4.0 len=4.0 offvel=127 msg=90317F'. pos/len times are in QN, len/offvel may not be present if event is not a note. other keys which may be present include pos_pq/len_pq, sel, mute, ccval14, ccshape, ccbeztension.\nif setting_desc is unsupported, the function returns false.\nSee MIDIEditor_GetActive, MIDIEditor_GetSetting_int\n"
	},

	"MIDIEditor_GetTake lua": {
	"prefix": "reaper.MIDIEditor_GetTake",
	"scope": "lua",
	"body": "reaper.MIDIEditor_GetTake(${1:midieditor})$0",
	"description": "get the take that is currently being edited in this MIDI editor. see MIDIEditor_EnumTakes\n\n"
	},

	"MIDIEditor_LastFocused_OnCommand lua": {
	"prefix": "reaper.MIDIEditor_LastFocused_OnCommand",
	"scope": "lua",
	"body": "reaper.MIDIEditor_LastFocused_OnCommand(${1:command_id}, ${2:islistviewcommand})$0",
	"description": "Send an action command to the last focused MIDI editor. Returns false if there is no MIDI editor open, or if the view mode (piano roll or event list) does not match the input.\nsee MIDIEditor_OnCommand\n\n"
	},

	"MIDIEditor_OnCommand lua": {
	"prefix": "reaper.MIDIEditor_OnCommand",
	"scope": "lua",
	"body": "reaper.MIDIEditor_OnCommand(${1:midieditor}, ${2:command_id})$0",
	"description": "Send an action command to a MIDI editor. Returns false if the supplied MIDI editor pointer is not valid (not an open MIDI editor).\nsee MIDIEditor_GetActive, MIDIEditor_LastFocused_OnCommand\n\n"
	},

	"MIDIEditor_SetSetting_int lua": {
	"prefix": "reaper.MIDIEditor_SetSetting_int",
	"scope": "lua",
	"body": "reaper.MIDIEditor_SetSetting_int(${1:midieditor}, ${2:setting_desc}, ${3:setting})$0",
	"description": "Set settings for a MIDI editor. setting_desc can be:\nactive_note_row: 0-127\nSee MIDIEditor_GetSetting_int\n"
	},

	"mkpanstr lua": {
	"prefix": "reaper.mkpanstr",
	"scope": "lua",
	"body": "strNeed64 = reaper.mkpanstr(${1:strNeed64}, ${2:pan})$0",
	"description": ""
	},

	"mkvolpanstr lua": {
	"prefix": "reaper.mkvolpanstr",
	"scope": "lua",
	"body": "strNeed64 = reaper.mkvolpanstr(${1:strNeed64}, ${2:vol}, ${3:pan})$0",
	"description": ""
	},

	"mkvolstr lua": {
	"prefix": "reaper.mkvolstr",
	"scope": "lua",
	"body": "strNeed64 = reaper.mkvolstr(${1:strNeed64}, ${2:vol})$0",
	"description": ""
	},

	"MoveEditCursor lua": {
	"prefix": "reaper.MoveEditCursor",
	"scope": "lua",
	"body": "reaper.MoveEditCursor(${1:adjamt}, ${2:dosel})$0",
	"description": ""
	},

	"MoveMediaItemToTrack lua": {
	"prefix": "reaper.MoveMediaItemToTrack",
	"scope": "lua",
	"body": "reaper.MoveMediaItemToTrack(${1:item}, ${2:desttr})$0",
	"description": "returns TRUE if move succeeded\n\n"
	},

	"MuteAllTracks lua": {
	"prefix": "reaper.MuteAllTracks",
	"scope": "lua",
	"body": "reaper.MuteAllTracks(${1:mute})$0",
	"description": ""
	},

	"my_getViewport lua": {
	"prefix": "reaper.my_getViewport",
	"scope": "lua",
	"body": "reaper.my_getViewport(${1:integerr.left}, ${2:integerr.top}, ${3:integerr.right}, ${4:integerr.bot}, ${5:sr.left}, ${6:sr.top}, ${7:sr.right}, ${8:sr.bot}, ${9:wantWorkArea})$0",
	"description": ""
	},

	"NamedCommandLookup lua": {
	"prefix": "reaper.NamedCommandLookup",
	"scope": "lua",
	"body": "reaper.NamedCommandLookup(${1:command_name})$0",
	"description": "Get the command ID number for named command that was registered by an extension such as '_SWS_ABOUT' or '_113088d11ae641c193a2b7ede3041ad5' for a ReaScript or a custom action.\n\n"
	},

	"OnPauseButton lua": {
	"prefix": "reaper.OnPauseButton",
	"scope": "lua",
	"body": "reaper.OnPauseButton()\n\n",
	"description": "direct way to simulate pause button hit\n\n"
	},

	"OnPauseButtonEx lua": {
	"prefix": "reaper.OnPauseButtonEx",
	"scope": "lua",
	"body": "reaper.OnPauseButtonEx(${1:proj})$0",
	"description": "direct way to simulate pause button hit\n\n"
	},

	"OnPlayButton lua": {
	"prefix": "reaper.OnPlayButton",
	"scope": "lua",
	"body": "reaper.OnPlayButton()\n\n",
	"description": "direct way to simulate play button hit\n\n"
	},

	"OnPlayButtonEx lua": {
	"prefix": "reaper.OnPlayButtonEx",
	"scope": "lua",
	"body": "reaper.OnPlayButtonEx(${1:proj})$0",
	"description": "direct way to simulate play button hit\n\n"
	},

	"OnStopButton lua": {
	"prefix": "reaper.OnStopButton",
	"scope": "lua",
	"body": "reaper.OnStopButton()\n\n",
	"description": "direct way to simulate stop button hit\n\n"
	},

	"OnStopButtonEx lua": {
	"prefix": "reaper.OnStopButtonEx",
	"scope": "lua",
	"body": "reaper.OnStopButtonEx(${1:proj})$0",
	"description": "direct way to simulate stop button hit\n\n"
	},

	"OpenColorThemeFile lua": {
	"prefix": "reaper.OpenColorThemeFile",
	"scope": "lua",
	"body": "reaper.OpenColorThemeFile(${1:fn})$0",
	"description": ""
	},

	"OpenMediaExplorer lua": {
	"prefix": "reaper.OpenMediaExplorer",
	"scope": "lua",
	"body": "reaper.OpenMediaExplorer(${1:mediafn}, ${2:play})$0",
	"description": "Opens mediafn in the Media Explorer, play=true will play the file immediately (or toggle playback if mediafn was already open), =false will just select it.\n\n"
	},

	"OscLocalMessageToHost lua": {
	"prefix": "reaper.OscLocalMessageToHost",
	"scope": "lua",
	"body": "reaper.OscLocalMessageToHost(${1:message}, ${2:optional_valueIn})$0",
	"description": "Send an OSC message directly to REAPER. The value argument may be NULL. The message will be matched against the default OSC patterns.\n\n"
	},

	"parse_timestr lua": {
	"prefix": "reaper.parse_timestr",
	"scope": "lua",
	"body": "reaper.parse_timestr(${1:buf})$0",
	"description": "Parse hh:mm:ss.sss time string, return time in seconds (or 0.0 on error). See parse_timestr_pos, parse_timestr_len.\n\n"
	},

	"parse_timestr_len lua": {
	"prefix": "reaper.parse_timestr_len",
	"scope": "lua",
	"body": "reaper.parse_timestr_len(${1:buf}, ${2:offset}, ${3:modeoverride})$0",
	"description": "time formatting mode overrides: -1=proj default.\n0=time\n1=measures.beats + time\n2=measures.beats\n3=seconds\n4=samples\n5=h:m:s:f\n"
	},

	"parse_timestr_pos lua": {
	"prefix": "reaper.parse_timestr_pos",
	"scope": "lua",
	"body": "reaper.parse_timestr_pos(${1:buf}, ${2:modeoverride})$0",
	"description": "Parse time string, time formatting mode overrides: -1=proj default.\n0=time\n1=measures.beats + time\n2=measures.beats\n3=seconds\n4=samples\n5=h:m:s:f\n"
	},

	"parsepanstr lua": {
	"prefix": "reaper.parsepanstr",
	"scope": "lua",
	"body": "reaper.parsepanstr(${1:str})$0",
	"description": ""
	},

	"PCM_Sink_Enum lua": {
	"prefix": "reaper.PCM_Sink_Enum",
	"scope": "lua",
	"body": "retval, descstr = reaper.PCM_Sink_Enum(${1:idx})$0",
	"description": ""
	},

	"PCM_Sink_GetExtension lua": {
	"prefix": "reaper.PCM_Sink_GetExtension",
	"scope": "lua",
	"body": "reaper.PCM_Sink_GetExtension(${1:data})$0",
	"description": ""
	},

	"PCM_Sink_ShowConfig lua": {
	"prefix": "reaper.PCM_Sink_ShowConfig",
	"scope": "lua",
	"body": "reaper.PCM_Sink_ShowConfig(${1:cfg}, ${2:hwndParent})$0",
	"description": ""
	},

	"PCM_Source_BuildPeaks lua": {
	"prefix": "reaper.PCM_Source_BuildPeaks",
	"scope": "lua",
	"body": "reaper.PCM_Source_BuildPeaks(${1:src}, ${2:mode})$0",
	"description": "Calls and returns PCM_source::PeaksBuild_Begin() if mode=0, PeaksBuild_Run() if mode=1, and PeaksBuild_Finish() if mode=2. Normal use is to call PCM_Source_BuildPeaks(src,0), and if that returns nonzero, call PCM_Source_BuildPeaks(src,1) periodically until it returns zero (it returns the percentage of the file remaining), then call PCM_Source_BuildPeaks(src,2) to finalize. If PCM_Source_BuildPeaks(src,0) returns zero, then no further action is necessary.\n\n"
	},

	"PCM_Source_CreateFromFile lua": {
	"prefix": "reaper.PCM_Source_CreateFromFile",
	"scope": "lua",
	"body": "reaper.PCM_Source_CreateFromFile(${1:filename})$0",
	"description": "See PCM_Source_CreateFromFileEx.\n\n"
	},

	"PCM_Source_CreateFromFileEx lua": {
	"prefix": "reaper.PCM_Source_CreateFromFileEx",
	"scope": "lua",
	"body": "reaper.PCM_Source_CreateFromFileEx(${1:filename}, ${2:forcenoMidiImp})$0",
	"description": "Create a PCM_source from filename, and override pref of MIDI files being imported as in-project MIDI events.\n\n"
	},

	"PCM_Source_CreateFromType lua": {
	"prefix": "reaper.PCM_Source_CreateFromType",
	"scope": "lua",
	"body": "reaper.PCM_Source_CreateFromType(${1:sourcetype})$0",
	"description": "Create a PCM_source from a 'type' (use this if you're going to load its state via LoadState/ProjectStateContext).\nValid types include 'WAVE', 'MIDI', or whatever plug-ins define as well.\n\n"
	},

	"PCM_Source_Destroy lua": {
	"prefix": "reaper.PCM_Source_Destroy",
	"scope": "lua",
	"body": "reaper.PCM_Source_Destroy(${1:src})$0",
	"description": "Deletes a PCM_source -- be sure that you remove any project reference before deleting a source\n\n"
	},

	"PCM_Source_GetPeaks lua": {
	"prefix": "reaper.PCM_Source_GetPeaks",
	"scope": "lua",
	"body": "reaper.PCM_Source_GetPeaks(${1:src}, ${2:peakrate}, ${3:starttime}, ${4:numchannels}, ${5:numsamplesperchannel}, ${6:want_extra_type}, ${7:buf})$0",
	"description": "Gets block of peak samples to buf. Note that the peak samples are interleaved, but in two or three blocks (maximums, then minimums, then extra). Return value has 20 bits of returned sample count, then 4 bits of output_mode (0xf00000), then a bit to signify whether extra_type was available (0x1000000). extra_type can be 115 ('s') for spectral information, which will return peak samples as integers with the low 15 bits frequency, next 14 bits tonality.\n\n"
	},

	"PCM_Source_GetSectionInfo lua": {
	"prefix": "reaper.PCM_Source_GetSectionInfo",
	"scope": "lua",
	"body": "retval, offs, len, rev = reaper.PCM_Source_GetSectionInfo(${1:src})$0",
	"description": "If a section/reverse block, retrieves offset/len/reverse. return true if success\n\n"
	},

	"PluginWantsAlwaysRunFx lua": {
	"prefix": "reaper.PluginWantsAlwaysRunFx",
	"scope": "lua",
	"body": "reaper.PluginWantsAlwaysRunFx(${1:amt})$0",
	"description": ""
	},

	"PreventUIRefresh lua": {
	"prefix": "reaper.PreventUIRefresh",
	"scope": "lua",
	"body": "reaper.PreventUIRefresh(${1:prevent_count})$0",
	"description": "adds prevent_count to the UI refresh prevention state; always add then remove the same amount, or major disfunction will occur\n\n"
	},

	"PromptForAction lua": {
	"prefix": "reaper.PromptForAction",
	"scope": "lua",
	"body": "reaper.PromptForAction(${1:session_mode}, ${2:init_id}, ${3:section_id})$0",
	"description": "Uses the action list to choose an action. Call with session_mode=1 to create a session (init_id will be the initial action to select, or 0), then poll with session_mode=0, checking return value for user-selected action (will return 0 if no action selected yet, or -1 if the action window is no longer available). When finished, call with session_mode=-1.\n\n"
	},

	"ReaScriptError lua": {
	"prefix": "reaper.ReaScriptError",
	"scope": "lua",
	"body": "reaper.ReaScriptError(${1:errmsg})$0",
	"description": "Causes REAPER to display the error message after the current ReaScript finishes. If called within a Lua context and errmsg has a ! prefix, script execution will be terminated.\n\n"
	},

	"RecursiveCreateDirectory lua": {
	"prefix": "reaper.RecursiveCreateDirectory",
	"scope": "lua",
	"body": "reaper.RecursiveCreateDirectory(${1:path}, ${2:ignored})$0",
	"description": "returns positive value on success, 0 on failure.\n\n"
	},

	"reduce_open_files lua": {
	"prefix": "reaper.reduce_open_files",
	"scope": "lua",
	"body": "reaper.reduce_open_files(${1:flags})$0",
	"description": "garbage-collects extra open files and closes them. if flags has 1 set, this is done incrementally (call this from a regular timer, if desired). if flags has 2 set, files are aggressively closed (they may need to be re-opened very soon). returns number of files closed by this call.\n\n"
	},

	"RefreshToolbar lua": {
	"prefix": "reaper.RefreshToolbar",
	"scope": "lua",
	"body": "reaper.RefreshToolbar(${1:command_id})$0",
	"description": "See RefreshToolbar2.\n\n"
	},

	"RefreshToolbar2 lua": {
	"prefix": "reaper.RefreshToolbar2",
	"scope": "lua",
	"body": "reaper.RefreshToolbar2(${1:section_id}, ${2:command_id})$0",
	"description": "Refresh the toolbar button states of a toggle action.\n\n"
	},

	"relative_fn lua": {
	"prefix": "reaper.relative_fn",
	"scope": "lua",
	"body": "out = reaper.relative_fn(${1:in}, ${2:out})$0",
	"description": "Makes a filename 'in' relative to the current project, if any.\n\n"
	},

	"RemoveTrackSend lua": {
	"prefix": "reaper.RemoveTrackSend",
	"scope": "lua",
	"body": "reaper.RemoveTrackSend(${1:tr}, ${2:category}, ${3:sendidx})$0",
	"description": "Remove a send/receive/hardware output, return true on success. category is <0 for receives, 0=sends, >0 for hardware outputs. See CreateTrackSend, GetSetTrackSendInfo, GetTrackSendInfo_Value, SetTrackSendInfo_Value, GetTrackNumSends.\n\n"
	},

	"RenderFileSection lua": {
	"prefix": "reaper.RenderFileSection",
	"scope": "lua",
	"body": "reaper.RenderFileSection(${1:source_filename}, ${2:target_filename}, ${3:start_percent}, ${4:end_percent}, ${5:playrate})$0",
	"description": "Not available while playing back.\n\n"
	},

	"ReorderSelectedTracks lua": {
	"prefix": "reaper.ReorderSelectedTracks",
	"scope": "lua",
	"body": "reaper.ReorderSelectedTracks(${1:beforeTrackIdx}, ${2:makePrevFolder})$0",
	"description": "Moves all selected tracks to immediately above track specified by index beforeTrackIdx, returns false if no tracks were selected. makePrevFolder=0 for normal, 1 = as child of track preceding track specified by beforeTrackIdx, 2 = if track preceding track specified by beforeTrackIdx is last track in folder, extend folder\n\n"
	},

	"Resample_EnumModes lua": {
	"prefix": "reaper.Resample_EnumModes",
	"scope": "lua",
	"body": "reaper.Resample_EnumModes(${1:mode})$0",
	"description": ""
	},

	"resolve_fn lua": {
	"prefix": "reaper.resolve_fn",
	"scope": "lua",
	"body": "out = reaper.resolve_fn(${1:in}, ${2:out})$0",
	"description": "See resolve_fn2.\n\n"
	},

	"resolve_fn2 lua": {
	"prefix": "reaper.resolve_fn2",
	"scope": "lua",
	"body": "out = reaper.resolve_fn2(${1:in}, ${2:out}, ${3:optional_checkSubDir})$0",
	"description": "Resolves a filename 'in' by using project settings etc. If no file found, out will be a copy of in.\n\n"
	},

	"ReverseNamedCommandLookup lua": {
	"prefix": "reaper.ReverseNamedCommandLookup",
	"scope": "lua",
	"body": "reaper.ReverseNamedCommandLookup(${1:command_id})$0",
	"description": "Get the named command for the given command ID. The returned string will not start with '_' (e.g. it will return 'SWS_ABOUT'), it will be NULL if command_id is a native action.\n\n"
	},

	"ScaleFromEnvelopeMode lua": {
	"prefix": "reaper.ScaleFromEnvelopeMode",
	"scope": "lua",
	"body": "reaper.ScaleFromEnvelopeMode(${1:scaling_mode}, ${2:val})$0",
	"description": "See GetEnvelopeScalingMode.\n\n"
	},

	"ScaleToEnvelopeMode lua": {
	"prefix": "reaper.ScaleToEnvelopeMode",
	"scope": "lua",
	"body": "reaper.ScaleToEnvelopeMode(${1:scaling_mode}, ${2:val})$0",
	"description": "See GetEnvelopeScalingMode.\n\n"
	},

	"SectionFromUniqueID lua": {
	"prefix": "reaper.SectionFromUniqueID",
	"scope": "lua",
	"body": "reaper.SectionFromUniqueID(${1:uniqueID})$0",
	"description": ""
	},

	"SelectAllMediaItems lua": {
	"prefix": "reaper.SelectAllMediaItems",
	"scope": "lua",
	"body": "reaper.SelectAllMediaItems(${1:proj}, ${2:selected})$0",
	"description": ""
	},

	"SelectProjectInstance lua": {
	"prefix": "reaper.SelectProjectInstance",
	"scope": "lua",
	"body": "reaper.SelectProjectInstance(${1:proj})$0",
	"description": ""
	},

	"SetActiveTake lua": {
	"prefix": "reaper.SetActiveTake",
	"scope": "lua",
	"body": "reaper.SetActiveTake(${1:take})$0",
	"description": "set this take active in this media item\n\n"
	},

	"SetAutomationMode lua": {
	"prefix": "reaper.SetAutomationMode",
	"scope": "lua",
	"body": "reaper.SetAutomationMode(${1:mode}, ${2:onlySel})$0",
	"description": "sets all or selected tracks to mode.\n\n"
	},

	"SetCurrentBPM lua": {
	"prefix": "reaper.SetCurrentBPM",
	"scope": "lua",
	"body": "reaper.SetCurrentBPM(${1:__proj}, ${2:bpm}, ${3:wantUndo})$0",
	"description": "set current BPM in project, set wantUndo=true to add undo point\n\n"
	},

	"SetCursorContext lua": {
	"prefix": "reaper.SetCursorContext",
	"scope": "lua",
	"body": "reaper.SetCursorContext(${1:mode}, ${2:envIn})$0",
	"description": "You must use this to change the focus programmatically. mode=0 to focus track panels, 1 to focus the arrange window, 2 to focus the arrange window and select env (or env==NULL to clear the current track/take envelope selection)\n\n"
	},

	"SetEditCurPos lua": {
	"prefix": "reaper.SetEditCurPos",
	"scope": "lua",
	"body": "reaper.SetEditCurPos(${1:time}, ${2:moveview}, ${3:seekplay})$0",
	"description": ""
	},

	"SetEditCurPos2 lua": {
	"prefix": "reaper.SetEditCurPos2",
	"scope": "lua",
	"body": "reaper.SetEditCurPos2(${1:proj}, ${2:time}, ${3:moveview}, ${4:seekplay})$0",
	"description": ""
	},

	"SetEnvelopePoint lua": {
	"prefix": "reaper.SetEnvelopePoint",
	"scope": "lua",
	"body": "reaper.SetEnvelopePoint(${1:envelope}, ${2:ptidx}, ${3:optional_timeIn}, ${4:optional_valueIn}, ${5:optional_shapeIn}, ${6:optional_tensionIn}, ${7:optional_selectedIn}, ${8:optional_noSortIn})$0",
	"description": "Set attributes of an envelope point. Values that are not supplied will be ignored. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done. See SetEnvelopePointEx.\n\n"
	},

	"SetEnvelopePointEx lua": {
	"prefix": "reaper.SetEnvelopePointEx",
	"scope": "lua",
	"body": "reaper.SetEnvelopePointEx(${1:envelope}, ${2:autoitem_idx}, ${3:ptidx}, ${4:optional_timeIn}, ${5:optional_valueIn}, ${6:optional_shapeIn}, ${7:optional_tensionIn}, ${8:optional_selectedIn}, ${9:optional_noSortIn})$0",
	"description": "Set attributes of an envelope point. Values that are not supplied will be ignored. If setting multiple points at once, set noSort=true, and call Envelope_SortPoints when done.\nautoitem_idx=-1 for the underlying envelope, 0 for the first automation item on the envelope, etc.\nFor automation items, pass autoitem_idx|0x10000000 to base ptidx on the number of points in one full loop iteration,\neven if the automation item is trimmed so that not all points are visible.\nOtherwise, ptidx will be based on the number of visible points in the automation item, including all loop iterations.\nSee CountEnvelopePointsEx, GetEnvelopePointEx, InsertEnvelopePointEx, DeleteEnvelopePointEx.\n\n"
	},

	"SetEnvelopeStateChunk lua": {
	"prefix": "reaper.SetEnvelopeStateChunk",
	"scope": "lua",
	"body": "reaper.SetEnvelopeStateChunk(${1:env}, ${2:str}, ${3:isundo})$0",
	"description": "Sets the RPPXML state of an envelope, returns true if successful. Undo flag is a performance/caching hint.\n\n"
	},

	"SetExtState lua": {
	"prefix": "reaper.SetExtState",
	"scope": "lua",
	"body": "reaper.SetExtState(${1:section}, ${2:key}, ${3:value}, ${4:persist})$0",
	"description": "Set the extended state value for a specific section and key. persist=true means the value should be stored and reloaded the next time REAPER is opened. See GetExtState, DeleteExtState, HasExtState.\n\n"
	},

	"SetGlobalAutomationOverride lua": {
	"prefix": "reaper.SetGlobalAutomationOverride",
	"scope": "lua",
	"body": "reaper.SetGlobalAutomationOverride(${1:mode})$0",
	"description": "mode: see GetGlobalAutomationOverride\n\n"
	},

	"SetItemStateChunk lua": {
	"prefix": "reaper.SetItemStateChunk",
	"scope": "lua",
	"body": "reaper.SetItemStateChunk(${1:item}, ${2:str}, ${3:isundo})$0",
	"description": "Sets the RPPXML state of an item, returns true if successful. Undo flag is a performance/caching hint.\n\n"
	},

	"SetMasterTrackVisibility lua": {
	"prefix": "reaper.SetMasterTrackVisibility",
	"scope": "lua",
	"body": "reaper.SetMasterTrackVisibility(${1:flag})$0",
	"description": "set &1 to show the master track in the TCP, &2 to HIDE in the mixer. Returns the previous visibility state. See GetMasterTrackVisibility.\n\n"
	},

	"SetMediaItemInfo_Value lua": {
	"prefix": "reaper.SetMediaItemInfo_Value",
	"scope": "lua",
	"body": "reaper.SetMediaItemInfo_Value(${1:item}, ${2:parmname}, ${3:newvalue})$0",
	"description": "Set media item numerical-value attributes.\nB_MUTE : bool * : muted (item solo overrides). setting this value will clear C_MUTE_SOLO.\nB_MUTE_ACTUAL : bool * : muted (ignores solo). setting this value will not affect C_MUTE_SOLO.\nC_MUTE_SOLO : char * : solo override (-1=soloed, 0=no override, 1=unsoloed). note that this API does not automatically unsolo other items when soloing (nor clear the unsolos when clearing the last soloed item), it must be done by the caller via action or via this API.\nB_LOOPSRC : bool * : loop source\nB_ALLTAKESPLAY : bool * : all takes play\nB_UISEL : bool * : selected in arrange view\nC_BEATATTACHMODE : char * : item timebase, -1=track or project default, 1=beats (position, length, rate), 2=beats (position only). for auto-stretch timebase: C_BEATATTACHMODE=1, C_AUTOSTRETCH=1\nC_AUTOSTRETCH: : char * : auto-stretch at project tempo changes, 1=enabled, requires C_BEATATTACHMODE=1\nC_LOCK : char * : locked, &1=locked\nD_VOL : double * : item volume,  0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc\nD_POSITION : double * : item position in seconds\nD_LENGTH : double * : item length in seconds\nD_SNAPOFFSET : double * : item snap offset in seconds\nD_FADEINLEN : double * : item manual fadein length in seconds\nD_FADEOUTLEN : double * : item manual fadeout length in seconds\nD_FADEINDIR : double * : item fadein curvature, -1..1\nD_FADEOUTDIR : double * : item fadeout curvature, -1..1\nD_FADEINLEN_AUTO : double * : item auto-fadein length in seconds, -1=no auto-fadein\nD_FADEOUTLEN_AUTO : double * : item auto-fadeout length in seconds, -1=no auto-fadeout\nC_FADEINSHAPE : int * : fadein shape, 0..6, 0=linear\nC_FADEOUTSHAPE : int * : fadeout shape, 0..6, 0=linear\nI_GROUPID : int * : group ID, 0=no group\nI_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)\nI_LASTH : int * : height in pixels (read-only)\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color\nI_CURTAKE : int * : active take number\nIP_ITEMNUMBER : int : item number on this track (read-only, returns the item number directly)\nF_FREEMODE_Y : float * : free item positioning Y-position, 0=top of track, 1=bottom of track (will never be 1)\nF_FREEMODE_H : float * : free item positioning height, 0=no height, 1=full height of track (will never be 0)\n"
	},

	"SetMediaItemLength lua": {
	"prefix": "reaper.SetMediaItemLength",
	"scope": "lua",
	"body": "reaper.SetMediaItemLength(${1:item}, ${2:length}, ${3:refreshUI})$0",
	"description": "Redraws the screen only if refreshUI == true.\nSee UpdateArrange().\n\n"
	},

	"SetMediaItemPosition lua": {
	"prefix": "reaper.SetMediaItemPosition",
	"scope": "lua",
	"body": "reaper.SetMediaItemPosition(${1:item}, ${2:position}, ${3:refreshUI})$0",
	"description": "Redraws the screen only if refreshUI == true.\nSee UpdateArrange().\n\n"
	},

	"SetMediaItemSelected lua": {
	"prefix": "reaper.SetMediaItemSelected",
	"scope": "lua",
	"body": "reaper.SetMediaItemSelected(${1:item}, ${2:selected})$0",
	"description": ""
	},

	"SetMediaItemTake_Source lua": {
	"prefix": "reaper.SetMediaItemTake_Source",
	"scope": "lua",
	"body": "reaper.SetMediaItemTake_Source(${1:take}, ${2:source})$0",
	"description": "Set media source of media item take. The old source will not be destroyed, it is the caller's responsibility to retrieve it and destroy it after. If source already exists in any project, it will be duplicated before being set. C/C++ code should not use this and instead use GetSetMediaItemTakeInfo() with P_SOURCE to manage ownership directly.\n\n"
	},

	"SetMediaItemTakeInfo_Value lua": {
	"prefix": "reaper.SetMediaItemTakeInfo_Value",
	"scope": "lua",
	"body": "reaper.SetMediaItemTakeInfo_Value(${1:take}, ${2:parmname}, ${3:newvalue})$0",
	"description": "Set media item take numerical-value attributes.\nD_STARTOFFS : double * : start offset in source media, in seconds\nD_VOL : double * : take volume, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc, negative if take polarity is flipped\nD_PAN : double * : take pan, -1..1\nD_PANLAW : double * : take pan law, -1=default, 0.5=-6dB, 1.0=+0dB, etc\nD_PLAYRATE : double * : take playback rate, 0.5=half speed, 1=normal, 2=double speed, etc\nD_PITCH : double * : take pitch adjustment in semitones, -12=one octave down, 0=normal, +12=one octave up, etc\nB_PPITCH : bool * : preserve pitch when changing playback rate\nI_LASTY : int * : Y-position (relative to top of track) in pixels (read-only)\nI_LASTH : int * : height in pixels (read-only)\nI_CHANMODE : int * : channel mode, 0=normal, 1=reverse stereo, 2=downmix, 3=left, 4=right\nI_PITCHMODE : int * : pitch shifter mode, -1=projext default, otherwise high 2 bytes=shifter, low 2 bytes=parameter\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color\nIP_TAKENUMBER : int : take number (read-only, returns the take number directly)\n"
	},

	"SetMediaTrackInfo_Value lua": {
	"prefix": "reaper.SetMediaTrackInfo_Value",
	"scope": "lua",
	"body": "reaper.SetMediaTrackInfo_Value(${1:tr}, ${2:parmname}, ${3:newvalue})$0",
	"description": "Set track numerical-value attributes.\nB_MUTE : bool * : muted\nB_PHASE : bool * : track phase inverted\nB_RECMON_IN_EFFECT : bool * : record monitoring in effect (current audio-thread playback state, read-only)\nIP_TRACKNUMBER : int : track number 1-based, 0=not found, -1=master track (read-only, returns the int directly)\nI_SOLO : int * : soloed, 0=not soloed, 1=soloed, 2=soloed in place, 5=safe soloed, 6=safe soloed in place\nB_SOLO_DEFEAT : bool * : when set, if anything else is soloed and this track is not muted, this track acts soloed\nI_FXEN : int * : fx enabled, 0=bypassed, !0=fx active\nI_RECARM : int * : record armed, 0=not record armed, 1=record armed\nI_RECINPUT : int * : record input, <0=no input. if 4096 set, input is MIDI and low 5 bits represent channel (0=all, 1-16=only chan), next 6 bits represent physical input (63=all, 62=VKB). If 4096 is not set, low 10 bits (0..1023) are input start channel (ReaRoute/Loopback start at 512). If 2048 is set, input is multichannel input (using track channel count), or if 1024 is set, input is stereo input, otherwise input is mono.\nI_RECMODE : int * : record mode, 0=input, 1=stereo out, 2=none, 3=stereo out w/latency compensation, 4=midi output, 5=mono out, 6=mono out w/ latency compensation, 7=midi overdub, 8=midi replace\nI_RECMODE_FLAGS : int * : record mode flags, &3=output recording mode (0=post fader, 1=pre-fx, 2=post-fx/pre-fader)\nI_RECMON : int * : record monitoring, 0=off, 1=normal, 2=not when playing (tape style)\nI_RECMONITEMS : int * : monitor items while recording, 0=off, 1=on\nB_AUTO_RECARM : bool * : automatically set record arm when selected (does not immediately affect recarm state, script should set directly if desired)\nI_VUMODE : int * : track vu mode, &1:disabled, &30==0:stereo peaks, &30==2:multichannel peaks, &30==4:stereo RMS, &30==8:combined RMS, &30==12:LUFS-M, &30==16:LUFS-S (readout=max), &30==20:LUFS-S (readout=current), &32:LUFS calculation on channels 1+2 only\nI_AUTOMODE : int * : track automation mode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch\nI_NCHAN : int * : number of track channels, 2-64, even numbers only\nI_SELECTED : int * : track selected, 0=unselected, 1=selected\nI_WNDH : int * : current TCP window height in pixels including envelopes (read-only)\nI_TCPH : int * : current TCP window height in pixels not including envelopes (read-only)\nI_TCPY : int * : current TCP window Y-position in pixels relative to top of arrange view (read-only)\nI_MCPX : int * : current MCP X-position in pixels relative to mixer container (read-only)\nI_MCPY : int * : current MCP Y-position in pixels relative to mixer container (read-only)\nI_MCPW : int * : current MCP width in pixels (read-only)\nI_MCPH : int * : current MCP height in pixels (read-only)\nI_FOLDERDEPTH : int * : folder depth change, 0=normal, 1=track is a folder parent, -1=track is the last in the innermost folder, -2=track is the last in the innermost and next-innermost folders, etc\nI_FOLDERCOMPACT : int * : folder compacted state (only valid on folders), 0=normal, 1=small, 2=tiny children\nI_MIDIHWOUT : int * : track midi hardware output index, <0=disabled, low 5 bits are which channels (0=all, 1-16), next 5 bits are output device index (0-31)\nI_PERFFLAGS : int * : track performance flags, &1=no media buffering, &2=no anticipative FX\nI_CUSTOMCOLOR : int * : custom color, OS dependent color|0x1000000 (i.e. ColorToNative(r,g,b)|0x1000000). If you do not |0x1000000, then it will not be used, but will store the color\nI_HEIGHTOVERRIDE : int * : custom height override for TCP window, 0 for none, otherwise size in pixels\nB_HEIGHTLOCK : bool * : track height lock (must set I_HEIGHTOVERRIDE before locking)\nD_VOL : double * : trim volume of track, 0=-inf, 0.5=-6dB, 1=+0dB, 2=+6dB, etc\nD_PAN : double * : trim pan of track, -1..1\nD_WIDTH : double * : width of track, -1..1\nD_DUALPANL : double * : dualpan position 1, -1..1, only if I_PANMODE==6\nD_DUALPANR : double * : dualpan position 2, -1..1, only if I_PANMODE==6\nI_PANMODE : int * : pan mode, 0=classic 3.x, 3=new balance, 5=stereo pan, 6=dual pan\nD_PANLAW : double * : pan law of track, <0=project default, 0.5=-6dB, 0.707..=-3dB, 1=+0dB, 1.414..=-3dB with gain compensation, 2=-6dB with gain compensation, etc\nI_PANLAW_FLAGS : int * : pan law flags, 0=sine taper, 1=hybrid taper with deprecated behavior when gain compensation enabled, 2=linear taper, 3=hybrid taper\nP_ENV:<envchunkname or P_ENV:{GUID... : TrackEnvelope * : (read-only) chunkname can be <VOLENV, <PANENV, etc; GUID is the stringified envelope GUID.\nB_SHOWINMIXER : bool * : track control panel visible in mixer (do not use on master track)\nB_SHOWINTCP : bool * : track control panel visible in arrange view (do not use on master track)\nB_MAINSEND : bool * : track sends audio to parent\nC_MAINSEND_OFFS : char * : channel offset of track send to parent\nC_MAINSEND_NCH : char * : channel count of track send to parent (0=use all child track channels, 1=use one channel only)\nI_FREEMODE : int * : 1=track free item positioning enabled, 2=track fixed lanes enabled (call UpdateTimeline() after changing)\nC_BEATATTACHMODE : char * : track timebase, -1=project default, 0=time, 1=beats (position, length, rate), 2=beats (position only)\nF_MCP_FXSEND_SCALE : float * : scale of fx+send area in MCP (0=minimum allowed, 1=maximum allowed)\nF_MCP_FXPARM_SCALE : float * : scale of fx parameter area in MCP (0=minimum allowed, 1=maximum allowed)\nF_MCP_SENDRGN_SCALE : float * : scale of send area as proportion of the fx+send total area (0=minimum allowed, 1=maximum allowed)\nF_TCP_FXPARM_SCALE : float * : scale of TCP parameter area when TCP FX are embedded (0=min allowed, default, 1=max allowed)\nI_PLAY_OFFSET_FLAG : int * : track media playback offset state, &1=bypassed, &2=offset value is measured in samples (otherwise measured in seconds)\nD_PLAY_OFFSET : double * : track media playback offset, units depend on I_PLAY_OFFSET_FLAG\n"
	},

	"SetMIDIEditorGrid lua": {
	"prefix": "reaper.SetMIDIEditorGrid",
	"scope": "lua",
	"body": "reaper.SetMIDIEditorGrid(${1:project}, ${2:division})$0",
	"description": "Set the MIDI editor grid division. 0.25=quarter note, 1.0/3.0=half note tripet, etc.\n\n"
	},

	"SetMixerScroll lua": {
	"prefix": "reaper.SetMixerScroll",
	"scope": "lua",
	"body": "reaper.SetMixerScroll(${1:leftmosttrack})$0",
	"description": "Scroll the mixer so that leftmosttrack is the leftmost visible track. Returns the leftmost track after scrolling, which may be different from the passed-in track if there are not enough tracks to its right.\n\n"
	},

	"SetMouseModifier lua": {
	"prefix": "reaper.SetMouseModifier",
	"scope": "lua",
	"body": "reaper.SetMouseModifier(${1:context}, ${2:modifier_flag}, ${3:action})$0",
	"description": "Set the mouse modifier assignment for a specific modifier key assignment, in a specific context.\nContext is a string like 'MM_CTX_ITEM'. Find these strings by modifying an assignment in \nPreferences/Editing/Mouse Modifiers, then looking in reaper-mouse.ini.\nModifier flag is a number from 0 to 15: add 1 for shift, 2 for control, 4 for alt, 8 for win.\n(macOS: add 1 for shift, 2 for command, 4 for opt, 8 for control.)\nFor left-click and double-click contexts, the action can be any built-in command ID number\nor any custom action ID string. Find built-in command IDs in the REAPER actions window\n(enable 'show action IDs' in the context menu), and find custom action ID strings in reaper-kb.ini.\nFor built-in mouse modifier behaviors, find action IDs (which will be low numbers)\nby modifying an assignment in Preferences/Editing/Mouse Modifiers, then looking in reaper-mouse.ini.\nAssigning an action of -1 will reset that mouse modifier behavior to factory default.\nNote: the action string may have a space and 'c' or 'm' appended to it to specify command ID vs mouse modifier ID.\nSpecial case: SetMouseModifier(context, -1, -1) will reset the entire context to default.\nSpecial case: SetMouseModifier(-1, -1, -1) will reset all contexts to default.\nSee GetMouseModifier.\n"
	},

	"SetOnlyTrackSelected lua": {
	"prefix": "reaper.SetOnlyTrackSelected",
	"scope": "lua",
	"body": "reaper.SetOnlyTrackSelected(${1:track})$0",
	"description": "Set exactly one track selected, deselect all others\n\n"
	},

	"SetProjectGrid lua": {
	"prefix": "reaper.SetProjectGrid",
	"scope": "lua",
	"body": "reaper.SetProjectGrid(${1:project}, ${2:division})$0",
	"description": "Set the arrange view grid division. 0.25=quarter note, 1.0/3.0=half note triplet, etc.\n\n"
	},

	"SetProjectMarker lua": {
	"prefix": "reaper.SetProjectMarker",
	"scope": "lua",
	"body": "reaper.SetProjectMarker(${1:markrgnindexnumber}, ${2:isrgn}, ${3:pos}, ${4:rgnend}, ${5:name})$0",
	"description": ""
	},

	"SetProjectMarker2 lua": {
	"prefix": "reaper.SetProjectMarker2",
	"scope": "lua",
	"body": "reaper.SetProjectMarker2(${1:proj}, ${2:markrgnindexnumber}, ${3:isrgn}, ${4:pos}, ${5:rgnend}, ${6:name})$0",
	"description": ""
	},

	"SetProjectMarker3 lua": {
	"prefix": "reaper.SetProjectMarker3",
	"scope": "lua",
	"body": "reaper.SetProjectMarker3(${1:proj}, ${2:markrgnindexnumber}, ${3:isrgn}, ${4:pos}, ${5:rgnend}, ${6:name}, ${7:color})$0",
	"description": ""
	},

	"SetProjectMarker4 lua": {
	"prefix": "reaper.SetProjectMarker4",
	"scope": "lua",
	"body": "reaper.SetProjectMarker4(${1:proj}, ${2:markrgnindexnumber}, ${3:isrgn}, ${4:pos}, ${5:rgnend}, ${6:name}, ${7:color}, ${8:flags})$0",
	"description": "color should be 0 to not change, or ColorToNative(r,g,b)|0x1000000, flags&1 to clear name\n\n"
	},

	"SetProjectMarkerByIndex lua": {
	"prefix": "reaper.SetProjectMarkerByIndex",
	"scope": "lua",
	"body": "reaper.SetProjectMarkerByIndex(${1:proj}, ${2:markrgnidx}, ${3:isrgn}, ${4:pos}, ${5:rgnend}, ${6:IDnumber}, ${7:name}, ${8:color})$0",
	"description": "See SetProjectMarkerByIndex2.\n\n"
	},

	"SetProjectMarkerByIndex2 lua": {
	"prefix": "reaper.SetProjectMarkerByIndex2",
	"scope": "lua",
	"body": "reaper.SetProjectMarkerByIndex2(${1:proj}, ${2:markrgnidx}, ${3:isrgn}, ${4:pos}, ${5:rgnend}, ${6:IDnumber}, ${7:name}, ${8:color}, ${9:flags})$0",
	"description": "Differs from SetProjectMarker4 in that markrgnidx is 0 for the first marker/region, 1 for the next, etc (see EnumProjectMarkers3), rather than representing the displayed marker/region ID number (see SetProjectMarker3). Function will fail if attempting to set a duplicate ID number for a region (duplicate ID numbers for markers are OK). , flags&1 to clear name. If flags&2, markers will not be re-sorted, and after making updates, you MUST call SetProjectMarkerByIndex2 with markrgnidx=-1 and flags&2 to force re-sort/UI updates.\n\n"
	},

	"SetProjExtState lua": {
	"prefix": "reaper.SetProjExtState",
	"scope": "lua",
	"body": "reaper.SetProjExtState(${1:proj}, ${2:extname}, ${3:key}, ${4:value})$0",
	"description": "Save a key/value pair for a specific extension, to be restored the next time this specific project is loaded. Typically extname will be the name of a reascript or extension section. If key is NULL or '', all extended data for that extname will be deleted.  If val is NULL or '', the data previously associated with that key will be deleted. Returns the size of the state for this extname. See GetProjExtState, EnumProjExtState.\n\n"
	},

	"SetRegionRenderMatrix lua": {
	"prefix": "reaper.SetRegionRenderMatrix",
	"scope": "lua",
	"body": "reaper.SetRegionRenderMatrix(${1:proj}, ${2:regionindex}, ${3:track}, ${4:flag})$0",
	"description": "Add (flag > 0) or remove (flag < 0) a track from this region when using the region render matrix. If adding, flag==2 means force mono, flag==4 means force stereo, flag==N means force N/2 channels.\n\n"
	},

	"SetTakeMarker lua": {
	"prefix": "reaper.SetTakeMarker",
	"scope": "lua",
	"body": "reaper.SetTakeMarker(${1:take}, ${2:idx}, ${3:nameIn}, ${4:optional_srcposIn}, ${5:optional_colorIn})$0",
	"description": "Inserts or updates a take marker. If idx<0, a take marker will be added, otherwise an existing take marker will be updated. Returns the index of the new or updated take marker (which may change if srcPos is updated). See GetNumTakeMarkers, GetTakeMarker, DeleteTakeMarker\n\n"
	},

	"SetTakeStretchMarker lua": {
	"prefix": "reaper.SetTakeStretchMarker",
	"scope": "lua",
	"body": "reaper.SetTakeStretchMarker(${1:take}, ${2:idx}, ${3:pos}, ${4:optional_srcposIn})$0",
	"description": "Adds or updates a stretch marker. If idx<0, stretch marker will be added. If idx>=0, stretch marker will be updated. When adding, if srcposInOptional is omitted, source position will be auto-calculated. When updating a stretch marker, if srcposInOptional is omitted, srcpos will not be modified. Position/srcposition values will be constrained to nearby stretch markers. Returns index of stretch marker, or -1 if did not insert (or marker already existed at time).\n\n"
	},

	"SetTakeStretchMarkerSlope lua": {
	"prefix": "reaper.SetTakeStretchMarkerSlope",
	"scope": "lua",
	"body": "reaper.SetTakeStretchMarkerSlope(${1:take}, ${2:idx}, ${3:slope})$0",
	"description": "See GetTakeStretchMarkerSlope\n\n"
	},

	"SetTempoTimeSigMarker lua": {
	"prefix": "reaper.SetTempoTimeSigMarker",
	"scope": "lua",
	"body": "reaper.SetTempoTimeSigMarker(${1:proj}, ${2:ptidx}, ${3:timepos}, ${4:measurepos}, ${5:beatpos}, ${6:bpm}, ${7:timesig_num}, ${8:timesig_denom}, ${9:lineartempo})$0",
	"description": "Set parameters of a tempo/time signature marker. Provide either timepos (with measurepos=-1, beatpos=-1), or measurepos and beatpos (with timepos=-1). If timesig_num and timesig_denom are zero, the previous time signature will be used. ptidx=-1 will insert a new tempo/time signature marker. See CountTempoTimeSigMarkers, GetTempoTimeSigMarker, AddTempoTimeSigMarker.\n\n"
	},

	"SetThemeColor lua": {
	"prefix": "reaper.SetThemeColor",
	"scope": "lua",
	"body": "reaper.SetThemeColor(${1:ini_key}, ${2:color}, ${3:flags})$0",
	"description": "Temporarily updates the theme color to the color specified (or the theme default color if -1 is specified). Returns -1 on failure, otherwise returns the color (or transformed-color). Note that the UI is not updated by this, the caller should call UpdateArrange() etc as necessary. If the low bit of flags is set, any color transformations are bypassed. To read a value see GetThemeColor.\nCurrently valid ini_keys:"
	},

	"SetToggleCommandState lua": {
	"prefix": "reaper.SetToggleCommandState",
	"scope": "lua",
	"body": "reaper.SetToggleCommandState(${1:section_id}, ${2:command_id}, ${3:state})$0",
	"description": "Updates the toggle state of an action, returns true if succeeded. Only ReaScripts can have their toggle states changed programmatically. See RefreshToolbar2.\n\n"
	},

	"SetTrackAutomationMode lua": {
	"prefix": "reaper.SetTrackAutomationMode",
	"scope": "lua",
	"body": "reaper.SetTrackAutomationMode(${1:tr}, ${2:mode})$0",
	"description": ""
	},

	"SetTrackColor lua": {
	"prefix": "reaper.SetTrackColor",
	"scope": "lua",
	"body": "reaper.SetTrackColor(${1:track}, ${2:color})$0",
	"description": "Set the custom track color, color is OS dependent (i.e. ColorToNative(r,g,b). To unset the track color, see SetMediaTrackInfo_Value I_CUSTOMCOLOR\n\n"
	},

	"SetTrackMIDILyrics lua": {
	"prefix": "reaper.SetTrackMIDILyrics",
	"scope": "lua",
	"body": "reaper.SetTrackMIDILyrics(${1:track}, ${2:flag}, ${3:str})$0",
	"description": "Set all MIDI lyrics on the track. Lyrics will be stuffed into any MIDI items found in range. Flag is unused at present. str is passed in as beat position, tab, text, tab (example with flag=2: '1.1.2\tLyric for measure 1 beat 2\t2.1.1\tLyric for measure 2 beat 1	'). See GetTrackMIDILyrics\n\n"
	},

	"SetTrackMIDINoteName lua": {
	"prefix": "reaper.SetTrackMIDINoteName",
	"scope": "lua",
	"body": "reaper.SetTrackMIDINoteName(${1:track}, ${2:pitch}, ${3:chan}, ${4:name})$0",
	"description": "channel < 0 assigns these note names to all channels.\n\n"
	},

	"SetTrackMIDINoteNameEx lua": {
	"prefix": "reaper.SetTrackMIDINoteNameEx",
	"scope": "lua",
	"body": "reaper.SetTrackMIDINoteNameEx(${1:proj}, ${2:track}, ${3:pitch}, ${4:chan}, ${5:name})$0",
	"description": "channel < 0 assigns note name to all channels. pitch 128 assigns name for CC0, pitch 129 for CC1, etc.\n\n"
	},

	"SetTrackSelected lua": {
	"prefix": "reaper.SetTrackSelected",
	"scope": "lua",
	"body": "reaper.SetTrackSelected(${1:track}, ${2:selected})$0",
	"description": ""
	},

	"SetTrackSendInfo_Value lua": {
	"prefix": "reaper.SetTrackSendInfo_Value",
	"scope": "lua",
	"body": "reaper.SetTrackSendInfo_Value(${1:tr}, ${2:category}, ${3:sendidx}, ${4:parmname}, ${5:newvalue})$0",
	"description": "Set send/receive/hardware output numerical-value attributes, return true on success.\ncategory is <0 for receives, 0=sends, >0 for hardware outputs\nparameter names:\nB_MUTE : bool *\nB_PHASE : bool * : true to flip phase\nB_MONO : bool *\nD_VOL : double * : 1.0 = +0dB etc\nD_PAN : double * : -1..+1\nD_PANLAW : double * : 1.0=+0.0db, 0.5=-6dB, -1.0 = projdef etc\nI_SENDMODE : int * : 0=post-fader, 1=pre-fx, 2=post-fx (deprecated), 3=post-fx\nI_AUTOMODE : int * : automation mode (-1=use track automode, 0=trim/off, 1=read, 2=touch, 3=write, 4=latch)\nI_SRCCHAN : int * : index,&1024=mono, -1 for none\nI_DSTCHAN : int * : index, &1024=mono, otherwise stereo pair, hwout:&512=rearoute\nI_MIDIFLAGS : int * : low 5 bits=source channel 0=all, 1-16, next 5 bits=dest channel, 0=orig, 1-16=chan\nSee CreateTrackSend, RemoveTrackSend, GetTrackNumSends.\n\n"
	},

	"SetTrackSendUIPan lua": {
	"prefix": "reaper.SetTrackSendUIPan",
	"scope": "lua",
	"body": "reaper.SetTrackSendUIPan(${1:track}, ${2:send_idx}, ${3:pan}, ${4:isend})$0",
	"description": "send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends. isend=1 for end of edit, -1 for an instant edit (such as reset), 0 for normal tweak.\n\n"
	},

	"SetTrackSendUIVol lua": {
	"prefix": "reaper.SetTrackSendUIVol",
	"scope": "lua",
	"body": "reaper.SetTrackSendUIVol(${1:track}, ${2:send_idx}, ${3:vol}, ${4:isend})$0",
	"description": "send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends. isend=1 for end of edit, -1 for an instant edit (such as reset), 0 for normal tweak.\n\n"
	},

	"SetTrackStateChunk lua": {
	"prefix": "reaper.SetTrackStateChunk",
	"scope": "lua",
	"body": "reaper.SetTrackStateChunk(${1:track}, ${2:str}, ${3:isundo})$0",
	"description": "Sets the RPPXML state of a track, returns true if successful. Undo flag is a performance/caching hint.\n\n"
	},

	"SetTrackUIInputMonitor lua": {
	"prefix": "reaper.SetTrackUIInputMonitor",
	"scope": "lua",
	"body": "reaper.SetTrackUIInputMonitor(${1:track}, ${2:monitor}, ${3:igngroupflags})$0",
	"description": "monitor: 0=no monitoring, 1=monitoring, 2=auto-monitoring. returns new value or -1 if error. igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging\n\n"
	},

	"SetTrackUIMute lua": {
	"prefix": "reaper.SetTrackUIMute",
	"scope": "lua",
	"body": "reaper.SetTrackUIMute(${1:track}, ${2:mute}, ${3:igngroupflags})$0",
	"description": "mute: <0 toggles, >0 sets mute, 0=unsets mute. returns new value or -1 if error. igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging\n\n"
	},

	"SetTrackUIPan lua": {
	"prefix": "reaper.SetTrackUIPan",
	"scope": "lua",
	"body": "reaper.SetTrackUIPan(${1:track}, ${2:pan}, ${3:relative}, ${4:done}, ${5:igngroupflags})$0",
	"description": "igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging\n\n"
	},

	"SetTrackUIPolarity lua": {
	"prefix": "reaper.SetTrackUIPolarity",
	"scope": "lua",
	"body": "reaper.SetTrackUIPolarity(${1:track}, ${2:polarity}, ${3:igngroupflags})$0",
	"description": "polarity (AKA phase): <0 toggles, 0=normal, >0=inverted. returns new value or -1 if error.igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging\n\n"
	},

	"SetTrackUIRecArm lua": {
	"prefix": "reaper.SetTrackUIRecArm",
	"scope": "lua",
	"body": "reaper.SetTrackUIRecArm(${1:track}, ${2:recarm}, ${3:igngroupflags})$0",
	"description": "recarm: <0 toggles, >0 sets recarm, 0=unsets recarm. returns new value or -1 if error. igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging\n\n"
	},

	"SetTrackUISolo lua": {
	"prefix": "reaper.SetTrackUISolo",
	"scope": "lua",
	"body": "reaper.SetTrackUISolo(${1:track}, ${2:solo}, ${3:igngroupflags})$0",
	"description": "solo: <0 toggles, 1 sets solo (default mode), 0=unsets solo, 2 sets solo (non-SIP), 4 sets solo (SIP). returns new value or -1 if error. igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging\n\n"
	},

	"SetTrackUIVolume lua": {
	"prefix": "reaper.SetTrackUIVolume",
	"scope": "lua",
	"body": "reaper.SetTrackUIVolume(${1:track}, ${2:volume}, ${3:relative}, ${4:done}, ${5:igngroupflags})$0",
	"description": "igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging\n\n"
	},

	"SetTrackUIWidth lua": {
	"prefix": "reaper.SetTrackUIWidth",
	"scope": "lua",
	"body": "reaper.SetTrackUIWidth(${1:track}, ${2:width}, ${3:relative}, ${4:done}, ${5:igngroupflags})$0",
	"description": "igngroupflags: &1 to prevent track grouping, &2 to prevent selection ganging\n\n"
	},

	"ShowActionList lua": {
	"prefix": "reaper.ShowActionList",
	"scope": "lua",
	"body": "reaper.ShowActionList(${1:section}, ${2:callerWnd})$0",
	"description": ""
	},

	"ShowConsoleMsg lua": {
	"prefix": "reaper.ShowConsoleMsg",
	"scope": "lua",
	"body": "reaper.ShowConsoleMsg(${1:msg})$0",
	"description": "Show a message to the user (also useful for debugging). Send \"\\n\" for newline, '' to clear the console. See ClearConsole\n\n"
	},

	"ShowMessageBox lua": {
	"prefix": "reaper.ShowMessageBox",
	"scope": "lua",
	"body": "reaper.ShowMessageBox(${1:msg}, ${2:title}, ${3:type})$0",
	"description": "type 0=OK,1=OKCANCEL,2=ABORTRETRYIGNORE,3=YESNOCANCEL,4=YESNO,5=RETRYCANCEL : ret 1=OK,2=CANCEL,3=ABORT,4=RETRY,5=IGNORE,6=YES,7=NO\n\n"
	},

	"ShowPopupMenu lua": {
	"prefix": "reaper.ShowPopupMenu",
	"scope": "lua",
	"body": "reaper.ShowPopupMenu(${1:name}, ${2:x}, ${3:y}, ${4:hwndParent}, ${5:ctx}, ${6:ctx2}, ${7:ctx3})$0",
	"description": "shows a context menu, valid names include: track_input, track_panel, track_area, track_routing, item, ruler, envelope, envelope_point, envelope_item. ctxOptional can be a track pointer for track_*, item pointer for item* (but is optional). for envelope_point, ctx2Optional has point index, ctx3Optional has item index (0=main envelope, 1=first AI). for envelope_item, ctx2Optional has AI index (1=first AI)\n\n"
	},

	"SLIDER2DB lua": {
	"prefix": "reaper.SLIDER2DB",
	"scope": "lua",
	"body": "reaper.SLIDER2DB(${1:y})$0",
	"description": ""
	},

	"SnapToGrid lua": {
	"prefix": "reaper.SnapToGrid",
	"scope": "lua",
	"body": "reaper.SnapToGrid(${1:project}, ${2:time_pos})$0",
	"description": ""
	},

	"SoloAllTracks lua": {
	"prefix": "reaper.SoloAllTracks",
	"scope": "lua",
	"body": "reaper.SoloAllTracks(${1:solo})$0",
	"description": "solo=2 for SIP\n\n"
	},

	"Splash_GetWnd lua": {
	"prefix": "reaper.Splash_GetWnd",
	"scope": "lua",
	"body": "reaper.Splash_GetWnd()\n\n",
	"description": "gets the splash window, in case you want to display a message over it. Returns NULL when the splash window is not displayed.\n\n"
	},

	"SplitMediaItem lua": {
	"prefix": "reaper.SplitMediaItem",
	"scope": "lua",
	"body": "reaper.SplitMediaItem(${1:item}, ${2:position})$0",
	"description": "the original item becomes the left-hand split, the function returns the right-hand split (or NULL if the split failed)\n\n"
	},

	"stringToGuid lua": {
	"prefix": "reaper.stringToGuid",
	"scope": "lua",
	"body": "gGUID = reaper.stringToGuid(${1:str}, ${2:gGUID})$0",
	"description": ""
	},

	"StuffMIDIMessage lua": {
	"prefix": "reaper.StuffMIDIMessage",
	"scope": "lua",
	"body": "reaper.StuffMIDIMessage(${1:mode}, ${2:msg1}, ${3:msg2}, ${4:msg3})$0",
	"description": "Stuffs a 3 byte MIDI message into either the Virtual MIDI Keyboard queue, or the MIDI-as-control input queue, or sends to a MIDI hardware output. mode=0 for VKB, 1 for control (actions map etc), 2 for VKB-on-current-channel; 16 for external MIDI device 0, 17 for external MIDI device 1, etc; see GetNumMIDIOutputs, GetMIDIOutputName.\n\n"
	},

	"TakeFX_AddByName lua": {
	"prefix": "reaper.TakeFX_AddByName",
	"scope": "lua",
	"body": "reaper.TakeFX_AddByName(${1:take}, ${2:fxname}, ${3:instantiate})$0",
	"description": "Adds or queries the position of a named FX in a take. See TrackFX_AddByName() for information on fxname and instantiate.\n\n"
	},

	"TakeFX_CopyToTake lua": {
	"prefix": "reaper.TakeFX_CopyToTake",
	"scope": "lua",
	"body": "reaper.TakeFX_CopyToTake(${1:src_take}, ${2:src_fx}, ${3:dest_take}, ${4:dest_fx}, ${5:is_move})$0",
	"description": "Copies (or moves) FX from src_take to dest_take. Can be used with src_take=dest_take to reorder.\n\n"
	},

	"TakeFX_CopyToTrack lua": {
	"prefix": "reaper.TakeFX_CopyToTrack",
	"scope": "lua",
	"body": "reaper.TakeFX_CopyToTrack(${1:src_take}, ${2:src_fx}, ${3:dest_track}, ${4:dest_fx}, ${5:is_move})$0",
	"description": "Copies (or moves) FX from src_take to dest_track. dest_fx can have 0x1000000 set to reference input FX.\n\n"
	},

	"TakeFX_Delete lua": {
	"prefix": "reaper.TakeFX_Delete",
	"scope": "lua",
	"body": "reaper.TakeFX_Delete(${1:take}, ${2:fx})$0",
	"description": "Remove a FX from take chain (returns true on success)\n\n"
	},

	"TakeFX_EndParamEdit lua": {
	"prefix": "reaper.TakeFX_EndParamEdit",
	"scope": "lua",
	"body": "reaper.TakeFX_EndParamEdit(${1:take}, ${2:fx}, ${3:param})$0",
	"description": ""
	},

	"TakeFX_FormatParamValue lua": {
	"prefix": "reaper.TakeFX_FormatParamValue",
	"scope": "lua",
	"body": "retval, buf = reaper.TakeFX_FormatParamValue(${1:take}, ${2:fx}, ${3:param}, ${4:val})$0",
	"description": "Note: only works with FX that support Cockos VST extensions.\n\n"
	},

	"TakeFX_FormatParamValueNormalized lua": {
	"prefix": "reaper.TakeFX_FormatParamValueNormalized",
	"scope": "lua",
	"body": "retval, buf = reaper.TakeFX_FormatParamValueNormalized(${1:take}, ${2:fx}, ${3:param}, ${4:value}, ${5:buf})$0",
	"description": "Note: only works with FX that support Cockos VST extensions.\n\n"
	},

	"TakeFX_GetChainVisible lua": {
	"prefix": "reaper.TakeFX_GetChainVisible",
	"scope": "lua",
	"body": "reaper.TakeFX_GetChainVisible(${1:take})$0",
	"description": "returns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected\n\n"
	},

	"TakeFX_GetCount lua": {
	"prefix": "reaper.TakeFX_GetCount",
	"scope": "lua",
	"body": "reaper.TakeFX_GetCount(${1:take})$0",
	"description": ""
	},

	"TakeFX_GetEnabled lua": {
	"prefix": "reaper.TakeFX_GetEnabled",
	"scope": "lua",
	"body": "reaper.TakeFX_GetEnabled(${1:take}, ${2:fx})$0",
	"description": "See TakeFX_SetEnabled\n\n"
	},

	"TakeFX_GetEnvelope lua": {
	"prefix": "reaper.TakeFX_GetEnvelope",
	"scope": "lua",
	"body": "reaper.TakeFX_GetEnvelope(${1:take}, ${2:fxindex}, ${3:parameterindex}, ${4:create})$0",
	"description": "Returns the FX parameter envelope. If the envelope does not exist and create=true, the envelope will be created.\n\n"
	},

	"TakeFX_GetFloatingWindow lua": {
	"prefix": "reaper.TakeFX_GetFloatingWindow",
	"scope": "lua",
	"body": "reaper.TakeFX_GetFloatingWindow(${1:take}, ${2:index})$0",
	"description": "returns HWND of floating window for effect index, if any\n\n"
	},

	"TakeFX_GetFormattedParamValue lua": {
	"prefix": "reaper.TakeFX_GetFormattedParamValue",
	"scope": "lua",
	"body": "retval, buf = reaper.TakeFX_GetFormattedParamValue(${1:take}, ${2:fx}, ${3:param})$0",
	"description": ""
	},

	"TakeFX_GetFXGUID lua": {
	"prefix": "reaper.TakeFX_GetFXGUID",
	"scope": "lua",
	"body": "GUID = reaper.TakeFX_GetFXGUID(${1:take}, ${2:fx})$0",
	"description": ""
	},

	"TakeFX_GetFXName lua": {
	"prefix": "reaper.TakeFX_GetFXName",
	"scope": "lua",
	"body": "retval, buf = reaper.TakeFX_GetFXName(${1:take}, ${2:fx})$0",
	"description": ""
	},

	"TakeFX_GetIOSize lua": {
	"prefix": "reaper.TakeFX_GetIOSize",
	"scope": "lua",
	"body": "retval, inputPins, outputPins = reaper.TakeFX_GetIOSize(${1:take}, ${2:fx})$0",
	"description": "Gets the number of input/output pins for FX if available, returns plug-in type or -1 on error\n\n"
	},

	"TakeFX_GetNamedConfigParm lua": {
	"prefix": "reaper.TakeFX_GetNamedConfigParm",
	"scope": "lua",
	"body": "retval, buf = reaper.TakeFX_GetNamedConfigParm(${1:take}, ${2:fx}, ${3:parmname})$0",
	"description": "gets plug-in specific named configuration value (returns true on success). see TrackFX_GetNamedConfigParm\n\n"
	},

	"TakeFX_GetNumParams lua": {
	"prefix": "reaper.TakeFX_GetNumParams",
	"scope": "lua",
	"body": "reaper.TakeFX_GetNumParams(${1:take}, ${2:fx})$0",
	"description": ""
	},

	"TakeFX_GetOffline lua": {
	"prefix": "reaper.TakeFX_GetOffline",
	"scope": "lua",
	"body": "reaper.TakeFX_GetOffline(${1:take}, ${2:fx})$0",
	"description": "See TakeFX_SetOffline\n\n"
	},

	"TakeFX_GetOpen lua": {
	"prefix": "reaper.TakeFX_GetOpen",
	"scope": "lua",
	"body": "reaper.TakeFX_GetOpen(${1:take}, ${2:fx})$0",
	"description": "Returns true if this FX UI is open in the FX chain window or a floating window. See TakeFX_SetOpen\n\n"
	},

	"TakeFX_GetParam lua": {
	"prefix": "reaper.TakeFX_GetParam",
	"scope": "lua",
	"body": "retval, minval, maxval = reaper.TakeFX_GetParam(${1:take}, ${2:fx}, ${3:param})$0",
	"description": ""
	},

	"TakeFX_GetParameterStepSizes lua": {
	"prefix": "reaper.TakeFX_GetParameterStepSizes",
	"scope": "lua",
	"body": "retval, step, smallstep, largestep, istoggle = reaper.TakeFX_GetParameterStepSizes(${1:take}, ${2:fx}, ${3:param})$0",
	"description": ""
	},

	"TakeFX_GetParamEx lua": {
	"prefix": "reaper.TakeFX_GetParamEx",
	"scope": "lua",
	"body": "retval, minval, maxval, midval = reaper.TakeFX_GetParamEx(${1:take}, ${2:fx}, ${3:param})$0",
	"description": ""
	},

	"TakeFX_GetParamFromIdent lua": {
	"prefix": "reaper.TakeFX_GetParamFromIdent",
	"scope": "lua",
	"body": "reaper.TakeFX_GetParamFromIdent(${1:take}, ${2:fx}, ${3:ident_str})$0",
	"description": "gets the parameter index from an identifying string (:wet, :bypass, or a string returned from GetParamIdent), or -1 if unknown.\n\n"
	},

	"TakeFX_GetParamIdent lua": {
	"prefix": "reaper.TakeFX_GetParamIdent",
	"scope": "lua",
	"body": "retval, buf = reaper.TakeFX_GetParamIdent(${1:take}, ${2:fx}, ${3:param})$0",
	"description": "gets an identifying string for the parameter\n\n"
	},

	"TakeFX_GetParamName lua": {
	"prefix": "reaper.TakeFX_GetParamName",
	"scope": "lua",
	"body": "retval, buf = reaper.TakeFX_GetParamName(${1:take}, ${2:fx}, ${3:param})$0",
	"description": ""
	},

	"TakeFX_GetParamNormalized lua": {
	"prefix": "reaper.TakeFX_GetParamNormalized",
	"scope": "lua",
	"body": "reaper.TakeFX_GetParamNormalized(${1:take}, ${2:fx}, ${3:param})$0",
	"description": ""
	},

	"TakeFX_GetPinMappings lua": {
	"prefix": "reaper.TakeFX_GetPinMappings",
	"scope": "lua",
	"body": "retval, high32 = reaper.TakeFX_GetPinMappings(${1:take}, ${2:fx}, ${3:isoutput}, ${4:pin})$0",
	"description": "gets the effective channel mapping bitmask for a particular pin. high32Out will be set to the high 32 bits\n\n"
	},

	"TakeFX_GetPreset lua": {
	"prefix": "reaper.TakeFX_GetPreset",
	"scope": "lua",
	"body": "retval, presetname = reaper.TakeFX_GetPreset(${1:take}, ${2:fx})$0",
	"description": "Get the name of the preset currently showing in the REAPER dropdown, or the full path to a factory preset file for VST3 plug-ins (.vstpreset). Returns false if the current FX parameters do not exactly match the preset (in other words, if the user loaded the preset but moved the knobs afterward). See TakeFX_SetPreset.\n\n"
	},

	"TakeFX_GetPresetIndex lua": {
	"prefix": "reaper.TakeFX_GetPresetIndex",
	"scope": "lua",
	"body": "retval, numberOfPresets = reaper.TakeFX_GetPresetIndex(${1:take}, ${2:fx})$0",
	"description": "Returns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See TakeFX_SetPresetByIndex\n\n"
	},

	"TakeFX_GetUserPresetFilename lua": {
	"prefix": "reaper.TakeFX_GetUserPresetFilename",
	"scope": "lua",
	"body": "fn = reaper.TakeFX_GetUserPresetFilename(${1:take}, ${2:fx})$0",
	"description": ""
	},

	"TakeFX_NavigatePresets lua": {
	"prefix": "reaper.TakeFX_NavigatePresets",
	"scope": "lua",
	"body": "reaper.TakeFX_NavigatePresets(${1:take}, ${2:fx}, ${3:presetmove})$0",
	"description": "presetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc.\n\n"
	},

	"TakeFX_SetEnabled lua": {
	"prefix": "reaper.TakeFX_SetEnabled",
	"scope": "lua",
	"body": "reaper.TakeFX_SetEnabled(${1:take}, ${2:fx}, ${3:enabled})$0",
	"description": "See TakeFX_GetEnabled\n\n"
	},

	"TakeFX_SetNamedConfigParm lua": {
	"prefix": "reaper.TakeFX_SetNamedConfigParm",
	"scope": "lua",
	"body": "reaper.TakeFX_SetNamedConfigParm(${1:take}, ${2:fx}, ${3:parmname}, ${4:value})$0",
	"description": "gets plug-in specific named configuration value (returns true on success). see TrackFX_SetNamedConfigParm\n\n"
	},

	"TakeFX_SetOffline lua": {
	"prefix": "reaper.TakeFX_SetOffline",
	"scope": "lua",
	"body": "reaper.TakeFX_SetOffline(${1:take}, ${2:fx}, ${3:offline})$0",
	"description": "See TakeFX_GetOffline\n\n"
	},

	"TakeFX_SetOpen lua": {
	"prefix": "reaper.TakeFX_SetOpen",
	"scope": "lua",
	"body": "reaper.TakeFX_SetOpen(${1:take}, ${2:fx}, ${3:open})$0",
	"description": "Open this FX UI. See TakeFX_GetOpen\n\n"
	},

	"TakeFX_SetParam lua": {
	"prefix": "reaper.TakeFX_SetParam",
	"scope": "lua",
	"body": "reaper.TakeFX_SetParam(${1:take}, ${2:fx}, ${3:param}, ${4:val})$0",
	"description": ""
	},

	"TakeFX_SetParamNormalized lua": {
	"prefix": "reaper.TakeFX_SetParamNormalized",
	"scope": "lua",
	"body": "reaper.TakeFX_SetParamNormalized(${1:take}, ${2:fx}, ${3:param}, ${4:value})$0",
	"description": ""
	},

	"TakeFX_SetPinMappings lua": {
	"prefix": "reaper.TakeFX_SetPinMappings",
	"scope": "lua",
	"body": "reaper.TakeFX_SetPinMappings(${1:take}, ${2:fx}, ${3:isoutput}, ${4:pin}, ${5:low32bits}, ${6:hi32bits})$0",
	"description": "sets the channel mapping bitmask for a particular pin. returns false if unsupported (not all types of plug-ins support this capability)\n\n"
	},

	"TakeFX_SetPreset lua": {
	"prefix": "reaper.TakeFX_SetPreset",
	"scope": "lua",
	"body": "reaper.TakeFX_SetPreset(${1:take}, ${2:fx}, ${3:presetname})$0",
	"description": "Activate a preset with the name shown in the REAPER dropdown. Full paths to .vstpreset files are also supported for VST3 plug-ins. See TakeFX_GetPreset.\n\n"
	},

	"TakeFX_SetPresetByIndex lua": {
	"prefix": "reaper.TakeFX_SetPresetByIndex",
	"scope": "lua",
	"body": "reaper.TakeFX_SetPresetByIndex(${1:take}, ${2:fx}, ${3:idx})$0",
	"description": "Sets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See TakeFX_GetPresetIndex.\n\n"
	},

	"TakeFX_Show lua": {
	"prefix": "reaper.TakeFX_Show",
	"scope": "lua",
	"body": "reaper.TakeFX_Show(${1:take}, ${2:index}, ${3:showFlag})$0",
	"description": "showflag=0 for hidechain, =1 for show chain(index valid), =2 for hide floating window(index valid), =3 for show floating window (index valid)\n\n"
	},

	"TakeIsMIDI lua": {
	"prefix": "reaper.TakeIsMIDI",
	"scope": "lua",
	"body": "reaper.TakeIsMIDI(${1:take})$0",
	"description": "Returns true if the active take contains MIDI.\n\n"
	},

	"ThemeLayout_GetLayout lua": {
	"prefix": "reaper.ThemeLayout_GetLayout",
	"scope": "lua",
	"body": "retval, name = reaper.ThemeLayout_GetLayout(${1:section}, ${2:idx})$0",
	"description": "Gets theme layout information. section can be 'global' for global layout override, 'seclist' to enumerate a list of layout sections, otherwise a layout section such as 'mcp', 'tcp', 'trans', etc. idx can be -1 to query the current value, -2 to get the description of the section (if not global), -3 will return the current context DPI-scaling (256=normal, 512=retina, etc), or 0..x. returns false if failed.\n\n"
	},

	"ThemeLayout_GetParameter lua": {
	"prefix": "reaper.ThemeLayout_GetParameter",
	"scope": "lua",
	"body": "retval, optional_desc, optional_value, optional_defValue, optional_minValue, optional_maxValue = reaper.ThemeLayout_GetParameter(${1:wp})$0",
	"description": "returns theme layout parameter. return value is cfg-name, or nil/empty if out of range.\n\n"
	},

	"ThemeLayout_RefreshAll lua": {
	"prefix": "reaper.ThemeLayout_RefreshAll",
	"scope": "lua",
	"body": "reaper.ThemeLayout_RefreshAll()\n\n",
	"description": "Refreshes all layouts\n\n"
	},

	"ThemeLayout_SetLayout lua": {
	"prefix": "reaper.ThemeLayout_SetLayout",
	"scope": "lua",
	"body": "reaper.ThemeLayout_SetLayout(${1:section}, ${2:string_layout})$0",
	"description": "Sets theme layout override for a particular section -- section can be 'global' or 'mcp' etc. If setting global layout, prefix a ! to the layout string to clear any per-layout overrides. Returns false if failed.\n\n"
	},

	"ThemeLayout_SetParameter lua": {
	"prefix": "reaper.ThemeLayout_SetParameter",
	"scope": "lua",
	"body": "reaper.ThemeLayout_SetParameter(${1:wp}, ${2:value}, ${3:persist})$0",
	"description": "sets theme layout parameter to value. persist=true in order to have change loaded on next theme load. note that the caller should update layouts via ??? to make changes visible.\n\n"
	},

	"time_precise lua": {
	"prefix": "reaper.time_precise",
	"scope": "lua",
	"body": "reaper.time_precise()\n\n",
	"description": "Gets a precise system timestamp in seconds\n\n"
	},

	"TimeMap2_beatsToTime lua": {
	"prefix": "reaper.TimeMap2_beatsToTime",
	"scope": "lua",
	"body": "reaper.TimeMap2_beatsToTime(${1:proj}, ${2:tpos}, ${3:optional_measuresIn})$0",
	"description": "convert a beat position (or optionally a beats+measures if measures is non-NULL) to time.\n\n"
	},

	"TimeMap2_GetDividedBpmAtTime lua": {
	"prefix": "reaper.TimeMap2_GetDividedBpmAtTime",
	"scope": "lua",
	"body": "reaper.TimeMap2_GetDividedBpmAtTime(${1:proj}, ${2:time})$0",
	"description": "get the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)\n\n"
	},

	"TimeMap2_GetNextChangeTime lua": {
	"prefix": "reaper.TimeMap2_GetNextChangeTime",
	"scope": "lua",
	"body": "reaper.TimeMap2_GetNextChangeTime(${1:proj}, ${2:time})$0",
	"description": "when does the next time map (tempo or time sig) change occur\n\n"
	},

	"TimeMap2_QNToTime lua": {
	"prefix": "reaper.TimeMap2_QNToTime",
	"scope": "lua",
	"body": "reaper.TimeMap2_QNToTime(${1:proj}, ${2:qn})$0",
	"description": "converts project QN position to time.\n\n"
	},

	"TimeMap2_timeToBeats lua": {
	"prefix": "reaper.TimeMap2_timeToBeats",
	"scope": "lua",
	"body": "retval, optional_measures, optional_cml, optional_fullbeats, optional_cdenom = reaper.TimeMap2_timeToBeats(${1:proj}, ${2:tpos})$0",
	"description": "convert a time into beats.\nif measures is non-NULL, measures will be set to the measure count, return value will be beats since measure.\nif cml is non-NULL, will be set to current measure length in beats (i.e. time signature numerator)\nif fullbeats is non-NULL, and measures is non-NULL, fullbeats will get the full beat count (same value returned if measures is NULL).\nif cdenom is non-NULL, will be set to the current time signature denominator.\n\n"
	},

	"TimeMap2_timeToQN lua": {
	"prefix": "reaper.TimeMap2_timeToQN",
	"scope": "lua",
	"body": "reaper.TimeMap2_timeToQN(${1:proj}, ${2:tpos})$0",
	"description": "converts project time position to QN position.\n\n"
	},

	"TimeMap_curFrameRate lua": {
	"prefix": "reaper.TimeMap_curFrameRate",
	"scope": "lua",
	"body": "retval, dropFrame = reaper.TimeMap_curFrameRate(${1:proj})$0",
	"description": "Gets project framerate, and optionally whether it is drop-frame timecode\n\n"
	},

	"TimeMap_GetDividedBpmAtTime lua": {
	"prefix": "reaper.TimeMap_GetDividedBpmAtTime",
	"scope": "lua",
	"body": "reaper.TimeMap_GetDividedBpmAtTime(${1:time})$0",
	"description": "get the effective BPM at the time (seconds) position (i.e. 2x in /8 signatures)\n\n"
	},

	"TimeMap_GetMeasureInfo lua": {
	"prefix": "reaper.TimeMap_GetMeasureInfo",
	"scope": "lua",
	"body": "retval, qn_start, qn_end, timesig_num, timesig_denom, tempo = reaper.TimeMap_GetMeasureInfo(${1:proj}, ${2:measure})$0",
	"description": "Get the QN position and time signature information for the start of a measure. Return the time in seconds of the measure start.\n\n"
	},

	"TimeMap_GetMetronomePattern lua": {
	"prefix": "reaper.TimeMap_GetMetronomePattern",
	"scope": "lua",
	"body": "retval, pattern = reaper.TimeMap_GetMetronomePattern(${1:proj}, ${2:time}, ${3:pattern})$0",
	"description": "Fills in a string representing the active metronome pattern. For example, in a 7/8 measure divided 3+4, the pattern might be '1221222'. The length of the string is the time signature numerator, and the function returns the time signature denominator.\n\n"
	},

	"TimeMap_GetTimeSigAtTime lua": {
	"prefix": "reaper.TimeMap_GetTimeSigAtTime",
	"scope": "lua",
	"body": "timesig_num, timesig_denom, tempo = reaper.TimeMap_GetTimeSigAtTime(${1:proj}, ${2:time})$0",
	"description": "get the effective time signature and tempo\n\n"
	},

	"TimeMap_QNToMeasures lua": {
	"prefix": "reaper.TimeMap_QNToMeasures",
	"scope": "lua",
	"body": "retval, optional_qnMeasureStart, optional_qnMeasureEnd = reaper.TimeMap_QNToMeasures(${1:proj}, ${2:qn})$0",
	"description": "Find which measure the given QN position falls in.\n\n"
	},

	"TimeMap_QNToTime lua": {
	"prefix": "reaper.TimeMap_QNToTime",
	"scope": "lua",
	"body": "reaper.TimeMap_QNToTime(${1:qn})$0",
	"description": "converts project QN position to time.\n\n"
	},

	"TimeMap_QNToTime_abs lua": {
	"prefix": "reaper.TimeMap_QNToTime_abs",
	"scope": "lua",
	"body": "reaper.TimeMap_QNToTime_abs(${1:proj}, ${2:qn})$0",
	"description": "Converts project quarter note count (QN) to time. QN is counted from the start of the project, regardless of any partial measures. See TimeMap2_QNToTime\n\n"
	},

	"TimeMap_timeToQN lua": {
	"prefix": "reaper.TimeMap_timeToQN",
	"scope": "lua",
	"body": "reaper.TimeMap_timeToQN(${1:tpos})$0",
	"description": "converts project QN position to time.\n\n"
	},

	"TimeMap_timeToQN_abs lua": {
	"prefix": "reaper.TimeMap_timeToQN_abs",
	"scope": "lua",
	"body": "reaper.TimeMap_timeToQN_abs(${1:proj}, ${2:tpos})$0",
	"description": "Converts project time position to quarter note count (QN). QN is counted from the start of the project, regardless of any partial measures. See TimeMap2_timeToQN\n\n"
	},

	"ToggleTrackSendUIMute lua": {
	"prefix": "reaper.ToggleTrackSendUIMute",
	"scope": "lua",
	"body": "reaper.ToggleTrackSendUIMute(${1:track}, ${2:send_idx})$0",
	"description": "send_idx<0 for receives, >=0 for hw ouputs, >=nb_of_hw_ouputs for sends.\n\n"
	},

	"Track_GetPeakHoldDB lua": {
	"prefix": "reaper.Track_GetPeakHoldDB",
	"scope": "lua",
	"body": "reaper.Track_GetPeakHoldDB(${1:track}, ${2:channel}, ${3:clear})$0",
	"description": "Returns meter hold state, in dB*0.01 (0 = +0dB, -0.01 = -1dB, 0.02 = +2dB, etc). If clear is set, clears the meter hold. If channel==1024 or channel==1025, returns loudness values if this is the master track or this track's VU meters are set to display loudness.\n\n"
	},

	"Track_GetPeakInfo lua": {
	"prefix": "reaper.Track_GetPeakInfo",
	"scope": "lua",
	"body": "reaper.Track_GetPeakInfo(${1:track}, ${2:channel})$0",
	"description": "Returns peak meter value (1.0=+0dB, 0.0=-inf) for channel. If channel==1024 or channel==1025, returns loudness values if this is the master track or this track's VU meters are set to display loudness.\n\n"
	},

	"TrackCtl_SetToolTip lua": {
	"prefix": "reaper.TrackCtl_SetToolTip",
	"scope": "lua",
	"body": "reaper.TrackCtl_SetToolTip(${1:fmt}, ${2:xpos}, ${3:ypos}, ${4:topmost})$0",
	"description": "displays tooltip at location, or removes if empty string\n\n"
	},

	"TrackFX_AddByName lua": {
	"prefix": "reaper.TrackFX_AddByName",
	"scope": "lua",
	"body": "reaper.TrackFX_AddByName(${1:track}, ${2:fxname}, ${3:recFX}, ${4:instantiate})$0",
	"description": "Adds or queries the position of a named FX from the track FX chain (recFX=false) or record input FX/monitoring FX (recFX=true, monitoring FX are on master track). Specify a negative value for instantiate to always create a new effect, 0 to only query the first instance of an effect, or a positive value to add an instance if one is not found. If instantiate is <= -1000, it is used for the insertion position (-1000 is first item in chain, -1001 is second, etc). fxname can have prefix to specify type: VST3:,VST2:,VST:,AU:,JS:, or DX:, or FXADD: which adds selected items from the currently-open FX browser, FXADD:2 to limit to 2 FX added, or FXADD:2e to only succeed if exactly 2 FX are selected. Returns -1 on failure or the new position in chain on success.\n\n"
	},

	"TrackFX_CopyToTake lua": {
	"prefix": "reaper.TrackFX_CopyToTake",
	"scope": "lua",
	"body": "reaper.TrackFX_CopyToTake(${1:src_track}, ${2:src_fx}, ${3:dest_take}, ${4:dest_fx}, ${5:is_move})$0",
	"description": "Copies (or moves) FX from src_track to dest_take. src_fx can have 0x1000000 set to reference input FX.\n\n"
	},

	"TrackFX_CopyToTrack lua": {
	"prefix": "reaper.TrackFX_CopyToTrack",
	"scope": "lua",
	"body": "reaper.TrackFX_CopyToTrack(${1:src_track}, ${2:src_fx}, ${3:dest_track}, ${4:dest_fx}, ${5:is_move})$0",
	"description": "Copies (or moves) FX from src_track to dest_track. Can be used with src_track=dest_track to reorder, FX indices have 0x1000000 set to reference input FX.\n\n"
	},

	"TrackFX_Delete lua": {
	"prefix": "reaper.TrackFX_Delete",
	"scope": "lua",
	"body": "reaper.TrackFX_Delete(${1:track}, ${2:fx})$0",
	"description": "Remove a FX from track chain (returns true on success)\n\n"
	},

	"TrackFX_EndParamEdit lua": {
	"prefix": "reaper.TrackFX_EndParamEdit",
	"scope": "lua",
	"body": "reaper.TrackFX_EndParamEdit(${1:track}, ${2:fx}, ${3:param})$0",
	"description": ""
	},

	"TrackFX_FormatParamValue lua": {
	"prefix": "reaper.TrackFX_FormatParamValue",
	"scope": "lua",
	"body": "retval, buf = reaper.TrackFX_FormatParamValue(${1:track}, ${2:fx}, ${3:param}, ${4:val})$0",
	"description": "Note: only works with FX that support Cockos VST extensions.\n\n"
	},

	"TrackFX_FormatParamValueNormalized lua": {
	"prefix": "reaper.TrackFX_FormatParamValueNormalized",
	"scope": "lua",
	"body": "retval, buf = reaper.TrackFX_FormatParamValueNormalized(${1:track}, ${2:fx}, ${3:param}, ${4:value}, ${5:buf})$0",
	"description": "Note: only works with FX that support Cockos VST extensions.\n\n"
	},

	"TrackFX_GetByName lua": {
	"prefix": "reaper.TrackFX_GetByName",
	"scope": "lua",
	"body": "reaper.TrackFX_GetByName(${1:track}, ${2:fxname}, ${3:instantiate})$0",
	"description": "Get the index of the first track FX insert that matches fxname. If the FX is not in the chain and instantiate is true, it will be inserted. See TrackFX_GetInstrument, TrackFX_GetEQ. Deprecated in favor of TrackFX_AddByName.\n\n"
	},

	"TrackFX_GetChainVisible lua": {
	"prefix": "reaper.TrackFX_GetChainVisible",
	"scope": "lua",
	"body": "reaper.TrackFX_GetChainVisible(${1:track})$0",
	"description": "returns index of effect visible in chain, or -1 for chain hidden, or -2 for chain visible but no effect selected\n\n"
	},

	"TrackFX_GetCount lua": {
	"prefix": "reaper.TrackFX_GetCount",
	"scope": "lua",
	"body": "reaper.TrackFX_GetCount(${1:track})$0",
	"description": ""
	},

	"TrackFX_GetEnabled lua": {
	"prefix": "reaper.TrackFX_GetEnabled",
	"scope": "lua",
	"body": "reaper.TrackFX_GetEnabled(${1:track}, ${2:fx})$0",
	"description": "See TrackFX_SetEnabled\n\n"
	},

	"TrackFX_GetEQ lua": {
	"prefix": "reaper.TrackFX_GetEQ",
	"scope": "lua",
	"body": "reaper.TrackFX_GetEQ(${1:track}, ${2:instantiate})$0",
	"description": "Get the index of ReaEQ in the track FX chain. If ReaEQ is not in the chain and instantiate is true, it will be inserted. See TrackFX_GetInstrument, TrackFX_GetByName.\n\n"
	},

	"TrackFX_GetEQBandEnabled lua": {
	"prefix": "reaper.TrackFX_GetEQBandEnabled",
	"scope": "lua",
	"body": "reaper.TrackFX_GetEQBandEnabled(${1:track}, ${2:fxidx}, ${3:bandtype}, ${4:bandidx})$0",
	"description": "Returns true if the EQ band is enabled.\nReturns false if the band is disabled, or if track/fxidx is not ReaEQ.\nBandtype: -1=master gain, 0=hipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass, 6=bandpass, 7=parallel bandpass.\nBandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.\nSee TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_SetEQParam, TrackFX_SetEQBandEnabled.\n\n"
	},

	"TrackFX_GetEQParam lua": {
	"prefix": "reaper.TrackFX_GetEQParam",
	"scope": "lua",
	"body": "retval, bandtype, bandidx, paramtype, normval = reaper.TrackFX_GetEQParam(${1:track}, ${2:fxidx}, ${3:paramidx})$0",
	"description": "Returns false if track/fxidx is not ReaEQ.\nBandtype: -1=master gain, 0=hipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass, 6=bandpass, 7=parallel bandpass.\nBandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.\nParamtype (ignored for master gain): 0=freq, 1=gain, 2=Q.\nSee TrackFX_GetEQ, TrackFX_SetEQParam, TrackFX_GetEQBandEnabled, TrackFX_SetEQBandEnabled.\n\n"
	},

	"TrackFX_GetFloatingWindow lua": {
	"prefix": "reaper.TrackFX_GetFloatingWindow",
	"scope": "lua",
	"body": "reaper.TrackFX_GetFloatingWindow(${1:track}, ${2:index})$0",
	"description": "returns HWND of floating window for effect index, if any\n\n"
	},

	"TrackFX_GetFormattedParamValue lua": {
	"prefix": "reaper.TrackFX_GetFormattedParamValue",
	"scope": "lua",
	"body": "retval, buf = reaper.TrackFX_GetFormattedParamValue(${1:track}, ${2:fx}, ${3:param})$0",
	"description": ""
	},

	"TrackFX_GetFXGUID lua": {
	"prefix": "reaper.TrackFX_GetFXGUID",
	"scope": "lua",
	"body": "GUID = reaper.TrackFX_GetFXGUID(${1:track}, ${2:fx})$0",
	"description": ""
	},

	"TrackFX_GetFXName lua": {
	"prefix": "reaper.TrackFX_GetFXName",
	"scope": "lua",
	"body": "retval, buf = reaper.TrackFX_GetFXName(${1:track}, ${2:fx})$0",
	"description": ""
	},

	"TrackFX_GetInstrument lua": {
	"prefix": "reaper.TrackFX_GetInstrument",
	"scope": "lua",
	"body": "reaper.TrackFX_GetInstrument(${1:track})$0",
	"description": "Get the index of the first track FX insert that is a virtual instrument, or -1 if none. See TrackFX_GetEQ, TrackFX_GetByName.\n\n"
	},

	"TrackFX_GetIOSize lua": {
	"prefix": "reaper.TrackFX_GetIOSize",
	"scope": "lua",
	"body": "retval, inputPins, outputPins = reaper.TrackFX_GetIOSize(${1:track}, ${2:fx})$0",
	"description": "Gets the number of input/output pins for FX if available, returns plug-in type or -1 on error\n\n"
	},

	"TrackFX_GetNamedConfigParm lua": {
	"prefix": "reaper.TrackFX_GetNamedConfigParm",
	"scope": "lua",
	"body": "retval, buf = reaper.TrackFX_GetNamedConfigParm(${1:track}, ${2:fx}, ${3:parmname})$0",
	"description": "gets plug-in specific named configuration value (returns true on success). \nSupported values for read:\npdc : PDC latency\nin_pin_X : name of input pin X\nout_pin_X : name of output pin X\nfx_type : type string\nfx_ident : type-specific identifier\nfx_name : pre-aliased name\nGainReduction_dB : [ReaComp + other supported compressors]\nvst_chunk[_program] : base64-encoded VST-specific chunk.\nclap_chunk : base64-encoded CLAP-specific chunk.\nparam.X.lfo.[active,dir,phase,speed,strength,temposync,free,shape] : parameter moduation LFO state\nparam.X.acs.[active,dir,strength,attack,release,dblo,dbhi,chan,stereo,x2,y2] : parameter modulation ACS state\nparam.X.plink.[active,scale,offset,effect,param,midi_bus,midi_chan,midi_msg,midi_msg2] : parameter link/MIDI link: set effect=-100 to support midi_*\nparam.X.mod.[active,baseline,visible] : parameter module global settings\nparam.X.learn.[midi1,midi2,osc] : first two bytes of MIDI message, or OSC string if set\nparam.X.learn.mode : absolution/relative mode flag (0: Absolute, 1: 127=-1,1=+1, 2: 63=-1, 65=+1, 3: 65=-1, 1=+1, 4: toggle if nonzero)\nparam.X.learn.flags : &1=selected track only, &2=soft takeover, &4=focused FX only, &8=LFO retrigger, &16=visible FX only\nBANDTYPEx, BANDENABLEDx : band configuration [ReaEQ]\nTHRESHOLD, CEILING, TRUEPEAK : [ReaLimit]\nNUMCHANNELS, NUMSPEAKERS, RESETCHANNELS : [ReaSurroundPan]\nITEMx : [ReaVerb] state configuration line, when writing should be followed by a write of DONE\nFILE, FILEx, -FILEx, +FILEx, -FILE* : [RS5k] file list, -/+ prefixes are write-only, when writing any, should be followed by a write of DONE\nMODE, RSMODE : [RS5k] general mode, resample mode\nVIDEO_CODE : [video processor] code\nforce_auto_bypass : 0 or 1 - force auto-bypass plug-in on silence\ninstance_oversample_shift : instance oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect\nchain_oversample_shift : chain oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect\nchain_pdc_mode : chain PDC mode (0=classic, 1=new-default, 2=ignore PDC, 3=hwcomp-master)\n"
	},

	"TrackFX_GetNumParams lua": {
	"prefix": "reaper.TrackFX_GetNumParams",
	"scope": "lua",
	"body": "reaper.TrackFX_GetNumParams(${1:track}, ${2:fx})$0",
	"description": ""
	},

	"TrackFX_GetOffline lua": {
	"prefix": "reaper.TrackFX_GetOffline",
	"scope": "lua",
	"body": "reaper.TrackFX_GetOffline(${1:track}, ${2:fx})$0",
	"description": "See TrackFX_SetOffline\n\n"
	},

	"TrackFX_GetOpen lua": {
	"prefix": "reaper.TrackFX_GetOpen",
	"scope": "lua",
	"body": "reaper.TrackFX_GetOpen(${1:track}, ${2:fx})$0",
	"description": "Returns true if this FX UI is open in the FX chain window or a floating window. See TrackFX_SetOpen\n\n"
	},

	"TrackFX_GetParam lua": {
	"prefix": "reaper.TrackFX_GetParam",
	"scope": "lua",
	"body": "retval, minval, maxval = reaper.TrackFX_GetParam(${1:track}, ${2:fx}, ${3:param})$0",
	"description": ""
	},

	"TrackFX_GetParameterStepSizes lua": {
	"prefix": "reaper.TrackFX_GetParameterStepSizes",
	"scope": "lua",
	"body": "retval, step, smallstep, largestep, istoggle = reaper.TrackFX_GetParameterStepSizes(${1:track}, ${2:fx}, ${3:param})$0",
	"description": ""
	},

	"TrackFX_GetParamEx lua": {
	"prefix": "reaper.TrackFX_GetParamEx",
	"scope": "lua",
	"body": "retval, minval, maxval, midval = reaper.TrackFX_GetParamEx(${1:track}, ${2:fx}, ${3:param})$0",
	"description": ""
	},

	"TrackFX_GetParamFromIdent lua": {
	"prefix": "reaper.TrackFX_GetParamFromIdent",
	"scope": "lua",
	"body": "reaper.TrackFX_GetParamFromIdent(${1:track}, ${2:fx}, ${3:ident_str})$0",
	"description": "gets the parameter index from an identifying string (:wet, :bypass, :delta, or a string returned from GetParamIdent), or -1 if unknown.\n\n"
	},

	"TrackFX_GetParamIdent lua": {
	"prefix": "reaper.TrackFX_GetParamIdent",
	"scope": "lua",
	"body": "retval, buf = reaper.TrackFX_GetParamIdent(${1:track}, ${2:fx}, ${3:param})$0",
	"description": "gets an identifying string for the parameter\n\n"
	},

	"TrackFX_GetParamName lua": {
	"prefix": "reaper.TrackFX_GetParamName",
	"scope": "lua",
	"body": "retval, buf = reaper.TrackFX_GetParamName(${1:track}, ${2:fx}, ${3:param})$0",
	"description": ""
	},

	"TrackFX_GetParamNormalized lua": {
	"prefix": "reaper.TrackFX_GetParamNormalized",
	"scope": "lua",
	"body": "reaper.TrackFX_GetParamNormalized(${1:track}, ${2:fx}, ${3:param})$0",
	"description": ""
	},

	"TrackFX_GetPinMappings lua": {
	"prefix": "reaper.TrackFX_GetPinMappings",
	"scope": "lua",
	"body": "retval, high32 = reaper.TrackFX_GetPinMappings(${1:tr}, ${2:fx}, ${3:isoutput}, ${4:pin})$0",
	"description": "gets the effective channel mapping bitmask for a particular pin. high32Out will be set to the high 32 bits\n\n"
	},

	"TrackFX_GetPreset lua": {
	"prefix": "reaper.TrackFX_GetPreset",
	"scope": "lua",
	"body": "retval, presetname = reaper.TrackFX_GetPreset(${1:track}, ${2:fx})$0",
	"description": "Get the name of the preset currently showing in the REAPER dropdown, or the full path to a factory preset file for VST3 plug-ins (.vstpreset). Returns false if the current FX parameters do not exactly match the preset (in other words, if the user loaded the preset but moved the knobs afterward). See TrackFX_SetPreset.\n\n"
	},

	"TrackFX_GetPresetIndex lua": {
	"prefix": "reaper.TrackFX_GetPresetIndex",
	"scope": "lua",
	"body": "retval, numberOfPresets = reaper.TrackFX_GetPresetIndex(${1:track}, ${2:fx})$0",
	"description": "Returns current preset index, or -1 if error. numberOfPresetsOut will be set to total number of presets available. See TrackFX_SetPresetByIndex\n\n"
	},

	"TrackFX_GetRecChainVisible lua": {
	"prefix": "reaper.TrackFX_GetRecChainVisible",
	"scope": "lua",
	"body": "reaper.TrackFX_GetRecChainVisible(${1:track})$0",
	"description": "returns index of effect visible in record input chain, or -1 for chain hidden, or -2 for chain visible but no effect selected\n\n"
	},

	"TrackFX_GetRecCount lua": {
	"prefix": "reaper.TrackFX_GetRecCount",
	"scope": "lua",
	"body": "reaper.TrackFX_GetRecCount(${1:track})$0",
	"description": "returns count of record input FX. To access record input FX, use a FX indices [0x1000000..0x1000000+n). On the master track, this accesses monitoring FX rather than record input FX.\n\n"
	},

	"TrackFX_GetUserPresetFilename lua": {
	"prefix": "reaper.TrackFX_GetUserPresetFilename",
	"scope": "lua",
	"body": "fn = reaper.TrackFX_GetUserPresetFilename(${1:track}, ${2:fx})$0",
	"description": ""
	},

	"TrackFX_NavigatePresets lua": {
	"prefix": "reaper.TrackFX_NavigatePresets",
	"scope": "lua",
	"body": "reaper.TrackFX_NavigatePresets(${1:track}, ${2:fx}, ${3:presetmove})$0",
	"description": "presetmove==1 activates the next preset, presetmove==-1 activates the previous preset, etc.\n\n"
	},

	"TrackFX_SetEnabled lua": {
	"prefix": "reaper.TrackFX_SetEnabled",
	"scope": "lua",
	"body": "reaper.TrackFX_SetEnabled(${1:track}, ${2:fx}, ${3:enabled})$0",
	"description": "See TrackFX_GetEnabled\n\n"
	},

	"TrackFX_SetEQBandEnabled lua": {
	"prefix": "reaper.TrackFX_SetEQBandEnabled",
	"scope": "lua",
	"body": "reaper.TrackFX_SetEQBandEnabled(${1:track}, ${2:fxidx}, ${3:bandtype}, ${4:bandidx}, ${5:enable})$0",
	"description": "Enable or disable a ReaEQ band.\nReturns false if track/fxidx is not ReaEQ.\nBandtype: -1=master gain, 0=hipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass, 6=bandpass, 7=parallel bandpass.\nBandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.\nSee TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_SetEQParam, TrackFX_GetEQBandEnabled.\n\n"
	},

	"TrackFX_SetEQParam lua": {
	"prefix": "reaper.TrackFX_SetEQParam",
	"scope": "lua",
	"body": "reaper.TrackFX_SetEQParam(${1:track}, ${2:fxidx}, ${3:bandtype}, ${4:bandidx}, ${5:paramtype}, ${6:val}, ${7:isnorm})$0",
	"description": "Returns false if track/fxidx is not ReaEQ. Targets a band matching bandtype.\nBandtype: -1=master gain, 0=hipass, 1=loshelf, 2=band, 3=notch, 4=hishelf, 5=lopass, 6=bandpass, 7=parallel bandpass.\nBandidx (ignored for master gain): 0=target first band matching bandtype, 1=target 2nd band matching bandtype, etc.\nParamtype (ignored for master gain): 0=freq, 1=gain, 2=Q.\nSee TrackFX_GetEQ, TrackFX_GetEQParam, TrackFX_GetEQBandEnabled, TrackFX_SetEQBandEnabled.\n\n"
	},

	"TrackFX_SetNamedConfigParm lua": {
	"prefix": "reaper.TrackFX_SetNamedConfigParm",
	"scope": "lua",
	"body": "reaper.TrackFX_SetNamedConfigParm(${1:track}, ${2:fx}, ${3:parmname}, ${4:value})$0",
	"description": "sets plug-in specific named configuration value (returns true on success).\nSupport values for write:\nvst_chunk[_program] : base64-encoded VST-specific chunk.\nclap_chunk : base64-encoded CLAP-specific chunk.\nparam.X.lfo.[active,dir,phase,speed,strength,temposync,free,shape] : parameter moduation LFO state\nparam.X.acs.[active,dir,strength,attack,release,dblo,dbhi,chan,stereo,x2,y2] : parameter modulation ACS state\nparam.X.plink.[active,scale,offset,effect,param,midi_bus,midi_chan,midi_msg,midi_msg2] : parameter link/MIDI link: set effect=-100 to support midi_*\nparam.X.mod.[active,baseline,visible] : parameter module global settings\nparam.X.learn.[midi1,midi2,osc] : first two bytes of MIDI message, or OSC string if set\nparam.X.learn.mode : absolution/relative mode flag (0: Absolute, 1: 127=-1,1=+1, 2: 63=-1, 65=+1, 3: 65=-1, 1=+1, 4: toggle if nonzero)\nparam.X.learn.flags : &1=selected track only, &2=soft takeover, &4=focused FX only, &8=LFO retrigger, &16=visible FX only\nBANDTYPEx, BANDENABLEDx : band configuration [ReaEQ]\nTHRESHOLD, CEILING, TRUEPEAK : [ReaLimit]\nNUMCHANNELS, NUMSPEAKERS, RESETCHANNELS : [ReaSurroundPan]\nITEMx : [ReaVerb] state configuration line, when writing should be followed by a write of DONE\nFILE, FILEx, -FILEx, +FILEx, -FILE* : [RS5k] file list, -/+ prefixes are write-only, when writing any, should be followed by a write of DONE\nMODE, RSMODE : [RS5k] general mode, resample mode\nVIDEO_CODE : [video processor] code\nforce_auto_bypass : 0 or 1 - force auto-bypass plug-in on silence\ninstance_oversample_shift : instance oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect\nchain_oversample_shift : chain oversampling shift amount, 0=none, 1=~96k, 2=~192k, etc. When setting requires playback stop/start to take effect\nchain_pdc_mode : chain PDC mode (0=classic, 1=new-default, 2=ignore PDC, 3=hwcomp-master)\n"
	},

	"TrackFX_SetOffline lua": {
	"prefix": "reaper.TrackFX_SetOffline",
	"scope": "lua",
	"body": "reaper.TrackFX_SetOffline(${1:track}, ${2:fx}, ${3:offline})$0",
	"description": "See TrackFX_GetOffline\n\n"
	},

	"TrackFX_SetOpen lua": {
	"prefix": "reaper.TrackFX_SetOpen",
	"scope": "lua",
	"body": "reaper.TrackFX_SetOpen(${1:track}, ${2:fx}, ${3:open})$0",
	"description": "Open this FX UI. See TrackFX_GetOpen\n\n"
	},

	"TrackFX_SetParam lua": {
	"prefix": "reaper.TrackFX_SetParam",
	"scope": "lua",
	"body": "reaper.TrackFX_SetParam(${1:track}, ${2:fx}, ${3:param}, ${4:val})$0",
	"description": ""
	},

	"TrackFX_SetParamNormalized lua": {
	"prefix": "reaper.TrackFX_SetParamNormalized",
	"scope": "lua",
	"body": "reaper.TrackFX_SetParamNormalized(${1:track}, ${2:fx}, ${3:param}, ${4:value})$0",
	"description": ""
	},

	"TrackFX_SetPinMappings lua": {
	"prefix": "reaper.TrackFX_SetPinMappings",
	"scope": "lua",
	"body": "reaper.TrackFX_SetPinMappings(${1:tr}, ${2:fx}, ${3:isoutput}, ${4:pin}, ${5:low32bits}, ${6:hi32bits})$0",
	"description": "sets the channel mapping bitmask for a particular pin. returns false if unsupported (not all types of plug-ins support this capability)\n\n"
	},

	"TrackFX_SetPreset lua": {
	"prefix": "reaper.TrackFX_SetPreset",
	"scope": "lua",
	"body": "reaper.TrackFX_SetPreset(${1:track}, ${2:fx}, ${3:presetname})$0",
	"description": "Activate a preset with the name shown in the REAPER dropdown. Full paths to .vstpreset files are also supported for VST3 plug-ins. See TrackFX_GetPreset.\n\n"
	},

	"TrackFX_SetPresetByIndex lua": {
	"prefix": "reaper.TrackFX_SetPresetByIndex",
	"scope": "lua",
	"body": "reaper.TrackFX_SetPresetByIndex(${1:track}, ${2:fx}, ${3:idx})$0",
	"description": "Sets the preset idx, or the factory preset (idx==-2), or the default user preset (idx==-1). Returns true on success. See TrackFX_GetPresetIndex.\n\n"
	},

	"TrackFX_Show lua": {
	"prefix": "reaper.TrackFX_Show",
	"scope": "lua",
	"body": "reaper.TrackFX_Show(${1:track}, ${2:index}, ${3:showFlag})$0",
	"description": "showflag=0 for hidechain, =1 for show chain(index valid), =2 for hide floating window(index valid), =3 for show floating window (index valid)\n\n"
	},

	"TrackList_AdjustWindows lua": {
	"prefix": "reaper.TrackList_AdjustWindows",
	"scope": "lua",
	"body": "reaper.TrackList_AdjustWindows(${1:isMinor})$0",
	"description": ""
	},

	"TrackList_UpdateAllExternalSurfaces lua": {
	"prefix": "reaper.TrackList_UpdateAllExternalSurfaces",
	"scope": "lua",
	"body": "reaper.TrackList_UpdateAllExternalSurfaces()\n\n",
	"description": ""
	},

	"Undo_BeginBlock lua": {
	"prefix": "reaper.Undo_BeginBlock",
	"scope": "lua",
	"body": "reaper.Undo_BeginBlock()\n\n",
	"description": "call to start a new block\n\n"
	},

	"Undo_BeginBlock2 lua": {
	"prefix": "reaper.Undo_BeginBlock2",
	"scope": "lua",
	"body": "reaper.Undo_BeginBlock2(${1:proj})$0",
	"description": "call to start a new block\n\n"
	},

	"Undo_CanRedo2 lua": {
	"prefix": "reaper.Undo_CanRedo2",
	"scope": "lua",
	"body": "reaper.Undo_CanRedo2(${1:proj})$0",
	"description": "returns string of next action,if able,NULL if not\n\n"
	},

	"Undo_CanUndo2 lua": {
	"prefix": "reaper.Undo_CanUndo2",
	"scope": "lua",
	"body": "reaper.Undo_CanUndo2(${1:proj})$0",
	"description": "returns string of last action,if able,NULL if not\n\n"
	},

	"Undo_DoRedo2 lua": {
	"prefix": "reaper.Undo_DoRedo2",
	"scope": "lua",
	"body": "reaper.Undo_DoRedo2(${1:proj})$0",
	"description": "nonzero if success\n\n"
	},

	"Undo_DoUndo2 lua": {
	"prefix": "reaper.Undo_DoUndo2",
	"scope": "lua",
	"body": "reaper.Undo_DoUndo2(${1:proj})$0",
	"description": "nonzero if success\n\n"
	},

	"Undo_EndBlock lua": {
	"prefix": "reaper.Undo_EndBlock",
	"scope": "lua",
	"body": "reaper.Undo_EndBlock(${1:descchange}, ${2:extraflags})$0",
	"description": "call to end the block,with extra flags if any,and a description\n\n"
	},

	"Undo_EndBlock2 lua": {
	"prefix": "reaper.Undo_EndBlock2",
	"scope": "lua",
	"body": "reaper.Undo_EndBlock2(${1:proj}, ${2:descchange}, ${3:extraflags})$0",
	"description": "call to end the block,with extra flags if any,and a description\n\n"
	},

	"Undo_OnStateChange lua": {
	"prefix": "reaper.Undo_OnStateChange",
	"scope": "lua",
	"body": "reaper.Undo_OnStateChange(${1:descchange})$0",
	"description": "limited state change to items\n\n"
	},

	"Undo_OnStateChange2 lua": {
	"prefix": "reaper.Undo_OnStateChange2",
	"scope": "lua",
	"body": "reaper.Undo_OnStateChange2(${1:proj}, ${2:descchange})$0",
	"description": "limited state change to items\n\n"
	},

	"Undo_OnStateChange_Item lua": {
	"prefix": "reaper.Undo_OnStateChange_Item",
	"scope": "lua",
	"body": "reaper.Undo_OnStateChange_Item(${1:proj}, ${2:name}, ${3:item})$0",
	"description": ""
	},

	"Undo_OnStateChangeEx lua": {
	"prefix": "reaper.Undo_OnStateChangeEx",
	"scope": "lua",
	"body": "reaper.Undo_OnStateChangeEx(${1:descchange}, ${2:whichStates}, ${3:trackparm})$0",
	"description": "trackparm=-1 by default,or if updating one fx chain,you can specify track index\n\n"
	},

	"Undo_OnStateChangeEx2 lua": {
	"prefix": "reaper.Undo_OnStateChangeEx2",
	"scope": "lua",
	"body": "reaper.Undo_OnStateChangeEx2(${1:proj}, ${2:descchange}, ${3:whichStates}, ${4:trackparm})$0",
	"description": "trackparm=-1 by default,or if updating one fx chain,you can specify track index\n\n"
	},

	"UpdateArrange lua": {
	"prefix": "reaper.UpdateArrange",
	"scope": "lua",
	"body": "reaper.UpdateArrange()\n\n",
	"description": "Redraw the arrange view\n\n"
	},

	"UpdateItemInProject lua": {
	"prefix": "reaper.UpdateItemInProject",
	"scope": "lua",
	"body": "reaper.UpdateItemInProject(${1:item})$0",
	"description": ""
	},

	"UpdateTimeline lua": {
	"prefix": "reaper.UpdateTimeline",
	"scope": "lua",
	"body": "reaper.UpdateTimeline()\n\n",
	"description": "Redraw the arrange view and ruler\n\n"
	},

	"ValidatePtr lua": {
	"prefix": "reaper.ValidatePtr",
	"scope": "lua",
	"body": "reaper.ValidatePtr(${1:pointer}, ${2:ctypename})$0",
	"description": "see ValidatePtr2\n\n"
	},

	"ValidatePtr2 lua": {
	"prefix": "reaper.ValidatePtr2",
	"scope": "lua",
	"body": "reaper.ValidatePtr2(${1:proj}, ${2:pointer}, ${3:ctypename})$0",
	"description": "Return true if the pointer is a valid object of the right type in proj (proj is ignored if pointer is itself a project). Supported types are: ReaProject*, MediaTrack*, MediaItem*, MediaItem_Take*, TrackEnvelope* and PCM_source*.\n\n"
	},

	"ViewPrefs lua": {
	"prefix": "reaper.ViewPrefs",
	"scope": "lua",
	"body": "reaper.ViewPrefs(${1:page}, ${2:pageByName})$0",
	"description": "Opens the prefs to a page, use pageByName if page is 0.\n\n"
	},

	"BR_EnvAlloc lua": {
	"prefix": "reaper.BR_EnvAlloc",
	"scope": "lua",
	"body": "reaper.BR_EnvAlloc(${1:envelope}, ${2:takeEnvelopesUseProjectTime})$0",
	"description": "[BR] Allocate envelope object from track or take envelope pointer. Always call BR_EnvFree when done to release the object and commit changes if needed.\ntakeEnvelopesUseProjectTime: take envelope points' positions are counted from take position, not project start time. If you want to work with project time instead, pass this as true.\nFor further manipulation see BR_EnvCountPoints, BR_EnvDeletePoint, BR_EnvFind, BR_EnvFindNext, BR_EnvFindPrevious, BR_EnvGetParentTake, BR_EnvGetParentTrack, BR_EnvGetPoint, BR_EnvGetProperties, BR_EnvSetPoint, BR_EnvSetProperties, BR_EnvValueAtPos.\n\n"
	},

	"BR_EnvCountPoints lua": {
	"prefix": "reaper.BR_EnvCountPoints",
	"scope": "lua",
	"body": "reaper.BR_EnvCountPoints(${1:envelope})$0",
	"description": "[BR] Count envelope points in the envelope object allocated with BR_EnvAlloc.\n\n"
	},

	"BR_EnvDeletePoint lua": {
	"prefix": "reaper.BR_EnvDeletePoint",
	"scope": "lua",
	"body": "reaper.BR_EnvDeletePoint(${1:envelope}, ${2:id})$0",
	"description": "[BR] Delete envelope point by index (zero-based) in the envelope object allocated with BR_EnvAlloc. Returns true on success.\n\n"
	},

	"BR_EnvFind lua": {
	"prefix": "reaper.BR_EnvFind",
	"scope": "lua",
	"body": "reaper.BR_EnvFind(${1:envelope}, ${2:position}, ${3:delta})$0",
	"description": "[BR] Find envelope point at time position in the envelope object allocated with BR_EnvAlloc. Pass delta > 0 to search surrounding range - in that case the closest point to position within delta will be searched for. Returns envelope point id (zero-based) on success or -1 on failure.\n\n"
	},

	"BR_EnvFindNext lua": {
	"prefix": "reaper.BR_EnvFindNext",
	"scope": "lua",
	"body": "reaper.BR_EnvFindNext(${1:envelope}, ${2:position})$0",
	"description": "[BR] Find next envelope point after time position in the envelope object allocated with BR_EnvAlloc. Returns envelope point id (zero-based) on success or -1 on failure.\n\n"
	},

	"BR_EnvFindPrevious lua": {
	"prefix": "reaper.BR_EnvFindPrevious",
	"scope": "lua",
	"body": "reaper.BR_EnvFindPrevious(${1:envelope}, ${2:position})$0",
	"description": "[BR] Find previous envelope point before time position in the envelope object allocated with BR_EnvAlloc. Returns envelope point id (zero-based) on success or -1 on failure.\n\n"
	},

	"BR_EnvFree lua": {
	"prefix": "reaper.BR_EnvFree",
	"scope": "lua",
	"body": "reaper.BR_EnvFree(${1:envelope}, ${2:commit})$0",
	"description": "[BR] Free envelope object allocated with BR_EnvAlloc and commit changes if needed. Returns true if changes were committed successfully. Note that when envelope object wasn't modified nothing will get committed even if commit = true - in that case function returns false.\n\n"
	},

	"BR_EnvGetParentTake lua": {
	"prefix": "reaper.BR_EnvGetParentTake",
	"scope": "lua",
	"body": "reaper.BR_EnvGetParentTake(${1:envelope})$0",
	"description": "[BR] If envelope object allocated with BR_EnvAlloc is take envelope, returns parent media item take, otherwise NULL.\n\n"
	},

	"BR_EnvGetParentTrack lua": {
	"prefix": "reaper.BR_EnvGetParentTrack",
	"scope": "lua",
	"body": "reaper.BR_EnvGetParentTrack(${1:envelope})$0",
	"description": "[BR] Get parent track of envelope object allocated with BR_EnvAlloc. If take envelope, returns NULL.\n\n"
	},

	"BR_EnvGetPoint lua": {
	"prefix": "reaper.BR_EnvGetPoint",
	"scope": "lua",
	"body": "retval, position, value, shape, selected, bezier = reaper.BR_EnvGetPoint(${1:envelope}, ${2:id})$0",
	"description": "[BR] Get envelope point by id (zero-based) from the envelope object allocated with BR_EnvAlloc. Returns true on success.\n\n"
	},

	"BR_EnvGetProperties lua": {
	"prefix": "reaper.BR_EnvGetProperties",
	"scope": "lua",
	"body": "active, visible, armed, inLane, laneHeight, defaultShape, minValue, maxValue, centerValue, type, faderScaling, optional_automationItemsOptions = reaper.BR_EnvGetProperties(${1:envelope})$0",
	"description": "[BR] Get envelope properties for the envelope object allocated with BR_EnvAlloc.\nactive: true if envelope is active\nvisible: true if envelope is visible\narmed: true if envelope is armed\ninLane: true if envelope has it's own envelope lane\nlaneHeight: envelope lane override height. 0 for none, otherwise size in pixels\ndefaultShape: default point shape: 0->Linear, 1->Square, 2->Slow start/end, 3->Fast start, 4->Fast end, 5->Bezier\nminValue: minimum envelope value\nmaxValue: maximum envelope value\ntype: envelope type: 0->Volume, 1->Volume (Pre-FX), 2->Pan, 3->Pan (Pre-FX), 4->Width, 5->Width (Pre-FX), 6->Mute, 7->Pitch, 8->Playrate, 9->Tempo map, 10->Parameter\nfaderScaling: true if envelope uses fader scaling\nautomationItemsOptions: -1->project default, &1=0->don't attach to underl. env., &1->attach to underl. env. on right side,  &2->attach to underl. env. on both sides, &4: bypass underl. env.\n\n"
	},

	"BR_EnvSetPoint lua": {
	"prefix": "reaper.BR_EnvSetPoint",
	"scope": "lua",
	"body": "reaper.BR_EnvSetPoint(${1:envelope}, ${2:id}, ${3:position}, ${4:value}, ${5:shape}, ${6:selected}, ${7:bezier})$0",
	"description": "[BR] Set envelope point by id (zero-based) in the envelope object allocated with BR_EnvAlloc. To create point instead, pass id = -1. Note that if new point is inserted or existing point's time position is changed, points won't automatically get sorted. To do that, see BR_EnvSortPoints.\nReturns true on success.\n\n"
	},

	"BR_EnvSetProperties lua": {
	"prefix": "reaper.BR_EnvSetProperties",
	"scope": "lua",
	"body": "reaper.BR_EnvSetProperties(${1:envelope}, ${2:active}, ${3:visible}, ${4:armed}, ${5:inLane}, ${6:laneHeight}, ${7:defaultShape}, ${8:faderScaling}, ${9:optional_automationItemsOptionsIn})$0",
	"description": "[BR] Set envelope properties for the envelope object allocated with BR_EnvAlloc. For parameter description see BR_EnvGetProperties.\nSetting automationItemsOptions requires REAPER 5.979+.\n\n"
	},

	"BR_EnvSortPoints lua": {
	"prefix": "reaper.BR_EnvSortPoints",
	"scope": "lua",
	"body": "reaper.BR_EnvSortPoints(${1:envelope})$0",
	"description": "[BR] Sort envelope points by position. The only reason to call this is if sorted points are explicitly needed after editing them with BR_EnvSetPoint. Note that you do not have to call this before doing BR_EnvFree since it does handle unsorted points too.\n\n"
	},

	"BR_EnvValueAtPos lua": {
	"prefix": "reaper.BR_EnvValueAtPos",
	"scope": "lua",
	"body": "reaper.BR_EnvValueAtPos(${1:envelope}, ${2:position})$0",
	"description": "[BR] Get envelope value at time position for the envelope object allocated with BR_EnvAlloc.\n\n"
	},

	"BR_GetArrangeView lua": {
	"prefix": "reaper.BR_GetArrangeView",
	"scope": "lua",
	"body": "startTime, endTime = reaper.BR_GetArrangeView(${1:proj})$0",
	"description": "[BR] Deprecated, see GetSet_ArrangeView2 (REAPER v5.12pre4+) -- Get start and end time position of arrange view. To set arrange view instead, see BR_SetArrangeView.\n\n"
	},

	"BR_GetClosestGridDivision lua": {
	"prefix": "reaper.BR_GetClosestGridDivision",
	"scope": "lua",
	"body": "reaper.BR_GetClosestGridDivision(${1:position})$0",
	"description": "[BR] Get closest grid division to position. Note that this functions is different from SnapToGrid in two regards. SnapToGrid() needs snap enabled to work and this one works always. Secondly, grid divisions are different from grid lines because some grid lines may be hidden due to zoom level - this function ignores grid line visibility and always searches for the closest grid division at given position. For more grid division functions, see BR_GetNextGridDivision and BR_GetPrevGridDivision.\n\n"
	},

	"BR_GetCurrentTheme lua": {
	"prefix": "reaper.BR_GetCurrentTheme",
	"scope": "lua",
	"body": "themePath, themeName = reaper.BR_GetCurrentTheme()\n\n",
	"description": "[BR] Get current theme information. themePathOut is set to full theme path and themeNameOut is set to theme name excluding any path info and extension\n\n"
	},

	"BR_GetMediaItemByGUID lua": {
	"prefix": "reaper.BR_GetMediaItemByGUID",
	"scope": "lua",
	"body": "reaper.BR_GetMediaItemByGUID(${1:proj}, ${2:guidStringIn})$0",
	"description": "[BR] Get media item from GUID string. Note that the GUID must be enclosed in braces {}. To get item's GUID as a string, see BR_GetMediaItemGUID.\n\n"
	},

	"BR_GetMediaItemGUID lua": {
	"prefix": "reaper.BR_GetMediaItemGUID",
	"scope": "lua",
	"body": "guidString = reaper.BR_GetMediaItemGUID(${1:item})$0",
	"description": "[BR] Get media item GUID as a string (guidStringOut_sz should be at least 64). To get media item back from GUID string, see BR_GetMediaItemByGUID.\n\n"
	},

	"BR_GetMediaItemImageResource lua": {
	"prefix": "reaper.BR_GetMediaItemImageResource",
	"scope": "lua",
	"body": "retval, image, imageFlags = reaper.BR_GetMediaItemImageResource(${1:item})$0",
	"description": "[BR] Get currently loaded image resource and its flags for a given item. Returns false if there is no image resource set. To set image resource, see BR_SetMediaItemImageResource.\n\n"
	},

	"BR_GetMediaItemTakeGUID lua": {
	"prefix": "reaper.BR_GetMediaItemTakeGUID",
	"scope": "lua",
	"body": "guidString = reaper.BR_GetMediaItemTakeGUID(${1:take})$0",
	"description": "[BR] Get media item take GUID as a string (guidStringOut_sz should be at least 64). To get take from GUID string, see SNM_GetMediaItemTakeByGUID.\n\n"
	},

	"BR_GetMediaSourceProperties lua": {
	"prefix": "reaper.BR_GetMediaSourceProperties",
	"scope": "lua",
	"body": "retval, section, start, length, fade, reverse = reaper.BR_GetMediaSourceProperties(${1:take})$0",
	"description": "[BR] Get take media source properties as they appear in Item properties. Returns false if take can't have them (MIDI items etc.).\nTo set source properties, see BR_SetMediaSourceProperties.\n\n"
	},

	"BR_GetMediaTrackByGUID lua": {
	"prefix": "reaper.BR_GetMediaTrackByGUID",
	"scope": "lua",
	"body": "reaper.BR_GetMediaTrackByGUID(${1:proj}, ${2:guidStringIn})$0",
	"description": "[BR] Get media track from GUID string. Note that the GUID must be enclosed in braces {}. To get track's GUID as a string, see GetSetMediaTrackInfo_String.\n\n"
	},

	"BR_GetMediaTrackFreezeCount lua": {
	"prefix": "reaper.BR_GetMediaTrackFreezeCount",
	"scope": "lua",
	"body": "reaper.BR_GetMediaTrackFreezeCount(${1:track})$0",
	"description": "[BR] Get media track freeze count (if track isn't frozen at all, returns 0).\n\n"
	},

	"BR_GetMediaTrackGUID lua": {
	"prefix": "reaper.BR_GetMediaTrackGUID",
	"scope": "lua",
	"body": "guidString = reaper.BR_GetMediaTrackGUID(${1:track})$0",
	"description": "[BR] Deprecated, see GetSetMediaTrackInfo_String (v5.95+). Get media track GUID as a string (guidStringOut_sz should be at least 64). To get media track back from GUID string, see BR_GetMediaTrackByGUID.\n\n"
	},

	"BR_GetMediaTrackLayouts lua": {
	"prefix": "reaper.BR_GetMediaTrackLayouts",
	"scope": "lua",
	"body": "mcpLayoutName, tcpLayoutName = reaper.BR_GetMediaTrackLayouts(${1:track})$0",
	"description": "[BR] Deprecated, see GetSetMediaTrackInfo (REAPER v5.02+). Get media track layouts for MCP and TCP. Empty string ('') means that layout is set to the default layout. To set media track layouts, see BR_SetMediaTrackLayouts.\n\n"
	},

	"BR_GetMediaTrackSendInfo_Envelope lua": {
	"prefix": "reaper.BR_GetMediaTrackSendInfo_Envelope",
	"scope": "lua",
	"body": "reaper.BR_GetMediaTrackSendInfo_Envelope(${1:track}, ${2:category}, ${3:sendidx}, ${4:envelopeType})$0",
	"description": "[BR] Get track envelope for send/receive/hardware output.\ncategory is <0 for receives, 0=sends, >0 for hardware outputs\nsendidx is zero-based (see GetTrackNumSends to count track sends/receives/hardware outputs)\nenvelopeType determines which envelope is returned (0=volume, 1=pan, 2=mute)\nNote: To get or set other send attributes, see BR_GetSetTrackSendInfo and BR_GetMediaTrackSendInfo_Track.\n\n"
	},

	"BR_GetMediaTrackSendInfo_Track lua": {
	"prefix": "reaper.BR_GetMediaTrackSendInfo_Track",
	"scope": "lua",
	"body": "reaper.BR_GetMediaTrackSendInfo_Track(${1:track}, ${2:category}, ${3:sendidx}, ${4:trackType})$0",
	"description": "[BR] Get source or destination media track for send/receive.\ncategory is <0 for receives, 0=sends\nsendidx is zero-based (see GetTrackNumSends to count track sends/receives)\ntrackType determines which track is returned (0=source track, 1=destination track)\nNote: To get or set other send attributes, see BR_GetSetTrackSendInfo and BR_GetMediaTrackSendInfo_Envelope.\n\n"
	},

	"BR_GetMidiSourceLenPPQ lua": {
	"prefix": "reaper.BR_GetMidiSourceLenPPQ",
	"scope": "lua",
	"body": "reaper.BR_GetMidiSourceLenPPQ(${1:take})$0",
	"description": "[BR] Get MIDI take source length in PPQ. In case the take isn't MIDI, return value will be -1.\n\n"
	},

	"BR_GetMidiTakePoolGUID lua": {
	"prefix": "reaper.BR_GetMidiTakePoolGUID",
	"scope": "lua",
	"body": "retval, guidString = reaper.BR_GetMidiTakePoolGUID(${1:take})$0",
	"description": "[BR] Get MIDI take pool GUID as a string (guidStringOut_sz should be at least 64). Returns true if take is pooled.\n\n"
	},

	"BR_GetMidiTakeTempoInfo lua": {
	"prefix": "reaper.BR_GetMidiTakeTempoInfo",
	"scope": "lua",
	"body": "retval, ignoreProjTempo, bpm, num, den = reaper.BR_GetMidiTakeTempoInfo(${1:take})$0",
	"description": "[BR] Get 'ignore project tempo' information for MIDI take. Returns true if take can ignore project tempo (no matter if it's actually ignored), otherwise false.\n\n"
	},

	"BR_GetMouseCursorContext lua": {
	"prefix": "reaper.BR_GetMouseCursorContext",
	"scope": "lua",
	"body": "window, segment, details = reaper.BR_GetMouseCursorContext()\n\n",
	"description": "[BR] Get mouse cursor context. Each parameter returns information in a form of string as specified in the table below.\nTo get more info on stuff that was found under mouse cursor see BR_GetMouseCursorContext_Envelope, BR_GetMouseCursorContext_Item, BR_GetMouseCursorContext_MIDI, BR_GetMouseCursorContext_Position, BR_GetMouseCursorContext_Take, BR_GetMouseCursorContext_Track \n"
	},

	"BR_GetMouseCursorContext_Envelope lua": {
	"prefix": "reaper.BR_GetMouseCursorContext_Envelope",
	"scope": "lua",
	"body": "retval, takeEnvelope = reaper.BR_GetMouseCursorContext_Envelope()\n\n",
	"description": "[BR] Returns envelope that was captured with the last call to BR_GetMouseCursorContext. In case the envelope belongs to take, takeEnvelope will be true.\n\n"
	},

	"BR_GetMouseCursorContext_Item lua": {
	"prefix": "reaper.BR_GetMouseCursorContext_Item",
	"scope": "lua",
	"body": "reaper.BR_GetMouseCursorContext_Item()\n\n",
	"description": "[BR] Returns item under mouse cursor that was captured with the last call to BR_GetMouseCursorContext. Note that the function will return item even if mouse cursor is over some other track lane element like stretch marker or envelope. This enables for easier identification of items when you want to ignore elements within the item.\n\n"
	},

	"BR_GetMouseCursorContext_MIDI lua": {
	"prefix": "reaper.BR_GetMouseCursorContext_MIDI",
	"scope": "lua",
	"body": "retval, inlineEditor, noteRow, ccLane, ccLaneVal, ccLaneId = reaper.BR_GetMouseCursorContext_MIDI()\n\n",
	"description": "[BR] Returns midi editor under mouse cursor that was captured with the last call to BR_GetMouseCursorContext.\ninlineEditor: if mouse was captured in inline MIDI editor, this will be true (consequentially, returned MIDI editor will be NULL)\nnoteRow: note row or piano key under mouse cursor (0-127)\nccLane: CC lane under mouse cursor (CC0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207=off velocity, 0x208=notation events)\nccLaneVal: value in CC lane under mouse cursor (0-127 or 0-16383)\nccLaneId: lane position, counting from the top (0 based)\nNote: due to API limitations, if mouse is over inline MIDI editor with some note rows hidden, noteRow will be -1\n\n"
	},

	"BR_GetMouseCursorContext_Position lua": {
	"prefix": "reaper.BR_GetMouseCursorContext_Position",
	"scope": "lua",
	"body": "reaper.BR_GetMouseCursorContext_Position()\n\n",
	"description": "[BR] Returns project time position in arrange/ruler/midi editor that was captured with the last call to BR_GetMouseCursorContext.\n\n"
	},

	"BR_GetMouseCursorContext_StretchMarker lua": {
	"prefix": "reaper.BR_GetMouseCursorContext_StretchMarker",
	"scope": "lua",
	"body": "reaper.BR_GetMouseCursorContext_StretchMarker()\n\n",
	"description": "[BR] Returns id of a stretch marker under mouse cursor that was captured with the last call to BR_GetMouseCursorContext.\n\n"
	},

	"BR_GetMouseCursorContext_Take lua": {
	"prefix": "reaper.BR_GetMouseCursorContext_Take",
	"scope": "lua",
	"body": "reaper.BR_GetMouseCursorContext_Take()\n\n",
	"description": "[BR] Returns take under mouse cursor that was captured with the last call to BR_GetMouseCursorContext.\n\n"
	},

	"BR_GetMouseCursorContext_Track lua": {
	"prefix": "reaper.BR_GetMouseCursorContext_Track",
	"scope": "lua",
	"body": "reaper.BR_GetMouseCursorContext_Track()\n\n",
	"description": "[BR] Returns track under mouse cursor that was captured with the last call to BR_GetMouseCursorContext.\n\n"
	},

	"BR_GetNextGridDivision lua": {
	"prefix": "reaper.BR_GetNextGridDivision",
	"scope": "lua",
	"body": "reaper.BR_GetNextGridDivision(${1:position})$0",
	"description": "[BR] Get next grid division after the time position. For more grid divisions function, see BR_GetClosestGridDivision and BR_GetPrevGridDivision.\n\n"
	},

	"BR_GetPrevGridDivision lua": {
	"prefix": "reaper.BR_GetPrevGridDivision",
	"scope": "lua",
	"body": "reaper.BR_GetPrevGridDivision(${1:position})$0",
	"description": "[BR] Get previous grid division before the time position. For more grid division functions, see BR_GetClosestGridDivision and BR_GetNextGridDivision.\n\n"
	},

	"BR_GetSetTrackSendInfo lua": {
	"prefix": "reaper.BR_GetSetTrackSendInfo",
	"scope": "lua",
	"body": "reaper.BR_GetSetTrackSendInfo(${1:track}, ${2:category}, ${3:sendidx}, ${4:parmname}, ${5:setNewValue}, ${6:newValue})$0",
	"description": "[BR] Get or set send attributes.\ncategory is <0 for receives, 0=sends, >0 for hardware outputs\nsendidx is zero-based (see GetTrackNumSends to count track sends/receives/hardware outputs)\nTo set attribute, pass setNewValue as true\nList of possible parameters:\nB_MUTE : send mute state (1.0 if muted, otherwise 0.0)\nB_PHASE : send phase state (1.0 if phase is inverted, otherwise 0.0)\nB_MONO : send mono state (1.0 if send is set to mono, otherwise 0.0)\nD_VOL : send volume (1.0=+0dB etc...)\nD_PAN : send pan (-1.0=100%L, 0=center, 1.0=100%R)\nD_PANLAW : send pan law (1.0=+0.0db, 0.5=-6dB, -1.0=project default etc...)\nI_SENDMODE : send mode (0=post-fader, 1=pre-fx, 2=post-fx(deprecated), 3=post-fx)\nI_SRCCHAN : audio source starting channel index or -1 if audio send is disabled (&1024=mono...note that in that case, when reading index, you should do (index XOR 1024) to get starting channel index)\nI_DSTCHAN : audio destination starting channel index (&1024=mono (and in case of hardware output &512=rearoute)...note that in that case, when reading index, you should do (index XOR (1024 OR 512)) to get starting channel index)\nI_MIDI_SRCCHAN : source MIDI channel, -1 if MIDI send is disabled (0=all, 1-16)\nI_MIDI_DSTCHAN : destination MIDI channel, -1 if MIDI send is disabled (0=original, 1-16)\nI_MIDI_SRCBUS : source MIDI bus, -1 if MIDI send is disabled (0=all, otherwise bus index)\nI_MIDI_DSTBUS : receive MIDI bus, -1 if MIDI send is disabled (0=all, otherwise bus index)\nI_MIDI_LINK_VOLPAN : link volume/pan controls to MIDI\nNote: To get or set other send attributes, see BR_GetMediaTrackSendInfo_Envelope and BR_GetMediaTrackSendInfo_Track.\n\n"
	},

	"BR_GetTakeFXCount lua": {
	"prefix": "reaper.BR_GetTakeFXCount",
	"scope": "lua",
	"body": "reaper.BR_GetTakeFXCount(${1:take})$0",
	"description": "[BR] Returns FX count for supplied take\n\n"
	},

	"BR_IsMidiOpenInInlineEditor lua": {
	"prefix": "reaper.BR_IsMidiOpenInInlineEditor",
	"scope": "lua",
	"body": "reaper.BR_IsMidiOpenInInlineEditor(${1:take})$0",
	"description": "[SWS] Check if take has MIDI inline editor open and returns true or false.\n\n"
	},

	"BR_IsTakeMidi lua": {
	"prefix": "reaper.BR_IsTakeMidi",
	"scope": "lua",
	"body": "retval, inProjectMidi = reaper.BR_IsTakeMidi(${1:take})$0",
	"description": "[BR] Check if take is MIDI take, in case MIDI take is in-project MIDI source data, inProjectMidiOut will be true, otherwise false.\n\n"
	},

	"BR_ItemAtMouseCursor lua": {
	"prefix": "reaper.BR_ItemAtMouseCursor",
	"scope": "lua",
	"body": "retval, position = reaper.BR_ItemAtMouseCursor()\n\n",
	"description": "[BR] Get media item under mouse cursor. Position is mouse cursor position in arrange.\n\n"
	},

	"BR_MIDI_CCLaneRemove lua": {
	"prefix": "reaper.BR_MIDI_CCLaneRemove",
	"scope": "lua",
	"body": "reaper.BR_MIDI_CCLaneRemove(${1:midiEditor}, ${2:laneId})$0",
	"description": "[BR] Remove CC lane in midi editor. Top visible CC lane is laneId 0. Returns true on success\n\n"
	},

	"BR_MIDI_CCLaneReplace lua": {
	"prefix": "reaper.BR_MIDI_CCLaneReplace",
	"scope": "lua",
	"body": "reaper.BR_MIDI_CCLaneReplace(${1:midiEditor}, ${2:laneId}, ${3:newCC})$0",
	"description": "[BR] Replace CC lane in midi editor. Top visible CC lane is laneId 0. Returns true on success.\nValid CC lanes: CC0-127=CC, 0x100|(0-31)=14-bit CC, 0x200=velocity, 0x201=pitch, 0x202=program, 0x203=channel pressure, 0x204=bank/program select, 0x205=text, 0x206=sysex, 0x207\n\n"
	},

	"BR_PositionAtMouseCursor lua": {
	"prefix": "reaper.BR_PositionAtMouseCursor",
	"scope": "lua",
	"body": "reaper.BR_PositionAtMouseCursor(${1:checkRuler})$0",
	"description": "[BR] Get position at mouse cursor. To check ruler along with arrange, pass checkRuler=true. Returns -1 if cursor is not over arrange/ruler.\n\n"
	},

	"BR_SetArrangeView lua": {
	"prefix": "reaper.BR_SetArrangeView",
	"scope": "lua",
	"body": "reaper.BR_SetArrangeView(${1:proj}, ${2:startTime}, ${3:endTime})$0",
	"description": "[BR] Deprecated, see GetSet_ArrangeView2 (REAPER v5.12pre4+) -- Set start and end time position of arrange view. To get arrange view instead, see BR_GetArrangeView.\n\n"
	},

	"BR_SetItemEdges lua": {
	"prefix": "reaper.BR_SetItemEdges",
	"scope": "lua",
	"body": "reaper.BR_SetItemEdges(${1:item}, ${2:startTime}, ${3:endTime})$0",
	"description": "[BR] Set item start and end edges' position - returns true in case of any changes\n\n"
	},

	"BR_SetMediaItemImageResource lua": {
	"prefix": "reaper.BR_SetMediaItemImageResource",
	"scope": "lua",
	"body": "reaper.BR_SetMediaItemImageResource(${1:item}, ${2:imageIn}, ${3:imageFlags})$0",
	"description": "[BR] Set image resource and its flags for a given item. To clear current image resource, pass imageIn as ''.\nimageFlags: &1=0: don't display image, &1: center / tile, &3: stretch, &5: full height (REAPER 5.974+).\nCan also be used to display existing text in empty items unstretched (pass imageIn = '', imageFlags = 0) or stretched (pass imageIn = ''. imageFlags = 3).\nTo get image resource, see BR_GetMediaItemImageResource.\n\n"
	},

	"BR_SetMediaSourceProperties lua": {
	"prefix": "reaper.BR_SetMediaSourceProperties",
	"scope": "lua",
	"body": "reaper.BR_SetMediaSourceProperties(${1:take}, ${2:section}, ${3:start}, ${4:length}, ${5:fade}, ${6:reverse})$0",
	"description": "[BR] Set take media source properties. Returns false if take can't have them (MIDI items etc.). Section parameters have to be valid only when passing section=true.\nTo get source properties, see BR_GetMediaSourceProperties.\n\n"
	},

	"BR_SetMediaTrackLayouts lua": {
	"prefix": "reaper.BR_SetMediaTrackLayouts",
	"scope": "lua",
	"body": "reaper.BR_SetMediaTrackLayouts(${1:track}, ${2:mcpLayoutNameIn}, ${3:tcpLayoutNameIn})$0",
	"description": "[BR] Deprecated, see GetSetMediaTrackInfo (REAPER v5.02+). Set media track layouts for MCP and TCP. To set default layout, pass empty string ('') as layout name. In case layouts were successfully set, returns true (if layouts are already set to supplied layout names, it will return false since no changes were made).\nTo get media track layouts, see BR_GetMediaTrackLayouts.\n\n"
	},

	"BR_SetMidiTakeTempoInfo lua": {
	"prefix": "reaper.BR_SetMidiTakeTempoInfo",
	"scope": "lua",
	"body": "reaper.BR_SetMidiTakeTempoInfo(${1:take}, ${2:ignoreProjTempo}, ${3:bpm}, ${4:num}, ${5:den})$0",
	"description": "[BR] Set 'ignore project tempo' information for MIDI take. Returns true in case the take was successfully updated.\n\n"
	},

	"BR_SetTakeSourceFromFile lua": {
	"prefix": "reaper.BR_SetTakeSourceFromFile",
	"scope": "lua",
	"body": "reaper.BR_SetTakeSourceFromFile(${1:take}, ${2:filenameIn}, ${3:inProjectData})$0",
	"description": "[BR] Set new take source from file. To import MIDI file as in-project source data pass inProjectData=true. Returns false if failed.\nAny take source properties from the previous source will be lost - to preserve them, see BR_SetTakeSourceFromFile2.\nNote: To set source from existing take, see SNM_GetSetSourceState2.\n\n"
	},

	"BR_SetTakeSourceFromFile2 lua": {
	"prefix": "reaper.BR_SetTakeSourceFromFile2",
	"scope": "lua",
	"body": "reaper.BR_SetTakeSourceFromFile2(${1:take}, ${2:filenameIn}, ${3:inProjectData}, ${4:keepSourceProperties})$0",
	"description": "[BR] Differs from BR_SetTakeSourceFromFile only that it can also preserve existing take media source properties.\n\n"
	},

	"BR_TakeAtMouseCursor lua": {
	"prefix": "reaper.BR_TakeAtMouseCursor",
	"scope": "lua",
	"body": "retval, position = reaper.BR_TakeAtMouseCursor()\n\n",
	"description": "[BR] Get take under mouse cursor. Position is mouse cursor position in arrange.\n\n"
	},

	"BR_TrackAtMouseCursor lua": {
	"prefix": "reaper.BR_TrackAtMouseCursor",
	"scope": "lua",
	"body": "retval, context, position = reaper.BR_TrackAtMouseCursor()\n\n",
	"description": "[BR] Get track under mouse cursor.\nContext signifies where the track was found: 0 = TCP, 1 = MCP, 2 = Arrange.\nPosition will hold mouse cursor position in arrange if applicable.\n\n"
	},

	"BR_TrackFX_GetFXModuleName lua": {
	"prefix": "reaper.BR_TrackFX_GetFXModuleName",
	"scope": "lua",
	"body": "retval, name = reaper.BR_TrackFX_GetFXModuleName(${1:track}, ${2:fx})$0",
	"description": "[BR] Deprecated, see TrackFX_GetNamedConfigParm/'fx_ident' (v6.37+). Get the exact name (like effect.dll, effect.vst3, etc...) of an FX.\n\n"
	},

	"BR_Win32_CB_FindString lua": {
	"prefix": "reaper.BR_Win32_CB_FindString",
	"scope": "lua",
	"body": "reaper.BR_Win32_CB_FindString(${1:comboBoxHwnd}, ${2:startId}, ${3:string})$0",
	"description": "[BR] Equivalent to win32 API ComboBox_FindString().\n\n"
	},

	"BR_Win32_CB_FindStringExact lua": {
	"prefix": "reaper.BR_Win32_CB_FindStringExact",
	"scope": "lua",
	"body": "reaper.BR_Win32_CB_FindStringExact(${1:comboBoxHwnd}, ${2:startId}, ${3:string})$0",
	"description": "[BR] Equivalent to win32 API ComboBox_FindStringExact().\n\n"
	},

	"BR_Win32_ClientToScreen lua": {
	"prefix": "reaper.BR_Win32_ClientToScreen",
	"scope": "lua",
	"body": "x, y = reaper.BR_Win32_ClientToScreen(${1:hwnd}, ${2:xIn}, ${3:yIn})$0",
	"description": "[BR] Equivalent to win32 API ClientToScreen().\n\n"
	},

	"BR_Win32_FindWindowEx lua": {
	"prefix": "reaper.BR_Win32_FindWindowEx",
	"scope": "lua",
	"body": "reaper.BR_Win32_FindWindowEx(${1:hwndParent}, ${2:hwndChildAfter}, ${3:className}, ${4:windowName}, ${5:searchClass}, ${6:searchName})$0",
	"description": "[BR] Equivalent to win32 API FindWindowEx(). Since ReaScript doesn't allow passing NULL (None in Python, nil in Lua etc...) parameters, to search by supplied class or name set searchClass and searchName accordingly. HWND parameters should be passed as either '0' to signify NULL or as string obtained from BR_Win32_HwndToString.\n\n"
	},

	"BR_Win32_GET_X_LPARAM lua": {
	"prefix": "reaper.BR_Win32_GET_X_LPARAM",
	"scope": "lua",
	"body": "reaper.BR_Win32_GET_X_LPARAM(${1:lParam})$0",
	"description": "[BR] Equivalent to win32 API GET_X_LPARAM().\n\n"
	},

	"BR_Win32_GET_Y_LPARAM lua": {
	"prefix": "reaper.BR_Win32_GET_Y_LPARAM",
	"scope": "lua",
	"body": "reaper.BR_Win32_GET_Y_LPARAM(${1:lParam})$0",
	"description": "[BR] Equivalent to win32 API GET_Y_LPARAM().\n\n"
	},

	"BR_Win32_GetConstant lua": {
	"prefix": "reaper.BR_Win32_GetConstant",
	"scope": "lua",
	"body": "reaper.BR_Win32_GetConstant(${1:constantName})$0",
	"description": "[BR] Returns various constants needed for BR_Win32 functions.\nSupported constants are:\nCB_ERR, CB_GETCOUNT, CB_GETCURSEL, CB_SETCURSEL\nEM_SETSEL\nGW_CHILD, GW_HWNDFIRST, GW_HWNDLAST, GW_HWNDNEXT, GW_HWNDPREV, GW_OWNER\nGWL_STYLE\nSW_HIDE, SW_MAXIMIZE, SW_SHOW, SW_SHOWMINIMIZED, SW_SHOWNA, SW_SHOWNOACTIVATE, SW_SHOWNORMAL\nSWP_FRAMECHANGED, SWP_FRAMECHANGED, SWP_NOMOVE, SWP_NOOWNERZORDER, SWP_NOSIZE, SWP_NOZORDER\nVK_DOWN, VK_UP\nWM_CLOSE, WM_KEYDOWN\nWS_MAXIMIZE, WS_OVERLAPPEDWINDOW\n\n"
	},

	"BR_Win32_GetCursorPos lua": {
	"prefix": "reaper.BR_Win32_GetCursorPos",
	"scope": "lua",
	"body": "retval, x, y = reaper.BR_Win32_GetCursorPos()\n\n",
	"description": "[BR] Equivalent to win32 API GetCursorPos().\n\n"
	},

	"BR_Win32_GetFocus lua": {
	"prefix": "reaper.BR_Win32_GetFocus",
	"scope": "lua",
	"body": "reaper.BR_Win32_GetFocus()\n\n",
	"description": "[BR] Equivalent to win32 API GetFocus().\n\n"
	},

	"BR_Win32_GetForegroundWindow lua": {
	"prefix": "reaper.BR_Win32_GetForegroundWindow",
	"scope": "lua",
	"body": "reaper.BR_Win32_GetForegroundWindow()\n\n",
	"description": "[BR] Equivalent to win32 API GetForegroundWindow().\n\n"
	},

	"BR_Win32_GetMainHwnd lua": {
	"prefix": "reaper.BR_Win32_GetMainHwnd",
	"scope": "lua",
	"body": "reaper.BR_Win32_GetMainHwnd()\n\n",
	"description": "[BR] Alternative to GetMainHwnd. REAPER seems to have problems with extensions using HWND type for exported functions so all BR_Win32 functions use void* instead of HWND type\n\n"
	},

	"BR_Win32_GetMixerHwnd lua": {
	"prefix": "reaper.BR_Win32_GetMixerHwnd",
	"scope": "lua",
	"body": "retval, isDocked = reaper.BR_Win32_GetMixerHwnd()\n\n",
	"description": "[BR] Get mixer window HWND. isDockedOut will be set to true if mixer is docked\n\n"
	},

	"BR_Win32_GetMonitorRectFromRect lua": {
	"prefix": "reaper.BR_Win32_GetMonitorRectFromRect",
	"scope": "lua",
	"body": "left, top, right, bottom = reaper.BR_Win32_GetMonitorRectFromRect(${1:workingAreaOnly}, ${2:leftIn}, ${3:topIn}, ${4:rightIn}, ${5:bottomIn})$0",
	"description": "[BR] Get coordinates for screen which is nearest to supplied coordinates. Pass workingAreaOnly as true to get screen coordinates excluding taskbar (or menu bar on OSX).\n\n"
	},

	"BR_Win32_GetParent lua": {
	"prefix": "reaper.BR_Win32_GetParent",
	"scope": "lua",
	"body": "reaper.BR_Win32_GetParent(${1:hwnd})$0",
	"description": "[BR] Equivalent to win32 API GetParent().\n\n"
	},

	"BR_Win32_GetPrivateProfileString lua": {
	"prefix": "reaper.BR_Win32_GetPrivateProfileString",
	"scope": "lua",
	"body": "retval, string = reaper.BR_Win32_GetPrivateProfileString(${1:sectionName}, ${2:keyName}, ${3:defaultString}, ${4:filePath})$0",
	"description": "[BR] Equivalent to win32 API GetPrivateProfileString(). For example, you can use this to get values from REAPER.ini.\n\n"
	},

	"BR_Win32_GetWindow lua": {
	"prefix": "reaper.BR_Win32_GetWindow",
	"scope": "lua",
	"body": "reaper.BR_Win32_GetWindow(${1:hwnd}, ${2:cmd})$0",
	"description": "[BR] Equivalent to win32 API GetWindow().\n\n"
	},

	"BR_Win32_GetWindowLong lua": {
	"prefix": "reaper.BR_Win32_GetWindowLong",
	"scope": "lua",
	"body": "reaper.BR_Win32_GetWindowLong(${1:hwnd}, ${2:index})$0",
	"description": "[BR] Equivalent to win32 API GetWindowLong().\n\n"
	},

	"BR_Win32_GetWindowRect lua": {
	"prefix": "reaper.BR_Win32_GetWindowRect",
	"scope": "lua",
	"body": "retval, left, top, right, bottom = reaper.BR_Win32_GetWindowRect(${1:hwnd})$0",
	"description": "[BR] Equivalent to win32 API GetWindowRect().\n\n"
	},

	"BR_Win32_GetWindowText lua": {
	"prefix": "reaper.BR_Win32_GetWindowText",
	"scope": "lua",
	"body": "retval, text = reaper.BR_Win32_GetWindowText(${1:hwnd})$0",
	"description": "[BR] Equivalent to win32 API GetWindowText().\n\n"
	},

	"BR_Win32_HIBYTE lua": {
	"prefix": "reaper.BR_Win32_HIBYTE",
	"scope": "lua",
	"body": "reaper.BR_Win32_HIBYTE(${1:value})$0",
	"description": "[BR] Equivalent to win32 API HIBYTE().\n\n"
	},

	"BR_Win32_HIWORD lua": {
	"prefix": "reaper.BR_Win32_HIWORD",
	"scope": "lua",
	"body": "reaper.BR_Win32_HIWORD(${1:value})$0",
	"description": "[BR] Equivalent to win32 API HIWORD().\n\n"
	},

	"BR_Win32_HwndToString lua": {
	"prefix": "reaper.BR_Win32_HwndToString",
	"scope": "lua",
	"body": "string = reaper.BR_Win32_HwndToString(${1:hwnd})$0",
	"description": "[BR] Convert HWND to string. To convert string back to HWND, see BR_Win32_StringToHwnd.\n\n"
	},

	"BR_Win32_IsWindow lua": {
	"prefix": "reaper.BR_Win32_IsWindow",
	"scope": "lua",
	"body": "reaper.BR_Win32_IsWindow(${1:hwnd})$0",
	"description": "[BR] Equivalent to win32 API IsWindow().\n\n"
	},

	"BR_Win32_IsWindowVisible lua": {
	"prefix": "reaper.BR_Win32_IsWindowVisible",
	"scope": "lua",
	"body": "reaper.BR_Win32_IsWindowVisible(${1:hwnd})$0",
	"description": "[BR] Equivalent to win32 API IsWindowVisible().\n\n"
	},

	"BR_Win32_LOBYTE lua": {
	"prefix": "reaper.BR_Win32_LOBYTE",
	"scope": "lua",
	"body": "reaper.BR_Win32_LOBYTE(${1:value})$0",
	"description": "[BR] Equivalent to win32 API LOBYTE().\n\n"
	},

	"BR_Win32_LOWORD lua": {
	"prefix": "reaper.BR_Win32_LOWORD",
	"scope": "lua",
	"body": "reaper.BR_Win32_LOWORD(${1:value})$0",
	"description": "[BR] Equivalent to win32 API LOWORD().\n\n"
	},

	"BR_Win32_MAKELONG lua": {
	"prefix": "reaper.BR_Win32_MAKELONG",
	"scope": "lua",
	"body": "reaper.BR_Win32_MAKELONG(${1:low}, ${2:high})$0",
	"description": "[BR] Equivalent to win32 API MAKELONG().\n\n"
	},

	"BR_Win32_MAKELPARAM lua": {
	"prefix": "reaper.BR_Win32_MAKELPARAM",
	"scope": "lua",
	"body": "reaper.BR_Win32_MAKELPARAM(${1:low}, ${2:high})$0",
	"description": "[BR] Equivalent to win32 API MAKELPARAM().\n\n"
	},

	"BR_Win32_MAKELRESULT lua": {
	"prefix": "reaper.BR_Win32_MAKELRESULT",
	"scope": "lua",
	"body": "reaper.BR_Win32_MAKELRESULT(${1:low}, ${2:high})$0",
	"description": "[BR] Equivalent to win32 API MAKELRESULT().\n\n"
	},

	"BR_Win32_MAKEWORD lua": {
	"prefix": "reaper.BR_Win32_MAKEWORD",
	"scope": "lua",
	"body": "reaper.BR_Win32_MAKEWORD(${1:low}, ${2:high})$0",
	"description": "[BR] Equivalent to win32 API MAKEWORD().\n\n"
	},

	"BR_Win32_MAKEWPARAM lua": {
	"prefix": "reaper.BR_Win32_MAKEWPARAM",
	"scope": "lua",
	"body": "reaper.BR_Win32_MAKEWPARAM(${1:low}, ${2:high})$0",
	"description": "[BR] Equivalent to win32 API MAKEWPARAM().\n\n"
	},

	"BR_Win32_MIDIEditor_GetActive lua": {
	"prefix": "reaper.BR_Win32_MIDIEditor_GetActive",
	"scope": "lua",
	"body": "reaper.BR_Win32_MIDIEditor_GetActive()\n\n",
	"description": "[BR] Alternative to MIDIEditor_GetActive. REAPER seems to have problems with extensions using HWND type for exported functions so all BR_Win32 functions use void* instead of HWND type.\n\n"
	},

	"BR_Win32_ScreenToClient lua": {
	"prefix": "reaper.BR_Win32_ScreenToClient",
	"scope": "lua",
	"body": "x, y = reaper.BR_Win32_ScreenToClient(${1:hwnd}, ${2:xIn}, ${3:yIn})$0",
	"description": "[BR] Equivalent to win32 API ClientToScreen().\n\n"
	},

	"BR_Win32_SendMessage lua": {
	"prefix": "reaper.BR_Win32_SendMessage",
	"scope": "lua",
	"body": "reaper.BR_Win32_SendMessage(${1:hwnd}, ${2:msg}, ${3:lParam}, ${4:wParam})$0",
	"description": "[BR] Equivalent to win32 API SendMessage().\n\n"
	},

	"BR_Win32_SetFocus lua": {
	"prefix": "reaper.BR_Win32_SetFocus",
	"scope": "lua",
	"body": "reaper.BR_Win32_SetFocus(${1:hwnd})$0",
	"description": "[BR] Equivalent to win32 API SetFocus().\n\n"
	},

	"BR_Win32_SetForegroundWindow lua": {
	"prefix": "reaper.BR_Win32_SetForegroundWindow",
	"scope": "lua",
	"body": "reaper.BR_Win32_SetForegroundWindow(${1:hwnd})$0",
	"description": "[BR] Equivalent to win32 API SetForegroundWindow().\n\n"
	},

	"BR_Win32_SetWindowLong lua": {
	"prefix": "reaper.BR_Win32_SetWindowLong",
	"scope": "lua",
	"body": "reaper.BR_Win32_SetWindowLong(${1:hwnd}, ${2:index}, ${3:newLong})$0",
	"description": "[BR] Equivalent to win32 API SetWindowLong().\n\n"
	},

	"BR_Win32_SetWindowPos lua": {
	"prefix": "reaper.BR_Win32_SetWindowPos",
	"scope": "lua",
	"body": "reaper.BR_Win32_SetWindowPos(${1:hwnd}, ${2:hwndInsertAfter}, ${3:x}, ${4:y}, ${5:width}, ${6:height}, ${7:flags})$0",
	"description": "[BR] Equivalent to win32 API SetWindowPos().\nhwndInsertAfter may be a string: 'HWND_BOTTOM', 'HWND_NOTOPMOST', 'HWND_TOP', 'HWND_TOPMOST' or a string obtained with BR_Win32_HwndToString.\n\n"
	},

	"BR_Win32_ShellExecute lua": {
	"prefix": "reaper.BR_Win32_ShellExecute",
	"scope": "lua",
	"body": "reaper.BR_Win32_ShellExecute(${1:operation}, ${2:file}, ${3:parameters}, ${4:directory}, ${5:showFlags})$0",
	"description": "[BR] Equivalent to win32 API ShellExecute() with HWND set to main window\n\n"
	},

	"BR_Win32_ShowWindow lua": {
	"prefix": "reaper.BR_Win32_ShowWindow",
	"scope": "lua",
	"body": "reaper.BR_Win32_ShowWindow(${1:hwnd}, ${2:cmdShow})$0",
	"description": "[BR] Equivalent to win32 API ShowWindow().\n\n"
	},

	"BR_Win32_StringToHwnd lua": {
	"prefix": "reaper.BR_Win32_StringToHwnd",
	"scope": "lua",
	"body": "reaper.BR_Win32_StringToHwnd(${1:string})$0",
	"description": "[BR] Convert string to HWND. To convert HWND back to string, see BR_Win32_HwndToString.\n\n"
	},

	"BR_Win32_WindowFromPoint lua": {
	"prefix": "reaper.BR_Win32_WindowFromPoint",
	"scope": "lua",
	"body": "reaper.BR_Win32_WindowFromPoint(${1:x}, ${2:y})$0",
	"description": "[BR] Equivalent to win32 API WindowFromPoint().\n\n"
	},

	"BR_Win32_WritePrivateProfileString lua": {
	"prefix": "reaper.BR_Win32_WritePrivateProfileString",
	"scope": "lua",
	"body": "reaper.BR_Win32_WritePrivateProfileString(${1:sectionName}, ${2:keyName}, ${3:value}, ${4:filePath})$0",
	"description": "[BR] Equivalent to win32 API WritePrivateProfileString(). For example, you can use this to write to REAPER.ini. You can pass an empty string as value to delete a key.\n\n"
	},

	"Blink_GetBeatAtTime lua": {
	"prefix": "reaper.Blink_GetBeatAtTime",
	"scope": "lua",
	"body": "reaper.Blink_GetBeatAtTime(${1:time}, ${2:quantum})$0",
	"description": "Get session beat value corresponding to given time for given quantum.\n\n"
	},

	"Blink_GetClockNow lua": {
	"prefix": "reaper.Blink_GetClockNow",
	"scope": "lua",
	"body": "reaper.Blink_GetClockNow()\n\n",
	"description": "Clock used by Blink.\n\n"
	},

	"Blink_GetEnabled lua": {
	"prefix": "reaper.Blink_GetEnabled",
	"scope": "lua",
	"body": "reaper.Blink_GetEnabled()\n\n",
	"description": "Is Blink currently enabled?\n\n"
	},

	"Blink_GetMaster lua": {
	"prefix": "reaper.Blink_GetMaster",
	"scope": "lua",
	"body": "reaper.Blink_GetMaster()\n\n",
	"description": "Is Blink Master?\n\n"
	},

	"Blink_GetNumPeers lua": {
	"prefix": "reaper.Blink_GetNumPeers",
	"scope": "lua",
	"body": "reaper.Blink_GetNumPeers()\n\n",
	"description": "How many peers are currently connected in Link session?\n\n"
	},

	"Blink_GetPhaseAtTime lua": {
	"prefix": "reaper.Blink_GetPhaseAtTime",
	"scope": "lua",
	"body": "reaper.Blink_GetPhaseAtTime(${1:time}, ${2:quantum})$0",
	"description": "Get session phase at given time for given quantum.\n\n"
	},

	"Blink_GetPlaying lua": {
	"prefix": "reaper.Blink_GetPlaying",
	"scope": "lua",
	"body": "reaper.Blink_GetPlaying()\n\n",
	"description": "Is transport playing?\n\n"
	},

	"Blink_GetPuppet lua": {
	"prefix": "reaper.Blink_GetPuppet",
	"scope": "lua",
	"body": "reaper.Blink_GetPuppet()\n\n",
	"description": "Is Blink Puppet?\n\n"
	},

	"Blink_GetQuantum lua": {
	"prefix": "reaper.Blink_GetQuantum",
	"scope": "lua",
	"body": "reaper.Blink_GetQuantum()\n\n",
	"description": "Get quantum.\n\n"
	},

	"Blink_GetStartStopSyncEnabled lua": {
	"prefix": "reaper.Blink_GetStartStopSyncEnabled",
	"scope": "lua",
	"body": "reaper.Blink_GetStartStopSyncEnabled()\n\n",
	"description": "Is start/stop synchronization enabled?\n\n"
	},

	"Blink_GetTempo lua": {
	"prefix": "reaper.Blink_GetTempo",
	"scope": "lua",
	"body": "reaper.Blink_GetTempo()\n\n",
	"description": "Tempo of timeline, in quarter note Beats Per Minute.\n\n"
	},

	"Blink_GetTimeAtBeat lua": {
	"prefix": "reaper.Blink_GetTimeAtBeat",
	"scope": "lua",
	"body": "reaper.Blink_GetTimeAtBeat(${1:beat}, ${2:quantum})$0",
	"description": "Get time at which given beat occurs for given quantum.\n\n"
	},

	"Blink_GetTimeForPlaying lua": {
	"prefix": "reaper.Blink_GetTimeForPlaying",
	"scope": "lua",
	"body": "reaper.Blink_GetTimeForPlaying()\n\n",
	"description": "Get time at which transport start/stop occurs.\n\n"
	},

	"Blink_GetVersion lua": {
	"prefix": "reaper.Blink_GetVersion",
	"scope": "lua",
	"body": "reaper.Blink_GetVersion()\n\n",
	"description": "Get Blink version.\n\n"
	},

	"Blink_SetBeatAtStartPlayingTimeRequest lua": {
	"prefix": "reaper.Blink_SetBeatAtStartPlayingTimeRequest",
	"scope": "lua",
	"body": "reaper.Blink_SetBeatAtStartPlayingTimeRequest(${1:beat}, ${2:quantum})$0",
	"description": "Convenience function to attempt to map given beat to time when transport is starting to play in context of given quantum. This function evaluates to a no-op if GetPlaying() equals false.\n\n"
	},

	"Blink_SetBeatAtTimeForce lua": {
	"prefix": "reaper.Blink_SetBeatAtTimeForce",
	"scope": "lua",
	"body": "reaper.Blink_SetBeatAtTimeForce(${1:bpm}, ${2:time}, ${3:quantum})$0",
	"description": "Rudely re-map beat/time relationship for all peers in Link session.\n\n"
	},

	"Blink_SetBeatAtTimeRequest lua": {
	"prefix": "reaper.Blink_SetBeatAtTimeRequest",
	"scope": "lua",
	"body": "reaper.Blink_SetBeatAtTimeRequest(${1:bpm}, ${2:time}, ${3:quantum})$0",
	"description": "Attempt to map given beat to given time in context of given quantum.\n\n"
	},

	"Blink_SetCaptureTransportCommands lua": {
	"prefix": "reaper.Blink_SetCaptureTransportCommands",
	"scope": "lua",
	"body": "reaper.Blink_SetCaptureTransportCommands(${1:enable})$0",
	"description": "Captures REAPER Transport commands and 'Tempo: Increase/Decrease current project tempo by 01 BPM' commands and broadcasts them into Link session. When used with Master or Puppet mode enabled, provides better integration between REAPER and Link session transport and tempos.\n\n"
	},

	"Blink_SetEnabled lua": {
	"prefix": "reaper.Blink_SetEnabled",
	"scope": "lua",
	"body": "reaper.Blink_SetEnabled(${1:enable})$0",
	"description": "Enable/disable Blink. In Blink methods transport, tempo and timeline refer to Link session, not local REAPER instance.\n\n"
	},

	"Blink_SetMaster lua": {
	"prefix": "reaper.Blink_SetMaster",
	"scope": "lua",
	"body": "reaper.Blink_SetMaster(${1:enable})$0",
	"description": "Set Blink as Master. Puppet needs to be enabled first. Same as Puppet, but possible beat offset is broadcast to Link session, effectively forcing local REAPER timeline on peers. Only one, if any, Blink should be Master in Link session.\n\n"
	},

	"Blink_SetPlaying lua": {
	"prefix": "reaper.Blink_SetPlaying",
	"scope": "lua",
	"body": "reaper.Blink_SetPlaying(${1:playing}, ${2:time})$0",
	"description": "Set if transport should be playing or stopped, taking effect at given time.\n\n"
	},

	"Blink_SetPlayingAndBeatAtTimeRequest lua": {
	"prefix": "reaper.Blink_SetPlayingAndBeatAtTimeRequest",
	"scope": "lua",
	"body": "reaper.Blink_SetPlayingAndBeatAtTimeRequest(${1:playing}, ${2:time}, ${3:beat}, ${4:quantum})$0",
	"description": "Convenience function to start or stop transport at given time and attempt to map given beat to this time in context of given quantum.\n\n"
	},

	"Blink_SetPuppet lua": {
	"prefix": "reaper.Blink_SetPuppet",
	"scope": "lua",
	"body": "reaper.Blink_SetPuppet(${1:enable})$0",
	"description": "Set Blink as Puppet. When enabled, Blink attempts to synchronize local REAPER tempo to Link session tempo by adjusting current active tempo/time signature marker, or broadcasts local REAPER tempo changes into Link session, and attempts to correct possible offset by adjusting REAPER playrate. Based on cumulative single beat phase since Link session transport start, regardless of quantum.\n\n"
	},

	"Blink_SetQuantum lua": {
	"prefix": "reaper.Blink_SetQuantum",
	"scope": "lua",
	"body": "reaper.Blink_SetQuantum(${1:quantum})$0",
	"description": "Set quantum. Usually this is set to length of one measure/bar in quarter notes.\n\n"
	},

	"Blink_SetStartStopSyncEnabled lua": {
	"prefix": "reaper.Blink_SetStartStopSyncEnabled",
	"scope": "lua",
	"body": "reaper.Blink_SetStartStopSyncEnabled(${1:enable})$0",
	"description": "Enable start/stop synchronization.\n\n"
	},

	"Blink_SetTempo lua": {
	"prefix": "reaper.Blink_SetTempo",
	"scope": "lua",
	"body": "reaper.Blink_SetTempo(${1:bpm})$0",
	"description": "Set timeline tempo to given bpm value.\n\n"
	},

	"Blink_SetTempoAtTime lua": {
	"prefix": "reaper.Blink_SetTempoAtTime",
	"scope": "lua",
	"body": "reaper.Blink_SetTempoAtTime(${1:bpm}, ${2:time})$0",
	"description": "Set tempo to given bpm value, taking effect at given time.\n\n"
	},

	"Blink_StartStop lua": {
	"prefix": "reaper.Blink_StartStop",
	"scope": "lua",
	"body": "reaper.Blink_StartStop()\n\n",
	"description": "Transport start/stop.\n\n"
	},

	"CF_CreatePreview lua": {
	"prefix": "reaper.CF_CreatePreview",
	"scope": "lua",
	"body": "reaper.CF_CreatePreview(${1:source})$0",
	"description": "Create a new preview object. Does not take ownership of the source (don't forget to destroy it unless it came from a take!). See CF_Preview_Play and the others CF_Preview_* functions.\nThe preview object is automatically destroyed at the end of a defer cycle if at least one of these conditions are met:\n- playback finished\n- playback was not started using CF_Preview_Play\n- the output track no longer exists\n\n"
	},

	"CF_EnumMediaSourceCues lua": {
	"prefix": "reaper.CF_EnumMediaSourceCues",
	"scope": "lua",
	"body": "retval, time, endTime, isRegion, name, isChapter = reaper.CF_EnumMediaSourceCues(${1:src}, ${2:index})$0",
	"description": "Enumerate the source's media cues. Returns the next index or 0 when finished.\n\n"
	},

	"CF_EnumSelectedFX lua": {
	"prefix": "reaper.CF_EnumSelectedFX",
	"scope": "lua",
	"body": "reaper.CF_EnumSelectedFX(${1:hwnd}, ${2:index})$0",
	"description": "Return the index of the next selected effect in the given FX chain. Start index should be -1. Returns -1 if there are no more selected effects.\n\n"
	},

	"CF_EnumerateActions lua": {
	"prefix": "reaper.CF_EnumerateActions",
	"scope": "lua",
	"body": "retval, name = reaper.CF_EnumerateActions(${1:section}, ${2:index})$0",
	"description": "Deprecated, see kbd_enumerateActions (v6.71+). Wrapper for the unexposed kbd_enumerateActions API function.\nMain=0, Main (alt recording)=100, MIDI Editor=32060, MIDI Event List Editor=32061, MIDI Inline Editor=32062, Media Explorer=32063\n\n"
	},

	"CF_ExportMediaSource lua": {
	"prefix": "reaper.CF_ExportMediaSource",
	"scope": "lua",
	"body": "reaper.CF_ExportMediaSource(${1:src}, ${2:fn})$0",
	"description": "Export the source to the given file (MIDI only).\n\n"
	},

	"CF_GetClipboard lua": {
	"prefix": "reaper.CF_GetClipboard",
	"scope": "lua",
	"body": "text = reaper.CF_GetClipboard()\n\n",
	"description": "Read the contents of the system clipboard.\n\n"
	},

	"CF_GetClipboardBig lua": {
	"prefix": "reaper.CF_GetClipboardBig",
	"scope": "lua",
	"body": "reaper.CF_GetClipboardBig(${1:output})$0",
	"description": "[DEPRECATED: Use CF_GetClipboard] Read the contents of the system clipboard. See SNM_CreateFastString and SNM_DeleteFastString.\n\n"
	},

	"CF_GetCommandText lua": {
	"prefix": "reaper.CF_GetCommandText",
	"scope": "lua",
	"body": "reaper.CF_GetCommandText(${1:section}, ${2:command})$0",
	"description": "Deprecated, see kbd_getTextFromCmd (v6.71+). Wrapper for the unexposed kbd_getTextFromCmd API function. See CF_EnumerateActions for common section IDs.\n\n"
	},

	"CF_GetCustomColor lua": {
	"prefix": "reaper.CF_GetCustomColor",
	"scope": "lua",
	"body": "reaper.CF_GetCustomColor(${1:index})$0",
	"description": "Get one of 16 SWS custom colors (0xBBGGRR on Windows, 0xRRGGBB everyhwere else). Index is zero-based.\n\n"
	},

	"CF_GetFocusedFXChain lua": {
	"prefix": "reaper.CF_GetFocusedFXChain",
	"scope": "lua",
	"body": "FxChain = reaper.CF_GetFocusedFXChain()\n\n",
	"description": "Return a handle to the currently focused FX chain window.\n\n"
	},

	"CF_GetMediaSourceBitDepth lua": {
	"prefix": "reaper.CF_GetMediaSourceBitDepth",
	"scope": "lua",
	"body": "reaper.CF_GetMediaSourceBitDepth(${1:src})$0",
	"description": "Returns the bit depth if available (0 otherwise).\n\n"
	},

	"CF_GetMediaSourceBitRate lua": {
	"prefix": "reaper.CF_GetMediaSourceBitRate",
	"scope": "lua",
	"body": "reaper.CF_GetMediaSourceBitRate(${1:src})$0",
	"description": "Returns the bit rate for WAVE (wav, aif) and streaming/variable formats (mp3, ogg, opus). REAPER v6.19 or later is required for non-WAVE formats.\n\n"
	},

	"CF_GetMediaSourceMetadata lua": {
	"prefix": "reaper.CF_GetMediaSourceMetadata",
	"scope": "lua",
	"body": "retval, out = reaper.CF_GetMediaSourceMetadata(${1:src}, ${2:name}, ${3:out})$0",
	"description": "Get the value of the given metadata field (eg. DESC, ORIG, ORIGREF, DATE, TIME, UMI, CODINGHISTORY for BWF).\n\n"
	},

	"CF_GetMediaSourceOnline lua": {
	"prefix": "reaper.CF_GetMediaSourceOnline",
	"scope": "lua",
	"body": "reaper.CF_GetMediaSourceOnline(${1:src})$0",
	"description": "Returns the online/offline status of the given source.\n\n"
	},

	"CF_GetMediaSourceRPP lua": {
	"prefix": "reaper.CF_GetMediaSourceRPP",
	"scope": "lua",
	"body": "retval, fn = reaper.CF_GetMediaSourceRPP(${1:src})$0",
	"description": "Get the project associated with this source (BWF, subproject...).\n\n"
	},

	"CF_GetSWSVersion lua": {
	"prefix": "reaper.CF_GetSWSVersion",
	"scope": "lua",
	"body": "version = reaper.CF_GetSWSVersion()\n\n",
	"description": "Return the current SWS version number.\n\n"
	},

	"CF_GetTakeFXChain lua": {
	"prefix": "reaper.CF_GetTakeFXChain",
	"scope": "lua",
	"body": "reaper.CF_GetTakeFXChain(${1:take})$0",
	"description": "Return a handle to the given take FX chain window. HACK: This temporarily renames the take in order to disambiguate the take FX chain window from similarily named takes.\n\n"
	},

	"CF_GetTrackFXChain lua": {
	"prefix": "reaper.CF_GetTrackFXChain",
	"scope": "lua",
	"body": "reaper.CF_GetTrackFXChain(${1:track})$0",
	"description": "Return a handle to the given track FX chain window.\n\n"
	},

	"CF_GetTrackFXChainEx lua": {
	"prefix": "reaper.CF_GetTrackFXChainEx",
	"scope": "lua",
	"body": "reaper.CF_GetTrackFXChainEx(${1:project}, ${2:track}, ${3:wantInputChain})$0",
	"description": "Return a handle to the given track FX chain window. Set wantInputChain to get the track's input/monitoring FX chain.\n\n"
	},

	"CF_LocateInExplorer lua": {
	"prefix": "reaper.CF_LocateInExplorer",
	"scope": "lua",
	"body": "reaper.CF_LocateInExplorer(${1:file})$0",
	"description": "Select the given file in explorer/finder.\n\n"
	},

	"CF_PCM_Source_SetSectionInfo lua": {
	"prefix": "reaper.CF_PCM_Source_SetSectionInfo",
	"scope": "lua",
	"body": "reaper.CF_PCM_Source_SetSectionInfo(${1:section}, ${2:source}, ${3:offset}, ${4:length}, ${5:reverse})$0",
	"description": "Give a section source created using PCM_Source_CreateFromType('SECTION'). Offset and length are ignored if 0. Negative length to subtract from the total length of the source.\n\n"
	},

	"CF_Preview_GetPeak lua": {
	"prefix": "reaper.CF_Preview_GetPeak",
	"scope": "lua",
	"body": "retval, peakvol = reaper.CF_Preview_GetPeak(${1:preview}, ${2:channel})$0",
	"description": "Read peak volume for channel 0 or 1. Only available when outputting to a hardware output (not through a track).\n\n"
	},

	"CF_Preview_GetValue lua": {
	"prefix": "reaper.CF_Preview_GetValue",
	"scope": "lua",
	"body": "retval, value = reaper.CF_Preview_GetValue(${1:preview}, ${2:name})$0",
	"description": "Supported attributes:\nB_LOOP         seek to the beginning when reaching the end of the source\nB_PPITCH       preserve pitch when changing playback rate\nD_FADEINLEN    lenght in seconds of playback fade in\nD_FADEOUTLEN   lenght in seconds of playback fade out\nD_LENGTH       (read only) length of the source * playback rate\nD_MEASUREALIGN >0 = wait until the next bar before starting playback (note: this causes playback to silently continue when project is paused and previewing through a track)\nD_PAN          playback pan\nD_PITCH        pitch adjustment in semitones\nD_PLAYRATE     playback rate\nD_POSITION     current playback position\nD_VOLUME       playback volume\nI_OUTCHAN      first hardware output channel (&1024=mono, reads -1 when playing through a track, see CF_Preview_SetOutputTrack)\nI_PITCHMODE    highest 16 bits=pitch shift mode (see EnumPitchShiftModes), lower 16 bits=pitch shift submode (see EnumPitchShiftSubModes)\n\n"
	},

	"CF_Preview_Play lua": {
	"prefix": "reaper.CF_Preview_Play",
	"scope": "lua",
	"body": "reaper.CF_Preview_Play(${1:preview})$0",
	"description": "Start playback of the configured preview object.\n\n"
	},

	"CF_Preview_SetOutputTrack lua": {
	"prefix": "reaper.CF_Preview_SetOutputTrack",
	"scope": "lua",
	"body": "reaper.CF_Preview_SetOutputTrack(${1:preview}, ${2:project}, ${3:track})$0",
	"description": ""
	},

	"CF_Preview_SetValue lua": {
	"prefix": "reaper.CF_Preview_SetValue",
	"scope": "lua",
	"body": "reaper.CF_Preview_SetValue(${1:preview}, ${2:name}, ${3:newValue})$0",
	"description": "See CF_Preview_GetValue.\n\n"
	},

	"CF_Preview_Stop lua": {
	"prefix": "reaper.CF_Preview_Stop",
	"scope": "lua",
	"body": "reaper.CF_Preview_Stop(${1:preview})$0",
	"description": "Stop and destroy a preview object.\n\n"
	},

	"CF_Preview_StopAll lua": {
	"prefix": "reaper.CF_Preview_StopAll",
	"scope": "lua",
	"body": "reaper.CF_Preview_StopAll()\n\n",
	"description": "Stop and destroy all currently active preview objects.\n\n"
	},

	"CF_SelectTrackFX lua": {
	"prefix": "reaper.CF_SelectTrackFX",
	"scope": "lua",
	"body": "reaper.CF_SelectTrackFX(${1:track}, ${2:index})$0",
	"description": "Set which track effect is active in the track's FX chain. The FX chain window does not have to be open.\n\n"
	},

	"CF_SetClipboard lua": {
	"prefix": "reaper.CF_SetClipboard",
	"scope": "lua",
	"body": "reaper.CF_SetClipboard(${1:str})$0",
	"description": "Write the given string into the system clipboard.\n\n"
	},

	"CF_SetCustomColor lua": {
	"prefix": "reaper.CF_SetCustomColor",
	"scope": "lua",
	"body": "reaper.CF_SetCustomColor(${1:index}, ${2:color})$0",
	"description": "Set one of 16 SWS custom colors (0xBBGGRR on Windows, 0xRRGGBB everyhwere else). Index is zero-based.\n\n"
	},

	"CF_SetMediaSourceOnline lua": {
	"prefix": "reaper.CF_SetMediaSourceOnline",
	"scope": "lua",
	"body": "reaper.CF_SetMediaSourceOnline(${1:src}, ${2:set})$0",
	"description": "Set the online/offline status of the given source (closes files when set=false).\n\n"
	},

	"CF_ShellExecute lua": {
	"prefix": "reaper.CF_ShellExecute",
	"scope": "lua",
	"body": "reaper.CF_ShellExecute(${1:file})$0",
	"description": "Open the given file or URL in the default application. See also CF_LocateInExplorer.\n\n"
	},

	"FNG_AddMidiNote lua": {
	"prefix": "reaper.FNG_AddMidiNote",
	"scope": "lua",
	"body": "reaper.FNG_AddMidiNote(${1:midiTake})$0",
	"description": "[FNG] Add MIDI note to MIDI take\n\n"
	},

	"FNG_AllocMidiTake lua": {
	"prefix": "reaper.FNG_AllocMidiTake",
	"scope": "lua",
	"body": "reaper.FNG_AllocMidiTake(${1:take})$0",
	"description": "[FNG] Allocate a RprMidiTake from a take pointer. Returns a NULL pointer if the take is not an in-project MIDI take\n\n"
	},

	"FNG_CountMidiNotes lua": {
	"prefix": "reaper.FNG_CountMidiNotes",
	"scope": "lua",
	"body": "reaper.FNG_CountMidiNotes(${1:midiTake})$0",
	"description": "[FNG] Count of how many MIDI notes are in the MIDI take\n\n"
	},

	"FNG_FreeMidiTake lua": {
	"prefix": "reaper.FNG_FreeMidiTake",
	"scope": "lua",
	"body": "reaper.FNG_FreeMidiTake(${1:midiTake})$0",
	"description": "[FNG] Commit changes to MIDI take and free allocated memory\n\n"
	},

	"FNG_GetMidiNote lua": {
	"prefix": "reaper.FNG_GetMidiNote",
	"scope": "lua",
	"body": "reaper.FNG_GetMidiNote(${1:midiTake}, ${2:index})$0",
	"description": "[FNG] Get a MIDI note from a MIDI take at specified index\n\n"
	},

	"FNG_GetMidiNoteIntProperty lua": {
	"prefix": "reaper.FNG_GetMidiNoteIntProperty",
	"scope": "lua",
	"body": "reaper.FNG_GetMidiNoteIntProperty(${1:midiNote}, ${2:property})$0",
	"description": "[FNG] Get MIDI note property\n\n"
	},

	"FNG_SetMidiNoteIntProperty lua": {
	"prefix": "reaper.FNG_SetMidiNoteIntProperty",
	"scope": "lua",
	"body": "reaper.FNG_SetMidiNoteIntProperty(${1:midiNote}, ${2:property}, ${3:value})$0",
	"description": "[FNG] Set MIDI note property\n\n"
	},

	"Fab_Clear lua": {
	"prefix": "reaper.Fab_Clear",
	"scope": "lua",
	"body": "reaper.Fab_Clear(${1:optional_idStringIn})$0",
	"description": "Clears ReaFab control map, optionally based on matching idString. Returns true on success.\n\n"
	},

	"Fab_Do lua": {
	"prefix": "reaper.Fab_Do",
	"scope": "lua",
	"body": "reaper.Fab_Do(${1:command}, ${2:val})$0",
	"description": "Runs ReaFab actions/commands. First parameter (command) is ReaFab command number, e.g. 3 for 3rd encoder rotation. Second parameter (val) is MIDI CC Relative value. Value 1 is increment of 1, 127 is decrement of 1. 2 is inc 2, 126 is dec 2 and so on. For button press (commands 9-32) a value of 127 is recommended.\n\n"
	},

	"Fab_Dump lua": {
	"prefix": "reaper.Fab_Dump",
	"scope": "lua",
	"body": "reaper.Fab_Dump()\n\n",
	"description": "Dumps current control mapping into .lua file under ResourcePath/Scripts/reafab_dump-timestamp.lua\n\n"
	},

	"Fab_Get lua": {
	"prefix": "reaper.Fab_Get",
	"scope": "lua",
	"body": "retval, fx, param = reaper.Fab_Get(${1:command})$0",
	"description": "Returns target FX and parameter index for given ReaFab command in context of selected track and ReaFab FX index. Valid command range 1 ... 24. Returns false if no such command mapping is found. Returns param index -1 for ReaFab internal band change command.\n\n"
	},

	"Fab_Map lua": {
	"prefix": "reaper.Fab_Map",
	"scope": "lua",
	"body": "reaper.Fab_Map(${1:fxId}, ${2:command}, ${3:paramId}, ${4:control}, ${5:optional_bandsIn}, ${6:optional_stepIn}, ${7:optional_accelIn}, ${8:optional_minvalIn}, ${9:optional_maxvalIn})$0",
	"description": "Creates control mapping for ReaFab command.\nfxId e.g. 'ReaComp'.\ncommand 1-8 for encoders, 9-24 for buttons.\nparamId e.g. 'Ratio'.\ncontrol 1 = direct, 2 = band selector, 3 = cycle, 4 = invert, 5 = force toggle, 6 = force range, 7 = 5 and 6, 8 = force continuous.\nbands define, if target fx has multiple identical target bands. In this case, paramId must include 00 placeholder, e.g. 'Band 00 Gain'.\nstep overrides built-in default step of ~0.001 for continuous parameters.\naccel overrides built-in default control acceleration step of 1.0.\nminval & maxval override default detected target param value range.\nPrefixing paramId with '-' reverses direction; useful for creating separate next/previous mappings for bands or list type value navigation.\n\n"
	},

	"ImGui_AcceptDragDropPayload lua": {
	"prefix": "reaper.ImGui_AcceptDragDropPayload",
	"scope": "lua",
	"body": "retval, payload = reaper.ImGui_AcceptDragDropPayload(${1:ctx}, ${2:type}, ${3:payload}, ${4:optional_flagsIn})$0",
	"description": "Accept contents of a given type. If DragDropFlags_AcceptBeforeDelivery is set\nyou can peek into the payload before the mouse button is released.\n\n"
	},

	"ImGui_AcceptDragDropPayloadFiles lua": {
	"prefix": "reaper.ImGui_AcceptDragDropPayloadFiles",
	"scope": "lua",
	"body": "retval, count = reaper.ImGui_AcceptDragDropPayloadFiles(${1:ctx}, ${2:count}, ${3:optional_flagsIn})$0",
	"description": "Accept a list of dropped files. See AcceptDragDropPayload and GetDragDropPayloadFile.\n\n"
	},

	"ImGui_AcceptDragDropPayloadRGB lua": {
	"prefix": "reaper.ImGui_AcceptDragDropPayloadRGB",
	"scope": "lua",
	"body": "retval, rgb = reaper.ImGui_AcceptDragDropPayloadRGB(${1:ctx}, ${2:rgb}, ${3:optional_flagsIn})$0",
	"description": "Accept a RGB color. See AcceptDragDropPayload.\n\n"
	},

	"ImGui_AcceptDragDropPayloadRGBA lua": {
	"prefix": "reaper.ImGui_AcceptDragDropPayloadRGBA",
	"scope": "lua",
	"body": "retval, rgba = reaper.ImGui_AcceptDragDropPayloadRGBA(${1:ctx}, ${2:rgba}, ${3:optional_flagsIn})$0",
	"description": "Accept a RGBA color. See AcceptDragDropPayload.\n\n"
	},

	"ImGui_AlignTextToFramePadding lua": {
	"prefix": "reaper.ImGui_AlignTextToFramePadding",
	"scope": "lua",
	"body": "reaper.ImGui_AlignTextToFramePadding(${1:ctx})$0",
	"description": "Vertically align upcoming text baseline to StyleVar_FramePadding.y so that it\nwill align properly to regularly framed items (call if you have text on a line\nbefore a framed item).\n\n"
	},

	"ImGui_ArrowButton lua": {
	"prefix": "reaper.ImGui_ArrowButton",
	"scope": "lua",
	"body": "reaper.ImGui_ArrowButton(${1:ctx}, ${2:str_id}, ${3:dir})$0",
	"description": "Square button with an arrow shape. 'dir' is one of the Dir_* values\n\n"
	},

	"ImGui_Attach lua": {
	"prefix": "reaper.ImGui_Attach",
	"scope": "lua",
	"body": "reaper.ImGui_Attach(${1:ImGui_Context_obj})$0",
	"description": "Link the object's lifetime to the given context.\nObjects can be draw list splitters, fonts, images, list clippers, etc.\nCall Detach to let the object be garbage-collected after unuse again.\nList clipper objects may only be attached to the context they were created for.\nFonts are (currently) a special case: they must be attached to the context\nbefore usage. Furthermore, fonts may only be attached or detached immediately\nafter the context is created or before any other function calls modifying the\ncontext per defer cycle. See 'limitations' in the font API documentation.\n\n"
	},

	"ImGui_Begin lua": {
	"prefix": "reaper.ImGui_Begin",
	"scope": "lua",
	"body": "retval, optional_p_open = reaper.ImGui_Begin(${1:ctx}, ${2:name}, ${3:optional_p_open}, ${4:optional_flagsIn})$0",
	"description": "Push window to the stack and start appending to it.\n- Passing true to 'p_open' shows a window-closing widget in the upper-right\ncorner of the window, which clicking will set the boolean to false when returned.\n- You may append multiple times to the same window during the same frame by\ncalling Begin()/End() pairs multiple times. Some information such as 'flags'\nor 'p_open' will only be considered by the first call to Begin().\n- Begin() return false to indicate the window is collapsed or fully clipped,\nso you may early out and omit submitting anything to the window.\n\n"
	},

	"ImGui_BeginChild lua": {
	"prefix": "reaper.ImGui_BeginChild",
	"scope": "lua",
	"body": "reaper.ImGui_BeginChild(${1:ctx}, ${2:str_id}, ${3:optional_size_wIn}, ${4:optional_size_hIn}, ${5:optional_borderIn}, ${6:optional_flagsIn})$0",
	"description": "For each independent axis of 'size':\n- > 0.0: fixed size\n- = 0.0: use remaining host window size\n- < 0.0: use remaining window size minus abs(size)\n(Each axis can use a different mode, e.g. size = 0x400.)\nReturns false to indicate the window is collapsed or fully clipped, so you may early out and omit submitting anything to the window.\n\n"
	},

	"ImGui_BeginChildFrame lua": {
	"prefix": "reaper.ImGui_BeginChildFrame",
	"scope": "lua",
	"body": "reaper.ImGui_BeginChildFrame(${1:ctx}, ${2:str_id}, ${3:size_w}, ${4:size_h}, ${5:optional_flagsIn})$0",
	"description": "Helper to create a child window / scrolling region that looks like a normal\nwidget frame. See BeginChild.\n\n"
	},

	"ImGui_BeginCombo lua": {
	"prefix": "reaper.ImGui_BeginCombo",
	"scope": "lua",
	"body": "reaper.ImGui_BeginCombo(${1:ctx}, ${2:label}, ${3:preview_value}, ${4:optional_flagsIn})$0",
	"description": "The BeginCombo/EndCombo API allows you to manage your contents and selection\nstate however you want it, by creating e.g. Selectable items.\n\n"
	},

	"ImGui_BeginDisabled lua": {
	"prefix": "reaper.ImGui_BeginDisabled",
	"scope": "lua",
	"body": "reaper.ImGui_BeginDisabled(${1:ctx}, ${2:optional_disabledIn})$0",
	"description": "Disable all user interactions and dim items visuals\n(applying StyleVar_DisabledAlpha over current colors).\nBeginDisabled(false) essentially does nothing useful but is provided to\nfacilitate use of boolean expressions.\nIf you can avoid calling BeginDisabled(false)/EndDisabled() best to avoid it.\n\n"
	},

	"ImGui_BeginDragDropSource lua": {
	"prefix": "reaper.ImGui_BeginDragDropSource",
	"scope": "lua",
	"body": "reaper.ImGui_BeginDragDropSource(${1:ctx}, ${2:optional_flagsIn})$0",
	"description": "Call after submitting an item which may be dragged. when this return true,\nyou can call SetDragDropPayload() + EndDragDropSource()\nIf you stop calling BeginDragDropSource() the payload is preserved however\nit won't have a preview tooltip (we currently display a fallback '...' tooltip\nas replacement).\n\n"
	},

	"ImGui_BeginDragDropTarget lua": {
	"prefix": "reaper.ImGui_BeginDragDropTarget",
	"scope": "lua",
	"body": "reaper.ImGui_BeginDragDropTarget(${1:ctx})$0",
	"description": "Call after submitting an item that may receive a payload.\nIf this returns true, you can call AcceptDragDropPayload + EndDragDropTarget.\n\n"
	},

	"ImGui_BeginGroup lua": {
	"prefix": "reaper.ImGui_BeginGroup",
	"scope": "lua",
	"body": "reaper.ImGui_BeginGroup(${1:ctx})$0",
	"description": "Lock horizontal starting position. See EndGroup.\n\n"
	},

	"ImGui_BeginListBox lua": {
	"prefix": "reaper.ImGui_BeginListBox",
	"scope": "lua",
	"body": "reaper.ImGui_BeginListBox(${1:ctx}, ${2:label}, ${3:optional_size_wIn}, ${4:optional_size_hIn})$0",
	"description": "Open a framed scrolling region. This is essentially a thin wrapper to using\nBeginChild/EndChild with some stylistic changes.\nThe BeginListBox/EndListBox API allows you to manage your contents and selection\nstate however you want it, by creating e.g. Selectable or any items.\n- Choose frame width:\n- width  > 0.0: custom\n- width  < 0.0 or -FLT_MIN: right-align\n- width  = 0.0 (default): use current ItemWidth\n- Choose frame height:\n- height > 0.0: custom\n- height < 0.0 or -FLT_MIN: bottom-align\n- height = 0.0 (default): arbitrary default height which can fit ~7 items\nSee EndListBox.\n\n"
	},

	"ImGui_BeginMenu lua": {
	"prefix": "reaper.ImGui_BeginMenu",
	"scope": "lua",
	"body": "reaper.ImGui_BeginMenu(${1:ctx}, ${2:label}, ${3:optional_enabledIn})$0",
	"description": "Create a sub-menu entry. only call EndMenu if this returns true!\n\n"
	},

	"ImGui_BeginMenuBar lua": {
	"prefix": "reaper.ImGui_BeginMenuBar",
	"scope": "lua",
	"body": "reaper.ImGui_BeginMenuBar(${1:ctx})$0",
	"description": "Append to menu-bar of current window (requires WindowFlags_MenuBar flag set\non parent window). See EndMenuBar.\n\n"
	},

	"ImGui_BeginPopup lua": {
	"prefix": "reaper.ImGui_BeginPopup",
	"scope": "lua",
	"body": "reaper.ImGui_BeginPopup(${1:ctx}, ${2:str_id}, ${3:optional_flagsIn})$0",
	"description": "Query popup state, if open start appending into the window. Call EndPopup\nafterwards. WindowFlags* are forwarded to the window.\nReturn true if the popup is open, and you can start outputting to it.\n\n"
	},

	"ImGui_BeginPopupContextItem lua": {
	"prefix": "reaper.ImGui_BeginPopupContextItem",
	"scope": "lua",
	"body": "reaper.ImGui_BeginPopupContextItem(${1:ctx}, ${2:optional_str_idIn}, ${3:optional_popup_flagsIn})$0",
	"description": "This is a helper to handle the simplest case of associating one named popup\nto one given widget. You can pass a nil str_id to use the identifier of the last\nitem. This is essentially the same as calling OpenPopupOnItemClick + BeginPopup\nbut written to avoid computing the ID twice because BeginPopupContextXXX\nfunctions may be called very frequently.\nIf you want to use that on a non-interactive item such as Text you need to pass\nin an explicit ID here.\n\n"
	},

	"ImGui_BeginPopupContextWindow lua": {
	"prefix": "reaper.ImGui_BeginPopupContextWindow",
	"scope": "lua",
	"body": "reaper.ImGui_BeginPopupContextWindow(${1:ctx}, ${2:optional_str_idIn}, ${3:optional_popup_flagsIn})$0",
	"description": "Open+begin popup when clicked on current window.\n\n"
	},

	"ImGui_BeginPopupModal lua": {
	"prefix": "reaper.ImGui_BeginPopupModal",
	"scope": "lua",
	"body": "retval, optional_p_open = reaper.ImGui_BeginPopupModal(${1:ctx}, ${2:name}, ${3:optional_p_open}, ${4:optional_flagsIn})$0",
	"description": "Block every interaction behind the window, cannot be closed by user, add a\ndimming background, has a title bar. Return true if the modal is open, and you\ncan start outputting to it. See BeginPopup.\n\n"
	},

	"ImGui_BeginTabBar lua": {
	"prefix": "reaper.ImGui_BeginTabBar",
	"scope": "lua",
	"body": "reaper.ImGui_BeginTabBar(${1:ctx}, ${2:str_id}, ${3:optional_flagsIn})$0",
	"description": "Create and append into a TabBar.\n\n"
	},

	"ImGui_BeginTabItem lua": {
	"prefix": "reaper.ImGui_BeginTabItem",
	"scope": "lua",
	"body": "retval, optional_p_open = reaper.ImGui_BeginTabItem(${1:ctx}, ${2:label}, ${3:optional_p_open}, ${4:optional_flagsIn})$0",
	"description": "Create a Tab. Returns true if the Tab is selected.\nSet 'p_open' to true to enable the close button.\n\n"
	},

	"ImGui_BeginTable lua": {
	"prefix": "reaper.ImGui_BeginTable",
	"scope": "lua",
	"body": "reaper.ImGui_BeginTable(${1:ctx}, ${2:str_id}, ${3:column}, ${4:optional_flagsIn}, ${5:optional_outer_size_wIn}, ${6:optional_outer_size_hIn}, ${7:optional_inner_widthIn})$0",
	"description": ""
	},

	"ImGui_BeginTooltip lua": {
	"prefix": "reaper.ImGui_BeginTooltip",
	"scope": "lua",
	"body": "reaper.ImGui_BeginTooltip(${1:ctx})$0",
	"description": "Begin/append a tooltip window.\nTo create full-featured tooltip (with any kind of items).\n\n"
	},

	"ImGui_Bullet lua": {
	"prefix": "reaper.ImGui_Bullet",
	"scope": "lua",
	"body": "reaper.ImGui_Bullet(${1:ctx})$0",
	"description": "Draw a small circle + keep the cursor on the same line.\nAdvance cursor x position by GetTreeNodeToLabelSpacing,\nsame distance that TreeNode uses.\n\n"
	},

	"ImGui_BulletText lua": {
	"prefix": "reaper.ImGui_BulletText",
	"scope": "lua",
	"body": "reaper.ImGui_BulletText(${1:ctx}, ${2:text})$0",
	"description": "Shortcut for Bullet + Text.\n\n"
	},

	"ImGui_Button lua": {
	"prefix": "reaper.ImGui_Button",
	"scope": "lua",
	"body": "reaper.ImGui_Button(${1:ctx}, ${2:label}, ${3:optional_size_wIn}, ${4:optional_size_hIn})$0",
	"description": ""
	},

	"ImGui_ButtonFlags_MouseButtonLeft lua": {
	"prefix": "reaper.ImGui_ButtonFlags_MouseButtonLeft",
	"scope": "lua",
	"body": "reaper.ImGui_ButtonFlags_MouseButtonLeft()\n\n",
	"description": "React on left mouse button (default).\n\n"
	},

	"ImGui_ButtonFlags_MouseButtonMiddle lua": {
	"prefix": "reaper.ImGui_ButtonFlags_MouseButtonMiddle",
	"scope": "lua",
	"body": "reaper.ImGui_ButtonFlags_MouseButtonMiddle()\n\n",
	"description": "React on center mouse button.\n\n"
	},

	"ImGui_ButtonFlags_MouseButtonRight lua": {
	"prefix": "reaper.ImGui_ButtonFlags_MouseButtonRight",
	"scope": "lua",
	"body": "reaper.ImGui_ButtonFlags_MouseButtonRight()\n\n",
	"description": "React on right mouse button.\n\n"
	},

	"ImGui_ButtonFlags_None lua": {
	"prefix": "reaper.ImGui_ButtonFlags_None",
	"scope": "lua",
	"body": "reaper.ImGui_ButtonFlags_None()\n\n",
	"description": ""
	},

	"ImGui_CalcItemWidth lua": {
	"prefix": "reaper.ImGui_CalcItemWidth",
	"scope": "lua",
	"body": "reaper.ImGui_CalcItemWidth(${1:ctx})$0",
	"description": "Width of item given pushed settings and current cursor position.\nNOT necessarily the width of last item unlike most 'Item' functions.\n\n"
	},

	"ImGui_CalcTextSize lua": {
	"prefix": "reaper.ImGui_CalcTextSize",
	"scope": "lua",
	"body": "w, h = reaper.ImGui_CalcTextSize(${1:ctx}, ${2:text}, ${3:w}, ${4:h}, ${5:optional_hide_text_after_double_hashIn}, ${6:optional_wrap_widthIn})$0",
	"description": ""
	},

	"ImGui_Checkbox lua": {
	"prefix": "reaper.ImGui_Checkbox",
	"scope": "lua",
	"body": "retval, v = reaper.ImGui_Checkbox(${1:ctx}, ${2:label}, ${3:v})$0",
	"description": ""
	},

	"ImGui_CheckboxFlags lua": {
	"prefix": "reaper.ImGui_CheckboxFlags",
	"scope": "lua",
	"body": "retval, flags = reaper.ImGui_CheckboxFlags(${1:ctx}, ${2:label}, ${3:flags}, ${4:flags_value})$0",
	"description": ""
	},

	"ImGui_CloseCurrentPopup lua": {
	"prefix": "reaper.ImGui_CloseCurrentPopup",
	"scope": "lua",
	"body": "reaper.ImGui_CloseCurrentPopup(${1:ctx})$0",
	"description": "Manually close the popup we have begin-ed into.\nUse inside the BeginPopup/EndPopup scope to close manually.\nCloseCurrentPopup() is called by default by Selectable/MenuItem when activated.\n\n"
	},

	"ImGui_Col_Border lua": {
	"prefix": "reaper.ImGui_Col_Border",
	"scope": "lua",
	"body": "reaper.ImGui_Col_Border()\n\n",
	"description": ""
	},

	"ImGui_Col_BorderShadow lua": {
	"prefix": "reaper.ImGui_Col_BorderShadow",
	"scope": "lua",
	"body": "reaper.ImGui_Col_BorderShadow()\n\n",
	"description": ""
	},

	"ImGui_Col_Button lua": {
	"prefix": "reaper.ImGui_Col_Button",
	"scope": "lua",
	"body": "reaper.ImGui_Col_Button()\n\n",
	"description": ""
	},

	"ImGui_Col_ButtonActive lua": {
	"prefix": "reaper.ImGui_Col_ButtonActive",
	"scope": "lua",
	"body": "reaper.ImGui_Col_ButtonActive()\n\n",
	"description": ""
	},

	"ImGui_Col_ButtonHovered lua": {
	"prefix": "reaper.ImGui_Col_ButtonHovered",
	"scope": "lua",
	"body": "reaper.ImGui_Col_ButtonHovered()\n\n",
	"description": ""
	},

	"ImGui_Col_CheckMark lua": {
	"prefix": "reaper.ImGui_Col_CheckMark",
	"scope": "lua",
	"body": "reaper.ImGui_Col_CheckMark()\n\n",
	"description": ""
	},

	"ImGui_Col_ChildBg lua": {
	"prefix": "reaper.ImGui_Col_ChildBg",
	"scope": "lua",
	"body": "reaper.ImGui_Col_ChildBg()\n\n",
	"description": "Background of child windows.\n\n"
	},

	"ImGui_Col_DockingEmptyBg lua": {
	"prefix": "reaper.ImGui_Col_DockingEmptyBg",
	"scope": "lua",
	"body": "reaper.ImGui_Col_DockingEmptyBg()\n\n",
	"description": "Background color for empty node (e.g. CentralNode with no window docked into it).\n\n"
	},

	"ImGui_Col_DockingPreview lua": {
	"prefix": "reaper.ImGui_Col_DockingPreview",
	"scope": "lua",
	"body": "reaper.ImGui_Col_DockingPreview()\n\n",
	"description": "Preview overlay color when about to docking something.\n\n"
	},

	"ImGui_Col_DragDropTarget lua": {
	"prefix": "reaper.ImGui_Col_DragDropTarget",
	"scope": "lua",
	"body": "reaper.ImGui_Col_DragDropTarget()\n\n",
	"description": "Rectangle highlighting a drop target\n\n"
	},

	"ImGui_Col_FrameBg lua": {
	"prefix": "reaper.ImGui_Col_FrameBg",
	"scope": "lua",
	"body": "reaper.ImGui_Col_FrameBg()\n\n",
	"description": "Background of checkbox, radio button, plot, slider, text input.\n\n"
	},

	"ImGui_Col_FrameBgActive lua": {
	"prefix": "reaper.ImGui_Col_FrameBgActive",
	"scope": "lua",
	"body": "reaper.ImGui_Col_FrameBgActive()\n\n",
	"description": ""
	},

	"ImGui_Col_FrameBgHovered lua": {
	"prefix": "reaper.ImGui_Col_FrameBgHovered",
	"scope": "lua",
	"body": "reaper.ImGui_Col_FrameBgHovered()\n\n",
	"description": ""
	},

	"ImGui_Col_Header lua": {
	"prefix": "reaper.ImGui_Col_Header",
	"scope": "lua",
	"body": "reaper.ImGui_Col_Header()\n\n",
	"description": "Header* colors are used for CollapsingHeader, TreeNode, Selectable, MenuItem.\n\n"
	},

	"ImGui_Col_HeaderActive lua": {
	"prefix": "reaper.ImGui_Col_HeaderActive",
	"scope": "lua",
	"body": "reaper.ImGui_Col_HeaderActive()\n\n",
	"description": ""
	},

	"ImGui_Col_HeaderHovered lua": {
	"prefix": "reaper.ImGui_Col_HeaderHovered",
	"scope": "lua",
	"body": "reaper.ImGui_Col_HeaderHovered()\n\n",
	"description": ""
	},

	"ImGui_Col_MenuBarBg lua": {
	"prefix": "reaper.ImGui_Col_MenuBarBg",
	"scope": "lua",
	"body": "reaper.ImGui_Col_MenuBarBg()\n\n",
	"description": ""
	},

	"ImGui_Col_ModalWindowDimBg lua": {
	"prefix": "reaper.ImGui_Col_ModalWindowDimBg",
	"scope": "lua",
	"body": "reaper.ImGui_Col_ModalWindowDimBg()\n\n",
	"description": "Darken/colorize entire screen behind a modal window, when one is active.\n\n"
	},

	"ImGui_Col_NavHighlight lua": {
	"prefix": "reaper.ImGui_Col_NavHighlight",
	"scope": "lua",
	"body": "reaper.ImGui_Col_NavHighlight()\n\n",
	"description": "Gamepad/keyboard: current highlighted item.\n\n"
	},

	"ImGui_Col_NavWindowingDimBg lua": {
	"prefix": "reaper.ImGui_Col_NavWindowingDimBg",
	"scope": "lua",
	"body": "reaper.ImGui_Col_NavWindowingDimBg()\n\n",
	"description": "Darken/colorize entire screen behind the CTRL+TAB window list, when active.\n\n"
	},

	"ImGui_Col_NavWindowingHighlight lua": {
	"prefix": "reaper.ImGui_Col_NavWindowingHighlight",
	"scope": "lua",
	"body": "reaper.ImGui_Col_NavWindowingHighlight()\n\n",
	"description": "Highlight window when using CTRL+TAB.\n\n"
	},

	"ImGui_Col_PlotHistogram lua": {
	"prefix": "reaper.ImGui_Col_PlotHistogram",
	"scope": "lua",
	"body": "reaper.ImGui_Col_PlotHistogram()\n\n",
	"description": ""
	},

	"ImGui_Col_PlotHistogramHovered lua": {
	"prefix": "reaper.ImGui_Col_PlotHistogramHovered",
	"scope": "lua",
	"body": "reaper.ImGui_Col_PlotHistogramHovered()\n\n",
	"description": ""
	},

	"ImGui_Col_PlotLines lua": {
	"prefix": "reaper.ImGui_Col_PlotLines",
	"scope": "lua",
	"body": "reaper.ImGui_Col_PlotLines()\n\n",
	"description": ""
	},

	"ImGui_Col_PlotLinesHovered lua": {
	"prefix": "reaper.ImGui_Col_PlotLinesHovered",
	"scope": "lua",
	"body": "reaper.ImGui_Col_PlotLinesHovered()\n\n",
	"description": ""
	},

	"ImGui_Col_PopupBg lua": {
	"prefix": "reaper.ImGui_Col_PopupBg",
	"scope": "lua",
	"body": "reaper.ImGui_Col_PopupBg()\n\n",
	"description": "Background of popups, menus, tooltips windows.\n\n"
	},

	"ImGui_Col_ResizeGrip lua": {
	"prefix": "reaper.ImGui_Col_ResizeGrip",
	"scope": "lua",
	"body": "reaper.ImGui_Col_ResizeGrip()\n\n",
	"description": "Resize grip in lower-right and lower-left corners of windows.\n\n"
	},

	"ImGui_Col_ResizeGripActive lua": {
	"prefix": "reaper.ImGui_Col_ResizeGripActive",
	"scope": "lua",
	"body": "reaper.ImGui_Col_ResizeGripActive()\n\n",
	"description": ""
	},

	"ImGui_Col_ResizeGripHovered lua": {
	"prefix": "reaper.ImGui_Col_ResizeGripHovered",
	"scope": "lua",
	"body": "reaper.ImGui_Col_ResizeGripHovered()\n\n",
	"description": ""
	},

	"ImGui_Col_ScrollbarBg lua": {
	"prefix": "reaper.ImGui_Col_ScrollbarBg",
	"scope": "lua",
	"body": "reaper.ImGui_Col_ScrollbarBg()\n\n",
	"description": ""
	},

	"ImGui_Col_ScrollbarGrab lua": {
	"prefix": "reaper.ImGui_Col_ScrollbarGrab",
	"scope": "lua",
	"body": "reaper.ImGui_Col_ScrollbarGrab()\n\n",
	"description": ""
	},

	"ImGui_Col_ScrollbarGrabActive lua": {
	"prefix": "reaper.ImGui_Col_ScrollbarGrabActive",
	"scope": "lua",
	"body": "reaper.ImGui_Col_ScrollbarGrabActive()\n\n",
	"description": ""
	},

	"ImGui_Col_ScrollbarGrabHovered lua": {
	"prefix": "reaper.ImGui_Col_ScrollbarGrabHovered",
	"scope": "lua",
	"body": "reaper.ImGui_Col_ScrollbarGrabHovered()\n\n",
	"description": ""
	},

	"ImGui_Col_Separator lua": {
	"prefix": "reaper.ImGui_Col_Separator",
	"scope": "lua",
	"body": "reaper.ImGui_Col_Separator()\n\n",
	"description": ""
	},

	"ImGui_Col_SeparatorActive lua": {
	"prefix": "reaper.ImGui_Col_SeparatorActive",
	"scope": "lua",
	"body": "reaper.ImGui_Col_SeparatorActive()\n\n",
	"description": ""
	},

	"ImGui_Col_SeparatorHovered lua": {
	"prefix": "reaper.ImGui_Col_SeparatorHovered",
	"scope": "lua",
	"body": "reaper.ImGui_Col_SeparatorHovered()\n\n",
	"description": ""
	},

	"ImGui_Col_SliderGrab lua": {
	"prefix": "reaper.ImGui_Col_SliderGrab",
	"scope": "lua",
	"body": "reaper.ImGui_Col_SliderGrab()\n\n",
	"description": ""
	},

	"ImGui_Col_SliderGrabActive lua": {
	"prefix": "reaper.ImGui_Col_SliderGrabActive",
	"scope": "lua",
	"body": "reaper.ImGui_Col_SliderGrabActive()\n\n",
	"description": ""
	},

	"ImGui_Col_Tab lua": {
	"prefix": "reaper.ImGui_Col_Tab",
	"scope": "lua",
	"body": "reaper.ImGui_Col_Tab()\n\n",
	"description": "TabItem in a TabBar\n\n"
	},

	"ImGui_Col_TabActive lua": {
	"prefix": "reaper.ImGui_Col_TabActive",
	"scope": "lua",
	"body": "reaper.ImGui_Col_TabActive()\n\n",
	"description": ""
	},

	"ImGui_Col_TabHovered lua": {
	"prefix": "reaper.ImGui_Col_TabHovered",
	"scope": "lua",
	"body": "reaper.ImGui_Col_TabHovered()\n\n",
	"description": ""
	},

	"ImGui_Col_TabUnfocused lua": {
	"prefix": "reaper.ImGui_Col_TabUnfocused",
	"scope": "lua",
	"body": "reaper.ImGui_Col_TabUnfocused()\n\n",
	"description": ""
	},

	"ImGui_Col_TabUnfocusedActive lua": {
	"prefix": "reaper.ImGui_Col_TabUnfocusedActive",
	"scope": "lua",
	"body": "reaper.ImGui_Col_TabUnfocusedActive()\n\n",
	"description": ""
	},

	"ImGui_Col_TableBorderLight lua": {
	"prefix": "reaper.ImGui_Col_TableBorderLight",
	"scope": "lua",
	"body": "reaper.ImGui_Col_TableBorderLight()\n\n",
	"description": "Table inner borders (prefer using Alpha=1.0 here).\n\n"
	},

	"ImGui_Col_TableBorderStrong lua": {
	"prefix": "reaper.ImGui_Col_TableBorderStrong",
	"scope": "lua",
	"body": "reaper.ImGui_Col_TableBorderStrong()\n\n",
	"description": "Table outer and header borders (prefer using Alpha=1.0 here).\n\n"
	},

	"ImGui_Col_TableHeaderBg lua": {
	"prefix": "reaper.ImGui_Col_TableHeaderBg",
	"scope": "lua",
	"body": "reaper.ImGui_Col_TableHeaderBg()\n\n",
	"description": "Table header background.\n\n"
	},

	"ImGui_Col_TableRowBg lua": {
	"prefix": "reaper.ImGui_Col_TableRowBg",
	"scope": "lua",
	"body": "reaper.ImGui_Col_TableRowBg()\n\n",
	"description": "Table row background (even rows).\n\n"
	},

	"ImGui_Col_TableRowBgAlt lua": {
	"prefix": "reaper.ImGui_Col_TableRowBgAlt",
	"scope": "lua",
	"body": "reaper.ImGui_Col_TableRowBgAlt()\n\n",
	"description": "Table row background (odd rows).\n\n"
	},

	"ImGui_Col_Text lua": {
	"prefix": "reaper.ImGui_Col_Text",
	"scope": "lua",
	"body": "reaper.ImGui_Col_Text()\n\n",
	"description": ""
	},

	"ImGui_Col_TextDisabled lua": {
	"prefix": "reaper.ImGui_Col_TextDisabled",
	"scope": "lua",
	"body": "reaper.ImGui_Col_TextDisabled()\n\n",
	"description": ""
	},

	"ImGui_Col_TextSelectedBg lua": {
	"prefix": "reaper.ImGui_Col_TextSelectedBg",
	"scope": "lua",
	"body": "reaper.ImGui_Col_TextSelectedBg()\n\n",
	"description": ""
	},

	"ImGui_Col_TitleBg lua": {
	"prefix": "reaper.ImGui_Col_TitleBg",
	"scope": "lua",
	"body": "reaper.ImGui_Col_TitleBg()\n\n",
	"description": ""
	},

	"ImGui_Col_TitleBgActive lua": {
	"prefix": "reaper.ImGui_Col_TitleBgActive",
	"scope": "lua",
	"body": "reaper.ImGui_Col_TitleBgActive()\n\n",
	"description": ""
	},

	"ImGui_Col_TitleBgCollapsed lua": {
	"prefix": "reaper.ImGui_Col_TitleBgCollapsed",
	"scope": "lua",
	"body": "reaper.ImGui_Col_TitleBgCollapsed()\n\n",
	"description": ""
	},

	"ImGui_Col_WindowBg lua": {
	"prefix": "reaper.ImGui_Col_WindowBg",
	"scope": "lua",
	"body": "reaper.ImGui_Col_WindowBg()\n\n",
	"description": "Background of normal windows. See also WindowFlags_NoBackground.\n\n"
	},

	"ImGui_CollapsingHeader lua": {
	"prefix": "reaper.ImGui_CollapsingHeader",
	"scope": "lua",
	"body": "retval, p_visible = reaper.ImGui_CollapsingHeader(${1:ctx}, ${2:label}, ${3:p_visible}, ${4:optional_flagsIn})$0",
	"description": "Returns true when opened but do not indent nor push into the ID stack\n(because of the TreeNodeFlags_NoTreePushOnOpen flag).\nThis is basically the same as calling TreeNode(label, TreeNodeFlags_CollapsingHeader).\nYou can remove the _NoTreePushOnOpen flag if you want behavior closer to normal\nTreeNode.\nWhen 'visible' is provided: if 'true' display an additional small close button\non upper right of the header which will set the bool to false when clicked,\nif 'false' don't display the header.\n\n"
	},

	"ImGui_ColorButton lua": {
	"prefix": "reaper.ImGui_ColorButton",
	"scope": "lua",
	"body": "reaper.ImGui_ColorButton(${1:ctx}, ${2:desc_id}, ${3:col_rgba}, ${4:optional_flagsIn}, ${5:optional_size_wIn}, ${6:optional_size_hIn})$0",
	"description": "Display a color square/button, hover for details, return true when pressed.\nColor is in 0xRRGGBBAA or, if ColorEditFlags_NoAlpha is set, 0xRRGGBB.\n\n"
	},

	"ImGui_ColorConvertDouble4ToU32 lua": {
	"prefix": "reaper.ImGui_ColorConvertDouble4ToU32",
	"scope": "lua",
	"body": "reaper.ImGui_ColorConvertDouble4ToU32(${1:r}, ${2:g}, ${3:b}, ${4:a})$0",
	"description": "Pack 0..1 RGBA values into a 32-bit integer (0xRRGGBBAA).\n\n"
	},

	"ImGui_ColorConvertHSVtoRGB lua": {
	"prefix": "reaper.ImGui_ColorConvertHSVtoRGB",
	"scope": "lua",
	"body": "r, g, b = reaper.ImGui_ColorConvertHSVtoRGB(${1:h}, ${2:s}, ${3:v})$0",
	"description": "Convert HSV values (0..1) into RGB (0..1).\n\n"
	},

	"ImGui_ColorConvertNative lua": {
	"prefix": "reaper.ImGui_ColorConvertNative",
	"scope": "lua",
	"body": "reaper.ImGui_ColorConvertNative(${1:rgb})$0",
	"description": "Convert a native color coming from REAPER or 0xRRGGBB to native.\nThis swaps the red and blue channels on Windows.\n\n"
	},

	"ImGui_ColorConvertRGBtoHSV lua": {
	"prefix": "reaper.ImGui_ColorConvertRGBtoHSV",
	"scope": "lua",
	"body": "h, s, v = reaper.ImGui_ColorConvertRGBtoHSV(${1:r}, ${2:g}, ${3:b})$0",
	"description": "Convert RGB values (0..1) into HSV (0..1).\n\n"
	},

	"ImGui_ColorConvertU32ToDouble4 lua": {
	"prefix": "reaper.ImGui_ColorConvertU32ToDouble4",
	"scope": "lua",
	"body": "r, g, b, a = reaper.ImGui_ColorConvertU32ToDouble4(${1:rgba})$0",
	"description": "Unpack a 32-bit integer (0xRRGGBBAA) into separate RGBA values (0..1).\n\n"
	},

	"ImGui_ColorEdit3 lua": {
	"prefix": "reaper.ImGui_ColorEdit3",
	"scope": "lua",
	"body": "retval, col_rgb = reaper.ImGui_ColorEdit3(${1:ctx}, ${2:label}, ${3:col_rgb}, ${4:optional_flagsIn})$0",
	"description": "Color is in 0xXXRRGGBB. XX is ignored and will not be modified.\n\n"
	},

	"ImGui_ColorEdit4 lua": {
	"prefix": "reaper.ImGui_ColorEdit4",
	"scope": "lua",
	"body": "retval, col_rgba = reaper.ImGui_ColorEdit4(${1:ctx}, ${2:label}, ${3:col_rgba}, ${4:optional_flagsIn})$0",
	"description": "Color is in 0xRRGGBBAA or, if ColorEditFlags_NoAlpha is set, 0xXXRRGGBB\n(XX is ignored and will not be modified).\n\n"
	},

	"ImGui_ColorEditFlags_AlphaBar lua": {
	"prefix": "reaper.ImGui_ColorEditFlags_AlphaBar",
	"scope": "lua",
	"body": "reaper.ImGui_ColorEditFlags_AlphaBar()\n\n",
	"description": "ColorEdit, ColorPicker: show vertical alpha bar/gradient in picker.\n\n"
	},

	"ImGui_ColorEditFlags_AlphaPreview lua": {
	"prefix": "reaper.ImGui_ColorEditFlags_AlphaPreview",
	"scope": "lua",
	"body": "reaper.ImGui_ColorEditFlags_AlphaPreview()\n\n",
	"description": "ColorEdit, ColorPicker, ColorButton: display preview as a transparent color\nover a checkerboard, instead of opaque.\n\n"
	},

	"ImGui_ColorEditFlags_AlphaPreviewHalf lua": {
	"prefix": "reaper.ImGui_ColorEditFlags_AlphaPreviewHalf",
	"scope": "lua",
	"body": "reaper.ImGui_ColorEditFlags_AlphaPreviewHalf()\n\n",
	"description": "ColorEdit, ColorPicker, ColorButton: display half opaque / half checkerboard,\ninstead of opaque.\n\n"
	},

	"ImGui_ColorEditFlags_DisplayHSV lua": {
	"prefix": "reaper.ImGui_ColorEditFlags_DisplayHSV",
	"scope": "lua",
	"body": "reaper.ImGui_ColorEditFlags_DisplayHSV()\n\n",
	"description": "ColorEdit: override _display_ type to HSV. ColorPicker:\nselect any combination using one or more of RGB/HSV/Hex.\n\n"
	},

	"ImGui_ColorEditFlags_DisplayHex lua": {
	"prefix": "reaper.ImGui_ColorEditFlags_DisplayHex",
	"scope": "lua",
	"body": "reaper.ImGui_ColorEditFlags_DisplayHex()\n\n",
	"description": "ColorEdit: override _display_ type to Hex. ColorPicker:\nselect any combination using one or more of RGB/HSV/Hex.\n\n"
	},

	"ImGui_ColorEditFlags_DisplayRGB lua": {
	"prefix": "reaper.ImGui_ColorEditFlags_DisplayRGB",
	"scope": "lua",
	"body": "reaper.ImGui_ColorEditFlags_DisplayRGB()\n\n",
	"description": "ColorEdit: override _display_ type to RGB. ColorPicker:\nselect any combination using one or more of RGB/HSV/Hex.\n\n"
	},

	"ImGui_ColorEditFlags_Float lua": {
	"prefix": "reaper.ImGui_ColorEditFlags_Float",
	"scope": "lua",
	"body": "reaper.ImGui_ColorEditFlags_Float()\n\n",
	"description": "ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0.0..1.0\nfloats instead of 0..255 integers. No round-trip of value via integers.\n\n"
	},

	"ImGui_ColorEditFlags_InputHSV lua": {
	"prefix": "reaper.ImGui_ColorEditFlags_InputHSV",
	"scope": "lua",
	"body": "reaper.ImGui_ColorEditFlags_InputHSV()\n\n",
	"description": "ColorEdit, ColorPicker: input and output data in HSV format.\n\n"
	},

	"ImGui_ColorEditFlags_InputRGB lua": {
	"prefix": "reaper.ImGui_ColorEditFlags_InputRGB",
	"scope": "lua",
	"body": "reaper.ImGui_ColorEditFlags_InputRGB()\n\n",
	"description": "ColorEdit, ColorPicker: input and output data in RGB format.\n\n"
	},

	"ImGui_ColorEditFlags_NoAlpha lua": {
	"prefix": "reaper.ImGui_ColorEditFlags_NoAlpha",
	"scope": "lua",
	"body": "reaper.ImGui_ColorEditFlags_NoAlpha()\n\n",
	"description": "ColorEdit, ColorPicker, ColorButton: ignore Alpha component\n(will only read 3 components from the input pointer).\n\n"
	},

	"ImGui_ColorEditFlags_NoBorder lua": {
	"prefix": "reaper.ImGui_ColorEditFlags_NoBorder",
	"scope": "lua",
	"body": "reaper.ImGui_ColorEditFlags_NoBorder()\n\n",
	"description": "ColorButton: disable border (which is enforced by default).\n\n"
	},

	"ImGui_ColorEditFlags_NoDragDrop lua": {
	"prefix": "reaper.ImGui_ColorEditFlags_NoDragDrop",
	"scope": "lua",
	"body": "reaper.ImGui_ColorEditFlags_NoDragDrop()\n\n",
	"description": "ColorEdit: disable drag and drop target. ColorButton: disable drag and drop source.\n\n"
	},

	"ImGui_ColorEditFlags_NoInputs lua": {
	"prefix": "reaper.ImGui_ColorEditFlags_NoInputs",
	"scope": "lua",
	"body": "reaper.ImGui_ColorEditFlags_NoInputs()\n\n",
	"description": "ColorEdit, ColorPicker: disable inputs sliders/text widgets\n(e.g. to show only the small preview color square).\n\n"
	},

	"ImGui_ColorEditFlags_NoLabel lua": {
	"prefix": "reaper.ImGui_ColorEditFlags_NoLabel",
	"scope": "lua",
	"body": "reaper.ImGui_ColorEditFlags_NoLabel()\n\n",
	"description": "ColorEdit, ColorPicker: disable display of inline text label\n(the label is still forwarded to the tooltip and picker).\n\n"
	},

	"ImGui_ColorEditFlags_NoOptions lua": {
	"prefix": "reaper.ImGui_ColorEditFlags_NoOptions",
	"scope": "lua",
	"body": "reaper.ImGui_ColorEditFlags_NoOptions()\n\n",
	"description": "ColorEdit: disable toggling options menu when right-clicking on inputs/small preview.\n\n"
	},

	"ImGui_ColorEditFlags_NoPicker lua": {
	"prefix": "reaper.ImGui_ColorEditFlags_NoPicker",
	"scope": "lua",
	"body": "reaper.ImGui_ColorEditFlags_NoPicker()\n\n",
	"description": "ColorEdit: disable picker when clicking on color square.\n\n"
	},

	"ImGui_ColorEditFlags_NoSidePreview lua": {
	"prefix": "reaper.ImGui_ColorEditFlags_NoSidePreview",
	"scope": "lua",
	"body": "reaper.ImGui_ColorEditFlags_NoSidePreview()\n\n",
	"description": "ColorPicker: disable bigger color preview on right side of the picker,\nuse small color square preview instead.\n\n"
	},

	"ImGui_ColorEditFlags_NoSmallPreview lua": {
	"prefix": "reaper.ImGui_ColorEditFlags_NoSmallPreview",
	"scope": "lua",
	"body": "reaper.ImGui_ColorEditFlags_NoSmallPreview()\n\n",
	"description": "ColorEdit, ColorPicker: disable color square preview next to the inputs.\n(e.g. to show only the inputs).\n\n"
	},

	"ImGui_ColorEditFlags_NoTooltip lua": {
	"prefix": "reaper.ImGui_ColorEditFlags_NoTooltip",
	"scope": "lua",
	"body": "reaper.ImGui_ColorEditFlags_NoTooltip()\n\n",
	"description": "ColorEdit, ColorPicker, ColorButton: disable tooltip when hovering the preview.\n\n"
	},

	"ImGui_ColorEditFlags_None lua": {
	"prefix": "reaper.ImGui_ColorEditFlags_None",
	"scope": "lua",
	"body": "reaper.ImGui_ColorEditFlags_None()\n\n",
	"description": ""
	},

	"ImGui_ColorEditFlags_PickerHueBar lua": {
	"prefix": "reaper.ImGui_ColorEditFlags_PickerHueBar",
	"scope": "lua",
	"body": "reaper.ImGui_ColorEditFlags_PickerHueBar()\n\n",
	"description": "ColorPicker: bar for Hue, rectangle for Sat/Value.\n\n"
	},

	"ImGui_ColorEditFlags_PickerHueWheel lua": {
	"prefix": "reaper.ImGui_ColorEditFlags_PickerHueWheel",
	"scope": "lua",
	"body": "reaper.ImGui_ColorEditFlags_PickerHueWheel()\n\n",
	"description": "ColorPicker: wheel for Hue, triangle for Sat/Value.\n\n"
	},

	"ImGui_ColorEditFlags_Uint8 lua": {
	"prefix": "reaper.ImGui_ColorEditFlags_Uint8",
	"scope": "lua",
	"body": "reaper.ImGui_ColorEditFlags_Uint8()\n\n",
	"description": "ColorEdit, ColorPicker, ColorButton: _display_ values formatted as 0..255.\n\n"
	},

	"ImGui_ColorPicker3 lua": {
	"prefix": "reaper.ImGui_ColorPicker3",
	"scope": "lua",
	"body": "retval, col_rgb = reaper.ImGui_ColorPicker3(${1:ctx}, ${2:label}, ${3:col_rgb}, ${4:optional_flagsIn})$0",
	"description": "Color is in 0xXXRRGGBB. XX is ignored and will not be modified.\n\n"
	},

	"ImGui_ColorPicker4 lua": {
	"prefix": "reaper.ImGui_ColorPicker4",
	"scope": "lua",
	"body": "retval, col_rgba = reaper.ImGui_ColorPicker4(${1:ctx}, ${2:label}, ${3:col_rgba}, ${4:optional_flagsIn}, ${5:optional_ref_colIn})$0",
	"description": ""
	},

	"ImGui_Combo lua": {
	"prefix": "reaper.ImGui_Combo",
	"scope": "lua",
	"body": "retval, current_item = reaper.ImGui_Combo(${1:ctx}, ${2:label}, ${3:current_item}, ${4:items}, ${5:optional_popup_max_height_in_itemsIn})$0",
	"description": "Helper over BeginCombo/EndCombo for convenience purpose. Each item must be\nnull-terminated (requires REAPER v6.44 or newer for EEL and Lua).\n\n"
	},

	"ImGui_ComboFlags_HeightLarge lua": {
	"prefix": "reaper.ImGui_ComboFlags_HeightLarge",
	"scope": "lua",
	"body": "reaper.ImGui_ComboFlags_HeightLarge()\n\n",
	"description": "Max ~20 items visible.\n\n"
	},

	"ImGui_ComboFlags_HeightLargest lua": {
	"prefix": "reaper.ImGui_ComboFlags_HeightLargest",
	"scope": "lua",
	"body": "reaper.ImGui_ComboFlags_HeightLargest()\n\n",
	"description": "As many fitting items as possible.\n\n"
	},

	"ImGui_ComboFlags_HeightRegular lua": {
	"prefix": "reaper.ImGui_ComboFlags_HeightRegular",
	"scope": "lua",
	"body": "reaper.ImGui_ComboFlags_HeightRegular()\n\n",
	"description": "Max ~8 items visible (default).\n\n"
	},

	"ImGui_ComboFlags_HeightSmall lua": {
	"prefix": "reaper.ImGui_ComboFlags_HeightSmall",
	"scope": "lua",
	"body": "reaper.ImGui_ComboFlags_HeightSmall()\n\n",
	"description": "Max ~4 items visible. Tip: If you want your combo popup to be a specific size\nyou can use SetNextWindowSizeConstraints prior to calling BeginCombo.\n\n"
	},

	"ImGui_ComboFlags_NoArrowButton lua": {
	"prefix": "reaper.ImGui_ComboFlags_NoArrowButton",
	"scope": "lua",
	"body": "reaper.ImGui_ComboFlags_NoArrowButton()\n\n",
	"description": "Display on the preview box without the square arrow button.\n\n"
	},

	"ImGui_ComboFlags_NoPreview lua": {
	"prefix": "reaper.ImGui_ComboFlags_NoPreview",
	"scope": "lua",
	"body": "reaper.ImGui_ComboFlags_NoPreview()\n\n",
	"description": "Display only a square arrow button.\n\n"
	},

	"ImGui_ComboFlags_None lua": {
	"prefix": "reaper.ImGui_ComboFlags_None",
	"scope": "lua",
	"body": "reaper.ImGui_ComboFlags_None()\n\n",
	"description": ""
	},

	"ImGui_ComboFlags_PopupAlignLeft lua": {
	"prefix": "reaper.ImGui_ComboFlags_PopupAlignLeft",
	"scope": "lua",
	"body": "reaper.ImGui_ComboFlags_PopupAlignLeft()\n\n",
	"description": "Align the popup toward the left by default.\n\n"
	},

	"ImGui_Cond_Always lua": {
	"prefix": "reaper.ImGui_Cond_Always",
	"scope": "lua",
	"body": "reaper.ImGui_Cond_Always()\n\n",
	"description": "No condition (always set the variable).\n\n"
	},

	"ImGui_Cond_Appearing lua": {
	"prefix": "reaper.ImGui_Cond_Appearing",
	"scope": "lua",
	"body": "reaper.ImGui_Cond_Appearing()\n\n",
	"description": "Set the variable if the object/window is appearing after being\nhidden/inactive (or the first time).\n\n"
	},

	"ImGui_Cond_FirstUseEver lua": {
	"prefix": "reaper.ImGui_Cond_FirstUseEver",
	"scope": "lua",
	"body": "reaper.ImGui_Cond_FirstUseEver()\n\n",
	"description": "Set the variable if the object/window has no persistently saved data\n(no entry in .ini file).\n\n"
	},

	"ImGui_Cond_Once lua": {
	"prefix": "reaper.ImGui_Cond_Once",
	"scope": "lua",
	"body": "reaper.ImGui_Cond_Once()\n\n",
	"description": "Set the variable once per runtime session (only the first call will succeed).\n\n"
	},

	"ImGui_ConfigFlags_DockingEnable lua": {
	"prefix": "reaper.ImGui_ConfigFlags_DockingEnable",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigFlags_DockingEnable()\n\n",
	"description": "[BETA] Enable docking functionality.\n\n"
	},

	"ImGui_ConfigFlags_NavEnableKeyboard lua": {
	"prefix": "reaper.ImGui_ConfigFlags_NavEnableKeyboard",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigFlags_NavEnableKeyboard()\n\n",
	"description": "Master keyboard navigation enable flag.\n\n"
	},

	"ImGui_ConfigFlags_NavEnableSetMousePos lua": {
	"prefix": "reaper.ImGui_ConfigFlags_NavEnableSetMousePos",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigFlags_NavEnableSetMousePos()\n\n",
	"description": "Instruct navigation to move the mouse cursor.\n\n"
	},

	"ImGui_ConfigFlags_NavNoCaptureKeyboard lua": {
	"prefix": "reaper.ImGui_ConfigFlags_NavNoCaptureKeyboard",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigFlags_NavNoCaptureKeyboard()\n\n",
	"description": "Instruct navigation to not capture global keyboard input when\nConfigFlags_NavEnableKeyboard is set (see SetNextFrameWantCaptureKeyboard).\n\n"
	},

	"ImGui_ConfigFlags_NoMouse lua": {
	"prefix": "reaper.ImGui_ConfigFlags_NoMouse",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigFlags_NoMouse()\n\n",
	"description": "Instruct imgui to ignore mouse position/buttons.\n\n"
	},

	"ImGui_ConfigFlags_NoMouseCursorChange lua": {
	"prefix": "reaper.ImGui_ConfigFlags_NoMouseCursorChange",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigFlags_NoMouseCursorChange()\n\n",
	"description": "Instruct backend to not alter mouse cursor shape and visibility.\n\n"
	},

	"ImGui_ConfigFlags_NoSavedSettings lua": {
	"prefix": "reaper.ImGui_ConfigFlags_NoSavedSettings",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigFlags_NoSavedSettings()\n\n",
	"description": "Disable state restoration and persistence for the whole context.\n\n"
	},

	"ImGui_ConfigFlags_None lua": {
	"prefix": "reaper.ImGui_ConfigFlags_None",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigFlags_None()\n\n",
	"description": ""
	},

	"ImGui_ConfigVar_DockingNoSplit lua": {
	"prefix": "reaper.ImGui_ConfigVar_DockingNoSplit",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigVar_DockingNoSplit()\n\n",
	"description": "Simplified docking mode: disable window splitting, so docking is limited to\nmerging multiple windows together into tab-bars.\n\n"
	},

	"ImGui_ConfigVar_DockingTransparentPayload lua": {
	"prefix": "reaper.ImGui_ConfigVar_DockingTransparentPayload",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigVar_DockingTransparentPayload()\n\n",
	"description": "Make window or viewport transparent when docking and only display docking\nboxes on the target viewport.\n\n"
	},

	"ImGui_ConfigVar_DockingWithShift lua": {
	"prefix": "reaper.ImGui_ConfigVar_DockingWithShift",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigVar_DockingWithShift()\n\n",
	"description": "Enable docking with holding Shift key\n(reduce visual noise, allows dropping in wider space\n\n"
	},

	"ImGui_ConfigVar_DragClickToInputText lua": {
	"prefix": "reaper.ImGui_ConfigVar_DragClickToInputText",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigVar_DragClickToInputText()\n\n",
	"description": "Enable turning DragXXX widgets into text input with a simple mouse\nclick-release (without moving). Not desirable on devices without a keyboard.\n\n"
	},

	"ImGui_ConfigVar_Flags lua": {
	"prefix": "reaper.ImGui_ConfigVar_Flags",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigVar_Flags()\n\n",
	"description": "ConfigFlags_*\n\n"
	},

	"ImGui_ConfigVar_HoverDelayNormal lua": {
	"prefix": "reaper.ImGui_ConfigVar_HoverDelayNormal",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigVar_HoverDelayNormal()\n\n",
	"description": "Delay on hovering before IsItemHovered(HoveredFlags_DelayNormal) returns true.\n\n"
	},

	"ImGui_ConfigVar_HoverDelayShort lua": {
	"prefix": "reaper.ImGui_ConfigVar_HoverDelayShort",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigVar_HoverDelayShort()\n\n",
	"description": "Delay on hovering before IsItemHovered(HoveredFlags_DelayShort) returns true.\n\n"
	},

	"ImGui_ConfigVar_InputTextCursorBlink lua": {
	"prefix": "reaper.ImGui_ConfigVar_InputTextCursorBlink",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigVar_InputTextCursorBlink()\n\n",
	"description": "Enable blinking cursor (optional as some users consider it to be distracting).\n\n"
	},

	"ImGui_ConfigVar_InputTextEnterKeepActive lua": {
	"prefix": "reaper.ImGui_ConfigVar_InputTextEnterKeepActive",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigVar_InputTextEnterKeepActive()\n\n",
	"description": "Pressing Enter will keep item active and select contents (single-line only).\n\n"
	},

	"ImGui_ConfigVar_InputTrickleEventQueue lua": {
	"prefix": "reaper.ImGui_ConfigVar_InputTrickleEventQueue",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigVar_InputTrickleEventQueue()\n\n",
	"description": "Enable input queue trickling: some types of events submitted during the same\nframe (e.g. button down + up) will be spread over multiple frames, improving\ninteractions with low framerates.\n\n"
	},

	"ImGui_ConfigVar_KeyRepeatDelay lua": {
	"prefix": "reaper.ImGui_ConfigVar_KeyRepeatDelay",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigVar_KeyRepeatDelay()\n\n",
	"description": "When holding a key/button, time before it starts repeating, in seconds\n(for buttons in Repeat mode, etc.).\n\n"
	},

	"ImGui_ConfigVar_KeyRepeatRate lua": {
	"prefix": "reaper.ImGui_ConfigVar_KeyRepeatRate",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigVar_KeyRepeatRate()\n\n",
	"description": "When holding a key/button, rate at which it repeats, in seconds.\n\n"
	},

	"ImGui_ConfigVar_MacOSXBehaviors lua": {
	"prefix": "reaper.ImGui_ConfigVar_MacOSXBehaviors",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigVar_MacOSXBehaviors()\n\n",
	"description": "OS X style: Text editing cursor movement using Alt instead of Ctrl, Shortcuts\nusing Cmd/Super instead of Ctrl, Line/Text Start and End using Cmd+Arrows\ninstead of Home/End, Double click selects by word instead of selecting whole\ntext, Multi-selection in lists uses Cmd/Super instead of Ctrl.\n\n"
	},

	"ImGui_ConfigVar_MouseDoubleClickMaxDist lua": {
	"prefix": "reaper.ImGui_ConfigVar_MouseDoubleClickMaxDist",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigVar_MouseDoubleClickMaxDist()\n\n",
	"description": "Distance threshold to stay in to validate a double-click, in pixels.\n\n"
	},

	"ImGui_ConfigVar_MouseDoubleClickTime lua": {
	"prefix": "reaper.ImGui_ConfigVar_MouseDoubleClickTime",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigVar_MouseDoubleClickTime()\n\n",
	"description": "Time for a double-click, in seconds.\n\n"
	},

	"ImGui_ConfigVar_MouseDragThreshold lua": {
	"prefix": "reaper.ImGui_ConfigVar_MouseDragThreshold",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigVar_MouseDragThreshold()\n\n",
	"description": "Distance threshold before considering we are dragging.\n\n"
	},

	"ImGui_ConfigVar_ViewportsNoDecoration lua": {
	"prefix": "reaper.ImGui_ConfigVar_ViewportsNoDecoration",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigVar_ViewportsNoDecoration()\n\n",
	"description": "Disable default OS window decoration. Enabling decoration can create\nsubsequent issues at OS levels (e.g. minimum window size).\n\n"
	},

	"ImGui_ConfigVar_WindowsMoveFromTitleBarOnly lua": {
	"prefix": "reaper.ImGui_ConfigVar_WindowsMoveFromTitleBarOnly",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigVar_WindowsMoveFromTitleBarOnly()\n\n",
	"description": "Enable allowing to move windows only when clicking on their title bar.\nDoes not apply to windows without a title bar.\n\n"
	},

	"ImGui_ConfigVar_WindowsResizeFromEdges lua": {
	"prefix": "reaper.ImGui_ConfigVar_WindowsResizeFromEdges",
	"scope": "lua",
	"body": "reaper.ImGui_ConfigVar_WindowsResizeFromEdges()\n\n",
	"description": "Enable resizing of windows from their edges and from the lower-left corner.\n\n"
	},

	"ImGui_CreateContext lua": {
	"prefix": "reaper.ImGui_CreateContext",
	"scope": "lua",
	"body": "reaper.ImGui_CreateContext(${1:label}, ${2:optional_config_flagsIn})$0",
	"description": "Create a new ReaImGui context.\nThe context will remain valid as long as it is used in each defer cycle.\nThe label is used for the tab text when windows are docked in REAPER\nand also as a unique identifier for storing settings.\n\n"
	},

	"ImGui_CreateDrawListSplitter lua": {
	"prefix": "reaper.ImGui_CreateDrawListSplitter",
	"scope": "lua",
	"body": "reaper.ImGui_CreateDrawListSplitter(${1:draw_list})$0",
	"description": ""
	},

	"ImGui_CreateFont lua": {
	"prefix": "reaper.ImGui_CreateFont",
	"scope": "lua",
	"body": "reaper.ImGui_CreateFont(${1:family_or_file}, ${2:size}, ${3:optional_flagsIn})$0",
	"description": "Load a font matching a font family name or from a font file.\nThe font will remain valid while it's attached to a context. See Attach.\nThe family name can be an installed font or one of the generic fonts:\nsans-serif, serif, monospace, cursive, fantasy.\nIf 'family_or_file' specifies a path to a font file (contains a / or \):\n- The first byte of 'flags' is used as the font index within the file\n- The font styles in 'flags' are simulated by the font renderer\n\n"
	},

	"ImGui_CreateImage lua": {
	"prefix": "reaper.ImGui_CreateImage",
	"scope": "lua",
	"body": "reaper.ImGui_CreateImage(${1:file}, ${2:optional_flagsIn})$0",
	"description": "The returned object is valid as long as it is used in each defer cycle\nunless attached to a context (see Attach).\n('flags' currently unused and reserved for future expansion)\n\n"
	},

	"ImGui_CreateImageFromMem lua": {
	"prefix": "reaper.ImGui_CreateImageFromMem",
	"scope": "lua",
	"body": "reaper.ImGui_CreateImageFromMem(${1:data})$0",
	"description": "Requires REAPER v6.44 or newer for EEL and Lua. Load from a file using\nCreateImage or explicitely specify data_sz if supporting older versions.\n\n"
	},

	"ImGui_CreateImageSet lua": {
	"prefix": "reaper.ImGui_CreateImageSet",
	"scope": "lua",
	"body": "ImGui_ImageSet = reaper.ImGui_CreateImageSet()\n\n",
	"description": ""
	},

	"ImGui_CreateListClipper lua": {
	"prefix": "reaper.ImGui_CreateListClipper",
	"scope": "lua",
	"body": "reaper.ImGui_CreateListClipper(${1:ctx})$0",
	"description": "The returned clipper object is only valid for the given context and is valid\nas long as it is used in each defer cycle unless attached (see Attach).\n\n"
	},

	"ImGui_CreateTextFilter lua": {
	"prefix": "reaper.ImGui_CreateTextFilter",
	"scope": "lua",
	"body": "reaper.ImGui_CreateTextFilter(${1:optional_default_filterIn})$0",
	"description": "Valid while used every frame unless attached to a context (see Attach).\n\n"
	},

	"ImGui_DebugTextEncoding lua": {
	"prefix": "reaper.ImGui_DebugTextEncoding",
	"scope": "lua",
	"body": "reaper.ImGui_DebugTextEncoding(${1:ctx}, ${2:text})$0",
	"description": "Helper tool to diagnose between text encoding issues and font loading issues.\nPass your UTF-8 string and verify that there are correct.\n\n"
	},

	"ImGui_DestroyContext lua": {
	"prefix": "reaper.ImGui_DestroyContext",
	"scope": "lua",
	"body": "reaper.ImGui_DestroyContext(${1:ctx})$0",
	"description": "Free the resources used by a context.\nCalling this function is usually not required as all ReaImGui objects are\nautomatically garbage-collected when unused.\n\n"
	},

	"ImGui_Detach lua": {
	"prefix": "reaper.ImGui_Detach",
	"scope": "lua",
	"body": "reaper.ImGui_Detach(${1:ImGui_Context_obj})$0",
	"description": "Unlink the object's lifetime. Unattached objects are automatically destroyed\nwhen left unused. You may check whether an object has been destroyed using\nValidatePtr.\n\n"
	},

	"ImGui_Dir_Down lua": {
	"prefix": "reaper.ImGui_Dir_Down",
	"scope": "lua",
	"body": "reaper.ImGui_Dir_Down()\n\n",
	"description": ""
	},

	"ImGui_Dir_Left lua": {
	"prefix": "reaper.ImGui_Dir_Left",
	"scope": "lua",
	"body": "reaper.ImGui_Dir_Left()\n\n",
	"description": ""
	},

	"ImGui_Dir_None lua": {
	"prefix": "reaper.ImGui_Dir_None",
	"scope": "lua",
	"body": "reaper.ImGui_Dir_None()\n\n",
	"description": ""
	},

	"ImGui_Dir_Right lua": {
	"prefix": "reaper.ImGui_Dir_Right",
	"scope": "lua",
	"body": "reaper.ImGui_Dir_Right()\n\n",
	"description": ""
	},

	"ImGui_Dir_Up lua": {
	"prefix": "reaper.ImGui_Dir_Up",
	"scope": "lua",
	"body": "reaper.ImGui_Dir_Up()\n\n",
	"description": ""
	},

	"ImGui_DragDouble lua": {
	"prefix": "reaper.ImGui_DragDouble",
	"scope": "lua",
	"body": "retval, v = reaper.ImGui_DragDouble(${1:ctx}, ${2:label}, ${3:v}, ${4:optional_v_speedIn}, ${5:optional_v_minIn}, ${6:optional_v_maxIn}, ${7:optional_formatIn}, ${8:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_DragDouble2 lua": {
	"prefix": "reaper.ImGui_DragDouble2",
	"scope": "lua",
	"body": "retval, v1, v2 = reaper.ImGui_DragDouble2(${1:ctx}, ${2:label}, ${3:v1}, ${4:v2}, ${5:optional_v_speedIn}, ${6:optional_v_minIn}, ${7:optional_v_maxIn}, ${8:optional_formatIn}, ${9:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_DragDouble3 lua": {
	"prefix": "reaper.ImGui_DragDouble3",
	"scope": "lua",
	"body": "retval, v1, v2, v3 = reaper.ImGui_DragDouble3(${1:ctx}, ${2:label}, ${3:v1}, ${4:v2}, ${5:v3}, ${6:optional_v_speedIn}, ${7:optional_v_minIn}, ${8:optional_v_maxIn}, ${9:optional_formatIn}, ${10:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_DragDouble4 lua": {
	"prefix": "reaper.ImGui_DragDouble4",
	"scope": "lua",
	"body": "retval, v1, v2, v3, v4 = reaper.ImGui_DragDouble4(${1:ctx}, ${2:label}, ${3:v1}, ${4:v2}, ${5:v3}, ${6:v4}, ${7:optional_v_speedIn}, ${8:optional_v_minIn}, ${9:optional_v_maxIn}, ${10:optional_formatIn}, ${11:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_DragDoubleN lua": {
	"prefix": "reaper.ImGui_DragDoubleN",
	"scope": "lua",
	"body": "reaper.ImGui_DragDoubleN(${1:ctx}, ${2:string_values}, ${3:optional_speedIn}, ${4:optional_minIn}, ${5:optional_maxIn}, ${6:optional_formatIn}, ${7:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_DragDropFlags_AcceptBeforeDelivery lua": {
	"prefix": "reaper.ImGui_DragDropFlags_AcceptBeforeDelivery",
	"scope": "lua",
	"body": "reaper.ImGui_DragDropFlags_AcceptBeforeDelivery()\n\n",
	"description": "AcceptDragDropPayload will returns true even before the mouse button is\nreleased. You can then check GetDragDropPayload/is_delivery to test if the\npayload needs to be delivered.\n\n"
	},

	"ImGui_DragDropFlags_AcceptNoDrawDefaultRect lua": {
	"prefix": "reaper.ImGui_DragDropFlags_AcceptNoDrawDefaultRect",
	"scope": "lua",
	"body": "reaper.ImGui_DragDropFlags_AcceptNoDrawDefaultRect()\n\n",
	"description": "Do not draw the default highlight rectangle when hovering over target.\n\n"
	},

	"ImGui_DragDropFlags_AcceptNoPreviewTooltip lua": {
	"prefix": "reaper.ImGui_DragDropFlags_AcceptNoPreviewTooltip",
	"scope": "lua",
	"body": "reaper.ImGui_DragDropFlags_AcceptNoPreviewTooltip()\n\n",
	"description": "Request hiding the BeginDragDropSource tooltip from the BeginDragDropTarget site.\n\n"
	},

	"ImGui_DragDropFlags_AcceptPeekOnly lua": {
	"prefix": "reaper.ImGui_DragDropFlags_AcceptPeekOnly",
	"scope": "lua",
	"body": "reaper.ImGui_DragDropFlags_AcceptPeekOnly()\n\n",
	"description": "For peeking ahead and inspecting the payload before delivery.\nEquivalent to DragDropFlags_AcceptBeforeDelivery |\nDragDropFlags_AcceptNoDrawDefaultRect.\n\n"
	},

	"ImGui_DragDropFlags_None lua": {
	"prefix": "reaper.ImGui_DragDropFlags_None",
	"scope": "lua",
	"body": "reaper.ImGui_DragDropFlags_None()\n\n",
	"description": ""
	},

	"ImGui_DragDropFlags_SourceAllowNullID lua": {
	"prefix": "reaper.ImGui_DragDropFlags_SourceAllowNullID",
	"scope": "lua",
	"body": "reaper.ImGui_DragDropFlags_SourceAllowNullID()\n\n",
	"description": "Allow items such as Text, Image that have no unique identifier to be used as\ndrag source, by manufacturing a temporary identifier based on their\nwindow-relative position. This is extremely unusual within the dear imgui\necosystem and so we made it explicit.\n\n"
	},

	"ImGui_DragDropFlags_SourceAutoExpirePayload lua": {
	"prefix": "reaper.ImGui_DragDropFlags_SourceAutoExpirePayload",
	"scope": "lua",
	"body": "reaper.ImGui_DragDropFlags_SourceAutoExpirePayload()\n\n",
	"description": "Automatically expire the payload if the source cease to be submitted\n(otherwise payloads are persisting while being dragged).\n\n"
	},

	"ImGui_DragDropFlags_SourceExtern lua": {
	"prefix": "reaper.ImGui_DragDropFlags_SourceExtern",
	"scope": "lua",
	"body": "reaper.ImGui_DragDropFlags_SourceExtern()\n\n",
	"description": "External source (from outside of dear imgui), won't attempt to read current\nitem/window info. Will always return true.\nOnly one Extern source can be active simultaneously.\n\n"
	},

	"ImGui_DragDropFlags_SourceNoDisableHover lua": {
	"prefix": "reaper.ImGui_DragDropFlags_SourceNoDisableHover",
	"scope": "lua",
	"body": "reaper.ImGui_DragDropFlags_SourceNoDisableHover()\n\n",
	"description": "By default, when dragging we clear data so that IsItemHovered will return\nfalse, to avoid subsequent user code submitting tooltips. This flag disables\nthis behavior so you can still call IsItemHovered on the source item.\n\n"
	},

	"ImGui_DragDropFlags_SourceNoHoldToOpenOthers lua": {
	"prefix": "reaper.ImGui_DragDropFlags_SourceNoHoldToOpenOthers",
	"scope": "lua",
	"body": "reaper.ImGui_DragDropFlags_SourceNoHoldToOpenOthers()\n\n",
	"description": "Disable the behavior that allows to open tree nodes and collapsing header by\nholding over them while dragging a source item.\n\n"
	},

	"ImGui_DragDropFlags_SourceNoPreviewTooltip lua": {
	"prefix": "reaper.ImGui_DragDropFlags_SourceNoPreviewTooltip",
	"scope": "lua",
	"body": "reaper.ImGui_DragDropFlags_SourceNoPreviewTooltip()\n\n",
	"description": "By default, a successful call to BeginDragDropSource opens a tooltip so you\ncan display a preview or description of the source contents.\nThis flag disables this behavior.\n\n"
	},

	"ImGui_DragFloatRange2 lua": {
	"prefix": "reaper.ImGui_DragFloatRange2",
	"scope": "lua",
	"body": "retval, v_current_min, v_current_max = reaper.ImGui_DragFloatRange2(${1:ctx}, ${2:label}, ${3:v_current_min}, ${4:v_current_max}, ${5:optional_v_speedIn}, ${6:optional_v_minIn}, ${7:optional_v_maxIn}, ${8:optional_formatIn}, ${9:optional_format_maxIn}, ${10:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_DragInt lua": {
	"prefix": "reaper.ImGui_DragInt",
	"scope": "lua",
	"body": "retval, v = reaper.ImGui_DragInt(${1:ctx}, ${2:label}, ${3:v}, ${4:optional_v_speedIn}, ${5:optional_v_minIn}, ${6:optional_v_maxIn}, ${7:optional_formatIn}, ${8:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_DragInt2 lua": {
	"prefix": "reaper.ImGui_DragInt2",
	"scope": "lua",
	"body": "retval, v1, v2 = reaper.ImGui_DragInt2(${1:ctx}, ${2:label}, ${3:v1}, ${4:v2}, ${5:optional_v_speedIn}, ${6:optional_v_minIn}, ${7:optional_v_maxIn}, ${8:optional_formatIn}, ${9:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_DragInt3 lua": {
	"prefix": "reaper.ImGui_DragInt3",
	"scope": "lua",
	"body": "retval, v1, v2, v3 = reaper.ImGui_DragInt3(${1:ctx}, ${2:label}, ${3:v1}, ${4:v2}, ${5:v3}, ${6:optional_v_speedIn}, ${7:optional_v_minIn}, ${8:optional_v_maxIn}, ${9:optional_formatIn}, ${10:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_DragInt4 lua": {
	"prefix": "reaper.ImGui_DragInt4",
	"scope": "lua",
	"body": "retval, v1, v2, v3, v4 = reaper.ImGui_DragInt4(${1:ctx}, ${2:label}, ${3:v1}, ${4:v2}, ${5:v3}, ${6:v4}, ${7:optional_v_speedIn}, ${8:optional_v_minIn}, ${9:optional_v_maxIn}, ${10:optional_formatIn}, ${11:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_DragIntRange2 lua": {
	"prefix": "reaper.ImGui_DragIntRange2",
	"scope": "lua",
	"body": "retval, v_current_min, v_current_max = reaper.ImGui_DragIntRange2(${1:ctx}, ${2:label}, ${3:v_current_min}, ${4:v_current_max}, ${5:optional_v_speedIn}, ${6:optional_v_minIn}, ${7:optional_v_maxIn}, ${8:optional_formatIn}, ${9:optional_format_maxIn}, ${10:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_DrawFlags_Closed lua": {
	"prefix": "reaper.ImGui_DrawFlags_Closed",
	"scope": "lua",
	"body": "reaper.ImGui_DrawFlags_Closed()\n\n",
	"description": "DrawList_PathStroke, DrawList_AddPolyline: specify that shape should be\nclosed (Important: this is always == 1 for legacy reason).\n\n"
	},

	"ImGui_DrawFlags_None lua": {
	"prefix": "reaper.ImGui_DrawFlags_None",
	"scope": "lua",
	"body": "reaper.ImGui_DrawFlags_None()\n\n",
	"description": ""
	},

	"ImGui_DrawFlags_RoundCornersAll lua": {
	"prefix": "reaper.ImGui_DrawFlags_RoundCornersAll",
	"scope": "lua",
	"body": "reaper.ImGui_DrawFlags_RoundCornersAll()\n\n",
	"description": ""
	},

	"ImGui_DrawFlags_RoundCornersBottom lua": {
	"prefix": "reaper.ImGui_DrawFlags_RoundCornersBottom",
	"scope": "lua",
	"body": "reaper.ImGui_DrawFlags_RoundCornersBottom()\n\n",
	"description": ""
	},

	"ImGui_DrawFlags_RoundCornersBottomLeft lua": {
	"prefix": "reaper.ImGui_DrawFlags_RoundCornersBottomLeft",
	"scope": "lua",
	"body": "reaper.ImGui_DrawFlags_RoundCornersBottomLeft()\n\n",
	"description": "DrawList_AddRect, DrawList_AddRectFilled, DrawList_PathRect: enable rounding\nbottom-left corner only (when rounding > 0.0, we default to all corners).\n\n"
	},

	"ImGui_DrawFlags_RoundCornersBottomRight lua": {
	"prefix": "reaper.ImGui_DrawFlags_RoundCornersBottomRight",
	"scope": "lua",
	"body": "reaper.ImGui_DrawFlags_RoundCornersBottomRight()\n\n",
	"description": "DrawList_AddRect, DrawList_AddRectFilled, DrawList_PathRect: enable rounding\nbottom-right corner only (when rounding > 0.0, we default to all corners).\n\n"
	},

	"ImGui_DrawFlags_RoundCornersLeft lua": {
	"prefix": "reaper.ImGui_DrawFlags_RoundCornersLeft",
	"scope": "lua",
	"body": "reaper.ImGui_DrawFlags_RoundCornersLeft()\n\n",
	"description": ""
	},

	"ImGui_DrawFlags_RoundCornersNone lua": {
	"prefix": "reaper.ImGui_DrawFlags_RoundCornersNone",
	"scope": "lua",
	"body": "reaper.ImGui_DrawFlags_RoundCornersNone()\n\n",
	"description": "DrawList_AddRect, DrawList_AddRectFilled, DrawList_PathRect: disable rounding\non all corners (when rounding > 0.0). This is NOT zero, NOT an implicit flag!.\n\n"
	},

	"ImGui_DrawFlags_RoundCornersRight lua": {
	"prefix": "reaper.ImGui_DrawFlags_RoundCornersRight",
	"scope": "lua",
	"body": "reaper.ImGui_DrawFlags_RoundCornersRight()\n\n",
	"description": ""
	},

	"ImGui_DrawFlags_RoundCornersTop lua": {
	"prefix": "reaper.ImGui_DrawFlags_RoundCornersTop",
	"scope": "lua",
	"body": "reaper.ImGui_DrawFlags_RoundCornersTop()\n\n",
	"description": ""
	},

	"ImGui_DrawFlags_RoundCornersTopLeft lua": {
	"prefix": "reaper.ImGui_DrawFlags_RoundCornersTopLeft",
	"scope": "lua",
	"body": "reaper.ImGui_DrawFlags_RoundCornersTopLeft()\n\n",
	"description": "DrawList_AddRect, DrawList_AddRectFilled, DrawList_PathRect: enable rounding\ntop-left corner only (when rounding > 0.0, we default to all corners).\n\n"
	},

	"ImGui_DrawFlags_RoundCornersTopRight lua": {
	"prefix": "reaper.ImGui_DrawFlags_RoundCornersTopRight",
	"scope": "lua",
	"body": "reaper.ImGui_DrawFlags_RoundCornersTopRight()\n\n",
	"description": "DrawList_AddRect, DrawList_AddRectFilled, DrawList_PathRect: enable rounding\ntop-right corner only (when rounding > 0.0, we default to all corners).\n\n"
	},

	"ImGui_DrawListSplitter_Clear lua": {
	"prefix": "reaper.ImGui_DrawListSplitter_Clear",
	"scope": "lua",
	"body": "reaper.ImGui_DrawListSplitter_Clear(${1:splitter})$0",
	"description": ""
	},

	"ImGui_DrawListSplitter_Merge lua": {
	"prefix": "reaper.ImGui_DrawListSplitter_Merge",
	"scope": "lua",
	"body": "reaper.ImGui_DrawListSplitter_Merge(${1:splitter})$0",
	"description": ""
	},

	"ImGui_DrawListSplitter_SetCurrentChannel lua": {
	"prefix": "reaper.ImGui_DrawListSplitter_SetCurrentChannel",
	"scope": "lua",
	"body": "reaper.ImGui_DrawListSplitter_SetCurrentChannel(${1:splitter}, ${2:channel_idx})$0",
	"description": ""
	},

	"ImGui_DrawListSplitter_Split lua": {
	"prefix": "reaper.ImGui_DrawListSplitter_Split",
	"scope": "lua",
	"body": "reaper.ImGui_DrawListSplitter_Split(${1:splitter}, ${2:count})$0",
	"description": ""
	},

	"ImGui_DrawList_AddBezierCubic lua": {
	"prefix": "reaper.ImGui_DrawList_AddBezierCubic",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_AddBezierCubic(${1:draw_list}, ${2:p1_x}, ${3:p1_y}, ${4:p2_x}, ${5:p2_y}, ${6:p3_x}, ${7:p3_y}, ${8:p4_x}, ${9:p4_y}, ${10:col_rgba}, ${11:thickness}, ${12:optional_num_segmentsIn})$0",
	"description": "Cubic Bezier (4 control points)\n\n"
	},

	"ImGui_DrawList_AddBezierQuadratic lua": {
	"prefix": "reaper.ImGui_DrawList_AddBezierQuadratic",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_AddBezierQuadratic(${1:draw_list}, ${2:p1_x}, ${3:p1_y}, ${4:p2_x}, ${5:p2_y}, ${6:p3_x}, ${7:p3_y}, ${8:col_rgba}, ${9:thickness}, ${10:optional_num_segmentsIn})$0",
	"description": "Quadratic Bezier (3 control points)\n\n"
	},

	"ImGui_DrawList_AddCircle lua": {
	"prefix": "reaper.ImGui_DrawList_AddCircle",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_AddCircle(${1:draw_list}, ${2:center_x}, ${3:center_y}, ${4:radius}, ${5:col_rgba}, ${6:optional_num_segmentsIn}, ${7:optional_thicknessIn})$0",
	"description": "Use 'num_segments == 0' to automatically calculate tessellation (preferred).\n\n"
	},

	"ImGui_DrawList_AddCircleFilled lua": {
	"prefix": "reaper.ImGui_DrawList_AddCircleFilled",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_AddCircleFilled(${1:draw_list}, ${2:center_x}, ${3:center_y}, ${4:radius}, ${5:col_rgba}, ${6:optional_num_segmentsIn})$0",
	"description": "Use 'num_segments == 0' to automatically calculate tessellation (preferred).\n\n"
	},

	"ImGui_DrawList_AddConvexPolyFilled lua": {
	"prefix": "reaper.ImGui_DrawList_AddConvexPolyFilled",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_AddConvexPolyFilled(${1:ImGui_DrawList_points}, ${2:col_rgba})$0",
	"description": "Note: Anti-aliased filling requires points to be in clockwise order.\n\n"
	},

	"ImGui_DrawList_AddImage lua": {
	"prefix": "reaper.ImGui_DrawList_AddImage",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_AddImage(${1:ImGui_DrawList_img}, ${2:p_min_x}, ${3:p_min_y}, ${4:p_max_x}, ${5:p_max_y}, ${6:optional_uv_min_xIn}, ${7:optional_uv_min_yIn}, ${8:optional_uv_max_xIn}, ${9:optional_uv_max_yIn}, ${10:optional_col_rgbaIn})$0",
	"description": ""
	},

	"ImGui_DrawList_AddImageQuad lua": {
	"prefix": "reaper.ImGui_DrawList_AddImageQuad",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_AddImageQuad(${1:ImGui_DrawList_img}, ${2:p1_x}, ${3:p1_y}, ${4:p2_x}, ${5:p2_y}, ${6:p3_x}, ${7:p3_y}, ${8:p4_x}, ${9:p4_y}, ${10:optional_uv1_xIn}, ${11:optional_uv1_yIn}, ${12:optional_uv2_xIn}, ${13:optional_uv2_yIn}, ${14:optional_uv3_xIn}, ${15:optional_uv3_yIn}, ${16:optional_uv4_xIn}, ${17:optional_uv4_yIn}, ${18:optional_col_rgbaIn})$0",
	"description": ""
	},

	"ImGui_DrawList_AddImageRounded lua": {
	"prefix": "reaper.ImGui_DrawList_AddImageRounded",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_AddImageRounded(${1:ImGui_DrawList_img}, ${2:p_min_x}, ${3:p_min_y}, ${4:p_max_x}, ${5:p_max_y}, ${6:uv_min_x}, ${7:uv_min_y}, ${8:uv_max_x}, ${9:uv_max_y}, ${10:col_rgba}, ${11:rounding}, ${12:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_DrawList_AddLine lua": {
	"prefix": "reaper.ImGui_DrawList_AddLine",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_AddLine(${1:draw_list}, ${2:p1_x}, ${3:p1_y}, ${4:p2_x}, ${5:p2_y}, ${6:col_rgba}, ${7:optional_thicknessIn})$0",
	"description": ""
	},

	"ImGui_DrawList_AddNgon lua": {
	"prefix": "reaper.ImGui_DrawList_AddNgon",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_AddNgon(${1:draw_list}, ${2:center_x}, ${3:center_y}, ${4:radius}, ${5:col_rgba}, ${6:num_segments}, ${7:optional_thicknessIn})$0",
	"description": ""
	},

	"ImGui_DrawList_AddNgonFilled lua": {
	"prefix": "reaper.ImGui_DrawList_AddNgonFilled",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_AddNgonFilled(${1:draw_list}, ${2:center_x}, ${3:center_y}, ${4:radius}, ${5:col_rgba}, ${6:num_segments})$0",
	"description": ""
	},

	"ImGui_DrawList_AddPolyline lua": {
	"prefix": "reaper.ImGui_DrawList_AddPolyline",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_AddPolyline(${1:ImGui_DrawList_points}, ${2:col_rgba}, ${3:flags}, ${4:thickness})$0",
	"description": "Points is a list of x,y coordinates.\n\n"
	},

	"ImGui_DrawList_AddQuad lua": {
	"prefix": "reaper.ImGui_DrawList_AddQuad",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_AddQuad(${1:draw_list}, ${2:p1_x}, ${3:p1_y}, ${4:p2_x}, ${5:p2_y}, ${6:p3_x}, ${7:p3_y}, ${8:p4_x}, ${9:p4_y}, ${10:col_rgba}, ${11:optional_thicknessIn})$0",
	"description": ""
	},

	"ImGui_DrawList_AddQuadFilled lua": {
	"prefix": "reaper.ImGui_DrawList_AddQuadFilled",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_AddQuadFilled(${1:draw_list}, ${2:p1_x}, ${3:p1_y}, ${4:p2_x}, ${5:p2_y}, ${6:p3_x}, ${7:p3_y}, ${8:p4_x}, ${9:p4_y}, ${10:col_rgba})$0",
	"description": ""
	},

	"ImGui_DrawList_AddRect lua": {
	"prefix": "reaper.ImGui_DrawList_AddRect",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_AddRect(${1:draw_list}, ${2:p_min_x}, ${3:p_min_y}, ${4:p_max_x}, ${5:p_max_y}, ${6:col_rgba}, ${7:optional_roundingIn}, ${8:optional_flagsIn}, ${9:optional_thicknessIn})$0",
	"description": ""
	},

	"ImGui_DrawList_AddRectFilled lua": {
	"prefix": "reaper.ImGui_DrawList_AddRectFilled",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_AddRectFilled(${1:draw_list}, ${2:p_min_x}, ${3:p_min_y}, ${4:p_max_x}, ${5:p_max_y}, ${6:col_rgba}, ${7:optional_roundingIn}, ${8:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_DrawList_AddRectFilledMultiColor lua": {
	"prefix": "reaper.ImGui_DrawList_AddRectFilledMultiColor",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_AddRectFilledMultiColor(${1:draw_list}, ${2:p_min_x}, ${3:p_min_y}, ${4:p_max_x}, ${5:p_max_y}, ${6:col_upr_left}, ${7:col_upr_right}, ${8:col_bot_right}, ${9:col_bot_left})$0",
	"description": ""
	},

	"ImGui_DrawList_AddText lua": {
	"prefix": "reaper.ImGui_DrawList_AddText",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_AddText(${1:draw_list}, ${2:x}, ${3:y}, ${4:col_rgba}, ${5:text})$0",
	"description": ""
	},

	"ImGui_DrawList_AddTextEx lua": {
	"prefix": "reaper.ImGui_DrawList_AddTextEx",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_AddTextEx(${1:ImGui_DrawList_font}, ${2:font_size}, ${3:pos_x}, ${4:pos_y}, ${5:col_rgba}, ${6:text}, ${7:optional_wrap_widthIn}, ${8:optional_cpu_fine_clip_rect_xIn}, ${9:optional_cpu_fine_clip_rect_yIn}, ${10:optional_cpu_fine_clip_rect_wIn}, ${11:optional_cpu_fine_clip_rect_hIn})$0",
	"description": "The last pushed font is used if font is nil.\nThe size of the last pushed font is used if font_size is 0.\ncpu_fine_clip_rect_* only takes effect if all four are non-nil.\n\n"
	},

	"ImGui_DrawList_AddTriangle lua": {
	"prefix": "reaper.ImGui_DrawList_AddTriangle",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_AddTriangle(${1:draw_list}, ${2:p1_x}, ${3:p1_y}, ${4:p2_x}, ${5:p2_y}, ${6:p3_x}, ${7:p3_y}, ${8:col_rgba}, ${9:optional_thicknessIn})$0",
	"description": ""
	},

	"ImGui_DrawList_AddTriangleFilled lua": {
	"prefix": "reaper.ImGui_DrawList_AddTriangleFilled",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_AddTriangleFilled(${1:draw_list}, ${2:p1_x}, ${3:p1_y}, ${4:p2_x}, ${5:p2_y}, ${6:p3_x}, ${7:p3_y}, ${8:col_rgba})$0",
	"description": ""
	},

	"ImGui_DrawList_PathArcTo lua": {
	"prefix": "reaper.ImGui_DrawList_PathArcTo",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_PathArcTo(${1:draw_list}, ${2:center_x}, ${3:center_y}, ${4:radius}, ${5:a_min}, ${6:a_max}, ${7:optional_num_segmentsIn})$0",
	"description": ""
	},

	"ImGui_DrawList_PathArcToFast lua": {
	"prefix": "reaper.ImGui_DrawList_PathArcToFast",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_PathArcToFast(${1:draw_list}, ${2:center_x}, ${3:center_y}, ${4:radius}, ${5:a_min_of_12}, ${6:a_max_of_12})$0",
	"description": "Use precomputed angles for a 12 steps circle.\n\n"
	},

	"ImGui_DrawList_PathBezierCubicCurveTo lua": {
	"prefix": "reaper.ImGui_DrawList_PathBezierCubicCurveTo",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_PathBezierCubicCurveTo(${1:draw_list}, ${2:p2_x}, ${3:p2_y}, ${4:p3_x}, ${5:p3_y}, ${6:p4_x}, ${7:p4_y}, ${8:optional_num_segmentsIn})$0",
	"description": "Cubic Bezier (4 control points)\n\n"
	},

	"ImGui_DrawList_PathBezierQuadraticCurveTo lua": {
	"prefix": "reaper.ImGui_DrawList_PathBezierQuadraticCurveTo",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_PathBezierQuadraticCurveTo(${1:draw_list}, ${2:p2_x}, ${3:p2_y}, ${4:p3_x}, ${5:p3_y}, ${6:optional_num_segmentsIn})$0",
	"description": "Quadratic Bezier (3 control points)\n\n"
	},

	"ImGui_DrawList_PathClear lua": {
	"prefix": "reaper.ImGui_DrawList_PathClear",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_PathClear(${1:draw_list})$0",
	"description": ""
	},

	"ImGui_DrawList_PathFillConvex lua": {
	"prefix": "reaper.ImGui_DrawList_PathFillConvex",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_PathFillConvex(${1:draw_list}, ${2:col_rgba})$0",
	"description": "Note: Anti-aliased filling requires points to be in clockwise order.\n\n"
	},

	"ImGui_DrawList_PathLineTo lua": {
	"prefix": "reaper.ImGui_DrawList_PathLineTo",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_PathLineTo(${1:draw_list}, ${2:pos_x}, ${3:pos_y})$0",
	"description": ""
	},

	"ImGui_DrawList_PathRect lua": {
	"prefix": "reaper.ImGui_DrawList_PathRect",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_PathRect(${1:draw_list}, ${2:rect_min_x}, ${3:rect_min_y}, ${4:rect_max_x}, ${5:rect_max_y}, ${6:optional_roundingIn}, ${7:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_DrawList_PathStroke lua": {
	"prefix": "reaper.ImGui_DrawList_PathStroke",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_PathStroke(${1:draw_list}, ${2:col_rgba}, ${3:optional_flagsIn}, ${4:optional_thicknessIn})$0",
	"description": ""
	},

	"ImGui_DrawList_PopClipRect lua": {
	"prefix": "reaper.ImGui_DrawList_PopClipRect",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_PopClipRect(${1:draw_list})$0",
	"description": "See DrawList_PushClipRect\n\n"
	},

	"ImGui_DrawList_PushClipRect lua": {
	"prefix": "reaper.ImGui_DrawList_PushClipRect",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_PushClipRect(${1:draw_list}, ${2:clip_rect_min_x}, ${3:clip_rect_min_y}, ${4:clip_rect_max_x}, ${5:clip_rect_max_y}, ${6:optional_intersect_with_current_clip_rectIn})$0",
	"description": "Render-level scissoring. Prefer using higher-level PushClipRect to affect\nlogic (hit-testing and widget culling).\n\n"
	},

	"ImGui_DrawList_PushClipRectFullScreen lua": {
	"prefix": "reaper.ImGui_DrawList_PushClipRectFullScreen",
	"scope": "lua",
	"body": "reaper.ImGui_DrawList_PushClipRectFullScreen(${1:draw_list})$0",
	"description": ""
	},

	"ImGui_Dummy lua": {
	"prefix": "reaper.ImGui_Dummy",
	"scope": "lua",
	"body": "reaper.ImGui_Dummy(${1:ctx}, ${2:size_w}, ${3:size_h})$0",
	"description": "Add a dummy item of given size. unlike InvisibleButton, Dummy() won't take the\nmouse click or be navigable into.\n\n"
	},

	"ImGui_End lua": {
	"prefix": "reaper.ImGui_End",
	"scope": "lua",
	"body": "reaper.ImGui_End(${1:ctx})$0",
	"description": "Pop window from the stack. See Begin.\n\n"
	},

	"ImGui_EndChild lua": {
	"prefix": "reaper.ImGui_EndChild",
	"scope": "lua",
	"body": "reaper.ImGui_EndChild(${1:ctx})$0",
	"description": "See BeginChild.\n\n"
	},

	"ImGui_EndChildFrame lua": {
	"prefix": "reaper.ImGui_EndChildFrame",
	"scope": "lua",
	"body": "reaper.ImGui_EndChildFrame(${1:ctx})$0",
	"description": "See BeginChildFrame.\n\n"
	},

	"ImGui_EndCombo lua": {
	"prefix": "reaper.ImGui_EndCombo",
	"scope": "lua",
	"body": "reaper.ImGui_EndCombo(${1:ctx})$0",
	"description": "Only call EndCombo() if BeginCombo returns true!\n\n"
	},

	"ImGui_EndDisabled lua": {
	"prefix": "reaper.ImGui_EndDisabled",
	"scope": "lua",
	"body": "reaper.ImGui_EndDisabled(${1:ctx})$0",
	"description": "See BeginDisabled.\n\n"
	},

	"ImGui_EndDragDropSource lua": {
	"prefix": "reaper.ImGui_EndDragDropSource",
	"scope": "lua",
	"body": "reaper.ImGui_EndDragDropSource(${1:ctx})$0",
	"description": "Only call EndDragDropSource() if BeginDragDropSource returns true!\n\n"
	},

	"ImGui_EndDragDropTarget lua": {
	"prefix": "reaper.ImGui_EndDragDropTarget",
	"scope": "lua",
	"body": "reaper.ImGui_EndDragDropTarget(${1:ctx})$0",
	"description": "Only call EndDragDropTarget() if BeginDragDropTarget returns true!\n\n"
	},

	"ImGui_EndGroup lua": {
	"prefix": "reaper.ImGui_EndGroup",
	"scope": "lua",
	"body": "reaper.ImGui_EndGroup(${1:ctx})$0",
	"description": "Unlock horizontal starting position + capture the whole group bounding box\ninto one 'item' (so you can use IsItemHovered or layout primitives such as\nSameLine on whole group, etc.).\nSee BeginGroup.\n\n"
	},

	"ImGui_EndListBox lua": {
	"prefix": "reaper.ImGui_EndListBox",
	"scope": "lua",
	"body": "reaper.ImGui_EndListBox(${1:ctx})$0",
	"description": "Only call EndListBox() if BeginListBox returned true!\n\n"
	},

	"ImGui_EndMenu lua": {
	"prefix": "reaper.ImGui_EndMenu",
	"scope": "lua",
	"body": "reaper.ImGui_EndMenu(${1:ctx})$0",
	"description": "Only call EndMenu() if BeginMenu returns true!\n\n"
	},

	"ImGui_EndMenuBar lua": {
	"prefix": "reaper.ImGui_EndMenuBar",
	"scope": "lua",
	"body": "reaper.ImGui_EndMenuBar(${1:ctx})$0",
	"description": "Only call EndMenuBar if BeginMenuBar returns true!\n\n"
	},

	"ImGui_EndPopup lua": {
	"prefix": "reaper.ImGui_EndPopup",
	"scope": "lua",
	"body": "reaper.ImGui_EndPopup(${1:ctx})$0",
	"description": "Only call EndPopup() if BeginPopupXXX() returns true!\n\n"
	},

	"ImGui_EndTabBar lua": {
	"prefix": "reaper.ImGui_EndTabBar",
	"scope": "lua",
	"body": "reaper.ImGui_EndTabBar(${1:ctx})$0",
	"description": "Only call EndTabBar() if BeginTabBar() returns true!\n\n"
	},

	"ImGui_EndTabItem lua": {
	"prefix": "reaper.ImGui_EndTabItem",
	"scope": "lua",
	"body": "reaper.ImGui_EndTabItem(${1:ctx})$0",
	"description": "Only call EndTabItem() if BeginTabItem() returns true!\n\n"
	},

	"ImGui_EndTable lua": {
	"prefix": "reaper.ImGui_EndTable",
	"scope": "lua",
	"body": "reaper.ImGui_EndTable(${1:ctx})$0",
	"description": "Only call EndTable() if BeginTable() returns true!\n\n"
	},

	"ImGui_EndTooltip lua": {
	"prefix": "reaper.ImGui_EndTooltip",
	"scope": "lua",
	"body": "reaper.ImGui_EndTooltip(${1:ctx})$0",
	"description": ""
	},

	"ImGui_FocusedFlags_AnyWindow lua": {
	"prefix": "reaper.ImGui_FocusedFlags_AnyWindow",
	"scope": "lua",
	"body": "reaper.ImGui_FocusedFlags_AnyWindow()\n\n",
	"description": "Return true if any window is focused.\n\n"
	},

	"ImGui_FocusedFlags_ChildWindows lua": {
	"prefix": "reaper.ImGui_FocusedFlags_ChildWindows",
	"scope": "lua",
	"body": "reaper.ImGui_FocusedFlags_ChildWindows()\n\n",
	"description": "Return true if any children of the window is focused.\n\n"
	},

	"ImGui_FocusedFlags_DockHierarchy lua": {
	"prefix": "reaper.ImGui_FocusedFlags_DockHierarchy",
	"scope": "lua",
	"body": "reaper.ImGui_FocusedFlags_DockHierarchy()\n\n",
	"description": "Consider docking hierarchy (treat dockspace host as parent of docked window)\n(when used with _ChildWindows or _RootWindow).\n\n"
	},

	"ImGui_FocusedFlags_NoPopupHierarchy lua": {
	"prefix": "reaper.ImGui_FocusedFlags_NoPopupHierarchy",
	"scope": "lua",
	"body": "reaper.ImGui_FocusedFlags_NoPopupHierarchy()\n\n",
	"description": "Do not consider popup hierarchy (do not treat popup emitter as parent of\npopup) (when used with _ChildWindows or _RootWindow).\n\n"
	},

	"ImGui_FocusedFlags_None lua": {
	"prefix": "reaper.ImGui_FocusedFlags_None",
	"scope": "lua",
	"body": "reaper.ImGui_FocusedFlags_None()\n\n",
	"description": ""
	},

	"ImGui_FocusedFlags_RootAndChildWindows lua": {
	"prefix": "reaper.ImGui_FocusedFlags_RootAndChildWindows",
	"scope": "lua",
	"body": "reaper.ImGui_FocusedFlags_RootAndChildWindows()\n\n",
	"description": "FocusedFlags_RootWindow | FocusedFlags_ChildWindows\n\n"
	},

	"ImGui_FocusedFlags_RootWindow lua": {
	"prefix": "reaper.ImGui_FocusedFlags_RootWindow",
	"scope": "lua",
	"body": "reaper.ImGui_FocusedFlags_RootWindow()\n\n",
	"description": "Test from root window (top most parent of the current hierarchy).\n\n"
	},

	"ImGui_FontFlags_Bold lua": {
	"prefix": "reaper.ImGui_FontFlags_Bold",
	"scope": "lua",
	"body": "reaper.ImGui_FontFlags_Bold()\n\n",
	"description": ""
	},

	"ImGui_FontFlags_Italic lua": {
	"prefix": "reaper.ImGui_FontFlags_Italic",
	"scope": "lua",
	"body": "reaper.ImGui_FontFlags_Italic()\n\n",
	"description": ""
	},

	"ImGui_FontFlags_None lua": {
	"prefix": "reaper.ImGui_FontFlags_None",
	"scope": "lua",
	"body": "reaper.ImGui_FontFlags_None()\n\n",
	"description": ""
	},

	"ImGui_GetBackgroundDrawList lua": {
	"prefix": "reaper.ImGui_GetBackgroundDrawList",
	"scope": "lua",
	"body": "reaper.ImGui_GetBackgroundDrawList(${1:ctx})$0",
	"description": "This draw list will be the first rendering one. Useful to quickly draw\nshapes/text behind dear imgui contents.\n\n"
	},

	"ImGui_GetClipboardText lua": {
	"prefix": "reaper.ImGui_GetClipboardText",
	"scope": "lua",
	"body": "reaper.ImGui_GetClipboardText(${1:ctx})$0",
	"description": ""
	},

	"ImGui_GetColor lua": {
	"prefix": "reaper.ImGui_GetColor",
	"scope": "lua",
	"body": "reaper.ImGui_GetColor(${1:ctx}, ${2:idx}, ${3:optional_alpha_mulIn})$0",
	"description": "Retrieve given style color with style alpha applied and optional extra alpha\nmultiplier, packed as a 32-bit value (RGBA). See Col_* for available style colors.\n\n"
	},

	"ImGui_GetColorEx lua": {
	"prefix": "reaper.ImGui_GetColorEx",
	"scope": "lua",
	"body": "reaper.ImGui_GetColorEx(${1:ctx}, ${2:col_rgba})$0",
	"description": "Retrieve given color with style alpha applied, packed as a 32-bit value (RGBA).\n\n"
	},

	"ImGui_GetConfigVar lua": {
	"prefix": "reaper.ImGui_GetConfigVar",
	"scope": "lua",
	"body": "reaper.ImGui_GetConfigVar(${1:ctx}, ${2:var_idx})$0",
	"description": ""
	},

	"ImGui_GetContentRegionAvail lua": {
	"prefix": "reaper.ImGui_GetContentRegionAvail",
	"scope": "lua",
	"body": "x, y = reaper.ImGui_GetContentRegionAvail(${1:ctx})$0",
	"description": "== GetContentRegionMax() - GetCursorPos()\n\n"
	},

	"ImGui_GetContentRegionMax lua": {
	"prefix": "reaper.ImGui_GetContentRegionMax",
	"scope": "lua",
	"body": "x, y = reaper.ImGui_GetContentRegionMax(${1:ctx})$0",
	"description": "Current content boundaries (typically window boundaries including scrolling,\nor current column boundaries), in windows coordinates.\n\n"
	},

	"ImGui_GetCursorPos lua": {
	"prefix": "reaper.ImGui_GetCursorPos",
	"scope": "lua",
	"body": "x, y = reaper.ImGui_GetCursorPos(${1:ctx})$0",
	"description": "Cursor position in window\n\n"
	},

	"ImGui_GetCursorPosX lua": {
	"prefix": "reaper.ImGui_GetCursorPosX",
	"scope": "lua",
	"body": "reaper.ImGui_GetCursorPosX(${1:ctx})$0",
	"description": "Cursor X position in window\n\n"
	},

	"ImGui_GetCursorPosY lua": {
	"prefix": "reaper.ImGui_GetCursorPosY",
	"scope": "lua",
	"body": "reaper.ImGui_GetCursorPosY(${1:ctx})$0",
	"description": "Cursor Y position in window\n\n"
	},

	"ImGui_GetCursorScreenPos lua": {
	"prefix": "reaper.ImGui_GetCursorScreenPos",
	"scope": "lua",
	"body": "x, y = reaper.ImGui_GetCursorScreenPos(${1:ctx})$0",
	"description": "Cursor position in absolute screen coordinates (useful to work with the DrawList API).\n\n"
	},

	"ImGui_GetCursorStartPos lua": {
	"prefix": "reaper.ImGui_GetCursorStartPos",
	"scope": "lua",
	"body": "x, y = reaper.ImGui_GetCursorStartPos(${1:ctx})$0",
	"description": "Initial cursor position in window coordinates.\n\n"
	},

	"ImGui_GetDeltaTime lua": {
	"prefix": "reaper.ImGui_GetDeltaTime",
	"scope": "lua",
	"body": "reaper.ImGui_GetDeltaTime(${1:ctx})$0",
	"description": "Time elapsed since last frame, in seconds.\n\n"
	},

	"ImGui_GetDragDropPayload lua": {
	"prefix": "reaper.ImGui_GetDragDropPayload",
	"scope": "lua",
	"body": "retval, type, payload, is_preview, is_delivery = reaper.ImGui_GetDragDropPayload(${1:ctx})$0",
	"description": "Peek directly into the current payload from anywhere.\n\n"
	},

	"ImGui_GetDragDropPayloadFile lua": {
	"prefix": "reaper.ImGui_GetDragDropPayloadFile",
	"scope": "lua",
	"body": "retval, filename = reaper.ImGui_GetDragDropPayloadFile(${1:ctx}, ${2:index})$0",
	"description": "Get a filename from the list of dropped files.\nReturns false if index is out of bounds.\n\n"
	},

	"ImGui_GetFont lua": {
	"prefix": "reaper.ImGui_GetFont",
	"scope": "lua",
	"body": "reaper.ImGui_GetFont(${1:ctx})$0",
	"description": "Get the current font\n\n"
	},

	"ImGui_GetFontSize lua": {
	"prefix": "reaper.ImGui_GetFontSize",
	"scope": "lua",
	"body": "reaper.ImGui_GetFontSize(${1:ctx})$0",
	"description": "Get current font size (= height in pixels) of current font with current scale\napplied.\n\n"
	},

	"ImGui_GetForegroundDrawList lua": {
	"prefix": "reaper.ImGui_GetForegroundDrawList",
	"scope": "lua",
	"body": "reaper.ImGui_GetForegroundDrawList(${1:ctx})$0",
	"description": "This draw list will be the last rendered one. Useful to quickly draw\nshapes/text over dear imgui contents.\n\n"
	},

	"ImGui_GetFrameCount lua": {
	"prefix": "reaper.ImGui_GetFrameCount",
	"scope": "lua",
	"body": "reaper.ImGui_GetFrameCount(${1:ctx})$0",
	"description": "Get global imgui frame count. incremented by 1 every frame.\n\n"
	},

	"ImGui_GetFrameHeight lua": {
	"prefix": "reaper.ImGui_GetFrameHeight",
	"scope": "lua",
	"body": "reaper.ImGui_GetFrameHeight(${1:ctx})$0",
	"description": "GetFontSize + StyleVar_FramePadding.y * 2\n\n"
	},

	"ImGui_GetFrameHeightWithSpacing lua": {
	"prefix": "reaper.ImGui_GetFrameHeightWithSpacing",
	"scope": "lua",
	"body": "reaper.ImGui_GetFrameHeightWithSpacing(${1:ctx})$0",
	"description": "GetFontSize + StyleVar_FramePadding.y * 2 + StyleVar_ItemSpacing.y\n(distance in pixels between 2 consecutive lines of framed widgets).\n\n"
	},

	"ImGui_GetFramerate lua": {
	"prefix": "reaper.ImGui_GetFramerate",
	"scope": "lua",
	"body": "reaper.ImGui_GetFramerate(${1:ctx})$0",
	"description": "Estimate of application framerate (rolling average over 60 frames, based on\nGetDeltaTime), in frame per second. Solely for convenience.\n\n"
	},

	"ImGui_GetInputQueueCharacter lua": {
	"prefix": "reaper.ImGui_GetInputQueueCharacter",
	"scope": "lua",
	"body": "retval, unicode_char = reaper.ImGui_GetInputQueueCharacter(${1:ctx}, ${2:idx})$0",
	"description": "Read from ImGui's character input queue.\nCall with increasing idx until false is returned.\n\n"
	},

	"ImGui_GetItemRectMax lua": {
	"prefix": "reaper.ImGui_GetItemRectMax",
	"scope": "lua",
	"body": "x, y = reaper.ImGui_GetItemRectMax(${1:ctx})$0",
	"description": "Get lower-right bounding rectangle of the last item (screen space)\n\n"
	},

	"ImGui_GetItemRectMin lua": {
	"prefix": "reaper.ImGui_GetItemRectMin",
	"scope": "lua",
	"body": "x, y = reaper.ImGui_GetItemRectMin(${1:ctx})$0",
	"description": "Get upper-left bounding rectangle of the last item (screen space)\n\n"
	},

	"ImGui_GetItemRectSize lua": {
	"prefix": "reaper.ImGui_GetItemRectSize",
	"scope": "lua",
	"body": "w, h = reaper.ImGui_GetItemRectSize(${1:ctx})$0",
	"description": "Get size of last item\n\n"
	},

	"ImGui_GetKeyDownDuration lua": {
	"prefix": "reaper.ImGui_GetKeyDownDuration",
	"scope": "lua",
	"body": "reaper.ImGui_GetKeyDownDuration(${1:ctx}, ${2:key})$0",
	"description": "Duration the keyboard key has been down (0.0 == just pressed)\n\n"
	},

	"ImGui_GetKeyMods lua": {
	"prefix": "reaper.ImGui_GetKeyMods",
	"scope": "lua",
	"body": "reaper.ImGui_GetKeyMods(${1:ctx})$0",
	"description": "Flags for the Ctrl/Shift/Alt/Super keys. Uses Mod_* values.\n\n"
	},

	"ImGui_GetKeyPressedAmount lua": {
	"prefix": "reaper.ImGui_GetKeyPressedAmount",
	"scope": "lua",
	"body": "reaper.ImGui_GetKeyPressedAmount(${1:ctx}, ${2:key}, ${3:repeat_delay}, ${4:rate})$0",
	"description": "Uses provided repeat rate/delay. Return a count, most often 0 or 1 but might\nbe >1 if ConfigVar_RepeatRate is small enough that GetDeltaTime > RepeatRate.\n\n"
	},

	"ImGui_GetMainViewport lua": {
	"prefix": "reaper.ImGui_GetMainViewport",
	"scope": "lua",
	"body": "reaper.ImGui_GetMainViewport(${1:ctx})$0",
	"description": "Currently represents REAPER's main window (arrange view).\nWARNING: This may change or be removed in the future.\n\n"
	},

	"ImGui_GetMouseClickedCount lua": {
	"prefix": "reaper.ImGui_GetMouseClickedCount",
	"scope": "lua",
	"body": "reaper.ImGui_GetMouseClickedCount(${1:ctx}, ${2:button})$0",
	"description": "Return the number of successive mouse-clicks at the time where a click happen (otherwise 0).\n\n"
	},

	"ImGui_GetMouseClickedPos lua": {
	"prefix": "reaper.ImGui_GetMouseClickedPos",
	"scope": "lua",
	"body": "x, y = reaper.ImGui_GetMouseClickedPos(${1:ctx}, ${2:button})$0",
	"description": ""
	},

	"ImGui_GetMouseCursor lua": {
	"prefix": "reaper.ImGui_GetMouseCursor",
	"scope": "lua",
	"body": "reaper.ImGui_GetMouseCursor(${1:ctx})$0",
	"description": "Get desired mouse cursor shape, reset every frame. This is updated during the frame.\n\n"
	},

	"ImGui_GetMouseDelta lua": {
	"prefix": "reaper.ImGui_GetMouseDelta",
	"scope": "lua",
	"body": "x, y = reaper.ImGui_GetMouseDelta(${1:ctx})$0",
	"description": "Mouse delta. Note that this is zero if either current or previous position\nare invalid (-FLT_MAX,-FLT_MAX), so a disappearing/reappearing mouse won't have\na huge delta.\n\n"
	},

	"ImGui_GetMouseDownDuration lua": {
	"prefix": "reaper.ImGui_GetMouseDownDuration",
	"scope": "lua",
	"body": "reaper.ImGui_GetMouseDownDuration(${1:ctx}, ${2:button})$0",
	"description": "Duration the mouse button has been down (0.0 == just clicked)\n\n"
	},

	"ImGui_GetMouseDragDelta lua": {
	"prefix": "reaper.ImGui_GetMouseDragDelta",
	"scope": "lua",
	"body": "x, y = reaper.ImGui_GetMouseDragDelta(${1:ctx}, ${2:x}, ${3:y}, ${4:optional_buttonIn}, ${5:optional_lock_thresholdIn})$0",
	"description": "Return the delta from the initial clicking position while the mouse button is\npressed or was just released. This is locked and return 0.0 until the mouse\nmoves past a distance threshold at least once (if lock_threshold < -1.0, uses\nConfigVar_MouseDragThreshold).\n\n"
	},

	"ImGui_GetMousePos lua": {
	"prefix": "reaper.ImGui_GetMousePos",
	"scope": "lua",
	"body": "x, y = reaper.ImGui_GetMousePos(${1:ctx})$0",
	"description": ""
	},

	"ImGui_GetMousePosOnOpeningCurrentPopup lua": {
	"prefix": "reaper.ImGui_GetMousePosOnOpeningCurrentPopup",
	"scope": "lua",
	"body": "x, y = reaper.ImGui_GetMousePosOnOpeningCurrentPopup(${1:ctx})$0",
	"description": "Retrieve mouse position at the time of opening popup we have BeginPopup()\ninto (helper to avoid user backing that value themselves).\n\n"
	},

	"ImGui_GetMouseWheel lua": {
	"prefix": "reaper.ImGui_GetMouseWheel",
	"scope": "lua",
	"body": "vertical, horizontal = reaper.ImGui_GetMouseWheel(${1:ctx})$0",
	"description": "Mouse wheel Vertical: 1 unit scrolls about 5 lines text.\n\n"
	},

	"ImGui_GetScrollMaxX lua": {
	"prefix": "reaper.ImGui_GetScrollMaxX",
	"scope": "lua",
	"body": "reaper.ImGui_GetScrollMaxX(${1:ctx})$0",
	"description": "Get maximum scrolling amount ~~ ContentSize.x - WindowSize.x - DecorationsSize.x\n\n"
	},

	"ImGui_GetScrollMaxY lua": {
	"prefix": "reaper.ImGui_GetScrollMaxY",
	"scope": "lua",
	"body": "reaper.ImGui_GetScrollMaxY(${1:ctx})$0",
	"description": "Get maximum scrolling amount ~~ ContentSize.y - WindowSize.y - DecorationsSize.y\n\n"
	},

	"ImGui_GetScrollX lua": {
	"prefix": "reaper.ImGui_GetScrollX",
	"scope": "lua",
	"body": "reaper.ImGui_GetScrollX(${1:ctx})$0",
	"description": "Get scrolling amount [0 .. GetScrollMaxX()]\n\n"
	},

	"ImGui_GetScrollY lua": {
	"prefix": "reaper.ImGui_GetScrollY",
	"scope": "lua",
	"body": "reaper.ImGui_GetScrollY(${1:ctx})$0",
	"description": "Get scrolling amount [0 .. GetScrollMaxY()]\n\n"
	},

	"ImGui_GetStyleColor lua": {
	"prefix": "reaper.ImGui_GetStyleColor",
	"scope": "lua",
	"body": "reaper.ImGui_GetStyleColor(${1:ctx}, ${2:idx})$0",
	"description": "Retrieve style color as stored in ImGuiStyle structure.\nUse to feed back into PushStyleColor, Otherwise use GetColor to get style color\nwith style alpha baked in. See Col_* for available style colors.\n\n"
	},

	"ImGui_GetStyleVar lua": {
	"prefix": "reaper.ImGui_GetStyleVar",
	"scope": "lua",
	"body": "val1, val2 = reaper.ImGui_GetStyleVar(${1:ctx}, ${2:var_idx})$0",
	"description": ""
	},

	"ImGui_GetTextLineHeight lua": {
	"prefix": "reaper.ImGui_GetTextLineHeight",
	"scope": "lua",
	"body": "reaper.ImGui_GetTextLineHeight(${1:ctx})$0",
	"description": "Same as GetFontSize\n\n"
	},

	"ImGui_GetTextLineHeightWithSpacing lua": {
	"prefix": "reaper.ImGui_GetTextLineHeightWithSpacing",
	"scope": "lua",
	"body": "reaper.ImGui_GetTextLineHeightWithSpacing(${1:ctx})$0",
	"description": "GetFontSize + StyleVar_ItemSpacing.y\n(distance in pixels between 2 consecutive lines of text).\n\n"
	},

	"ImGui_GetTime lua": {
	"prefix": "reaper.ImGui_GetTime",
	"scope": "lua",
	"body": "reaper.ImGui_GetTime(${1:ctx})$0",
	"description": "Get global imgui time. Incremented every frame.\n\n"
	},

	"ImGui_GetTreeNodeToLabelSpacing lua": {
	"prefix": "reaper.ImGui_GetTreeNodeToLabelSpacing",
	"scope": "lua",
	"body": "reaper.ImGui_GetTreeNodeToLabelSpacing(${1:ctx})$0",
	"description": "Horizontal distance preceding label when using TreeNode*() or Bullet()\n== (GetFontSize + StyleVar_FramePadding.x*2) for a regular unframed TreeNode.\n\n"
	},

	"ImGui_GetVersion lua": {
	"prefix": "reaper.ImGui_GetVersion",
	"scope": "lua",
	"body": "imgui_version, imgui_version_num, reaimgui_version = reaper.ImGui_GetVersion()\n\n",
	"description": ""
	},

	"ImGui_GetWindowContentRegionMax lua": {
	"prefix": "reaper.ImGui_GetWindowContentRegionMax",
	"scope": "lua",
	"body": "x, y = reaper.ImGui_GetWindowContentRegionMax(${1:ctx})$0",
	"description": "Content boundaries max (roughly (0,0)+Size-Scroll) where Size can be\noverridden with SetNextWindowContentSize, in window coordinates.\n\n"
	},

	"ImGui_GetWindowContentRegionMin lua": {
	"prefix": "reaper.ImGui_GetWindowContentRegionMin",
	"scope": "lua",
	"body": "x, y = reaper.ImGui_GetWindowContentRegionMin(${1:ctx})$0",
	"description": "Content boundaries min (roughly (0,0)-Scroll), in window coordinates.\n\n"
	},

	"ImGui_GetWindowDockID lua": {
	"prefix": "reaper.ImGui_GetWindowDockID",
	"scope": "lua",
	"body": "reaper.ImGui_GetWindowDockID(${1:ctx})$0",
	"description": ""
	},

	"ImGui_GetWindowDpiScale lua": {
	"prefix": "reaper.ImGui_GetWindowDpiScale",
	"scope": "lua",
	"body": "reaper.ImGui_GetWindowDpiScale(${1:ctx})$0",
	"description": "Get DPI scale currently associated to the current window's viewport\n(1.0 = 96 DPI).\n\n"
	},

	"ImGui_GetWindowDrawList lua": {
	"prefix": "reaper.ImGui_GetWindowDrawList",
	"scope": "lua",
	"body": "reaper.ImGui_GetWindowDrawList(${1:ctx})$0",
	"description": "The draw list associated to the current window, to append your own drawing primitives\n\n"
	},

	"ImGui_GetWindowHeight lua": {
	"prefix": "reaper.ImGui_GetWindowHeight",
	"scope": "lua",
	"body": "reaper.ImGui_GetWindowHeight(${1:ctx})$0",
	"description": "Get current window height (shortcut for (select(2, GetWindowSize())).\n\n"
	},

	"ImGui_GetWindowPos lua": {
	"prefix": "reaper.ImGui_GetWindowPos",
	"scope": "lua",
	"body": "x, y = reaper.ImGui_GetWindowPos(${1:ctx})$0",
	"description": "Get current window position in screen space (useful if you want to do your own\ndrawing via the DrawList API).\n\n"
	},

	"ImGui_GetWindowSize lua": {
	"prefix": "reaper.ImGui_GetWindowSize",
	"scope": "lua",
	"body": "w, h = reaper.ImGui_GetWindowSize(${1:ctx})$0",
	"description": "Get current window size\n\n"
	},

	"ImGui_GetWindowViewport lua": {
	"prefix": "reaper.ImGui_GetWindowViewport",
	"scope": "lua",
	"body": "reaper.ImGui_GetWindowViewport(${1:ctx})$0",
	"description": "Get viewport currently associated to the current window.\n\n"
	},

	"ImGui_GetWindowWidth lua": {
	"prefix": "reaper.ImGui_GetWindowWidth",
	"scope": "lua",
	"body": "reaper.ImGui_GetWindowWidth(${1:ctx})$0",
	"description": "Get current window width (shortcut for (select(1, GetWindowSize())).\n\n"
	},

	"ImGui_HoveredFlags_AllowWhenBlockedByActiveItem lua": {
	"prefix": "reaper.ImGui_HoveredFlags_AllowWhenBlockedByActiveItem",
	"scope": "lua",
	"body": "reaper.ImGui_HoveredFlags_AllowWhenBlockedByActiveItem()\n\n",
	"description": "Return true even if an active item is blocking access to this item/window.\nUseful for Drag and Drop patterns.\n\n"
	},

	"ImGui_HoveredFlags_AllowWhenBlockedByPopup lua": {
	"prefix": "reaper.ImGui_HoveredFlags_AllowWhenBlockedByPopup",
	"scope": "lua",
	"body": "reaper.ImGui_HoveredFlags_AllowWhenBlockedByPopup()\n\n",
	"description": "Return true even if a popup window is normally blocking access to this item/window.\n\n"
	},

	"ImGui_HoveredFlags_AllowWhenDisabled lua": {
	"prefix": "reaper.ImGui_HoveredFlags_AllowWhenDisabled",
	"scope": "lua",
	"body": "reaper.ImGui_HoveredFlags_AllowWhenDisabled()\n\n",
	"description": "IsItemHovered only: Return true even if the item is disabled.\n\n"
	},

	"ImGui_HoveredFlags_AllowWhenOverlapped lua": {
	"prefix": "reaper.ImGui_HoveredFlags_AllowWhenOverlapped",
	"scope": "lua",
	"body": "reaper.ImGui_HoveredFlags_AllowWhenOverlapped()\n\n",
	"description": "IsItemHovered only: Return true even if the position is obstructed or\noverlapped by another window.\n\n"
	},

	"ImGui_HoveredFlags_AnyWindow lua": {
	"prefix": "reaper.ImGui_HoveredFlags_AnyWindow",
	"scope": "lua",
	"body": "reaper.ImGui_HoveredFlags_AnyWindow()\n\n",
	"description": "IsWindowHovered only: Return true if any window is hovered.\n\n"
	},

	"ImGui_HoveredFlags_ChildWindows lua": {
	"prefix": "reaper.ImGui_HoveredFlags_ChildWindows",
	"scope": "lua",
	"body": "reaper.ImGui_HoveredFlags_ChildWindows()\n\n",
	"description": "IsWindowHovered only: Return true if any children of the window is hovered.\n\n"
	},

	"ImGui_HoveredFlags_DelayNormal lua": {
	"prefix": "reaper.ImGui_HoveredFlags_DelayNormal",
	"scope": "lua",
	"body": "reaper.ImGui_HoveredFlags_DelayNormal()\n\n",
	"description": "Return true after ConfigVar_HoverDelayNormal elapsed (~0.30 sec)\n\n"
	},

	"ImGui_HoveredFlags_DelayShort lua": {
	"prefix": "reaper.ImGui_HoveredFlags_DelayShort",
	"scope": "lua",
	"body": "reaper.ImGui_HoveredFlags_DelayShort()\n\n",
	"description": "Return true after ConfigVar_HoverDelayShort elapsed (~0.10 sec)\n\n"
	},

	"ImGui_HoveredFlags_DockHierarchy lua": {
	"prefix": "reaper.ImGui_HoveredFlags_DockHierarchy",
	"scope": "lua",
	"body": "reaper.ImGui_HoveredFlags_DockHierarchy()\n\n",
	"description": "IsWindowHovered only: Consider docking hierarchy (treat dockspace host as\nparent of docked window) (when used with _ChildWindows or _RootWindow).\n\n"
	},

	"ImGui_HoveredFlags_NoNavOverride lua": {
	"prefix": "reaper.ImGui_HoveredFlags_NoNavOverride",
	"scope": "lua",
	"body": "reaper.ImGui_HoveredFlags_NoNavOverride()\n\n",
	"description": "Disable using gamepad/keyboard navigation state when active, always query mouse.\n\n"
	},

	"ImGui_HoveredFlags_NoPopupHierarchy lua": {
	"prefix": "reaper.ImGui_HoveredFlags_NoPopupHierarchy",
	"scope": "lua",
	"body": "reaper.ImGui_HoveredFlags_NoPopupHierarchy()\n\n",
	"description": "IsWindowHovered only: Do not consider popup hierarchy (do not treat popup\nemitter as parent of popup) (when used with _ChildWindows or _RootWindow).\n\n"
	},

	"ImGui_HoveredFlags_NoSharedDelay lua": {
	"prefix": "reaper.ImGui_HoveredFlags_NoSharedDelay",
	"scope": "lua",
	"body": "reaper.ImGui_HoveredFlags_NoSharedDelay()\n\n",
	"description": "Disable shared delay system where moving from one item to the next keeps\nthe previous timer for a short time (standard for tooltips with long delays\n\n"
	},

	"ImGui_HoveredFlags_None lua": {
	"prefix": "reaper.ImGui_HoveredFlags_None",
	"scope": "lua",
	"body": "reaper.ImGui_HoveredFlags_None()\n\n",
	"description": "Return true if directly over the item/window, not obstructed by another\nwindow, not obstructed by an active popup or modal blocking inputs under them.\n\n"
	},

	"ImGui_HoveredFlags_RectOnly lua": {
	"prefix": "reaper.ImGui_HoveredFlags_RectOnly",
	"scope": "lua",
	"body": "reaper.ImGui_HoveredFlags_RectOnly()\n\n",
	"description": "HoveredFlags_AllowWhenBlockedByPopup |\nHoveredFlags_AllowWhenBlockedByActiveItem | HoveredFlags_AllowWhenOverlapped\n\n"
	},

	"ImGui_HoveredFlags_RootAndChildWindows lua": {
	"prefix": "reaper.ImGui_HoveredFlags_RootAndChildWindows",
	"scope": "lua",
	"body": "reaper.ImGui_HoveredFlags_RootAndChildWindows()\n\n",
	"description": "HoveredFlags_RootWindow | HoveredFlags_ChildWindows\n\n"
	},

	"ImGui_HoveredFlags_RootWindow lua": {
	"prefix": "reaper.ImGui_HoveredFlags_RootWindow",
	"scope": "lua",
	"body": "reaper.ImGui_HoveredFlags_RootWindow()\n\n",
	"description": "IsWindowHovered only: Test from root window (top most parent of the current hierarchy).\n\n"
	},

	"ImGui_Image lua": {
	"prefix": "reaper.ImGui_Image",
	"scope": "lua",
	"body": "reaper.ImGui_Image(${1:ImGui_Context_img}, ${2:size_w}, ${3:size_h}, ${4:optional_uv0_xIn}, ${5:optional_uv0_yIn}, ${6:optional_uv1_xIn}, ${7:optional_uv1_yIn}, ${8:optional_tint_col_rgbaIn}, ${9:optional_border_col_rgbaIn})$0",
	"description": ""
	},

	"ImGui_ImageButton lua": {
	"prefix": "reaper.ImGui_ImageButton",
	"scope": "lua",
	"body": "reaper.ImGui_ImageButton(${1:ctx}, ${2:string_img}, ${3:size_w}, ${4:size_h}, ${5:optional_uv0_xIn}, ${6:optional_uv0_yIn}, ${7:optional_uv1_xIn}, ${8:optional_uv1_yIn}, ${9:optional_bg_col_rgbaIn}, ${10:optional_tint_col_rgbaIn})$0",
	"description": ""
	},

	"ImGui_ImageSet_Add lua": {
	"prefix": "reaper.ImGui_ImageSet_Add",
	"scope": "lua",
	"body": "reaper.ImGui_ImageSet_Add(${1:set}, ${2:number_img})$0",
	"description": "'img' cannot be another ImageSet.\n\n"
	},

	"ImGui_Image_GetSize lua": {
	"prefix": "reaper.ImGui_Image_GetSize",
	"scope": "lua",
	"body": "w, h = reaper.ImGui_Image_GetSize(${1:img})$0",
	"description": ""
	},

	"ImGui_Indent lua": {
	"prefix": "reaper.ImGui_Indent",
	"scope": "lua",
	"body": "reaper.ImGui_Indent(${1:ctx}, ${2:optional_indent_wIn})$0",
	"description": "Move content position toward the right, by 'indent_w', or\nStyleVar_IndentSpacing if 'indent_w' <= 0. See Unindent.\n\n"
	},

	"ImGui_InputDouble lua": {
	"prefix": "reaper.ImGui_InputDouble",
	"scope": "lua",
	"body": "retval, v = reaper.ImGui_InputDouble(${1:ctx}, ${2:label}, ${3:v}, ${4:optional_stepIn}, ${5:optional_step_fastIn}, ${6:optional_formatIn}, ${7:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_InputDouble2 lua": {
	"prefix": "reaper.ImGui_InputDouble2",
	"scope": "lua",
	"body": "retval, v1, v2 = reaper.ImGui_InputDouble2(${1:ctx}, ${2:label}, ${3:v1}, ${4:v2}, ${5:optional_formatIn}, ${6:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_InputDouble3 lua": {
	"prefix": "reaper.ImGui_InputDouble3",
	"scope": "lua",
	"body": "retval, v1, v2, v3 = reaper.ImGui_InputDouble3(${1:ctx}, ${2:label}, ${3:v1}, ${4:v2}, ${5:v3}, ${6:optional_formatIn}, ${7:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_InputDouble4 lua": {
	"prefix": "reaper.ImGui_InputDouble4",
	"scope": "lua",
	"body": "retval, v1, v2, v3, v4 = reaper.ImGui_InputDouble4(${1:ctx}, ${2:label}, ${3:v1}, ${4:v2}, ${5:v3}, ${6:v4}, ${7:optional_formatIn}, ${8:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_InputDoubleN lua": {
	"prefix": "reaper.ImGui_InputDoubleN",
	"scope": "lua",
	"body": "reaper.ImGui_InputDoubleN(${1:ctx}, ${2:string_values}, ${3:optional_stepIn}, ${4:optional_step_fastIn}, ${5:optional_formatIn}, ${6:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_InputInt lua": {
	"prefix": "reaper.ImGui_InputInt",
	"scope": "lua",
	"body": "retval, v = reaper.ImGui_InputInt(${1:ctx}, ${2:label}, ${3:v}, ${4:optional_stepIn}, ${5:optional_step_fastIn}, ${6:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_InputInt2 lua": {
	"prefix": "reaper.ImGui_InputInt2",
	"scope": "lua",
	"body": "retval, v1, v2 = reaper.ImGui_InputInt2(${1:ctx}, ${2:label}, ${3:v1}, ${4:v2}, ${5:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_InputInt3 lua": {
	"prefix": "reaper.ImGui_InputInt3",
	"scope": "lua",
	"body": "retval, v1, v2, v3 = reaper.ImGui_InputInt3(${1:ctx}, ${2:label}, ${3:v1}, ${4:v2}, ${5:v3}, ${6:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_InputInt4 lua": {
	"prefix": "reaper.ImGui_InputInt4",
	"scope": "lua",
	"body": "retval, v1, v2, v3, v4 = reaper.ImGui_InputInt4(${1:ctx}, ${2:label}, ${3:v1}, ${4:v2}, ${5:v3}, ${6:v4}, ${7:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_InputText lua": {
	"prefix": "reaper.ImGui_InputText",
	"scope": "lua",
	"body": "retval, buf = reaper.ImGui_InputText(${1:ctx}, ${2:label}, ${3:buf}, ${4:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_InputTextFlags_AllowTabInput lua": {
	"prefix": "reaper.ImGui_InputTextFlags_AllowTabInput",
	"scope": "lua",
	"body": "reaper.ImGui_InputTextFlags_AllowTabInput()\n\n",
	"description": "Pressing TAB input a '\t' character into the text field.\n\n"
	},

	"ImGui_InputTextFlags_AlwaysOverwrite lua": {
	"prefix": "reaper.ImGui_InputTextFlags_AlwaysOverwrite",
	"scope": "lua",
	"body": "reaper.ImGui_InputTextFlags_AlwaysOverwrite()\n\n",
	"description": "Overwrite mode.\n\n"
	},

	"ImGui_InputTextFlags_AutoSelectAll lua": {
	"prefix": "reaper.ImGui_InputTextFlags_AutoSelectAll",
	"scope": "lua",
	"body": "reaper.ImGui_InputTextFlags_AutoSelectAll()\n\n",
	"description": "Select entire text when first taking mouse focus.\n\n"
	},

	"ImGui_InputTextFlags_CharsDecimal lua": {
	"prefix": "reaper.ImGui_InputTextFlags_CharsDecimal",
	"scope": "lua",
	"body": "reaper.ImGui_InputTextFlags_CharsDecimal()\n\n",
	"description": "Allow 0123456789.+-*/.\n\n"
	},

	"ImGui_InputTextFlags_CharsHexadecimal lua": {
	"prefix": "reaper.ImGui_InputTextFlags_CharsHexadecimal",
	"scope": "lua",
	"body": "reaper.ImGui_InputTextFlags_CharsHexadecimal()\n\n",
	"description": "Allow 0123456789ABCDEFabcdef.\n\n"
	},

	"ImGui_InputTextFlags_CharsNoBlank lua": {
	"prefix": "reaper.ImGui_InputTextFlags_CharsNoBlank",
	"scope": "lua",
	"body": "reaper.ImGui_InputTextFlags_CharsNoBlank()\n\n",
	"description": "Filter out spaces, tabs.\n\n"
	},

	"ImGui_InputTextFlags_CharsScientific lua": {
	"prefix": "reaper.ImGui_InputTextFlags_CharsScientific",
	"scope": "lua",
	"body": "reaper.ImGui_InputTextFlags_CharsScientific()\n\n",
	"description": "Allow 0123456789.+-*/eE (Scientific notation input).\n\n"
	},

	"ImGui_InputTextFlags_CharsUppercase lua": {
	"prefix": "reaper.ImGui_InputTextFlags_CharsUppercase",
	"scope": "lua",
	"body": "reaper.ImGui_InputTextFlags_CharsUppercase()\n\n",
	"description": "Turn a..z into A..Z.\n\n"
	},

	"ImGui_InputTextFlags_CtrlEnterForNewLine lua": {
	"prefix": "reaper.ImGui_InputTextFlags_CtrlEnterForNewLine",
	"scope": "lua",
	"body": "reaper.ImGui_InputTextFlags_CtrlEnterForNewLine()\n\n",
	"description": "In multi-line mode, unfocus with Enter, add new line with Ctrl+Enter\n(default is opposite: unfocus with Ctrl+Enter, add line with Enter).\n\n"
	},

	"ImGui_InputTextFlags_EnterReturnsTrue lua": {
	"prefix": "reaper.ImGui_InputTextFlags_EnterReturnsTrue",
	"scope": "lua",
	"body": "reaper.ImGui_InputTextFlags_EnterReturnsTrue()\n\n",
	"description": "Return 'true' when Enter is pressed (as opposed to every time the value was\nmodified). Consider looking at the IsItemDeactivatedAfterEdit function.\n\n"
	},

	"ImGui_InputTextFlags_EscapeClearsAll lua": {
	"prefix": "reaper.ImGui_InputTextFlags_EscapeClearsAll",
	"scope": "lua",
	"body": "reaper.ImGui_InputTextFlags_EscapeClearsAll()\n\n",
	"description": "Escape key clears content if not empty, and deactivate otherwise\n(constrast to default behavior of Escape to revert).\n\n"
	},

	"ImGui_InputTextFlags_NoHorizontalScroll lua": {
	"prefix": "reaper.ImGui_InputTextFlags_NoHorizontalScroll",
	"scope": "lua",
	"body": "reaper.ImGui_InputTextFlags_NoHorizontalScroll()\n\n",
	"description": "Disable following the cursor horizontally.\n\n"
	},

	"ImGui_InputTextFlags_NoUndoRedo lua": {
	"prefix": "reaper.ImGui_InputTextFlags_NoUndoRedo",
	"scope": "lua",
	"body": "reaper.ImGui_InputTextFlags_NoUndoRedo()\n\n",
	"description": "Disable undo/redo. Note that input text owns the text data while active.\n\n"
	},

	"ImGui_InputTextFlags_None lua": {
	"prefix": "reaper.ImGui_InputTextFlags_None",
	"scope": "lua",
	"body": "reaper.ImGui_InputTextFlags_None()\n\n",
	"description": ""
	},

	"ImGui_InputTextFlags_Password lua": {
	"prefix": "reaper.ImGui_InputTextFlags_Password",
	"scope": "lua",
	"body": "reaper.ImGui_InputTextFlags_Password()\n\n",
	"description": "Password mode, display all characters as '*'.\n\n"
	},

	"ImGui_InputTextFlags_ReadOnly lua": {
	"prefix": "reaper.ImGui_InputTextFlags_ReadOnly",
	"scope": "lua",
	"body": "reaper.ImGui_InputTextFlags_ReadOnly()\n\n",
	"description": "Read-only mode.\n\n"
	},

	"ImGui_InputTextMultiline lua": {
	"prefix": "reaper.ImGui_InputTextMultiline",
	"scope": "lua",
	"body": "retval, buf = reaper.ImGui_InputTextMultiline(${1:ctx}, ${2:label}, ${3:buf}, ${4:optional_size_wIn}, ${5:optional_size_hIn}, ${6:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_InputTextWithHint lua": {
	"prefix": "reaper.ImGui_InputTextWithHint",
	"scope": "lua",
	"body": "retval, buf = reaper.ImGui_InputTextWithHint(${1:ctx}, ${2:label}, ${3:hint}, ${4:buf}, ${5:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_InvisibleButton lua": {
	"prefix": "reaper.ImGui_InvisibleButton",
	"scope": "lua",
	"body": "reaper.ImGui_InvisibleButton(${1:ctx}, ${2:str_id}, ${3:size_w}, ${4:size_h}, ${5:optional_flagsIn})$0",
	"description": "Flexible button behavior without the visuals, frequently useful to build\ncustom behaviors using the public api (along with IsItemActive, IsItemHovered, etc.).\n\n"
	},

	"ImGui_IsAnyItemActive lua": {
	"prefix": "reaper.ImGui_IsAnyItemActive",
	"scope": "lua",
	"body": "reaper.ImGui_IsAnyItemActive(${1:ctx})$0",
	"description": ""
	},

	"ImGui_IsAnyItemFocused lua": {
	"prefix": "reaper.ImGui_IsAnyItemFocused",
	"scope": "lua",
	"body": "reaper.ImGui_IsAnyItemFocused(${1:ctx})$0",
	"description": ""
	},

	"ImGui_IsAnyItemHovered lua": {
	"prefix": "reaper.ImGui_IsAnyItemHovered",
	"scope": "lua",
	"body": "reaper.ImGui_IsAnyItemHovered(${1:ctx})$0",
	"description": ""
	},

	"ImGui_IsAnyMouseDown lua": {
	"prefix": "reaper.ImGui_IsAnyMouseDown",
	"scope": "lua",
	"body": "reaper.ImGui_IsAnyMouseDown(${1:ctx})$0",
	"description": "Is any mouse button held?\n\n"
	},

	"ImGui_IsItemActivated lua": {
	"prefix": "reaper.ImGui_IsItemActivated",
	"scope": "lua",
	"body": "reaper.ImGui_IsItemActivated(${1:ctx})$0",
	"description": "Was the last item just made active (item was previously inactive).\n\n"
	},

	"ImGui_IsItemActive lua": {
	"prefix": "reaper.ImGui_IsItemActive",
	"scope": "lua",
	"body": "reaper.ImGui_IsItemActive(${1:ctx})$0",
	"description": "Is the last item active? (e.g. button being held, text field being edited.\nThis will continuously return true while holding mouse button on an item.\nItems that don't interact will always return false.\n\n"
	},

	"ImGui_IsItemClicked lua": {
	"prefix": "reaper.ImGui_IsItemClicked",
	"scope": "lua",
	"body": "reaper.ImGui_IsItemClicked(${1:ctx}, ${2:optional_mouse_buttonIn})$0",
	"description": "Is the last item clicked? (e.g. button/node just clicked on)\n== IsMouseClicked(mouse_button) && IsItemHovered().\nThis is NOT equivalent to the behavior of e.g. Button.\nMost widgets have specific reactions based on mouse-up/down state, mouse position etc.\n\n"
	},

	"ImGui_IsItemDeactivated lua": {
	"prefix": "reaper.ImGui_IsItemDeactivated",
	"scope": "lua",
	"body": "reaper.ImGui_IsItemDeactivated(${1:ctx})$0",
	"description": "Was the last item just made inactive (item was previously active).\nUseful for Undo/Redo patterns with widgets that require continuous editing.\n\n"
	},

	"ImGui_IsItemDeactivatedAfterEdit lua": {
	"prefix": "reaper.ImGui_IsItemDeactivatedAfterEdit",
	"scope": "lua",
	"body": "reaper.ImGui_IsItemDeactivatedAfterEdit(${1:ctx})$0",
	"description": "Was the last item just made inactive and made a value change when it was\nactive? (e.g. Slider/Drag moved).\nUseful for Undo/Redo patterns with widgets that require continuous editing. Note\nthat you may get false positives (some widgets such as Combo/ListBox/Selectable\nwill return true even when clicking an already selected item).\n\n"
	},

	"ImGui_IsItemEdited lua": {
	"prefix": "reaper.ImGui_IsItemEdited",
	"scope": "lua",
	"body": "reaper.ImGui_IsItemEdited(${1:ctx})$0",
	"description": "Did the last item modify its underlying value this frame? or was pressed?\nThis is generally the same as the 'bool' return value of many widgets.\n\n"
	},

	"ImGui_IsItemFocused lua": {
	"prefix": "reaper.ImGui_IsItemFocused",
	"scope": "lua",
	"body": "reaper.ImGui_IsItemFocused(${1:ctx})$0",
	"description": "Is the last item focused for keyboard/gamepad navigation?\n\n"
	},

	"ImGui_IsItemHovered lua": {
	"prefix": "reaper.ImGui_IsItemHovered",
	"scope": "lua",
	"body": "reaper.ImGui_IsItemHovered(${1:ctx}, ${2:optional_flagsIn})$0",
	"description": "Is the last item hovered? (and usable, aka not blocked by a popup, etc.).\nSee HoveredFlags_* for more options.\n\n"
	},

	"ImGui_IsItemToggledOpen lua": {
	"prefix": "reaper.ImGui_IsItemToggledOpen",
	"scope": "lua",
	"body": "reaper.ImGui_IsItemToggledOpen(${1:ctx})$0",
	"description": "Was the last item open state toggled? Set by TreeNode.\n\n"
	},

	"ImGui_IsItemVisible lua": {
	"prefix": "reaper.ImGui_IsItemVisible",
	"scope": "lua",
	"body": "reaper.ImGui_IsItemVisible(${1:ctx})$0",
	"description": "Is the last item visible? (items may be out of sight because of clipping/scrolling)\n\n"
	},

	"ImGui_IsKeyDown lua": {
	"prefix": "reaper.ImGui_IsKeyDown",
	"scope": "lua",
	"body": "reaper.ImGui_IsKeyDown(${1:ctx}, ${2:key})$0",
	"description": "Is key being held.\n\n"
	},

	"ImGui_IsKeyPressed lua": {
	"prefix": "reaper.ImGui_IsKeyPressed",
	"scope": "lua",
	"body": "reaper.ImGui_IsKeyPressed(${1:ctx}, ${2:key}, ${3:optional_repeatIn})$0",
	"description": "Was key pressed (went from !Down to Down)?\nIf repeat=true, uses ConfigVar_KeyRepeatDelay / ConfigVar_KeyRepeatRate.\n\n"
	},

	"ImGui_IsKeyReleased lua": {
	"prefix": "reaper.ImGui_IsKeyReleased",
	"scope": "lua",
	"body": "reaper.ImGui_IsKeyReleased(${1:ctx}, ${2:key})$0",
	"description": "Was key released (went from Down to !Down)?\n\n"
	},

	"ImGui_IsMouseClicked lua": {
	"prefix": "reaper.ImGui_IsMouseClicked",
	"scope": "lua",
	"body": "reaper.ImGui_IsMouseClicked(${1:ctx}, ${2:button}, ${3:optional_repeatIn})$0",
	"description": "Did mouse button clicked? (went from !Down to Down).\nSame as GetMouseClickedCount() == 1.\n\n"
	},

	"ImGui_IsMouseDoubleClicked lua": {
	"prefix": "reaper.ImGui_IsMouseDoubleClicked",
	"scope": "lua",
	"body": "reaper.ImGui_IsMouseDoubleClicked(${1:ctx}, ${2:button})$0",
	"description": "Did mouse button double-clicked? Same as GetMouseClickedCount() == 2.\n(Note that a double-click will also report IsMouseClicked() == true)\n\n"
	},

	"ImGui_IsMouseDown lua": {
	"prefix": "reaper.ImGui_IsMouseDown",
	"scope": "lua",
	"body": "reaper.ImGui_IsMouseDown(${1:ctx}, ${2:button})$0",
	"description": "Is mouse button held?\n\n"
	},

	"ImGui_IsMouseDragging lua": {
	"prefix": "reaper.ImGui_IsMouseDragging",
	"scope": "lua",
	"body": "reaper.ImGui_IsMouseDragging(${1:ctx}, ${2:button}, ${3:optional_lock_thresholdIn})$0",
	"description": "Is mouse dragging? (if lock_threshold < -1.0, uses ConfigVar_MouseDragThreshold)\n\n"
	},

	"ImGui_IsMouseHoveringRect lua": {
	"prefix": "reaper.ImGui_IsMouseHoveringRect",
	"scope": "lua",
	"body": "reaper.ImGui_IsMouseHoveringRect(${1:ctx}, ${2:r_min_x}, ${3:r_min_y}, ${4:r_max_x}, ${5:r_max_y}, ${6:optional_clipIn})$0",
	"description": "Is mouse hovering given bounding rect (in screen space).\nClipped by current clipping settings, but disregarding of other consideration\nof focus/window ordering/popup-block.\n\n"
	},

	"ImGui_IsMousePosValid lua": {
	"prefix": "reaper.ImGui_IsMousePosValid",
	"scope": "lua",
	"body": "reaper.ImGui_IsMousePosValid(${1:ctx}, ${2:optional_mouse_pos_xIn}, ${3:optional_mouse_pos_yIn})$0",
	"description": ""
	},

	"ImGui_IsMouseReleased lua": {
	"prefix": "reaper.ImGui_IsMouseReleased",
	"scope": "lua",
	"body": "reaper.ImGui_IsMouseReleased(${1:ctx}, ${2:button})$0",
	"description": "Did mouse button released? (went from Down to !Down)\n\n"
	},

	"ImGui_IsPopupOpen lua": {
	"prefix": "reaper.ImGui_IsPopupOpen",
	"scope": "lua",
	"body": "reaper.ImGui_IsPopupOpen(${1:ctx}, ${2:str_id}, ${3:optional_flagsIn})$0",
	"description": "Return true if the popup is open at the current BeginPopup level of the\npopup stack.\n- With PopupFlags_AnyPopupId: return true if any popup is open at the current\nBeginPopup() level of the popup stack.\n- With PopupFlags_AnyPopupId + PopupFlags_AnyPopupLevel: return true if any\npopup is open.\n\n"
	},

	"ImGui_IsRectVisible lua": {
	"prefix": "reaper.ImGui_IsRectVisible",
	"scope": "lua",
	"body": "reaper.ImGui_IsRectVisible(${1:ctx}, ${2:size_w}, ${3:size_h})$0",
	"description": "Test if rectangle (of given size, starting from cursor position) is\nvisible / not clipped.\n\n"
	},

	"ImGui_IsRectVisibleEx lua": {
	"prefix": "reaper.ImGui_IsRectVisibleEx",
	"scope": "lua",
	"body": "reaper.ImGui_IsRectVisibleEx(${1:ctx}, ${2:rect_min_x}, ${3:rect_min_y}, ${4:rect_max_x}, ${5:rect_max_y})$0",
	"description": "Test if rectangle (in screen space) is visible / not clipped. to perform\ncoarse clipping on user's side.\n\n"
	},

	"ImGui_IsWindowAppearing lua": {
	"prefix": "reaper.ImGui_IsWindowAppearing",
	"scope": "lua",
	"body": "reaper.ImGui_IsWindowAppearing(${1:ctx})$0",
	"description": "Use after Begin/BeginPopup/BeginPopupModal to tell if a window just opened.\n\n"
	},

	"ImGui_IsWindowDocked lua": {
	"prefix": "reaper.ImGui_IsWindowDocked",
	"scope": "lua",
	"body": "reaper.ImGui_IsWindowDocked(${1:ctx})$0",
	"description": "Is current window docked into another window or a REAPER docker?\n\n"
	},

	"ImGui_IsWindowFocused lua": {
	"prefix": "reaper.ImGui_IsWindowFocused",
	"scope": "lua",
	"body": "reaper.ImGui_IsWindowFocused(${1:ctx}, ${2:optional_flagsIn})$0",
	"description": "Is current window focused? or its root/child, depending on flags.\nSee flags for options.\n\n"
	},

	"ImGui_IsWindowHovered lua": {
	"prefix": "reaper.ImGui_IsWindowHovered",
	"scope": "lua",
	"body": "reaper.ImGui_IsWindowHovered(${1:ctx}, ${2:optional_flagsIn})$0",
	"description": "Is current window hovered (and typically: not blocked by a popup/modal)?\nSee flags for options.\n\n"
	},

	"ImGui_Key_0 lua": {
	"prefix": "reaper.ImGui_Key_0",
	"scope": "lua",
	"body": "reaper.ImGui_Key_0()\n\n",
	"description": ""
	},

	"ImGui_Key_1 lua": {
	"prefix": "reaper.ImGui_Key_1",
	"scope": "lua",
	"body": "reaper.ImGui_Key_1()\n\n",
	"description": ""
	},

	"ImGui_Key_2 lua": {
	"prefix": "reaper.ImGui_Key_2",
	"scope": "lua",
	"body": "reaper.ImGui_Key_2()\n\n",
	"description": ""
	},

	"ImGui_Key_3 lua": {
	"prefix": "reaper.ImGui_Key_3",
	"scope": "lua",
	"body": "reaper.ImGui_Key_3()\n\n",
	"description": ""
	},

	"ImGui_Key_4 lua": {
	"prefix": "reaper.ImGui_Key_4",
	"scope": "lua",
	"body": "reaper.ImGui_Key_4()\n\n",
	"description": ""
	},

	"ImGui_Key_5 lua": {
	"prefix": "reaper.ImGui_Key_5",
	"scope": "lua",
	"body": "reaper.ImGui_Key_5()\n\n",
	"description": ""
	},

	"ImGui_Key_6 lua": {
	"prefix": "reaper.ImGui_Key_6",
	"scope": "lua",
	"body": "reaper.ImGui_Key_6()\n\n",
	"description": ""
	},

	"ImGui_Key_7 lua": {
	"prefix": "reaper.ImGui_Key_7",
	"scope": "lua",
	"body": "reaper.ImGui_Key_7()\n\n",
	"description": ""
	},

	"ImGui_Key_8 lua": {
	"prefix": "reaper.ImGui_Key_8",
	"scope": "lua",
	"body": "reaper.ImGui_Key_8()\n\n",
	"description": ""
	},

	"ImGui_Key_9 lua": {
	"prefix": "reaper.ImGui_Key_9",
	"scope": "lua",
	"body": "reaper.ImGui_Key_9()\n\n",
	"description": ""
	},

	"ImGui_Key_A lua": {
	"prefix": "reaper.ImGui_Key_A",
	"scope": "lua",
	"body": "reaper.ImGui_Key_A()\n\n",
	"description": ""
	},

	"ImGui_Key_Apostrophe lua": {
	"prefix": "reaper.ImGui_Key_Apostrophe",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Apostrophe()\n\n",
	"description": "'\n\n"
	},

	"ImGui_Key_B lua": {
	"prefix": "reaper.ImGui_Key_B",
	"scope": "lua",
	"body": "reaper.ImGui_Key_B()\n\n",
	"description": ""
	},

	"ImGui_Key_Backslash lua": {
	"prefix": "reaper.ImGui_Key_Backslash",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Backslash()\n\n",
	"description": "\\n\n"
	},

	"ImGui_Key_Backspace lua": {
	"prefix": "reaper.ImGui_Key_Backspace",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Backspace()\n\n",
	"description": ""
	},

	"ImGui_Key_C lua": {
	"prefix": "reaper.ImGui_Key_C",
	"scope": "lua",
	"body": "reaper.ImGui_Key_C()\n\n",
	"description": ""
	},

	"ImGui_Key_CapsLock lua": {
	"prefix": "reaper.ImGui_Key_CapsLock",
	"scope": "lua",
	"body": "reaper.ImGui_Key_CapsLock()\n\n",
	"description": ""
	},

	"ImGui_Key_Comma lua": {
	"prefix": "reaper.ImGui_Key_Comma",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Comma()\n\n",
	"description": ",\n\n"
	},

	"ImGui_Key_D lua": {
	"prefix": "reaper.ImGui_Key_D",
	"scope": "lua",
	"body": "reaper.ImGui_Key_D()\n\n",
	"description": ""
	},

	"ImGui_Key_Delete lua": {
	"prefix": "reaper.ImGui_Key_Delete",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Delete()\n\n",
	"description": ""
	},

	"ImGui_Key_DownArrow lua": {
	"prefix": "reaper.ImGui_Key_DownArrow",
	"scope": "lua",
	"body": "reaper.ImGui_Key_DownArrow()\n\n",
	"description": ""
	},

	"ImGui_Key_E lua": {
	"prefix": "reaper.ImGui_Key_E",
	"scope": "lua",
	"body": "reaper.ImGui_Key_E()\n\n",
	"description": ""
	},

	"ImGui_Key_End lua": {
	"prefix": "reaper.ImGui_Key_End",
	"scope": "lua",
	"body": "reaper.ImGui_Key_End()\n\n",
	"description": ""
	},

	"ImGui_Key_Enter lua": {
	"prefix": "reaper.ImGui_Key_Enter",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Enter()\n\n",
	"description": ""
	},

	"ImGui_Key_Equal lua": {
	"prefix": "reaper.ImGui_Key_Equal",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Equal()\n\n",
	"description": "=\n\n"
	},

	"ImGui_Key_Escape lua": {
	"prefix": "reaper.ImGui_Key_Escape",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Escape()\n\n",
	"description": ""
	},

	"ImGui_Key_F lua": {
	"prefix": "reaper.ImGui_Key_F",
	"scope": "lua",
	"body": "reaper.ImGui_Key_F()\n\n",
	"description": ""
	},

	"ImGui_Key_F1 lua": {
	"prefix": "reaper.ImGui_Key_F1",
	"scope": "lua",
	"body": "reaper.ImGui_Key_F1()\n\n",
	"description": ""
	},

	"ImGui_Key_F10 lua": {
	"prefix": "reaper.ImGui_Key_F10",
	"scope": "lua",
	"body": "reaper.ImGui_Key_F10()\n\n",
	"description": ""
	},

	"ImGui_Key_F11 lua": {
	"prefix": "reaper.ImGui_Key_F11",
	"scope": "lua",
	"body": "reaper.ImGui_Key_F11()\n\n",
	"description": ""
	},

	"ImGui_Key_F12 lua": {
	"prefix": "reaper.ImGui_Key_F12",
	"scope": "lua",
	"body": "reaper.ImGui_Key_F12()\n\n",
	"description": ""
	},

	"ImGui_Key_F2 lua": {
	"prefix": "reaper.ImGui_Key_F2",
	"scope": "lua",
	"body": "reaper.ImGui_Key_F2()\n\n",
	"description": ""
	},

	"ImGui_Key_F3 lua": {
	"prefix": "reaper.ImGui_Key_F3",
	"scope": "lua",
	"body": "reaper.ImGui_Key_F3()\n\n",
	"description": ""
	},

	"ImGui_Key_F4 lua": {
	"prefix": "reaper.ImGui_Key_F4",
	"scope": "lua",
	"body": "reaper.ImGui_Key_F4()\n\n",
	"description": ""
	},

	"ImGui_Key_F5 lua": {
	"prefix": "reaper.ImGui_Key_F5",
	"scope": "lua",
	"body": "reaper.ImGui_Key_F5()\n\n",
	"description": ""
	},

	"ImGui_Key_F6 lua": {
	"prefix": "reaper.ImGui_Key_F6",
	"scope": "lua",
	"body": "reaper.ImGui_Key_F6()\n\n",
	"description": ""
	},

	"ImGui_Key_F7 lua": {
	"prefix": "reaper.ImGui_Key_F7",
	"scope": "lua",
	"body": "reaper.ImGui_Key_F7()\n\n",
	"description": ""
	},

	"ImGui_Key_F8 lua": {
	"prefix": "reaper.ImGui_Key_F8",
	"scope": "lua",
	"body": "reaper.ImGui_Key_F8()\n\n",
	"description": ""
	},

	"ImGui_Key_F9 lua": {
	"prefix": "reaper.ImGui_Key_F9",
	"scope": "lua",
	"body": "reaper.ImGui_Key_F9()\n\n",
	"description": ""
	},

	"ImGui_Key_G lua": {
	"prefix": "reaper.ImGui_Key_G",
	"scope": "lua",
	"body": "reaper.ImGui_Key_G()\n\n",
	"description": ""
	},

	"ImGui_Key_GraveAccent lua": {
	"prefix": "reaper.ImGui_Key_GraveAccent",
	"scope": "lua",
	"body": "reaper.ImGui_Key_GraveAccent()\n\n",
	"description": "`\n\n"
	},

	"ImGui_Key_H lua": {
	"prefix": "reaper.ImGui_Key_H",
	"scope": "lua",
	"body": "reaper.ImGui_Key_H()\n\n",
	"description": ""
	},

	"ImGui_Key_Home lua": {
	"prefix": "reaper.ImGui_Key_Home",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Home()\n\n",
	"description": ""
	},

	"ImGui_Key_I lua": {
	"prefix": "reaper.ImGui_Key_I",
	"scope": "lua",
	"body": "reaper.ImGui_Key_I()\n\n",
	"description": ""
	},

	"ImGui_Key_Insert lua": {
	"prefix": "reaper.ImGui_Key_Insert",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Insert()\n\n",
	"description": ""
	},

	"ImGui_Key_J lua": {
	"prefix": "reaper.ImGui_Key_J",
	"scope": "lua",
	"body": "reaper.ImGui_Key_J()\n\n",
	"description": ""
	},

	"ImGui_Key_K lua": {
	"prefix": "reaper.ImGui_Key_K",
	"scope": "lua",
	"body": "reaper.ImGui_Key_K()\n\n",
	"description": ""
	},

	"ImGui_Key_Keypad0 lua": {
	"prefix": "reaper.ImGui_Key_Keypad0",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Keypad0()\n\n",
	"description": ""
	},

	"ImGui_Key_Keypad1 lua": {
	"prefix": "reaper.ImGui_Key_Keypad1",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Keypad1()\n\n",
	"description": ""
	},

	"ImGui_Key_Keypad2 lua": {
	"prefix": "reaper.ImGui_Key_Keypad2",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Keypad2()\n\n",
	"description": ""
	},

	"ImGui_Key_Keypad3 lua": {
	"prefix": "reaper.ImGui_Key_Keypad3",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Keypad3()\n\n",
	"description": ""
	},

	"ImGui_Key_Keypad4 lua": {
	"prefix": "reaper.ImGui_Key_Keypad4",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Keypad4()\n\n",
	"description": ""
	},

	"ImGui_Key_Keypad5 lua": {
	"prefix": "reaper.ImGui_Key_Keypad5",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Keypad5()\n\n",
	"description": ""
	},

	"ImGui_Key_Keypad6 lua": {
	"prefix": "reaper.ImGui_Key_Keypad6",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Keypad6()\n\n",
	"description": ""
	},

	"ImGui_Key_Keypad7 lua": {
	"prefix": "reaper.ImGui_Key_Keypad7",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Keypad7()\n\n",
	"description": ""
	},

	"ImGui_Key_Keypad8 lua": {
	"prefix": "reaper.ImGui_Key_Keypad8",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Keypad8()\n\n",
	"description": ""
	},

	"ImGui_Key_Keypad9 lua": {
	"prefix": "reaper.ImGui_Key_Keypad9",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Keypad9()\n\n",
	"description": ""
	},

	"ImGui_Key_KeypadAdd lua": {
	"prefix": "reaper.ImGui_Key_KeypadAdd",
	"scope": "lua",
	"body": "reaper.ImGui_Key_KeypadAdd()\n\n",
	"description": ""
	},

	"ImGui_Key_KeypadDecimal lua": {
	"prefix": "reaper.ImGui_Key_KeypadDecimal",
	"scope": "lua",
	"body": "reaper.ImGui_Key_KeypadDecimal()\n\n",
	"description": ""
	},

	"ImGui_Key_KeypadDivide lua": {
	"prefix": "reaper.ImGui_Key_KeypadDivide",
	"scope": "lua",
	"body": "reaper.ImGui_Key_KeypadDivide()\n\n",
	"description": ""
	},

	"ImGui_Key_KeypadEnter lua": {
	"prefix": "reaper.ImGui_Key_KeypadEnter",
	"scope": "lua",
	"body": "reaper.ImGui_Key_KeypadEnter()\n\n",
	"description": ""
	},

	"ImGui_Key_KeypadEqual lua": {
	"prefix": "reaper.ImGui_Key_KeypadEqual",
	"scope": "lua",
	"body": "reaper.ImGui_Key_KeypadEqual()\n\n",
	"description": ""
	},

	"ImGui_Key_KeypadMultiply lua": {
	"prefix": "reaper.ImGui_Key_KeypadMultiply",
	"scope": "lua",
	"body": "reaper.ImGui_Key_KeypadMultiply()\n\n",
	"description": ""
	},

	"ImGui_Key_KeypadSubtract lua": {
	"prefix": "reaper.ImGui_Key_KeypadSubtract",
	"scope": "lua",
	"body": "reaper.ImGui_Key_KeypadSubtract()\n\n",
	"description": ""
	},

	"ImGui_Key_L lua": {
	"prefix": "reaper.ImGui_Key_L",
	"scope": "lua",
	"body": "reaper.ImGui_Key_L()\n\n",
	"description": ""
	},

	"ImGui_Key_LeftAlt lua": {
	"prefix": "reaper.ImGui_Key_LeftAlt",
	"scope": "lua",
	"body": "reaper.ImGui_Key_LeftAlt()\n\n",
	"description": ""
	},

	"ImGui_Key_LeftArrow lua": {
	"prefix": "reaper.ImGui_Key_LeftArrow",
	"scope": "lua",
	"body": "reaper.ImGui_Key_LeftArrow()\n\n",
	"description": ""
	},

	"ImGui_Key_LeftBracket lua": {
	"prefix": "reaper.ImGui_Key_LeftBracket",
	"scope": "lua",
	"body": "reaper.ImGui_Key_LeftBracket()\n\n",
	"description": "[\n\n"
	},

	"ImGui_Key_LeftCtrl lua": {
	"prefix": "reaper.ImGui_Key_LeftCtrl",
	"scope": "lua",
	"body": "reaper.ImGui_Key_LeftCtrl()\n\n",
	"description": ""
	},

	"ImGui_Key_LeftShift lua": {
	"prefix": "reaper.ImGui_Key_LeftShift",
	"scope": "lua",
	"body": "reaper.ImGui_Key_LeftShift()\n\n",
	"description": ""
	},

	"ImGui_Key_LeftSuper lua": {
	"prefix": "reaper.ImGui_Key_LeftSuper",
	"scope": "lua",
	"body": "reaper.ImGui_Key_LeftSuper()\n\n",
	"description": ""
	},

	"ImGui_Key_M lua": {
	"prefix": "reaper.ImGui_Key_M",
	"scope": "lua",
	"body": "reaper.ImGui_Key_M()\n\n",
	"description": ""
	},

	"ImGui_Key_Menu lua": {
	"prefix": "reaper.ImGui_Key_Menu",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Menu()\n\n",
	"description": ""
	},

	"ImGui_Key_Minus lua": {
	"prefix": "reaper.ImGui_Key_Minus",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Minus()\n\n",
	"description": "-\n\n"
	},

	"ImGui_Key_MouseLeft lua": {
	"prefix": "reaper.ImGui_Key_MouseLeft",
	"scope": "lua",
	"body": "reaper.ImGui_Key_MouseLeft()\n\n",
	"description": ""
	},

	"ImGui_Key_MouseMiddle lua": {
	"prefix": "reaper.ImGui_Key_MouseMiddle",
	"scope": "lua",
	"body": "reaper.ImGui_Key_MouseMiddle()\n\n",
	"description": ""
	},

	"ImGui_Key_MouseRight lua": {
	"prefix": "reaper.ImGui_Key_MouseRight",
	"scope": "lua",
	"body": "reaper.ImGui_Key_MouseRight()\n\n",
	"description": ""
	},

	"ImGui_Key_MouseWheelX lua": {
	"prefix": "reaper.ImGui_Key_MouseWheelX",
	"scope": "lua",
	"body": "reaper.ImGui_Key_MouseWheelX()\n\n",
	"description": ""
	},

	"ImGui_Key_MouseWheelY lua": {
	"prefix": "reaper.ImGui_Key_MouseWheelY",
	"scope": "lua",
	"body": "reaper.ImGui_Key_MouseWheelY()\n\n",
	"description": ""
	},

	"ImGui_Key_MouseX1 lua": {
	"prefix": "reaper.ImGui_Key_MouseX1",
	"scope": "lua",
	"body": "reaper.ImGui_Key_MouseX1()\n\n",
	"description": ""
	},

	"ImGui_Key_MouseX2 lua": {
	"prefix": "reaper.ImGui_Key_MouseX2",
	"scope": "lua",
	"body": "reaper.ImGui_Key_MouseX2()\n\n",
	"description": ""
	},

	"ImGui_Key_N lua": {
	"prefix": "reaper.ImGui_Key_N",
	"scope": "lua",
	"body": "reaper.ImGui_Key_N()\n\n",
	"description": ""
	},

	"ImGui_Key_NumLock lua": {
	"prefix": "reaper.ImGui_Key_NumLock",
	"scope": "lua",
	"body": "reaper.ImGui_Key_NumLock()\n\n",
	"description": ""
	},

	"ImGui_Key_O lua": {
	"prefix": "reaper.ImGui_Key_O",
	"scope": "lua",
	"body": "reaper.ImGui_Key_O()\n\n",
	"description": ""
	},

	"ImGui_Key_P lua": {
	"prefix": "reaper.ImGui_Key_P",
	"scope": "lua",
	"body": "reaper.ImGui_Key_P()\n\n",
	"description": ""
	},

	"ImGui_Key_PageDown lua": {
	"prefix": "reaper.ImGui_Key_PageDown",
	"scope": "lua",
	"body": "reaper.ImGui_Key_PageDown()\n\n",
	"description": ""
	},

	"ImGui_Key_PageUp lua": {
	"prefix": "reaper.ImGui_Key_PageUp",
	"scope": "lua",
	"body": "reaper.ImGui_Key_PageUp()\n\n",
	"description": ""
	},

	"ImGui_Key_Pause lua": {
	"prefix": "reaper.ImGui_Key_Pause",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Pause()\n\n",
	"description": ""
	},

	"ImGui_Key_Period lua": {
	"prefix": "reaper.ImGui_Key_Period",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Period()\n\n",
	"description": ".\n\n"
	},

	"ImGui_Key_PrintScreen lua": {
	"prefix": "reaper.ImGui_Key_PrintScreen",
	"scope": "lua",
	"body": "reaper.ImGui_Key_PrintScreen()\n\n",
	"description": ""
	},

	"ImGui_Key_Q lua": {
	"prefix": "reaper.ImGui_Key_Q",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Q()\n\n",
	"description": ""
	},

	"ImGui_Key_R lua": {
	"prefix": "reaper.ImGui_Key_R",
	"scope": "lua",
	"body": "reaper.ImGui_Key_R()\n\n",
	"description": ""
	},

	"ImGui_Key_RightAlt lua": {
	"prefix": "reaper.ImGui_Key_RightAlt",
	"scope": "lua",
	"body": "reaper.ImGui_Key_RightAlt()\n\n",
	"description": ""
	},

	"ImGui_Key_RightArrow lua": {
	"prefix": "reaper.ImGui_Key_RightArrow",
	"scope": "lua",
	"body": "reaper.ImGui_Key_RightArrow()\n\n",
	"description": ""
	},

	"ImGui_Key_RightBracket lua": {
	"prefix": "reaper.ImGui_Key_RightBracket",
	"scope": "lua",
	"body": "reaper.ImGui_Key_RightBracket()\n\n",
	"description": "]\n\n"
	},

	"ImGui_Key_RightCtrl lua": {
	"prefix": "reaper.ImGui_Key_RightCtrl",
	"scope": "lua",
	"body": "reaper.ImGui_Key_RightCtrl()\n\n",
	"description": ""
	},

	"ImGui_Key_RightShift lua": {
	"prefix": "reaper.ImGui_Key_RightShift",
	"scope": "lua",
	"body": "reaper.ImGui_Key_RightShift()\n\n",
	"description": ""
	},

	"ImGui_Key_RightSuper lua": {
	"prefix": "reaper.ImGui_Key_RightSuper",
	"scope": "lua",
	"body": "reaper.ImGui_Key_RightSuper()\n\n",
	"description": ""
	},

	"ImGui_Key_S lua": {
	"prefix": "reaper.ImGui_Key_S",
	"scope": "lua",
	"body": "reaper.ImGui_Key_S()\n\n",
	"description": ""
	},

	"ImGui_Key_ScrollLock lua": {
	"prefix": "reaper.ImGui_Key_ScrollLock",
	"scope": "lua",
	"body": "reaper.ImGui_Key_ScrollLock()\n\n",
	"description": ""
	},

	"ImGui_Key_Semicolon lua": {
	"prefix": "reaper.ImGui_Key_Semicolon",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Semicolon()\n\n",
	"description": ";\n\n"
	},

	"ImGui_Key_Slash lua": {
	"prefix": "reaper.ImGui_Key_Slash",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Slash()\n\n",
	"description": "/\n\n"
	},

	"ImGui_Key_Space lua": {
	"prefix": "reaper.ImGui_Key_Space",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Space()\n\n",
	"description": ""
	},

	"ImGui_Key_T lua": {
	"prefix": "reaper.ImGui_Key_T",
	"scope": "lua",
	"body": "reaper.ImGui_Key_T()\n\n",
	"description": ""
	},

	"ImGui_Key_Tab lua": {
	"prefix": "reaper.ImGui_Key_Tab",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Tab()\n\n",
	"description": ""
	},

	"ImGui_Key_U lua": {
	"prefix": "reaper.ImGui_Key_U",
	"scope": "lua",
	"body": "reaper.ImGui_Key_U()\n\n",
	"description": ""
	},

	"ImGui_Key_UpArrow lua": {
	"prefix": "reaper.ImGui_Key_UpArrow",
	"scope": "lua",
	"body": "reaper.ImGui_Key_UpArrow()\n\n",
	"description": ""
	},

	"ImGui_Key_V lua": {
	"prefix": "reaper.ImGui_Key_V",
	"scope": "lua",
	"body": "reaper.ImGui_Key_V()\n\n",
	"description": ""
	},

	"ImGui_Key_W lua": {
	"prefix": "reaper.ImGui_Key_W",
	"scope": "lua",
	"body": "reaper.ImGui_Key_W()\n\n",
	"description": ""
	},

	"ImGui_Key_X lua": {
	"prefix": "reaper.ImGui_Key_X",
	"scope": "lua",
	"body": "reaper.ImGui_Key_X()\n\n",
	"description": ""
	},

	"ImGui_Key_Y lua": {
	"prefix": "reaper.ImGui_Key_Y",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Y()\n\n",
	"description": ""
	},

	"ImGui_Key_Z lua": {
	"prefix": "reaper.ImGui_Key_Z",
	"scope": "lua",
	"body": "reaper.ImGui_Key_Z()\n\n",
	"description": ""
	},

	"ImGui_LabelText lua": {
	"prefix": "reaper.ImGui_LabelText",
	"scope": "lua",
	"body": "reaper.ImGui_LabelText(${1:ctx}, ${2:label}, ${3:text})$0",
	"description": "Display text+label aligned the same way as value+label widgets\n\n"
	},

	"ImGui_ListBox lua": {
	"prefix": "reaper.ImGui_ListBox",
	"scope": "lua",
	"body": "retval, current_item = reaper.ImGui_ListBox(${1:ctx}, ${2:label}, ${3:current_item}, ${4:items}, ${5:optional_height_in_itemsIn})$0",
	"description": "This is an helper over BeginListBox/EndListBox for convenience purpose.\nEach item must be null-terminated (requires REAPER v6.44 or newer for EEL and Lua).\n\n"
	},

	"ImGui_ListClipper_Begin lua": {
	"prefix": "reaper.ImGui_ListClipper_Begin",
	"scope": "lua",
	"body": "reaper.ImGui_ListClipper_Begin(${1:clipper}, ${2:items_count}, ${3:optional_items_heightIn})$0",
	"description": "- items_count: Use INT_MAX if you don't know how many items you have\n(in which case the cursor won't be advanced in the final step)\n- items_height: Use -1.0 to be calculated automatically on first step.\nOtherwise pass in the distance between your items, typically\nGetTextLineHeightWithSpacing or GetFrameHeightWithSpacing.\n\n"
	},

	"ImGui_ListClipper_End lua": {
	"prefix": "reaper.ImGui_ListClipper_End",
	"scope": "lua",
	"body": "reaper.ImGui_ListClipper_End(${1:clipper})$0",
	"description": "Automatically called on the last call of ListClipper_Step that returns false.\n\n"
	},

	"ImGui_ListClipper_ForceDisplayRangeByIndices lua": {
	"prefix": "reaper.ImGui_ListClipper_ForceDisplayRangeByIndices",
	"scope": "lua",
	"body": "reaper.ImGui_ListClipper_ForceDisplayRangeByIndices(${1:clipper}, ${2:item_min}, ${3:item_max})$0",
	"description": "Call ListClipper_ForceDisplayRangeByIndices before first call to\nListClipper_Step if you need a range of items to be displayed regardless of\nvisibility.\nitem_max is exclusive e.g. use (42, 42+1) to make item 42 always visible BUT due\nto alignment/padding of certain items it is likely that an extra item may be\nincluded on either end of the display range.\n\n"
	},

	"ImGui_ListClipper_GetDisplayRange lua": {
	"prefix": "reaper.ImGui_ListClipper_GetDisplayRange",
	"scope": "lua",
	"body": "display_start, display_end = reaper.ImGui_ListClipper_GetDisplayRange(${1:clipper})$0",
	"description": ""
	},

	"ImGui_ListClipper_Step lua": {
	"prefix": "reaper.ImGui_ListClipper_Step",
	"scope": "lua",
	"body": "reaper.ImGui_ListClipper_Step(${1:clipper})$0",
	"description": "Call until it returns false. The display_start/display_end fields from\nListClipper_GetDisplayRange will be set and you can process/draw those items.\n\n"
	},

	"ImGui_LogFinish lua": {
	"prefix": "reaper.ImGui_LogFinish",
	"scope": "lua",
	"body": "reaper.ImGui_LogFinish(${1:ctx})$0",
	"description": "Stop logging (close file, etc.)\n\n"
	},

	"ImGui_LogText lua": {
	"prefix": "reaper.ImGui_LogText",
	"scope": "lua",
	"body": "reaper.ImGui_LogText(${1:ctx}, ${2:text})$0",
	"description": "Pass text data straight to log (without being displayed)\n\n"
	},

	"ImGui_LogToClipboard lua": {
	"prefix": "reaper.ImGui_LogToClipboard",
	"scope": "lua",
	"body": "reaper.ImGui_LogToClipboard(${1:ctx}, ${2:optional_auto_open_depthIn})$0",
	"description": "Start logging all text output from the interface to the OS clipboard.\nSee also SetClipboardText.\n\n"
	},

	"ImGui_LogToFile lua": {
	"prefix": "reaper.ImGui_LogToFile",
	"scope": "lua",
	"body": "reaper.ImGui_LogToFile(${1:ctx}, ${2:optional_auto_open_depthIn}, ${3:optional_filenameIn})$0",
	"description": "Start logging all text output from the interface to a file.\nThe data is saved to $resource_path/imgui_log.txt if filename is nil.\n\n"
	},

	"ImGui_LogToTTY lua": {
	"prefix": "reaper.ImGui_LogToTTY",
	"scope": "lua",
	"body": "reaper.ImGui_LogToTTY(${1:ctx}, ${2:optional_auto_open_depthIn})$0",
	"description": "Start logging all text output from the interface to the TTY (stdout).\n\n"
	},

	"ImGui_MenuItem lua": {
	"prefix": "reaper.ImGui_MenuItem",
	"scope": "lua",
	"body": "retval, optional_p_selected = reaper.ImGui_MenuItem(${1:ctx}, ${2:label}, ${3:optional_shortcutIn}, ${4:optional_p_selected}, ${5:optional_enabledIn})$0",
	"description": "Return true when activated. Shortcuts are displayed for convenience but not\nprocessed by ImGui at the moment. Toggle state is written to 'selected' when\nprovided.\n\n"
	},

	"ImGui_Mod_Alt lua": {
	"prefix": "reaper.ImGui_Mod_Alt",
	"scope": "lua",
	"body": "reaper.ImGui_Mod_Alt()\n\n",
	"description": ""
	},

	"ImGui_Mod_Ctrl lua": {
	"prefix": "reaper.ImGui_Mod_Ctrl",
	"scope": "lua",
	"body": "reaper.ImGui_Mod_Ctrl()\n\n",
	"description": ""
	},

	"ImGui_Mod_None lua": {
	"prefix": "reaper.ImGui_Mod_None",
	"scope": "lua",
	"body": "reaper.ImGui_Mod_None()\n\n",
	"description": ""
	},

	"ImGui_Mod_Shift lua": {
	"prefix": "reaper.ImGui_Mod_Shift",
	"scope": "lua",
	"body": "reaper.ImGui_Mod_Shift()\n\n",
	"description": ""
	},

	"ImGui_Mod_Shortcut lua": {
	"prefix": "reaper.ImGui_Mod_Shortcut",
	"scope": "lua",
	"body": "reaper.ImGui_Mod_Shortcut()\n\n",
	"description": "Alias for Mod_Ctrl on Linux and Windows and Mod_Super on macOS (Cmd key).\n\n"
	},

	"ImGui_Mod_Super lua": {
	"prefix": "reaper.ImGui_Mod_Super",
	"scope": "lua",
	"body": "reaper.ImGui_Mod_Super()\n\n",
	"description": ""
	},

	"ImGui_MouseButton_Left lua": {
	"prefix": "reaper.ImGui_MouseButton_Left",
	"scope": "lua",
	"body": "reaper.ImGui_MouseButton_Left()\n\n",
	"description": ""
	},

	"ImGui_MouseButton_Middle lua": {
	"prefix": "reaper.ImGui_MouseButton_Middle",
	"scope": "lua",
	"body": "reaper.ImGui_MouseButton_Middle()\n\n",
	"description": ""
	},

	"ImGui_MouseButton_Right lua": {
	"prefix": "reaper.ImGui_MouseButton_Right",
	"scope": "lua",
	"body": "reaper.ImGui_MouseButton_Right()\n\n",
	"description": ""
	},

	"ImGui_MouseCursor_Arrow lua": {
	"prefix": "reaper.ImGui_MouseCursor_Arrow",
	"scope": "lua",
	"body": "reaper.ImGui_MouseCursor_Arrow()\n\n",
	"description": ""
	},

	"ImGui_MouseCursor_Hand lua": {
	"prefix": "reaper.ImGui_MouseCursor_Hand",
	"scope": "lua",
	"body": "reaper.ImGui_MouseCursor_Hand()\n\n",
	"description": "(Unused by Dear ImGui functions. Use for e.g. hyperlinks)\n\n"
	},

	"ImGui_MouseCursor_NotAllowed lua": {
	"prefix": "reaper.ImGui_MouseCursor_NotAllowed",
	"scope": "lua",
	"body": "reaper.ImGui_MouseCursor_NotAllowed()\n\n",
	"description": "When hovering something with disallowed interaction. Usually a crossed circle.\n\n"
	},

	"ImGui_MouseCursor_ResizeAll lua": {
	"prefix": "reaper.ImGui_MouseCursor_ResizeAll",
	"scope": "lua",
	"body": "reaper.ImGui_MouseCursor_ResizeAll()\n\n",
	"description": "(Unused by Dear ImGui functions)\n\n"
	},

	"ImGui_MouseCursor_ResizeEW lua": {
	"prefix": "reaper.ImGui_MouseCursor_ResizeEW",
	"scope": "lua",
	"body": "reaper.ImGui_MouseCursor_ResizeEW()\n\n",
	"description": "When hovering over a vertical border or a column.\n\n"
	},

	"ImGui_MouseCursor_ResizeNESW lua": {
	"prefix": "reaper.ImGui_MouseCursor_ResizeNESW",
	"scope": "lua",
	"body": "reaper.ImGui_MouseCursor_ResizeNESW()\n\n",
	"description": "When hovering over the bottom-left corner of a window.\n\n"
	},

	"ImGui_MouseCursor_ResizeNS lua": {
	"prefix": "reaper.ImGui_MouseCursor_ResizeNS",
	"scope": "lua",
	"body": "reaper.ImGui_MouseCursor_ResizeNS()\n\n",
	"description": "When hovering over a horizontal border.\n\n"
	},

	"ImGui_MouseCursor_ResizeNWSE lua": {
	"prefix": "reaper.ImGui_MouseCursor_ResizeNWSE",
	"scope": "lua",
	"body": "reaper.ImGui_MouseCursor_ResizeNWSE()\n\n",
	"description": "When hovering over the bottom-right corner of a window.\n\n"
	},

	"ImGui_MouseCursor_TextInput lua": {
	"prefix": "reaper.ImGui_MouseCursor_TextInput",
	"scope": "lua",
	"body": "reaper.ImGui_MouseCursor_TextInput()\n\n",
	"description": "When hovering over InputText, etc.\n\n"
	},

	"ImGui_NewLine lua": {
	"prefix": "reaper.ImGui_NewLine",
	"scope": "lua",
	"body": "reaper.ImGui_NewLine(${1:ctx})$0",
	"description": "Undo a SameLine() or force a new line when in a horizontal-layout context.\n\n"
	},

	"ImGui_NumericLimits_Float lua": {
	"prefix": "reaper.ImGui_NumericLimits_Float",
	"scope": "lua",
	"body": "min, max = reaper.ImGui_NumericLimits_Float()\n\n",
	"description": "Returns FLT_MIN and FLT_MAX for this system.\n\n"
	},

	"ImGui_OpenPopup lua": {
	"prefix": "reaper.ImGui_OpenPopup",
	"scope": "lua",
	"body": "reaper.ImGui_OpenPopup(${1:ctx}, ${2:str_id}, ${3:optional_popup_flagsIn})$0",
	"description": "Set popup state to open (don't call every frame!).\nImGuiPopupFlags are available for opening options.\nIf not modal: they can be closed by clicking anywhere outside them, or by\npressing ESCAPE.\nUse PopupFlags_NoOpenOverExistingPopup to avoid opening a popup if there's\nalready one at the same level.\n\n"
	},

	"ImGui_OpenPopupOnItemClick lua": {
	"prefix": "reaper.ImGui_OpenPopupOnItemClick",
	"scope": "lua",
	"body": "reaper.ImGui_OpenPopupOnItemClick(${1:ctx}, ${2:optional_str_idIn}, ${3:optional_popup_flagsIn})$0",
	"description": "Helper to open popup when clicked on last item. return true when just opened.\n(Note: actually triggers on the mouse _released_ event to be consistent with\npopup behaviors.)\n\n"
	},

	"ImGui_PlotHistogram lua": {
	"prefix": "reaper.ImGui_PlotHistogram",
	"scope": "lua",
	"body": "reaper.ImGui_PlotHistogram(${1:ctx}, ${2:string_values}, ${3:optional_values_offsetIn}, ${4:optional_overlay_textIn}, ${5:optional_scale_minIn}, ${6:optional_scale_maxIn}, ${7:optional_graph_size_wIn}, ${8:optional_graph_size_hIn})$0",
	"description": ""
	},

	"ImGui_PlotLines lua": {
	"prefix": "reaper.ImGui_PlotLines",
	"scope": "lua",
	"body": "reaper.ImGui_PlotLines(${1:ctx}, ${2:string_values}, ${3:optional_values_offsetIn}, ${4:optional_overlay_textIn}, ${5:optional_scale_minIn}, ${6:optional_scale_maxIn}, ${7:optional_graph_size_wIn}, ${8:optional_graph_size_hIn})$0",
	"description": ""
	},

	"ImGui_PointConvertNative lua": {
	"prefix": "reaper.ImGui_PointConvertNative",
	"scope": "lua",
	"body": "x, y = reaper.ImGui_PointConvertNative(${1:ctx}, ${2:x}, ${3:y}, ${4:optional_to_nativeIn})$0",
	"description": "Convert a position from the current platform's native coordinate position\nsystem to ReaImGui global coordinates (or vice versa).\nThis effectively flips the Y coordinate on macOS and applies HiDPI scaling on\nWindows and Linux.\n\n"
	},

	"ImGui_PopAllowKeyboardFocus lua": {
	"prefix": "reaper.ImGui_PopAllowKeyboardFocus",
	"scope": "lua",
	"body": "reaper.ImGui_PopAllowKeyboardFocus(${1:ctx})$0",
	"description": "See PushAllowKeyboardFocus\n\n"
	},

	"ImGui_PopButtonRepeat lua": {
	"prefix": "reaper.ImGui_PopButtonRepeat",
	"scope": "lua",
	"body": "reaper.ImGui_PopButtonRepeat(${1:ctx})$0",
	"description": "See PushButtonRepeat\n\n"
	},

	"ImGui_PopClipRect lua": {
	"prefix": "reaper.ImGui_PopClipRect",
	"scope": "lua",
	"body": "reaper.ImGui_PopClipRect(${1:ctx})$0",
	"description": "See PushClipRect\n\n"
	},

	"ImGui_PopFont lua": {
	"prefix": "reaper.ImGui_PopFont",
	"scope": "lua",
	"body": "reaper.ImGui_PopFont(${1:ctx})$0",
	"description": "See PushFont.\n\n"
	},

	"ImGui_PopID lua": {
	"prefix": "reaper.ImGui_PopID",
	"scope": "lua",
	"body": "reaper.ImGui_PopID(${1:ctx})$0",
	"description": "Pop from the ID stack.\n\n"
	},

	"ImGui_PopItemWidth lua": {
	"prefix": "reaper.ImGui_PopItemWidth",
	"scope": "lua",
	"body": "reaper.ImGui_PopItemWidth(${1:ctx})$0",
	"description": "See PushItemWidth\n\n"
	},

	"ImGui_PopStyleColor lua": {
	"prefix": "reaper.ImGui_PopStyleColor",
	"scope": "lua",
	"body": "reaper.ImGui_PopStyleColor(${1:ctx}, ${2:optional_countIn})$0",
	"description": ""
	},

	"ImGui_PopStyleVar lua": {
	"prefix": "reaper.ImGui_PopStyleVar",
	"scope": "lua",
	"body": "reaper.ImGui_PopStyleVar(${1:ctx}, ${2:optional_countIn})$0",
	"description": "Reset a style variable.\n\n"
	},

	"ImGui_PopTextWrapPos lua": {
	"prefix": "reaper.ImGui_PopTextWrapPos",
	"scope": "lua",
	"body": "reaper.ImGui_PopTextWrapPos(${1:ctx})$0",
	"description": ""
	},

	"ImGui_PopupFlags_AnyPopup lua": {
	"prefix": "reaper.ImGui_PopupFlags_AnyPopup",
	"scope": "lua",
	"body": "reaper.ImGui_PopupFlags_AnyPopup()\n\n",
	"description": "PopupFlags_AnyPopupId | PopupFlags_AnyPopupLevel\n\n"
	},

	"ImGui_PopupFlags_AnyPopupId lua": {
	"prefix": "reaper.ImGui_PopupFlags_AnyPopupId",
	"scope": "lua",
	"body": "reaper.ImGui_PopupFlags_AnyPopupId()\n\n",
	"description": "For IsPopupOpen: ignore the str_id parameter and test for any popup.\n\n"
	},

	"ImGui_PopupFlags_AnyPopupLevel lua": {
	"prefix": "reaper.ImGui_PopupFlags_AnyPopupLevel",
	"scope": "lua",
	"body": "reaper.ImGui_PopupFlags_AnyPopupLevel()\n\n",
	"description": "For IsPopupOpen: search/test at any level of the popup stack\n(default test in the current level).\n\n"
	},

	"ImGui_PopupFlags_MouseButtonLeft lua": {
	"prefix": "reaper.ImGui_PopupFlags_MouseButtonLeft",
	"scope": "lua",
	"body": "reaper.ImGui_PopupFlags_MouseButtonLeft()\n\n",
	"description": "For BeginPopupContext*(): open on Left Mouse release.\nGuaranteed to always be == 0 (same as MouseButton_Left).\n\n"
	},

	"ImGui_PopupFlags_MouseButtonMiddle lua": {
	"prefix": "reaper.ImGui_PopupFlags_MouseButtonMiddle",
	"scope": "lua",
	"body": "reaper.ImGui_PopupFlags_MouseButtonMiddle()\n\n",
	"description": "For BeginPopupContext*(): open on Middle Mouse release.\nGuaranteed to always be == 2 (same as MouseButton_Middle).\n\n"
	},

	"ImGui_PopupFlags_MouseButtonRight lua": {
	"prefix": "reaper.ImGui_PopupFlags_MouseButtonRight",
	"scope": "lua",
	"body": "reaper.ImGui_PopupFlags_MouseButtonRight()\n\n",
	"description": "For BeginPopupContext*(): open on Right Mouse release.\nGuaranteed to always be == 1 (same as MouseButton_Right).\n\n"
	},

	"ImGui_PopupFlags_NoOpenOverExistingPopup lua": {
	"prefix": "reaper.ImGui_PopupFlags_NoOpenOverExistingPopup",
	"scope": "lua",
	"body": "reaper.ImGui_PopupFlags_NoOpenOverExistingPopup()\n\n",
	"description": "For OpenPopup*(), BeginPopupContext*(): don't open if there's already a popup\nat the same level of the popup stack.\n\n"
	},

	"ImGui_PopupFlags_NoOpenOverItems lua": {
	"prefix": "reaper.ImGui_PopupFlags_NoOpenOverItems",
	"scope": "lua",
	"body": "reaper.ImGui_PopupFlags_NoOpenOverItems()\n\n",
	"description": "For BeginPopupContextWindow: don't return true when hovering items,\nonly when hovering empty space.\n\n"
	},

	"ImGui_PopupFlags_None lua": {
	"prefix": "reaper.ImGui_PopupFlags_None",
	"scope": "lua",
	"body": "reaper.ImGui_PopupFlags_None()\n\n",
	"description": ""
	},

	"ImGui_ProgressBar lua": {
	"prefix": "reaper.ImGui_ProgressBar",
	"scope": "lua",
	"body": "reaper.ImGui_ProgressBar(${1:ctx}, ${2:fraction}, ${3:optional_size_arg_wIn}, ${4:optional_size_arg_hIn}, ${5:optional_overlayIn})$0",
	"description": ""
	},

	"ImGui_PushAllowKeyboardFocus lua": {
	"prefix": "reaper.ImGui_PushAllowKeyboardFocus",
	"scope": "lua",
	"body": "reaper.ImGui_PushAllowKeyboardFocus(${1:ctx}, ${2:allow_keyboard_focus})$0",
	"description": "Allow focusing using TAB/Shift-TAB, enabled by default but you can disable it\nfor certain widgets\n\n"
	},

	"ImGui_PushButtonRepeat lua": {
	"prefix": "reaper.ImGui_PushButtonRepeat",
	"scope": "lua",
	"body": "reaper.ImGui_PushButtonRepeat(${1:ctx}, ${2:repeat})$0",
	"description": "In 'repeat' mode, Button*() functions return repeated true in a typematic\nmanner (using ConfigVar_KeyRepeatDelay/ConfigVar_KeyRepeatRate settings).\nNote that you can call IsItemActive after any Button to tell if the button is\nheld in the current frame.\n\n"
	},

	"ImGui_PushClipRect lua": {
	"prefix": "reaper.ImGui_PushClipRect",
	"scope": "lua",
	"body": "reaper.ImGui_PushClipRect(${1:ctx}, ${2:clip_rect_min_x}, ${3:clip_rect_min_y}, ${4:clip_rect_max_x}, ${5:clip_rect_max_y}, ${6:intersect_with_current_clip_rect})$0",
	"description": ""
	},

	"ImGui_PushFont lua": {
	"prefix": "reaper.ImGui_PushFont",
	"scope": "lua",
	"body": "reaper.ImGui_PushFont(${1:ImGui_Context_font})$0",
	"description": "Change the current font. Use nil to push the default font.\nThe font object must have been registered using Attach. See PopFont.\n\n"
	},

	"ImGui_PushID lua": {
	"prefix": "reaper.ImGui_PushID",
	"scope": "lua",
	"body": "reaper.ImGui_PushID(${1:ctx}, ${2:str_id})$0",
	"description": "Push string into the ID stack.\n\n"
	},

	"ImGui_PushItemWidth lua": {
	"prefix": "reaper.ImGui_PushItemWidth",
	"scope": "lua",
	"body": "reaper.ImGui_PushItemWidth(${1:ctx}, ${2:item_width})$0",
	"description": "Push width of items for common large 'item+label' widgets.\n- \>0.0: width in pixels\n- <0.0 align xx pixels to the right of window\n(so -FLT_MIN always align width to the right side)\n- 0.0 = default to ~2/3 of windows width.\n\n"
	},

	"ImGui_PushStyleColor lua": {
	"prefix": "reaper.ImGui_PushStyleColor",
	"scope": "lua",
	"body": "reaper.ImGui_PushStyleColor(${1:ctx}, ${2:idx}, ${3:col_rgba})$0",
	"description": "Modify a style color.\nCall PopStyleColor to undo after use (before the end of the frame).\nSee Col_* for available style colors.\n\n"
	},

	"ImGui_PushStyleVar lua": {
	"prefix": "reaper.ImGui_PushStyleVar",
	"scope": "lua",
	"body": "reaper.ImGui_PushStyleVar(${1:ctx}, ${2:var_idx}, ${3:val1}, ${4:optional_val2In})$0",
	"description": "See StyleVar_* for possible values of 'var_idx'.\n\n"
	},

	"ImGui_PushTextWrapPos lua": {
	"prefix": "reaper.ImGui_PushTextWrapPos",
	"scope": "lua",
	"body": "reaper.ImGui_PushTextWrapPos(${1:ctx}, ${2:optional_wrap_local_pos_xIn})$0",
	"description": "Push word-wrapping position for Text*() commands.\n-  < 0.0: no wrapping\n-  = 0.0: wrap to end of window (or column)\n- \> 0.0: wrap at 'wrap_pos_x' position in window local space.\n\n"
	},

	"ImGui_RadioButton lua": {
	"prefix": "reaper.ImGui_RadioButton",
	"scope": "lua",
	"body": "reaper.ImGui_RadioButton(${1:ctx}, ${2:label}, ${3:active})$0",
	"description": "Use with e.g. if (RadioButton('one', my_value==1)) { my_value = 1; }\n\n"
	},

	"ImGui_RadioButtonEx lua": {
	"prefix": "reaper.ImGui_RadioButtonEx",
	"scope": "lua",
	"body": "retval, v = reaper.ImGui_RadioButtonEx(${1:ctx}, ${2:label}, ${3:v}, ${4:v_button})$0",
	"description": "Shortcut to handle RadioButton's example pattern when value is an integer\n\n"
	},

	"ImGui_ResetMouseDragDelta lua": {
	"prefix": "reaper.ImGui_ResetMouseDragDelta",
	"scope": "lua",
	"body": "reaper.ImGui_ResetMouseDragDelta(${1:ctx}, ${2:optional_buttonIn})$0",
	"description": ""
	},

	"ImGui_SameLine lua": {
	"prefix": "reaper.ImGui_SameLine",
	"scope": "lua",
	"body": "reaper.ImGui_SameLine(${1:ctx}, ${2:optional_offset_from_start_xIn}, ${3:optional_spacingIn})$0",
	"description": "Call between widgets or groups to layout them horizontally.\nX position given in window coordinates.\n\n"
	},

	"ImGui_Selectable lua": {
	"prefix": "reaper.ImGui_Selectable",
	"scope": "lua",
	"body": "retval, p_selected = reaper.ImGui_Selectable(${1:ctx}, ${2:label}, ${3:p_selected}, ${4:optional_flagsIn}, ${5:optional_size_wIn}, ${6:optional_size_hIn})$0",
	"description": ""
	},

	"ImGui_SelectableFlags_AllowDoubleClick lua": {
	"prefix": "reaper.ImGui_SelectableFlags_AllowDoubleClick",
	"scope": "lua",
	"body": "reaper.ImGui_SelectableFlags_AllowDoubleClick()\n\n",
	"description": "Generate press events on double clicks too.\n\n"
	},

	"ImGui_SelectableFlags_AllowItemOverlap lua": {
	"prefix": "reaper.ImGui_SelectableFlags_AllowItemOverlap",
	"scope": "lua",
	"body": "reaper.ImGui_SelectableFlags_AllowItemOverlap()\n\n",
	"description": "Hit testing to allow subsequent widgets to overlap this one.\n\n"
	},

	"ImGui_SelectableFlags_Disabled lua": {
	"prefix": "reaper.ImGui_SelectableFlags_Disabled",
	"scope": "lua",
	"body": "reaper.ImGui_SelectableFlags_Disabled()\n\n",
	"description": "Cannot be selected, display grayed out text.\n\n"
	},

	"ImGui_SelectableFlags_DontClosePopups lua": {
	"prefix": "reaper.ImGui_SelectableFlags_DontClosePopups",
	"scope": "lua",
	"body": "reaper.ImGui_SelectableFlags_DontClosePopups()\n\n",
	"description": "Clicking this doesn't close parent popup window.\n\n"
	},

	"ImGui_SelectableFlags_None lua": {
	"prefix": "reaper.ImGui_SelectableFlags_None",
	"scope": "lua",
	"body": "reaper.ImGui_SelectableFlags_None()\n\n",
	"description": ""
	},

	"ImGui_SelectableFlags_SpanAllColumns lua": {
	"prefix": "reaper.ImGui_SelectableFlags_SpanAllColumns",
	"scope": "lua",
	"body": "reaper.ImGui_SelectableFlags_SpanAllColumns()\n\n",
	"description": "Selectable frame can span all columns (text will still fit in current column).\n\n"
	},

	"ImGui_Separator lua": {
	"prefix": "reaper.ImGui_Separator",
	"scope": "lua",
	"body": "reaper.ImGui_Separator(${1:ctx})$0",
	"description": "Separator, generally horizontal. inside a menu bar or in horizontal layout\nmode, this becomes a vertical separator.\n\n"
	},

	"ImGui_SetClipboardText lua": {
	"prefix": "reaper.ImGui_SetClipboardText",
	"scope": "lua",
	"body": "reaper.ImGui_SetClipboardText(${1:ctx}, ${2:text})$0",
	"description": "See also the LogToClipboard function to capture GUI into clipboard,\nor easily output text data to the clipboard.\n\n"
	},

	"ImGui_SetColorEditOptions lua": {
	"prefix": "reaper.ImGui_SetColorEditOptions",
	"scope": "lua",
	"body": "reaper.ImGui_SetColorEditOptions(${1:ctx}, ${2:flags})$0",
	"description": "Picker type, etc. User will be able to change many settings, unless you pass\nthe _NoOptions flag to your calls.\n\n"
	},

	"ImGui_SetConfigVar lua": {
	"prefix": "reaper.ImGui_SetConfigVar",
	"scope": "lua",
	"body": "reaper.ImGui_SetConfigVar(${1:ctx}, ${2:var_idx}, ${3:value})$0",
	"description": ""
	},

	"ImGui_SetCursorPos lua": {
	"prefix": "reaper.ImGui_SetCursorPos",
	"scope": "lua",
	"body": "reaper.ImGui_SetCursorPos(${1:ctx}, ${2:local_pos_x}, ${3:local_pos_y})$0",
	"description": "Cursor position in window\n\n"
	},

	"ImGui_SetCursorPosX lua": {
	"prefix": "reaper.ImGui_SetCursorPosX",
	"scope": "lua",
	"body": "reaper.ImGui_SetCursorPosX(${1:ctx}, ${2:local_x})$0",
	"description": "Cursor X position in window\n\n"
	},

	"ImGui_SetCursorPosY lua": {
	"prefix": "reaper.ImGui_SetCursorPosY",
	"scope": "lua",
	"body": "reaper.ImGui_SetCursorPosY(${1:ctx}, ${2:local_y})$0",
	"description": "Cursor Y position in window\n\n"
	},

	"ImGui_SetCursorScreenPos lua": {
	"prefix": "reaper.ImGui_SetCursorScreenPos",
	"scope": "lua",
	"body": "reaper.ImGui_SetCursorScreenPos(${1:ctx}, ${2:pos_x}, ${3:pos_y})$0",
	"description": "Cursor position in absolute screen coordinates.\n\n"
	},

	"ImGui_SetDragDropPayload lua": {
	"prefix": "reaper.ImGui_SetDragDropPayload",
	"scope": "lua",
	"body": "reaper.ImGui_SetDragDropPayload(${1:ctx}, ${2:type}, ${3:data}, ${4:optional_condIn})$0",
	"description": "The type is a user defined string of maximum 32 characters.\nStrings starting with '_' are reserved for dear imgui internal types.\nData is copied and held by imgui.\n\n"
	},

	"ImGui_SetItemAllowOverlap lua": {
	"prefix": "reaper.ImGui_SetItemAllowOverlap",
	"scope": "lua",
	"body": "reaper.ImGui_SetItemAllowOverlap(${1:ctx})$0",
	"description": "Allow last item to be overlapped by a subsequent item. sometimes useful with\ninvisible buttons, selectables, etc. to catch unused area.\n\n"
	},

	"ImGui_SetItemDefaultFocus lua": {
	"prefix": "reaper.ImGui_SetItemDefaultFocus",
	"scope": "lua",
	"body": "reaper.ImGui_SetItemDefaultFocus(${1:ctx})$0",
	"description": "Make last item the default focused item of a window.\n\n"
	},

	"ImGui_SetKeyboardFocusHere lua": {
	"prefix": "reaper.ImGui_SetKeyboardFocusHere",
	"scope": "lua",
	"body": "reaper.ImGui_SetKeyboardFocusHere(${1:ctx}, ${2:optional_offsetIn})$0",
	"description": "Focus keyboard on the next widget. Use positive 'offset' to access sub\ncomponents of a multiple component widget. Use -1 to access previous widget.\n\n"
	},

	"ImGui_SetMouseCursor lua": {
	"prefix": "reaper.ImGui_SetMouseCursor",
	"scope": "lua",
	"body": "reaper.ImGui_SetMouseCursor(${1:ctx}, ${2:cursor_type})$0",
	"description": "Set desired mouse cursor shape\n\n"
	},

	"ImGui_SetNextFrameWantCaptureKeyboard lua": {
	"prefix": "reaper.ImGui_SetNextFrameWantCaptureKeyboard",
	"scope": "lua",
	"body": "reaper.ImGui_SetNextFrameWantCaptureKeyboard(${1:ctx}, ${2:want_capture_keyboard})$0",
	"description": "Request capture of keyboard shortcuts in REAPER's global scope for the next frame.\n\n"
	},

	"ImGui_SetNextItemOpen lua": {
	"prefix": "reaper.ImGui_SetNextItemOpen",
	"scope": "lua",
	"body": "reaper.ImGui_SetNextItemOpen(${1:ctx}, ${2:is_open}, ${3:optional_condIn})$0",
	"description": "Set next TreeNode/CollapsingHeader open state.\nCan also be done with the TreeNodeFlags_DefaultOpen flag.\n\n"
	},

	"ImGui_SetNextItemWidth lua": {
	"prefix": "reaper.ImGui_SetNextItemWidth",
	"scope": "lua",
	"body": "reaper.ImGui_SetNextItemWidth(${1:ctx}, ${2:item_width})$0",
	"description": "Set width of the _next_ common large 'item+label' widget.\n- \>0.0: width in pixels\n- <0.0 align xx pixels to the right of window\n(so -FLT_MIN always align width to the right side)\n\n"
	},

	"ImGui_SetNextWindowBgAlpha lua": {
	"prefix": "reaper.ImGui_SetNextWindowBgAlpha",
	"scope": "lua",
	"body": "reaper.ImGui_SetNextWindowBgAlpha(${1:ctx}, ${2:alpha})$0",
	"description": "Set next window background color alpha. Helper to easily override the Alpha\ncomponent of Col_WindowBg/Col_ChildBg/Col_PopupBg.\nYou may also use WindowFlags_NoBackground for a fully transparent window.\n\n"
	},

	"ImGui_SetNextWindowCollapsed lua": {
	"prefix": "reaper.ImGui_SetNextWindowCollapsed",
	"scope": "lua",
	"body": "reaper.ImGui_SetNextWindowCollapsed(${1:ctx}, ${2:collapsed}, ${3:optional_condIn})$0",
	"description": "Set next window collapsed state.\n\n"
	},

	"ImGui_SetNextWindowContentSize lua": {
	"prefix": "reaper.ImGui_SetNextWindowContentSize",
	"scope": "lua",
	"body": "reaper.ImGui_SetNextWindowContentSize(${1:ctx}, ${2:size_w}, ${3:size_h})$0",
	"description": "Set next window content size (~ scrollable client area, which enforce the\nrange of scrollbars). Not including window decorations (title bar, menu bar,\netc.) nor StyleVar_WindowPadding. set an axis to 0.0 to leave it automatic.\n\n"
	},

	"ImGui_SetNextWindowDockID lua": {
	"prefix": "reaper.ImGui_SetNextWindowDockID",
	"scope": "lua",
	"body": "reaper.ImGui_SetNextWindowDockID(${1:ctx}, ${2:dock_id}, ${3:optional_condIn})$0",
	"description": ""
	},

	"ImGui_SetNextWindowFocus lua": {
	"prefix": "reaper.ImGui_SetNextWindowFocus",
	"scope": "lua",
	"body": "reaper.ImGui_SetNextWindowFocus(${1:ctx})$0",
	"description": "Set next window to be focused / top-most.\n\n"
	},

	"ImGui_SetNextWindowPos lua": {
	"prefix": "reaper.ImGui_SetNextWindowPos",
	"scope": "lua",
	"body": "reaper.ImGui_SetNextWindowPos(${1:ctx}, ${2:pos_x}, ${3:pos_y}, ${4:optional_condIn}, ${5:optional_pivot_xIn}, ${6:optional_pivot_yIn})$0",
	"description": "Set next window position. Use pivot=(0.5,0.5) to center on given point, etc.\n\n"
	},

	"ImGui_SetNextWindowScroll lua": {
	"prefix": "reaper.ImGui_SetNextWindowScroll",
	"scope": "lua",
	"body": "reaper.ImGui_SetNextWindowScroll(${1:ctx}, ${2:scroll_x}, ${3:scroll_y})$0",
	"description": "Set next window scrolling value (use < 0.0 to not affect a given axis).\n\n"
	},

	"ImGui_SetNextWindowSize lua": {
	"prefix": "reaper.ImGui_SetNextWindowSize",
	"scope": "lua",
	"body": "reaper.ImGui_SetNextWindowSize(${1:ctx}, ${2:size_w}, ${3:size_h}, ${4:optional_condIn})$0",
	"description": "Set next window size. set axis to 0.0 to force an auto-fit on this axis.\n\n"
	},

	"ImGui_SetNextWindowSizeConstraints lua": {
	"prefix": "reaper.ImGui_SetNextWindowSizeConstraints",
	"scope": "lua",
	"body": "reaper.ImGui_SetNextWindowSizeConstraints(${1:ctx}, ${2:size_min_w}, ${3:size_min_h}, ${4:size_max_w}, ${5:size_max_h})$0",
	"description": "Set next window size limits. use -1,-1 on either X/Y axis to preserve the\ncurrent size. Sizes will be rounded down.\n\n"
	},

	"ImGui_SetScrollFromPosX lua": {
	"prefix": "reaper.ImGui_SetScrollFromPosX",
	"scope": "lua",
	"body": "reaper.ImGui_SetScrollFromPosX(${1:ctx}, ${2:local_x}, ${3:optional_center_x_ratioIn})$0",
	"description": "Adjust scrolling amount to make given position visible.\nGenerally GetCursorStartPos() + offset to compute a valid position.\n\n"
	},

	"ImGui_SetScrollFromPosY lua": {
	"prefix": "reaper.ImGui_SetScrollFromPosY",
	"scope": "lua",
	"body": "reaper.ImGui_SetScrollFromPosY(${1:ctx}, ${2:local_y}, ${3:optional_center_y_ratioIn})$0",
	"description": "Adjust scrolling amount to make given position visible.\nGenerally GetCursorStartPos() + offset to compute a valid position.\n\n"
	},

	"ImGui_SetScrollHereX lua": {
	"prefix": "reaper.ImGui_SetScrollHereX",
	"scope": "lua",
	"body": "reaper.ImGui_SetScrollHereX(${1:ctx}, ${2:optional_center_x_ratioIn})$0",
	"description": "Adjust scrolling amount to make current cursor position visible.\ncenter_x_ratio=0.0: left, 0.5: center, 1.0: right.\nWhen using to make a 'default/current item' visible,\nconsider using SetItemDefaultFocus instead.\n\n"
	},

	"ImGui_SetScrollHereY lua": {
	"prefix": "reaper.ImGui_SetScrollHereY",
	"scope": "lua",
	"body": "reaper.ImGui_SetScrollHereY(${1:ctx}, ${2:optional_center_y_ratioIn})$0",
	"description": "Adjust scrolling amount to make current cursor position visible.\ncenter_y_ratio=0.0: top, 0.5: center, 1.0: bottom.\nWhen using to make a 'default/current item' visible,\nconsider using SetItemDefaultFocus instead.\n\n"
	},

	"ImGui_SetScrollX lua": {
	"prefix": "reaper.ImGui_SetScrollX",
	"scope": "lua",
	"body": "reaper.ImGui_SetScrollX(${1:ctx}, ${2:scroll_x})$0",
	"description": "Set scrolling amount [0 .. GetScrollMaxX()]\n\n"
	},

	"ImGui_SetScrollY lua": {
	"prefix": "reaper.ImGui_SetScrollY",
	"scope": "lua",
	"body": "reaper.ImGui_SetScrollY(${1:ctx}, ${2:scroll_y})$0",
	"description": "Set scrolling amount [0 .. GetScrollMaxY()]\n\n"
	},

	"ImGui_SetTabItemClosed lua": {
	"prefix": "reaper.ImGui_SetTabItemClosed",
	"scope": "lua",
	"body": "reaper.ImGui_SetTabItemClosed(${1:ctx}, ${2:tab_or_docked_window_label})$0",
	"description": "Notify TabBar or Docking system of a closed tab/window ahead\n(useful to reduce visual flicker on reorderable tab bars).\nFor tab-bar: call after BeginTabBar and before Tab submissions.\nOtherwise call with a window name.\n\n"
	},

	"ImGui_SetTooltip lua": {
	"prefix": "reaper.ImGui_SetTooltip",
	"scope": "lua",
	"body": "reaper.ImGui_SetTooltip(${1:ctx}, ${2:text})$0",
	"description": "Set a text-only tooltip, typically use with IsItemHovered. override any\nprevious call to SetTooltip.\n\n"
	},

	"ImGui_SetWindowCollapsed lua": {
	"prefix": "reaper.ImGui_SetWindowCollapsed",
	"scope": "lua",
	"body": "reaper.ImGui_SetWindowCollapsed(${1:ctx}, ${2:collapsed}, ${3:optional_condIn})$0",
	"description": "(Not recommended) Set current window collapsed state.\nPrefer using SetNextWindowCollapsed.\n\n"
	},

	"ImGui_SetWindowCollapsedEx lua": {
	"prefix": "reaper.ImGui_SetWindowCollapsedEx",
	"scope": "lua",
	"body": "reaper.ImGui_SetWindowCollapsedEx(${1:ctx}, ${2:name}, ${3:collapsed}, ${4:optional_condIn})$0",
	"description": "Set named window collapsed state.\n\n"
	},

	"ImGui_SetWindowFocus lua": {
	"prefix": "reaper.ImGui_SetWindowFocus",
	"scope": "lua",
	"body": "reaper.ImGui_SetWindowFocus(${1:ctx})$0",
	"description": "(Not recommended) Set current window to be focused / top-most.\nPrefer using SetNextWindowFocus.\n\n"
	},

	"ImGui_SetWindowFocusEx lua": {
	"prefix": "reaper.ImGui_SetWindowFocusEx",
	"scope": "lua",
	"body": "reaper.ImGui_SetWindowFocusEx(${1:ctx}, ${2:name})$0",
	"description": "Set named window to be focused / top-most. Use an empty name to remove focus.\n\n"
	},

	"ImGui_SetWindowPos lua": {
	"prefix": "reaper.ImGui_SetWindowPos",
	"scope": "lua",
	"body": "reaper.ImGui_SetWindowPos(${1:ctx}, ${2:pos_x}, ${3:pos_y}, ${4:optional_condIn})$0",
	"description": "(Not recommended) Set current window position - call within Begin/End.\nPrefer using SetNextWindowPos, as this may incur tearing and minor side-effects.\n\n"
	},

	"ImGui_SetWindowPosEx lua": {
	"prefix": "reaper.ImGui_SetWindowPosEx",
	"scope": "lua",
	"body": "reaper.ImGui_SetWindowPosEx(${1:ctx}, ${2:name}, ${3:pos_x}, ${4:pos_y}, ${5:optional_condIn})$0",
	"description": "Set named window position.\n\n"
	},

	"ImGui_SetWindowSize lua": {
	"prefix": "reaper.ImGui_SetWindowSize",
	"scope": "lua",
	"body": "reaper.ImGui_SetWindowSize(${1:ctx}, ${2:size_w}, ${3:size_h}, ${4:optional_condIn})$0",
	"description": "(Not recommended) Set current window size - call within Begin/End.\nSet size_w and size_h to 0 to force an auto-fit.\nPrefer using SetNextWindowSize, as this may incur tearing and minor side-effects.\n\n"
	},

	"ImGui_SetWindowSizeEx lua": {
	"prefix": "reaper.ImGui_SetWindowSizeEx",
	"scope": "lua",
	"body": "reaper.ImGui_SetWindowSizeEx(${1:ctx}, ${2:name}, ${3:size_w}, ${4:size_h}, ${5:optional_condIn})$0",
	"description": "Set named window size. Set axis to 0.0 to force an auto-fit on this axis.\n\n"
	},

	"ImGui_ShowAboutWindow lua": {
	"prefix": "reaper.ImGui_ShowAboutWindow",
	"scope": "lua",
	"body": "optional_p_open = reaper.ImGui_ShowAboutWindow(${1:ctx}, ${2:optional_p_open})$0",
	"description": "Create About window.\nDisplay ReaImGui version, Dear ImGui version, credits and build/system information.\n\n"
	},

	"ImGui_ShowDebugLogWindow lua": {
	"prefix": "reaper.ImGui_ShowDebugLogWindow",
	"scope": "lua",
	"body": "optional_p_open = reaper.ImGui_ShowDebugLogWindow(${1:ctx}, ${2:optional_p_open})$0",
	"description": "Create Debug Log window. display a simplified log of important dear imgui events.\n\n"
	},

	"ImGui_ShowMetricsWindow lua": {
	"prefix": "reaper.ImGui_ShowMetricsWindow",
	"scope": "lua",
	"body": "optional_p_open = reaper.ImGui_ShowMetricsWindow(${1:ctx}, ${2:optional_p_open})$0",
	"description": "Create Metrics/Debugger window.\nDisplay Dear ImGui internals: windows, draw commands, various internal state, etc.\n\n"
	},

	"ImGui_ShowStackToolWindow lua": {
	"prefix": "reaper.ImGui_ShowStackToolWindow",
	"scope": "lua",
	"body": "optional_p_open = reaper.ImGui_ShowStackToolWindow(${1:ctx}, ${2:optional_p_open})$0",
	"description": "Create Stack Tool window. Hover items with mouse to query information about\nthe source of their unique ID.\n\n"
	},

	"ImGui_SliderAngle lua": {
	"prefix": "reaper.ImGui_SliderAngle",
	"scope": "lua",
	"body": "retval, v_rad = reaper.ImGui_SliderAngle(${1:ctx}, ${2:label}, ${3:v_rad}, ${4:optional_v_degrees_minIn}, ${5:optional_v_degrees_maxIn}, ${6:optional_formatIn}, ${7:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_SliderDouble lua": {
	"prefix": "reaper.ImGui_SliderDouble",
	"scope": "lua",
	"body": "retval, v = reaper.ImGui_SliderDouble(${1:ctx}, ${2:label}, ${3:v}, ${4:v_min}, ${5:v_max}, ${6:optional_formatIn}, ${7:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_SliderDouble2 lua": {
	"prefix": "reaper.ImGui_SliderDouble2",
	"scope": "lua",
	"body": "retval, v1, v2 = reaper.ImGui_SliderDouble2(${1:ctx}, ${2:label}, ${3:v1}, ${4:v2}, ${5:v_min}, ${6:v_max}, ${7:optional_formatIn}, ${8:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_SliderDouble3 lua": {
	"prefix": "reaper.ImGui_SliderDouble3",
	"scope": "lua",
	"body": "retval, v1, v2, v3 = reaper.ImGui_SliderDouble3(${1:ctx}, ${2:label}, ${3:v1}, ${4:v2}, ${5:v3}, ${6:v_min}, ${7:v_max}, ${8:optional_formatIn}, ${9:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_SliderDouble4 lua": {
	"prefix": "reaper.ImGui_SliderDouble4",
	"scope": "lua",
	"body": "retval, v1, v2, v3, v4 = reaper.ImGui_SliderDouble4(${1:ctx}, ${2:label}, ${3:v1}, ${4:v2}, ${5:v3}, ${6:v4}, ${7:v_min}, ${8:v_max}, ${9:optional_formatIn}, ${10:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_SliderDoubleN lua": {
	"prefix": "reaper.ImGui_SliderDoubleN",
	"scope": "lua",
	"body": "reaper.ImGui_SliderDoubleN(${1:ctx}, ${2:string_values}, ${3:v_min}, ${4:v_max}, ${5:optional_formatIn}, ${6:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_SliderFlags_AlwaysClamp lua": {
	"prefix": "reaper.ImGui_SliderFlags_AlwaysClamp",
	"scope": "lua",
	"body": "reaper.ImGui_SliderFlags_AlwaysClamp()\n\n",
	"description": "Clamp value to min/max bounds when input manually with CTRL+Click.\nBy default CTRL+Click allows going out of bounds.\n\n"
	},

	"ImGui_SliderFlags_Logarithmic lua": {
	"prefix": "reaper.ImGui_SliderFlags_Logarithmic",
	"scope": "lua",
	"body": "reaper.ImGui_SliderFlags_Logarithmic()\n\n",
	"description": "Make the widget logarithmic (linear otherwise).\nConsider using SliderFlags_NoRoundToFormat with this if using a format-string\nwith small amount of digits.\n\n"
	},

	"ImGui_SliderFlags_NoInput lua": {
	"prefix": "reaper.ImGui_SliderFlags_NoInput",
	"scope": "lua",
	"body": "reaper.ImGui_SliderFlags_NoInput()\n\n",
	"description": "Disable CTRL+Click or Enter key allowing to input text directly into the widget.\n\n"
	},

	"ImGui_SliderFlags_NoRoundToFormat lua": {
	"prefix": "reaper.ImGui_SliderFlags_NoRoundToFormat",
	"scope": "lua",
	"body": "reaper.ImGui_SliderFlags_NoRoundToFormat()\n\n",
	"description": "Disable rounding underlying value to match precision of the display format\nstring (e.g. %.3f values are rounded to those 3 digits).\n\n"
	},

	"ImGui_SliderFlags_None lua": {
	"prefix": "reaper.ImGui_SliderFlags_None",
	"scope": "lua",
	"body": "reaper.ImGui_SliderFlags_None()\n\n",
	"description": ""
	},

	"ImGui_SliderInt lua": {
	"prefix": "reaper.ImGui_SliderInt",
	"scope": "lua",
	"body": "retval, v = reaper.ImGui_SliderInt(${1:ctx}, ${2:label}, ${3:v}, ${4:v_min}, ${5:v_max}, ${6:optional_formatIn}, ${7:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_SliderInt2 lua": {
	"prefix": "reaper.ImGui_SliderInt2",
	"scope": "lua",
	"body": "retval, v1, v2 = reaper.ImGui_SliderInt2(${1:ctx}, ${2:label}, ${3:v1}, ${4:v2}, ${5:v_min}, ${6:v_max}, ${7:optional_formatIn}, ${8:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_SliderInt3 lua": {
	"prefix": "reaper.ImGui_SliderInt3",
	"scope": "lua",
	"body": "retval, v1, v2, v3 = reaper.ImGui_SliderInt3(${1:ctx}, ${2:label}, ${3:v1}, ${4:v2}, ${5:v3}, ${6:v_min}, ${7:v_max}, ${8:optional_formatIn}, ${9:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_SliderInt4 lua": {
	"prefix": "reaper.ImGui_SliderInt4",
	"scope": "lua",
	"body": "retval, v1, v2, v3, v4 = reaper.ImGui_SliderInt4(${1:ctx}, ${2:label}, ${3:v1}, ${4:v2}, ${5:v3}, ${6:v4}, ${7:v_min}, ${8:v_max}, ${9:optional_formatIn}, ${10:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_SmallButton lua": {
	"prefix": "reaper.ImGui_SmallButton",
	"scope": "lua",
	"body": "reaper.ImGui_SmallButton(${1:ctx}, ${2:label})$0",
	"description": "Button with StyleVar_FramePadding=(0,0) to easily embed within text.\n\n"
	},

	"ImGui_SortDirection_Ascending lua": {
	"prefix": "reaper.ImGui_SortDirection_Ascending",
	"scope": "lua",
	"body": "reaper.ImGui_SortDirection_Ascending()\n\n",
	"description": "Ascending = 0->9, A->Z etc.\n\n"
	},

	"ImGui_SortDirection_Descending lua": {
	"prefix": "reaper.ImGui_SortDirection_Descending",
	"scope": "lua",
	"body": "reaper.ImGui_SortDirection_Descending()\n\n",
	"description": "Descending = 9->0, Z->A etc.\n\n"
	},

	"ImGui_SortDirection_None lua": {
	"prefix": "reaper.ImGui_SortDirection_None",
	"scope": "lua",
	"body": "reaper.ImGui_SortDirection_None()\n\n",
	"description": ""
	},

	"ImGui_Spacing lua": {
	"prefix": "reaper.ImGui_Spacing",
	"scope": "lua",
	"body": "reaper.ImGui_Spacing(${1:ctx})$0",
	"description": "Add vertical spacing.\n\n"
	},

	"ImGui_StyleVar_Alpha lua": {
	"prefix": "reaper.ImGui_StyleVar_Alpha",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_Alpha()\n\n",
	"description": "Global alpha applies to everything in Dear ImGui.\n\n"
	},

	"ImGui_StyleVar_ButtonTextAlign lua": {
	"prefix": "reaper.ImGui_StyleVar_ButtonTextAlign",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_ButtonTextAlign()\n\n",
	"description": "Alignment of button text when button is larger than text.\nDefaults to (0.5, 0.5) (centered).\n\n"
	},

	"ImGui_StyleVar_CellPadding lua": {
	"prefix": "reaper.ImGui_StyleVar_CellPadding",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_CellPadding()\n\n",
	"description": "Padding within a table cell.\n\n"
	},

	"ImGui_StyleVar_ChildBorderSize lua": {
	"prefix": "reaper.ImGui_StyleVar_ChildBorderSize",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_ChildBorderSize()\n\n",
	"description": "Thickness of border around child windows. Generally set to 0.0 or 1.0.\n(Other values are not well tested and more CPU/GPU costly).\n\n"
	},

	"ImGui_StyleVar_ChildRounding lua": {
	"prefix": "reaper.ImGui_StyleVar_ChildRounding",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_ChildRounding()\n\n",
	"description": "Radius of child window corners rounding. Set to 0.0 to have rectangular windows.\n\n"
	},

	"ImGui_StyleVar_DisabledAlpha lua": {
	"prefix": "reaper.ImGui_StyleVar_DisabledAlpha",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_DisabledAlpha()\n\n",
	"description": "Additional alpha multiplier applied by BeginDisabled.\nMultiply over current value of Alpha.\n\n"
	},

	"ImGui_StyleVar_FrameBorderSize lua": {
	"prefix": "reaper.ImGui_StyleVar_FrameBorderSize",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_FrameBorderSize()\n\n",
	"description": "Thickness of border around frames. Generally set to 0.0 or 1.0.\n(Other values are not well tested and more CPU/GPU costly).\n\n"
	},

	"ImGui_StyleVar_FramePadding lua": {
	"prefix": "reaper.ImGui_StyleVar_FramePadding",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_FramePadding()\n\n",
	"description": "Padding within a framed rectangle (used by most widgets).\n\n"
	},

	"ImGui_StyleVar_FrameRounding lua": {
	"prefix": "reaper.ImGui_StyleVar_FrameRounding",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_FrameRounding()\n\n",
	"description": "Radius of frame corners rounding.\nSet to 0.0 to have rectangular frame (used by most widgets).\n\n"
	},

	"ImGui_StyleVar_GrabMinSize lua": {
	"prefix": "reaper.ImGui_StyleVar_GrabMinSize",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_GrabMinSize()\n\n",
	"description": "Minimum width/height of a grab box for slider/scrollbar.\n\n"
	},

	"ImGui_StyleVar_GrabRounding lua": {
	"prefix": "reaper.ImGui_StyleVar_GrabRounding",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_GrabRounding()\n\n",
	"description": "Radius of grabs corners rounding. Set to 0.0 to have rectangular slider grabs.\n\n"
	},

	"ImGui_StyleVar_IndentSpacing lua": {
	"prefix": "reaper.ImGui_StyleVar_IndentSpacing",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_IndentSpacing()\n\n",
	"description": "Horizontal indentation when e.g. entering a tree node.\nGenerally == (GetFontSize + StyleVar_FramePadding.x*2).\n\n"
	},

	"ImGui_StyleVar_ItemInnerSpacing lua": {
	"prefix": "reaper.ImGui_StyleVar_ItemInnerSpacing",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_ItemInnerSpacing()\n\n",
	"description": "Horizontal and vertical spacing between within elements of a composed widget\n(e.g. a slider and its label).\n\n"
	},

	"ImGui_StyleVar_ItemSpacing lua": {
	"prefix": "reaper.ImGui_StyleVar_ItemSpacing",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_ItemSpacing()\n\n",
	"description": "Horizontal and vertical spacing between widgets/lines.\n\n"
	},

	"ImGui_StyleVar_PopupBorderSize lua": {
	"prefix": "reaper.ImGui_StyleVar_PopupBorderSize",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_PopupBorderSize()\n\n",
	"description": "Thickness of border around popup/tooltip windows. Generally set to 0.0 or 1.0.\n(Other values are not well tested and more CPU/GPU costly).\n\n"
	},

	"ImGui_StyleVar_PopupRounding lua": {
	"prefix": "reaper.ImGui_StyleVar_PopupRounding",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_PopupRounding()\n\n",
	"description": "Radius of popup window corners rounding.\n(Note that tooltip windows use StyleVar_WindowRounding.)\n\n"
	},

	"ImGui_StyleVar_ScrollbarRounding lua": {
	"prefix": "reaper.ImGui_StyleVar_ScrollbarRounding",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_ScrollbarRounding()\n\n",
	"description": "Radius of grab corners for scrollbar.\n\n"
	},

	"ImGui_StyleVar_ScrollbarSize lua": {
	"prefix": "reaper.ImGui_StyleVar_ScrollbarSize",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_ScrollbarSize()\n\n",
	"description": "Width of the vertical scrollbar, Height of the horizontal scrollbar.\n\n"
	},

	"ImGui_StyleVar_SelectableTextAlign lua": {
	"prefix": "reaper.ImGui_StyleVar_SelectableTextAlign",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_SelectableTextAlign()\n\n",
	"description": "Alignment of selectable text. Defaults to (0.0, 0.0) (top-left aligned).\nIt's generally important to keep this left-aligned if you want to lay\nmultiple items on a same line.\n\n"
	},

	"ImGui_StyleVar_TabRounding lua": {
	"prefix": "reaper.ImGui_StyleVar_TabRounding",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_TabRounding()\n\n",
	"description": "Radius of upper corners of a tab. Set to 0.0 to have rectangular tabs.\n\n"
	},

	"ImGui_StyleVar_WindowBorderSize lua": {
	"prefix": "reaper.ImGui_StyleVar_WindowBorderSize",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_WindowBorderSize()\n\n",
	"description": "Thickness of border around windows. Generally set to 0.0 or 1.0.\n(Other values are not well tested and more CPU/GPU costly).\n\n"
	},

	"ImGui_StyleVar_WindowMinSize lua": {
	"prefix": "reaper.ImGui_StyleVar_WindowMinSize",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_WindowMinSize()\n\n",
	"description": "Minimum window size. This is a global setting.\nIf you want to constrain individual windows, use SetNextWindowSizeConstraints.\n\n"
	},

	"ImGui_StyleVar_WindowPadding lua": {
	"prefix": "reaper.ImGui_StyleVar_WindowPadding",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_WindowPadding()\n\n",
	"description": "Padding within a window.\n\n"
	},

	"ImGui_StyleVar_WindowRounding lua": {
	"prefix": "reaper.ImGui_StyleVar_WindowRounding",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_WindowRounding()\n\n",
	"description": "Radius of window corners rounding. Set to 0.0 to have rectangular windows.\nLarge values tend to lead to variety of artifacts and are not recommended.\n\n"
	},

	"ImGui_StyleVar_WindowTitleAlign lua": {
	"prefix": "reaper.ImGui_StyleVar_WindowTitleAlign",
	"scope": "lua",
	"body": "reaper.ImGui_StyleVar_WindowTitleAlign()\n\n",
	"description": "Alignment for title bar text.\nDefaults to (0.0,0.5) for left-aligned,vertically centered.\n\n"
	},

	"ImGui_TabBarFlags_AutoSelectNewTabs lua": {
	"prefix": "reaper.ImGui_TabBarFlags_AutoSelectNewTabs",
	"scope": "lua",
	"body": "reaper.ImGui_TabBarFlags_AutoSelectNewTabs()\n\n",
	"description": "Automatically select new tabs when they appear.\n\n"
	},

	"ImGui_TabBarFlags_FittingPolicyResizeDown lua": {
	"prefix": "reaper.ImGui_TabBarFlags_FittingPolicyResizeDown",
	"scope": "lua",
	"body": "reaper.ImGui_TabBarFlags_FittingPolicyResizeDown()\n\n",
	"description": "Resize tabs when they don't fit.\n\n"
	},

	"ImGui_TabBarFlags_FittingPolicyScroll lua": {
	"prefix": "reaper.ImGui_TabBarFlags_FittingPolicyScroll",
	"scope": "lua",
	"body": "reaper.ImGui_TabBarFlags_FittingPolicyScroll()\n\n",
	"description": "Add scroll buttons when tabs don't fit.\n\n"
	},

	"ImGui_TabBarFlags_NoCloseWithMiddleMouseButton lua": {
	"prefix": "reaper.ImGui_TabBarFlags_NoCloseWithMiddleMouseButton",
	"scope": "lua",
	"body": "reaper.ImGui_TabBarFlags_NoCloseWithMiddleMouseButton()\n\n",
	"description": "Disable behavior of closing tabs (that are submitted with p_open != nil)\nwith middle mouse button. You can still repro this behavior on user's side\nwith if(IsItemHovered() && IsMouseClicked(2)) p_open = false.\n\n"
	},

	"ImGui_TabBarFlags_NoTabListScrollingButtons lua": {
	"prefix": "reaper.ImGui_TabBarFlags_NoTabListScrollingButtons",
	"scope": "lua",
	"body": "reaper.ImGui_TabBarFlags_NoTabListScrollingButtons()\n\n",
	"description": "Disable scrolling buttons (apply when fitting policy is\nTabBarFlags_FittingPolicyScroll).\n\n"
	},

	"ImGui_TabBarFlags_NoTooltip lua": {
	"prefix": "reaper.ImGui_TabBarFlags_NoTooltip",
	"scope": "lua",
	"body": "reaper.ImGui_TabBarFlags_NoTooltip()\n\n",
	"description": "Disable tooltips when hovering a tab.\n\n"
	},

	"ImGui_TabBarFlags_None lua": {
	"prefix": "reaper.ImGui_TabBarFlags_None",
	"scope": "lua",
	"body": "reaper.ImGui_TabBarFlags_None()\n\n",
	"description": ""
	},

	"ImGui_TabBarFlags_Reorderable lua": {
	"prefix": "reaper.ImGui_TabBarFlags_Reorderable",
	"scope": "lua",
	"body": "reaper.ImGui_TabBarFlags_Reorderable()\n\n",
	"description": "Allow manually dragging tabs to re-order them + New tabs are appended at\nthe end of list.\n\n"
	},

	"ImGui_TabBarFlags_TabListPopupButton lua": {
	"prefix": "reaper.ImGui_TabBarFlags_TabListPopupButton",
	"scope": "lua",
	"body": "reaper.ImGui_TabBarFlags_TabListPopupButton()\n\n",
	"description": "Disable buttons to open the tab list popup.\n\n"
	},

	"ImGui_TabItemButton lua": {
	"prefix": "reaper.ImGui_TabItemButton",
	"scope": "lua",
	"body": "reaper.ImGui_TabItemButton(${1:ctx}, ${2:label}, ${3:optional_flagsIn})$0",
	"description": "Create a Tab behaving like a button. Return true when clicked.\nCannot be selected in the tab bar.\n\n"
	},

	"ImGui_TabItemFlags_Leading lua": {
	"prefix": "reaper.ImGui_TabItemFlags_Leading",
	"scope": "lua",
	"body": "reaper.ImGui_TabItemFlags_Leading()\n\n",
	"description": "Enforce the tab position to the left of the tab bar (after the tab list popup button).\n\n"
	},

	"ImGui_TabItemFlags_NoCloseWithMiddleMouseButton lua": {
	"prefix": "reaper.ImGui_TabItemFlags_NoCloseWithMiddleMouseButton",
	"scope": "lua",
	"body": "reaper.ImGui_TabItemFlags_NoCloseWithMiddleMouseButton()\n\n",
	"description": "Disable behavior of closing tabs (that are submitted with p_open != nil) with\nmiddle mouse button. You can still repro this behavior on user's side with\nif(IsItemHovered() && IsMouseClicked(2)) p_open = false.\n\n"
	},

	"ImGui_TabItemFlags_NoPushId lua": {
	"prefix": "reaper.ImGui_TabItemFlags_NoPushId",
	"scope": "lua",
	"body": "reaper.ImGui_TabItemFlags_NoPushId()\n\n",
	"description": "Don't call PushID(tab->ID)/PopID() on BeginTabItem/EndTabItem.\n\n"
	},

	"ImGui_TabItemFlags_NoReorder lua": {
	"prefix": "reaper.ImGui_TabItemFlags_NoReorder",
	"scope": "lua",
	"body": "reaper.ImGui_TabItemFlags_NoReorder()\n\n",
	"description": "Disable reordering this tab or having another tab cross over this tab.\n\n"
	},

	"ImGui_TabItemFlags_NoTooltip lua": {
	"prefix": "reaper.ImGui_TabItemFlags_NoTooltip",
	"scope": "lua",
	"body": "reaper.ImGui_TabItemFlags_NoTooltip()\n\n",
	"description": "Disable tooltip for the given tab.\n\n"
	},

	"ImGui_TabItemFlags_None lua": {
	"prefix": "reaper.ImGui_TabItemFlags_None",
	"scope": "lua",
	"body": "reaper.ImGui_TabItemFlags_None()\n\n",
	"description": ""
	},

	"ImGui_TabItemFlags_SetSelected lua": {
	"prefix": "reaper.ImGui_TabItemFlags_SetSelected",
	"scope": "lua",
	"body": "reaper.ImGui_TabItemFlags_SetSelected()\n\n",
	"description": "Trigger flag to programmatically make the tab selected when calling BeginTabItem.\n\n"
	},

	"ImGui_TabItemFlags_Trailing lua": {
	"prefix": "reaper.ImGui_TabItemFlags_Trailing",
	"scope": "lua",
	"body": "reaper.ImGui_TabItemFlags_Trailing()\n\n",
	"description": "Enforce the tab position to the right of the tab bar (before the scrolling buttons).\n\n"
	},

	"ImGui_TabItemFlags_UnsavedDocument lua": {
	"prefix": "reaper.ImGui_TabItemFlags_UnsavedDocument",
	"scope": "lua",
	"body": "reaper.ImGui_TabItemFlags_UnsavedDocument()\n\n",
	"description": "Append '*' to title without affecting the ID, as a convenience to avoid using\nthe ### operator. Also: tab is selected on closure and closure is deferred by\none frame to allow code to undo it without flicker.\n\n"
	},

	"ImGui_TableBgTarget_CellBg lua": {
	"prefix": "reaper.ImGui_TableBgTarget_CellBg",
	"scope": "lua",
	"body": "reaper.ImGui_TableBgTarget_CellBg()\n\n",
	"description": "Set cell background color (top-most color).\n\n"
	},

	"ImGui_TableBgTarget_None lua": {
	"prefix": "reaper.ImGui_TableBgTarget_None",
	"scope": "lua",
	"body": "reaper.ImGui_TableBgTarget_None()\n\n",
	"description": ""
	},

	"ImGui_TableBgTarget_RowBg0 lua": {
	"prefix": "reaper.ImGui_TableBgTarget_RowBg0",
	"scope": "lua",
	"body": "reaper.ImGui_TableBgTarget_RowBg0()\n\n",
	"description": "Set row background color 0 (generally used for background,\nautomatically set when TableFlags_RowBg is used).\n\n"
	},

	"ImGui_TableBgTarget_RowBg1 lua": {
	"prefix": "reaper.ImGui_TableBgTarget_RowBg1",
	"scope": "lua",
	"body": "reaper.ImGui_TableBgTarget_RowBg1()\n\n",
	"description": "Set row background color 1 (generally used for selection marking).\n\n"
	},

	"ImGui_TableColumnFlags_DefaultHide lua": {
	"prefix": "reaper.ImGui_TableColumnFlags_DefaultHide",
	"scope": "lua",
	"body": "reaper.ImGui_TableColumnFlags_DefaultHide()\n\n",
	"description": "Default as a hidden/disabled column.\n\n"
	},

	"ImGui_TableColumnFlags_DefaultSort lua": {
	"prefix": "reaper.ImGui_TableColumnFlags_DefaultSort",
	"scope": "lua",
	"body": "reaper.ImGui_TableColumnFlags_DefaultSort()\n\n",
	"description": "Default as a sorting column.\n\n"
	},

	"ImGui_TableColumnFlags_Disabled lua": {
	"prefix": "reaper.ImGui_TableColumnFlags_Disabled",
	"scope": "lua",
	"body": "reaper.ImGui_TableColumnFlags_Disabled()\n\n",
	"description": "Overriding/master disable flag: hide column, won't show in context menu\n(unlike calling TableSetColumnEnabled which manipulates the user accessible state).\n\n"
	},

	"ImGui_TableColumnFlags_IndentDisable lua": {
	"prefix": "reaper.ImGui_TableColumnFlags_IndentDisable",
	"scope": "lua",
	"body": "reaper.ImGui_TableColumnFlags_IndentDisable()\n\n",
	"description": "Ignore current Indent value when entering cell (default for columns > 0).\nIndentation changes _within_ the cell will still be honored.\n\n"
	},

	"ImGui_TableColumnFlags_IndentEnable lua": {
	"prefix": "reaper.ImGui_TableColumnFlags_IndentEnable",
	"scope": "lua",
	"body": "reaper.ImGui_TableColumnFlags_IndentEnable()\n\n",
	"description": "Use current Indent value when entering cell (default for column 0).\n\n"
	},

	"ImGui_TableColumnFlags_IsEnabled lua": {
	"prefix": "reaper.ImGui_TableColumnFlags_IsEnabled",
	"scope": "lua",
	"body": "reaper.ImGui_TableColumnFlags_IsEnabled()\n\n",
	"description": "Status: is enabled == not hidden by user/api (referred to as 'Hide' in\n_DefaultHide and _NoHide) flags.\n\n"
	},

	"ImGui_TableColumnFlags_IsHovered lua": {
	"prefix": "reaper.ImGui_TableColumnFlags_IsHovered",
	"scope": "lua",
	"body": "reaper.ImGui_TableColumnFlags_IsHovered()\n\n",
	"description": "Status: is hovered by mouse.\n\n"
	},

	"ImGui_TableColumnFlags_IsSorted lua": {
	"prefix": "reaper.ImGui_TableColumnFlags_IsSorted",
	"scope": "lua",
	"body": "reaper.ImGui_TableColumnFlags_IsSorted()\n\n",
	"description": "Status: is currently part of the sort specs.\n\n"
	},

	"ImGui_TableColumnFlags_IsVisible lua": {
	"prefix": "reaper.ImGui_TableColumnFlags_IsVisible",
	"scope": "lua",
	"body": "reaper.ImGui_TableColumnFlags_IsVisible()\n\n",
	"description": "Status: is visible == is enabled AND not clipped by scrolling.\n\n"
	},

	"ImGui_TableColumnFlags_NoClip lua": {
	"prefix": "reaper.ImGui_TableColumnFlags_NoClip",
	"scope": "lua",
	"body": "reaper.ImGui_TableColumnFlags_NoClip()\n\n",
	"description": "Disable clipping for this column\n(all NoClip columns will render in a same draw command).\n\n"
	},

	"ImGui_TableColumnFlags_NoHeaderLabel lua": {
	"prefix": "reaper.ImGui_TableColumnFlags_NoHeaderLabel",
	"scope": "lua",
	"body": "reaper.ImGui_TableColumnFlags_NoHeaderLabel()\n\n",
	"description": "TableHeadersRow will not submit label for this column.\nConvenient for some small columns. Name will still appear in context menu.\n\n"
	},

	"ImGui_TableColumnFlags_NoHeaderWidth lua": {
	"prefix": "reaper.ImGui_TableColumnFlags_NoHeaderWidth",
	"scope": "lua",
	"body": "reaper.ImGui_TableColumnFlags_NoHeaderWidth()\n\n",
	"description": "Disable header text width contribution to automatic column width.\n\n"
	},

	"ImGui_TableColumnFlags_NoHide lua": {
	"prefix": "reaper.ImGui_TableColumnFlags_NoHide",
	"scope": "lua",
	"body": "reaper.ImGui_TableColumnFlags_NoHide()\n\n",
	"description": "Disable ability to hide/disable this column.\n\n"
	},

	"ImGui_TableColumnFlags_NoReorder lua": {
	"prefix": "reaper.ImGui_TableColumnFlags_NoReorder",
	"scope": "lua",
	"body": "reaper.ImGui_TableColumnFlags_NoReorder()\n\n",
	"description": "Disable manual reordering this column, this will also prevent other columns\nfrom crossing over this column.\n\n"
	},

	"ImGui_TableColumnFlags_NoResize lua": {
	"prefix": "reaper.ImGui_TableColumnFlags_NoResize",
	"scope": "lua",
	"body": "reaper.ImGui_TableColumnFlags_NoResize()\n\n",
	"description": "Disable manual resizing.\n\n"
	},

	"ImGui_TableColumnFlags_NoSort lua": {
	"prefix": "reaper.ImGui_TableColumnFlags_NoSort",
	"scope": "lua",
	"body": "reaper.ImGui_TableColumnFlags_NoSort()\n\n",
	"description": "Disable ability to sort on this field\n(even if TableFlags_Sortable is set on the table).\n\n"
	},

	"ImGui_TableColumnFlags_NoSortAscending lua": {
	"prefix": "reaper.ImGui_TableColumnFlags_NoSortAscending",
	"scope": "lua",
	"body": "reaper.ImGui_TableColumnFlags_NoSortAscending()\n\n",
	"description": "Disable ability to sort in the ascending direction.\n\n"
	},

	"ImGui_TableColumnFlags_NoSortDescending lua": {
	"prefix": "reaper.ImGui_TableColumnFlags_NoSortDescending",
	"scope": "lua",
	"body": "reaper.ImGui_TableColumnFlags_NoSortDescending()\n\n",
	"description": "Disable ability to sort in the descending direction.\n\n"
	},

	"ImGui_TableColumnFlags_None lua": {
	"prefix": "reaper.ImGui_TableColumnFlags_None",
	"scope": "lua",
	"body": "reaper.ImGui_TableColumnFlags_None()\n\n",
	"description": ""
	},

	"ImGui_TableColumnFlags_PreferSortAscending lua": {
	"prefix": "reaper.ImGui_TableColumnFlags_PreferSortAscending",
	"scope": "lua",
	"body": "reaper.ImGui_TableColumnFlags_PreferSortAscending()\n\n",
	"description": "Make the initial sort direction Ascending when first sorting on this column (default).\n\n"
	},

	"ImGui_TableColumnFlags_PreferSortDescending lua": {
	"prefix": "reaper.ImGui_TableColumnFlags_PreferSortDescending",
	"scope": "lua",
	"body": "reaper.ImGui_TableColumnFlags_PreferSortDescending()\n\n",
	"description": "Make the initial sort direction Descending when first sorting on this column.\n\n"
	},

	"ImGui_TableColumnFlags_WidthFixed lua": {
	"prefix": "reaper.ImGui_TableColumnFlags_WidthFixed",
	"scope": "lua",
	"body": "reaper.ImGui_TableColumnFlags_WidthFixed()\n\n",
	"description": "Column will not stretch. Preferable with horizontal scrolling enabled\n(default if table sizing policy is _SizingFixedFit and table is resizable).\n\n"
	},

	"ImGui_TableColumnFlags_WidthStretch lua": {
	"prefix": "reaper.ImGui_TableColumnFlags_WidthStretch",
	"scope": "lua",
	"body": "reaper.ImGui_TableColumnFlags_WidthStretch()\n\n",
	"description": "Column will stretch. Preferable with horizontal scrolling disabled\n(default if table sizing policy is _SizingStretchSame or _SizingStretchProp).\n\n"
	},

	"ImGui_TableFlags_Borders lua": {
	"prefix": "reaper.ImGui_TableFlags_Borders",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_Borders()\n\n",
	"description": "Draw all borders.\n\n"
	},

	"ImGui_TableFlags_BordersH lua": {
	"prefix": "reaper.ImGui_TableFlags_BordersH",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_BordersH()\n\n",
	"description": "Draw horizontal borders.\n\n"
	},

	"ImGui_TableFlags_BordersInner lua": {
	"prefix": "reaper.ImGui_TableFlags_BordersInner",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_BordersInner()\n\n",
	"description": "Draw inner borders.\n\n"
	},

	"ImGui_TableFlags_BordersInnerH lua": {
	"prefix": "reaper.ImGui_TableFlags_BordersInnerH",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_BordersInnerH()\n\n",
	"description": "Draw horizontal borders between rows.\n\n"
	},

	"ImGui_TableFlags_BordersInnerV lua": {
	"prefix": "reaper.ImGui_TableFlags_BordersInnerV",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_BordersInnerV()\n\n",
	"description": "Draw vertical borders between columns.\n\n"
	},

	"ImGui_TableFlags_BordersOuter lua": {
	"prefix": "reaper.ImGui_TableFlags_BordersOuter",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_BordersOuter()\n\n",
	"description": "Draw outer borders.\n\n"
	},

	"ImGui_TableFlags_BordersOuterH lua": {
	"prefix": "reaper.ImGui_TableFlags_BordersOuterH",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_BordersOuterH()\n\n",
	"description": "Draw horizontal borders at the top and bottom.\n\n"
	},

	"ImGui_TableFlags_BordersOuterV lua": {
	"prefix": "reaper.ImGui_TableFlags_BordersOuterV",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_BordersOuterV()\n\n",
	"description": "Draw vertical borders on the left and right sides.\n\n"
	},

	"ImGui_TableFlags_BordersV lua": {
	"prefix": "reaper.ImGui_TableFlags_BordersV",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_BordersV()\n\n",
	"description": "Draw vertical borders.\n\n"
	},

	"ImGui_TableFlags_ContextMenuInBody lua": {
	"prefix": "reaper.ImGui_TableFlags_ContextMenuInBody",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_ContextMenuInBody()\n\n",
	"description": "Right-click on columns body/contents will display table context menu.\nBy default it is available in TableHeadersRow.\n\n"
	},

	"ImGui_TableFlags_Hideable lua": {
	"prefix": "reaper.ImGui_TableFlags_Hideable",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_Hideable()\n\n",
	"description": "Enable hiding/disabling columns in context menu.\n\n"
	},

	"ImGui_TableFlags_NoClip lua": {
	"prefix": "reaper.ImGui_TableFlags_NoClip",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_NoClip()\n\n",
	"description": "Disable clipping rectangle for every individual columns\n(reduce draw command count, items will be able to overflow into other columns).\nGenerally incompatible with TableSetupScrollFreeze.\n\n"
	},

	"ImGui_TableFlags_NoHostExtendX lua": {
	"prefix": "reaper.ImGui_TableFlags_NoHostExtendX",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_NoHostExtendX()\n\n",
	"description": "Make outer width auto-fit to columns, overriding outer_size.x value. Only\navailable when ScrollX/ScrollY are disabled and Stretch columns are not used.\n\n"
	},

	"ImGui_TableFlags_NoHostExtendY lua": {
	"prefix": "reaper.ImGui_TableFlags_NoHostExtendY",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_NoHostExtendY()\n\n",
	"description": "Make outer height stop exactly at outer_size.y (prevent auto-extending table\npast the limit). Only available when ScrollX/ScrollY are disabled.\nData below the limit will be clipped and not visible.\n\n"
	},

	"ImGui_TableFlags_NoKeepColumnsVisible lua": {
	"prefix": "reaper.ImGui_TableFlags_NoKeepColumnsVisible",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_NoKeepColumnsVisible()\n\n",
	"description": "Disable keeping column always minimally visible when ScrollX is off and table\ngets too small. Not recommended if columns are resizable.\n\n"
	},

	"ImGui_TableFlags_NoPadInnerX lua": {
	"prefix": "reaper.ImGui_TableFlags_NoPadInnerX",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_NoPadInnerX()\n\n",
	"description": "Disable inner padding between columns (double inner padding if\nTableFlags_BordersOuterV is on, single inner padding if BordersOuterV is off).\n\n"
	},

	"ImGui_TableFlags_NoPadOuterX lua": {
	"prefix": "reaper.ImGui_TableFlags_NoPadOuterX",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_NoPadOuterX()\n\n",
	"description": "Default if TableFlags_BordersOuterV is off. Disable outermost padding.\n\n"
	},

	"ImGui_TableFlags_NoSavedSettings lua": {
	"prefix": "reaper.ImGui_TableFlags_NoSavedSettings",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_NoSavedSettings()\n\n",
	"description": "Disable persisting columns order, width and sort settings in the .ini file.\n\n"
	},

	"ImGui_TableFlags_None lua": {
	"prefix": "reaper.ImGui_TableFlags_None",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_None()\n\n",
	"description": ""
	},

	"ImGui_TableFlags_PadOuterX lua": {
	"prefix": "reaper.ImGui_TableFlags_PadOuterX",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_PadOuterX()\n\n",
	"description": "Default if TableFlags_BordersOuterV is on. Enable outermost padding.\nGenerally desirable if you have headers.\n\n"
	},

	"ImGui_TableFlags_PreciseWidths lua": {
	"prefix": "reaper.ImGui_TableFlags_PreciseWidths",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_PreciseWidths()\n\n",
	"description": "Disable distributing remainder width to stretched columns (width allocation\non a 100-wide table with 3 columns: Without this flag: 33,33,34. With this\nflag: 33,33,33).\nWith larger number of columns, resizing will appear to be less smooth.\n\n"
	},

	"ImGui_TableFlags_Reorderable lua": {
	"prefix": "reaper.ImGui_TableFlags_Reorderable",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_Reorderable()\n\n",
	"description": "Enable reordering columns in header row\n(need calling TableSetupColumn + TableHeadersRow to display headers).\n\n"
	},

	"ImGui_TableFlags_Resizable lua": {
	"prefix": "reaper.ImGui_TableFlags_Resizable",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_Resizable()\n\n",
	"description": "Enable resizing columns.\n\n"
	},

	"ImGui_TableFlags_RowBg lua": {
	"prefix": "reaper.ImGui_TableFlags_RowBg",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_RowBg()\n\n",
	"description": "Set each RowBg color with Col_TableRowBg or Col_TableRowBgAlt (equivalent of\ncalling TableSetBgColor with TableBgTarget_RowBg0 on each row manually).\n\n"
	},

	"ImGui_TableFlags_ScrollX lua": {
	"prefix": "reaper.ImGui_TableFlags_ScrollX",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_ScrollX()\n\n",
	"description": "Enable horizontal scrolling. Require 'outer_size' parameter of BeginTable to\nspecify the container size. Changes default sizing policy.\nBecause this creates a child window, ScrollY is currently generally\nrecommended when using ScrollX.\n\n"
	},

	"ImGui_TableFlags_ScrollY lua": {
	"prefix": "reaper.ImGui_TableFlags_ScrollY",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_ScrollY()\n\n",
	"description": "Enable vertical scrolling.\nRequire 'outer_size' parameter of BeginTable to specify the container size.\n\n"
	},

	"ImGui_TableFlags_SizingFixedFit lua": {
	"prefix": "reaper.ImGui_TableFlags_SizingFixedFit",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_SizingFixedFit()\n\n",
	"description": "Columns default to _WidthFixed or _WidthAuto (if resizable or not resizable),\nmatching contents width.\n\n"
	},

	"ImGui_TableFlags_SizingFixedSame lua": {
	"prefix": "reaper.ImGui_TableFlags_SizingFixedSame",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_SizingFixedSame()\n\n",
	"description": "Columns default to _WidthFixed or _WidthAuto (if resizable or not resizable),\nmatching the maximum contents width of all columns.\nImplicitly enable TableFlags_NoKeepColumnsVisible.\n\n"
	},

	"ImGui_TableFlags_SizingStretchProp lua": {
	"prefix": "reaper.ImGui_TableFlags_SizingStretchProp",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_SizingStretchProp()\n\n",
	"description": "Columns default to _WidthStretch with default weights proportional to each\ncolumns contents widths.\n\n"
	},

	"ImGui_TableFlags_SizingStretchSame lua": {
	"prefix": "reaper.ImGui_TableFlags_SizingStretchSame",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_SizingStretchSame()\n\n",
	"description": "Columns default to _WidthStretch with default weights all equal,\nunless overriden by TableSetupColumn.\n\n"
	},

	"ImGui_TableFlags_SortMulti lua": {
	"prefix": "reaper.ImGui_TableFlags_SortMulti",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_SortMulti()\n\n",
	"description": "Hold shift when clicking headers to sort on multiple column.\nTableGetGetSortSpecs may return specs where (SpecsCount > 1).\n\n"
	},

	"ImGui_TableFlags_SortTristate lua": {
	"prefix": "reaper.ImGui_TableFlags_SortTristate",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_SortTristate()\n\n",
	"description": "Allow no sorting, disable default sorting.\nTableGetColumnSortSpecs may return specs where (SpecsCount == 0).\n\n"
	},

	"ImGui_TableFlags_Sortable lua": {
	"prefix": "reaper.ImGui_TableFlags_Sortable",
	"scope": "lua",
	"body": "reaper.ImGui_TableFlags_Sortable()\n\n",
	"description": "Enable sorting. Call TableNeedSort/TableGetColumnSortSpecs to obtain sort specs.\nAlso see TableFlags_SortMulti and TableFlags_SortTristate.\n\n"
	},

	"ImGui_TableGetColumnCount lua": {
	"prefix": "reaper.ImGui_TableGetColumnCount",
	"scope": "lua",
	"body": "reaper.ImGui_TableGetColumnCount(${1:ctx})$0",
	"description": "Return number of columns (value passed to BeginTable).\n\n"
	},

	"ImGui_TableGetColumnFlags lua": {
	"prefix": "reaper.ImGui_TableGetColumnFlags",
	"scope": "lua",
	"body": "reaper.ImGui_TableGetColumnFlags(${1:ctx}, ${2:optional_column_nIn})$0",
	"description": "Return column flags so you can query their Enabled/Visible/Sorted/Hovered\nstatus flags. Pass -1 to use current column.\n\n"
	},

	"ImGui_TableGetColumnIndex lua": {
	"prefix": "reaper.ImGui_TableGetColumnIndex",
	"scope": "lua",
	"body": "reaper.ImGui_TableGetColumnIndex(${1:ctx})$0",
	"description": "Return current column index.\n\n"
	},

	"ImGui_TableGetColumnName lua": {
	"prefix": "reaper.ImGui_TableGetColumnName",
	"scope": "lua",
	"body": "reaper.ImGui_TableGetColumnName(${1:ctx}, ${2:optional_column_nIn})$0",
	"description": "Return '' if column didn't have a name declared by TableSetupColumn.\nPass -1 to use current column.\n\n"
	},

	"ImGui_TableGetColumnSortSpecs lua": {
	"prefix": "reaper.ImGui_TableGetColumnSortSpecs",
	"scope": "lua",
	"body": "retval, column_user_id, column_index, sort_order, sort_direction = reaper.ImGui_TableGetColumnSortSpecs(${1:ctx}, ${2:id})$0",
	"description": "Sorting specification for one column of a table.\nCall while incrementing 'id' from 0 until false is returned.\n- ColumnUserID:  User id of the column (if specified by a TableSetupColumn call)\n- ColumnIndex:   Index of the column\n- SortOrder:     Index within parent SortSpecs (always stored in order starting\nfrom 0, tables sorted on a single criteria will always have a 0 here)\n- SortDirection: SortDirection_Ascending or SortDirection_Descending\n(you can use this or SortSign, whichever is more convenient for your sort\nfunction)\nSee TableNeedSort.\n\n"
	},

	"ImGui_TableGetRowIndex lua": {
	"prefix": "reaper.ImGui_TableGetRowIndex",
	"scope": "lua",
	"body": "reaper.ImGui_TableGetRowIndex(${1:ctx})$0",
	"description": "Return current row index.\n\n"
	},

	"ImGui_TableHeader lua": {
	"prefix": "reaper.ImGui_TableHeader",
	"scope": "lua",
	"body": "reaper.ImGui_TableHeader(${1:ctx}, ${2:label})$0",
	"description": "Submit one header cell manually (rarely used). See TableSetupColumn.\n\n"
	},

	"ImGui_TableHeadersRow lua": {
	"prefix": "reaper.ImGui_TableHeadersRow",
	"scope": "lua",
	"body": "reaper.ImGui_TableHeadersRow(${1:ctx})$0",
	"description": "Submit all headers cells based on data provided to TableSetupColumn +\nsubmit context menu.\n\n"
	},

	"ImGui_TableNeedSort lua": {
	"prefix": "reaper.ImGui_TableNeedSort",
	"scope": "lua",
	"body": "retval, has_specs = reaper.ImGui_TableNeedSort(${1:ctx})$0",
	"description": "Return true once when sorting specs have changed since last call,\nor the first time. 'has_specs' is false when not sorting.\nSee TableGetColumnSortSpecs.\n\n"
	},

	"ImGui_TableNextColumn lua": {
	"prefix": "reaper.ImGui_TableNextColumn",
	"scope": "lua",
	"body": "reaper.ImGui_TableNextColumn(${1:ctx})$0",
	"description": "Append into the next column (or first column of next row if currently in\nlast column). Return true when column is visible.\n\n"
	},

	"ImGui_TableNextRow lua": {
	"prefix": "reaper.ImGui_TableNextRow",
	"scope": "lua",
	"body": "reaper.ImGui_TableNextRow(${1:ctx}, ${2:optional_row_flagsIn}, ${3:optional_min_row_heightIn})$0",
	"description": "Append into the first cell of a new row.\n\n"
	},

	"ImGui_TableRowFlags_Headers lua": {
	"prefix": "reaper.ImGui_TableRowFlags_Headers",
	"scope": "lua",
	"body": "reaper.ImGui_TableRowFlags_Headers()\n\n",
	"description": "Identify header row (set default background color + width of its contents\naccounted different for auto column width).\n\n"
	},

	"ImGui_TableRowFlags_None lua": {
	"prefix": "reaper.ImGui_TableRowFlags_None",
	"scope": "lua",
	"body": "reaper.ImGui_TableRowFlags_None()\n\n",
	"description": "For TableNextRow.\n\n"
	},

	"ImGui_TableSetBgColor lua": {
	"prefix": "reaper.ImGui_TableSetBgColor",
	"scope": "lua",
	"body": "reaper.ImGui_TableSetBgColor(${1:ctx}, ${2:target}, ${3:color_rgba}, ${4:optional_column_nIn})$0",
	"description": "Change the color of a cell, row, or column.\nSee TableBgTarget_* flags for details.\n\n"
	},

	"ImGui_TableSetColumnEnabled lua": {
	"prefix": "reaper.ImGui_TableSetColumnEnabled",
	"scope": "lua",
	"body": "reaper.ImGui_TableSetColumnEnabled(${1:ctx}, ${2:column_n}, ${3:v})$0",
	"description": "Change user-accessible enabled/disabled state of a column, set to false to\nhide the column. Note that end-user can use the context menu to change this\nthemselves (right-click in headers, or right-click in columns body with\nTableFlags_ContextMenuInBody).\n- Require table to have the TableFlags_Hideable flag because we are manipulating\nuser accessible state.\n- Request will be applied during next layout, which happens on the first call to\nTableNextRow after Begin_Table.\n- For the getter you can test\n(TableGetColumnFlags() & TableColumnFlags_IsEnabled) != 0.\n\n"
	},

	"ImGui_TableSetColumnIndex lua": {
	"prefix": "reaper.ImGui_TableSetColumnIndex",
	"scope": "lua",
	"body": "reaper.ImGui_TableSetColumnIndex(${1:ctx}, ${2:column_n})$0",
	"description": "Append into the specified column. Return true when column is visible.\n\n"
	},

	"ImGui_TableSetupColumn lua": {
	"prefix": "reaper.ImGui_TableSetupColumn",
	"scope": "lua",
	"body": "reaper.ImGui_TableSetupColumn(${1:ctx}, ${2:label}, ${3:optional_flagsIn}, ${4:optional_init_width_or_weightIn}, ${5:optional_user_idIn})$0",
	"description": "Use to specify label, resizing policy, default width/weight, id,\nvarious other flags etc.\n\n"
	},

	"ImGui_TableSetupScrollFreeze lua": {
	"prefix": "reaper.ImGui_TableSetupScrollFreeze",
	"scope": "lua",
	"body": "reaper.ImGui_TableSetupScrollFreeze(${1:ctx}, ${2:cols}, ${3:rows})$0",
	"description": "Lock columns/rows so they stay visible when scrolled.\n\n"
	},

	"ImGui_Text lua": {
	"prefix": "reaper.ImGui_Text",
	"scope": "lua",
	"body": "reaper.ImGui_Text(${1:ctx}, ${2:text})$0",
	"description": ""
	},

	"ImGui_TextColored lua": {
	"prefix": "reaper.ImGui_TextColored",
	"scope": "lua",
	"body": "reaper.ImGui_TextColored(${1:ctx}, ${2:col_rgba}, ${3:text})$0",
	"description": "Shortcut for PushStyleColor(Col_Text, color); Text(text); PopStyleColor();\n\n"
	},

	"ImGui_TextDisabled lua": {
	"prefix": "reaper.ImGui_TextDisabled",
	"scope": "lua",
	"body": "reaper.ImGui_TextDisabled(${1:ctx}, ${2:text})$0",
	"description": ""
	},

	"ImGui_TextFilter_Clear lua": {
	"prefix": "reaper.ImGui_TextFilter_Clear",
	"scope": "lua",
	"body": "reaper.ImGui_TextFilter_Clear(${1:filter})$0",
	"description": ""
	},

	"ImGui_TextFilter_Draw lua": {
	"prefix": "reaper.ImGui_TextFilter_Draw",
	"scope": "lua",
	"body": "reaper.ImGui_TextFilter_Draw(${1:ImGui_TextFilter_ctx}, ${2:optional_labelIn}, ${3:optional_widthIn})$0",
	"description": "Helper calling InputText+TextFilter_Set\n\n"
	},

	"ImGui_TextFilter_Get lua": {
	"prefix": "reaper.ImGui_TextFilter_Get",
	"scope": "lua",
	"body": "reaper.ImGui_TextFilter_Get(${1:filter})$0",
	"description": ""
	},

	"ImGui_TextFilter_IsActive lua": {
	"prefix": "reaper.ImGui_TextFilter_IsActive",
	"scope": "lua",
	"body": "reaper.ImGui_TextFilter_IsActive(${1:filter})$0",
	"description": ""
	},

	"ImGui_TextFilter_PassFilter lua": {
	"prefix": "reaper.ImGui_TextFilter_PassFilter",
	"scope": "lua",
	"body": "reaper.ImGui_TextFilter_PassFilter(${1:filter}, ${2:text})$0",
	"description": ""
	},

	"ImGui_TextFilter_Set lua": {
	"prefix": "reaper.ImGui_TextFilter_Set",
	"scope": "lua",
	"body": "reaper.ImGui_TextFilter_Set(${1:filter}, ${2:filter_text})$0",
	"description": ""
	},

	"ImGui_TextWrapped lua": {
	"prefix": "reaper.ImGui_TextWrapped",
	"scope": "lua",
	"body": "reaper.ImGui_TextWrapped(${1:ctx}, ${2:text})$0",
	"description": "Shortcut for PushTextWrapPos(0.0); Text(text); PopTextWrapPos();.\nNote that this won't work on an auto-resizing window if there's no other\nwidgets to extend the window width, yoy may need to set a size using\nSetNextWindowSize.\n\n"
	},

	"ImGui_TreeNode lua": {
	"prefix": "reaper.ImGui_TreeNode",
	"scope": "lua",
	"body": "reaper.ImGui_TreeNode(${1:ctx}, ${2:label}, ${3:optional_flagsIn})$0",
	"description": "TreeNode functions return true when the node is open, in which case you need\nto also call TreePop when you are finished displaying the tree node contents.\n\n"
	},

	"ImGui_TreeNodeEx lua": {
	"prefix": "reaper.ImGui_TreeNodeEx",
	"scope": "lua",
	"body": "reaper.ImGui_TreeNodeEx(${1:ctx}, ${2:str_id}, ${3:label}, ${4:optional_flagsIn})$0",
	"description": "Helper variation to easily decorelate the id from the displayed string.\nRead the [FAQ](https://dearimgui.org/faq) about why and how to use ID.\nTo align arbitrary text at the same level as a TreeNode you can use Bullet.\n\n"
	},

	"ImGui_TreeNodeFlags_AllowItemOverlap lua": {
	"prefix": "reaper.ImGui_TreeNodeFlags_AllowItemOverlap",
	"scope": "lua",
	"body": "reaper.ImGui_TreeNodeFlags_AllowItemOverlap()\n\n",
	"description": "Hit testing to allow subsequent widgets to overlap this one.\n\n"
	},

	"ImGui_TreeNodeFlags_Bullet lua": {
	"prefix": "reaper.ImGui_TreeNodeFlags_Bullet",
	"scope": "lua",
	"body": "reaper.ImGui_TreeNodeFlags_Bullet()\n\n",
	"description": "Display a bullet instead of arrow.\n\n"
	},

	"ImGui_TreeNodeFlags_CollapsingHeader lua": {
	"prefix": "reaper.ImGui_TreeNodeFlags_CollapsingHeader",
	"scope": "lua",
	"body": "reaper.ImGui_TreeNodeFlags_CollapsingHeader()\n\n",
	"description": "TreeNodeFlags_Framed | TreeNodeFlags_NoTreePushOnOpen | TreeNodeFlags_NoAutoOpenOnLog\n\n"
	},

	"ImGui_TreeNodeFlags_DefaultOpen lua": {
	"prefix": "reaper.ImGui_TreeNodeFlags_DefaultOpen",
	"scope": "lua",
	"body": "reaper.ImGui_TreeNodeFlags_DefaultOpen()\n\n",
	"description": "Default node to be open.\n\n"
	},

	"ImGui_TreeNodeFlags_FramePadding lua": {
	"prefix": "reaper.ImGui_TreeNodeFlags_FramePadding",
	"scope": "lua",
	"body": "reaper.ImGui_TreeNodeFlags_FramePadding()\n\n",
	"description": "Use FramePadding (even for an unframed text node) to vertically align text\nbaseline to regular widget height.\nEquivalent to calling AlignTextToFramePadding.\n\n"
	},

	"ImGui_TreeNodeFlags_Framed lua": {
	"prefix": "reaper.ImGui_TreeNodeFlags_Framed",
	"scope": "lua",
	"body": "reaper.ImGui_TreeNodeFlags_Framed()\n\n",
	"description": "Draw frame with background (e.g. for CollapsingHeader).\n\n"
	},

	"ImGui_TreeNodeFlags_Leaf lua": {
	"prefix": "reaper.ImGui_TreeNodeFlags_Leaf",
	"scope": "lua",
	"body": "reaper.ImGui_TreeNodeFlags_Leaf()\n\n",
	"description": "No collapsing, no arrow (use as a convenience for leaf nodes).\n\n"
	},

	"ImGui_TreeNodeFlags_NoAutoOpenOnLog lua": {
	"prefix": "reaper.ImGui_TreeNodeFlags_NoAutoOpenOnLog",
	"scope": "lua",
	"body": "reaper.ImGui_TreeNodeFlags_NoAutoOpenOnLog()\n\n",
	"description": "Don't automatically and temporarily open node when Logging is active\n(by default logging will automatically open tree nodes).\n\n"
	},

	"ImGui_TreeNodeFlags_NoTreePushOnOpen lua": {
	"prefix": "reaper.ImGui_TreeNodeFlags_NoTreePushOnOpen",
	"scope": "lua",
	"body": "reaper.ImGui_TreeNodeFlags_NoTreePushOnOpen()\n\n",
	"description": "Don't do a TreePush when open (e.g. for CollapsingHeader)\n= no extra indent nor pushing on ID stack.\n\n"
	},

	"ImGui_TreeNodeFlags_None lua": {
	"prefix": "reaper.ImGui_TreeNodeFlags_None",
	"scope": "lua",
	"body": "reaper.ImGui_TreeNodeFlags_None()\n\n",
	"description": ""
	},

	"ImGui_TreeNodeFlags_OpenOnArrow lua": {
	"prefix": "reaper.ImGui_TreeNodeFlags_OpenOnArrow",
	"scope": "lua",
	"body": "reaper.ImGui_TreeNodeFlags_OpenOnArrow()\n\n",
	"description": "Only open when clicking on the arrow part.\nIf TreeNodeFlags_OpenOnDoubleClick is also set, single-click arrow or\ndouble-click all box to open.\n\n"
	},

	"ImGui_TreeNodeFlags_OpenOnDoubleClick lua": {
	"prefix": "reaper.ImGui_TreeNodeFlags_OpenOnDoubleClick",
	"scope": "lua",
	"body": "reaper.ImGui_TreeNodeFlags_OpenOnDoubleClick()\n\n",
	"description": "Need double-click to open node.\n\n"
	},

	"ImGui_TreeNodeFlags_Selected lua": {
	"prefix": "reaper.ImGui_TreeNodeFlags_Selected",
	"scope": "lua",
	"body": "reaper.ImGui_TreeNodeFlags_Selected()\n\n",
	"description": "Draw as selected.\n\n"
	},

	"ImGui_TreeNodeFlags_SpanAvailWidth lua": {
	"prefix": "reaper.ImGui_TreeNodeFlags_SpanAvailWidth",
	"scope": "lua",
	"body": "reaper.ImGui_TreeNodeFlags_SpanAvailWidth()\n\n",
	"description": "Extend hit box to the right-most edge, even if not framed.\nThis is not the default in order to allow adding other items on the same line.\nIn the future we may refactor the hit system to be front-to-back,\nallowing natural overlaps and then this can become the default.\n\n"
	},

	"ImGui_TreeNodeFlags_SpanFullWidth lua": {
	"prefix": "reaper.ImGui_TreeNodeFlags_SpanFullWidth",
	"scope": "lua",
	"body": "reaper.ImGui_TreeNodeFlags_SpanFullWidth()\n\n",
	"description": "Extend hit box to the left-most and right-most edges (bypass the indented area).\n\n"
	},

	"ImGui_TreePop lua": {
	"prefix": "reaper.ImGui_TreePop",
	"scope": "lua",
	"body": "reaper.ImGui_TreePop(${1:ctx})$0",
	"description": "Unindent()+PopID()\n\n"
	},

	"ImGui_TreePush lua": {
	"prefix": "reaper.ImGui_TreePush",
	"scope": "lua",
	"body": "reaper.ImGui_TreePush(${1:ctx}, ${2:str_id})$0",
	"description": "Indent()+PushID(). Already called by TreeNode when returning true,\nbut you can call TreePush/TreePop yourself if desired.\n\n"
	},

	"ImGui_Unindent lua": {
	"prefix": "reaper.ImGui_Unindent",
	"scope": "lua",
	"body": "reaper.ImGui_Unindent(${1:ctx}, ${2:optional_indent_wIn})$0",
	"description": "Move content position back to the left, by 'indent_w', or\nStyleVar_IndentSpacing if 'indent_w' <= 0\n\n"
	},

	"ImGui_VSliderDouble lua": {
	"prefix": "reaper.ImGui_VSliderDouble",
	"scope": "lua",
	"body": "retval, v = reaper.ImGui_VSliderDouble(${1:ctx}, ${2:label}, ${3:size_w}, ${4:size_h}, ${5:v}, ${6:v_min}, ${7:v_max}, ${8:optional_formatIn}, ${9:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_VSliderInt lua": {
	"prefix": "reaper.ImGui_VSliderInt",
	"scope": "lua",
	"body": "retval, v = reaper.ImGui_VSliderInt(${1:ctx}, ${2:label}, ${3:size_w}, ${4:size_h}, ${5:v}, ${6:v_min}, ${7:v_max}, ${8:optional_formatIn}, ${9:optional_flagsIn})$0",
	"description": ""
	},

	"ImGui_ValidatePtr lua": {
	"prefix": "reaper.ImGui_ValidatePtr",
	"scope": "lua",
	"body": "reaper.ImGui_ValidatePtr(${1:pointer}, ${2:type})$0",
	"description": "Return whether the pointer of the specified type is valid.\nSupported types are:\n- ImGui_Context*\n- ImGui_DrawList*\n- ImGui_DrawListSplitter*\n- ImGui_Font*\n- ImGui_Image*\n- ImGui_ImageSet*\n- ImGui_ListClipper*\n- ImGui_TextFilter*\n- ImGui_Viewport*\n\n"
	},

	"ImGui_Viewport_GetCenter lua": {
	"prefix": "reaper.ImGui_Viewport_GetCenter",
	"scope": "lua",
	"body": "x, y = reaper.ImGui_Viewport_GetCenter(${1:viewport})$0",
	"description": "Center of the viewport.\n\n"
	},

	"ImGui_Viewport_GetPos lua": {
	"prefix": "reaper.ImGui_Viewport_GetPos",
	"scope": "lua",
	"body": "x, y = reaper.ImGui_Viewport_GetPos(${1:viewport})$0",
	"description": "Main Area: Position of the viewport\n\n"
	},

	"ImGui_Viewport_GetSize lua": {
	"prefix": "reaper.ImGui_Viewport_GetSize",
	"scope": "lua",
	"body": "w, h = reaper.ImGui_Viewport_GetSize(${1:viewport})$0",
	"description": "Main Area: Size of the viewport.\n\n"
	},

	"ImGui_Viewport_GetWorkCenter lua": {
	"prefix": "reaper.ImGui_Viewport_GetWorkCenter",
	"scope": "lua",
	"body": "x, y = reaper.ImGui_Viewport_GetWorkCenter(${1:viewport})$0",
	"description": "Center of the viewport's work area.\n\n"
	},

	"ImGui_Viewport_GetWorkPos lua": {
	"prefix": "reaper.ImGui_Viewport_GetWorkPos",
	"scope": "lua",
	"body": "x, y = reaper.ImGui_Viewport_GetWorkPos(${1:viewport})$0",
	"description": ">= Viewport_GetPos\n\n"
	},

	"ImGui_Viewport_GetWorkSize lua": {
	"prefix": "reaper.ImGui_Viewport_GetWorkSize",
	"scope": "lua",
	"body": "w, h = reaper.ImGui_Viewport_GetWorkSize(${1:viewport})$0",
	"description": "<= Viewport_GetSize\n\n"
	},

	"ImGui_WindowFlags_AlwaysAutoResize lua": {
	"prefix": "reaper.ImGui_WindowFlags_AlwaysAutoResize",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_AlwaysAutoResize()\n\n",
	"description": "Resize every window to its content every frame.\n\n"
	},

	"ImGui_WindowFlags_AlwaysHorizontalScrollbar lua": {
	"prefix": "reaper.ImGui_WindowFlags_AlwaysHorizontalScrollbar",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_AlwaysHorizontalScrollbar()\n\n",
	"description": "Always show horizontal scrollbar (even if ContentSize.x < Size.x).\n\n"
	},

	"ImGui_WindowFlags_AlwaysUseWindowPadding lua": {
	"prefix": "reaper.ImGui_WindowFlags_AlwaysUseWindowPadding",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_AlwaysUseWindowPadding()\n\n",
	"description": "Ensure child windows without border uses StyleVar_WindowPadding\n(ignored by default for non-bordered child windows, because more convenient).\n\n"
	},

	"ImGui_WindowFlags_AlwaysVerticalScrollbar lua": {
	"prefix": "reaper.ImGui_WindowFlags_AlwaysVerticalScrollbar",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_AlwaysVerticalScrollbar()\n\n",
	"description": "Always show vertical scrollbar (even if ContentSize.y < Size.y).\n\n"
	},

	"ImGui_WindowFlags_HorizontalScrollbar lua": {
	"prefix": "reaper.ImGui_WindowFlags_HorizontalScrollbar",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_HorizontalScrollbar()\n\n",
	"description": "Allow horizontal scrollbar to appear (off by default).\nYou may use SetNextWindowContentSize(width, 0.0) prior to calling Begin() to\nspecify width. Read code in the demo's 'Horizontal Scrolling' section.\n\n"
	},

	"ImGui_WindowFlags_MenuBar lua": {
	"prefix": "reaper.ImGui_WindowFlags_MenuBar",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_MenuBar()\n\n",
	"description": "Has a menu-bar.\n\n"
	},

	"ImGui_WindowFlags_NoBackground lua": {
	"prefix": "reaper.ImGui_WindowFlags_NoBackground",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_NoBackground()\n\n",
	"description": "Disable drawing background color (WindowBg, etc.) and outside border.\nSimilar as using SetNextWindowBgAlpha(0.0).\n\n"
	},

	"ImGui_WindowFlags_NoCollapse lua": {
	"prefix": "reaper.ImGui_WindowFlags_NoCollapse",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_NoCollapse()\n\n",
	"description": "Disable user collapsing window by double-clicking on it.\nAlso referred to as Window Menu Button (e.g. within a docking node).\n\n"
	},

	"ImGui_WindowFlags_NoDecoration lua": {
	"prefix": "reaper.ImGui_WindowFlags_NoDecoration",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_NoDecoration()\n\n",
	"description": "WindowFlags_NoTitleBar | WindowFlags_NoResize | WindowFlags_NoScrollbar |\nWindowFlags_NoCollapse\n\n"
	},

	"ImGui_WindowFlags_NoDocking lua": {
	"prefix": "reaper.ImGui_WindowFlags_NoDocking",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_NoDocking()\n\n",
	"description": "Disable docking of this window.\n\n"
	},

	"ImGui_WindowFlags_NoFocusOnAppearing lua": {
	"prefix": "reaper.ImGui_WindowFlags_NoFocusOnAppearing",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_NoFocusOnAppearing()\n\n",
	"description": "Disable taking focus when transitioning from hidden to visible state.\n\n"
	},

	"ImGui_WindowFlags_NoInputs lua": {
	"prefix": "reaper.ImGui_WindowFlags_NoInputs",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_NoInputs()\n\n",
	"description": "WindowFlags_NoMouseInputs | WindowFlags_NoNavInputs | WindowFlags_NoNavFocus\n\n"
	},

	"ImGui_WindowFlags_NoMouseInputs lua": {
	"prefix": "reaper.ImGui_WindowFlags_NoMouseInputs",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_NoMouseInputs()\n\n",
	"description": "Disable catching mouse, hovering test with pass through.\n\n"
	},

	"ImGui_WindowFlags_NoMove lua": {
	"prefix": "reaper.ImGui_WindowFlags_NoMove",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_NoMove()\n\n",
	"description": "Disable user moving the window.\n\n"
	},

	"ImGui_WindowFlags_NoNav lua": {
	"prefix": "reaper.ImGui_WindowFlags_NoNav",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_NoNav()\n\n",
	"description": "WindowFlags_NoNavInputs | WindowFlags_NoNavFocus\n\n"
	},

	"ImGui_WindowFlags_NoNavFocus lua": {
	"prefix": "reaper.ImGui_WindowFlags_NoNavFocus",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_NoNavFocus()\n\n",
	"description": "No focusing toward this window with gamepad/keyboard navigation\n(e.g. skipped by CTRL+TAB).\n\n"
	},

	"ImGui_WindowFlags_NoNavInputs lua": {
	"prefix": "reaper.ImGui_WindowFlags_NoNavInputs",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_NoNavInputs()\n\n",
	"description": "No gamepad/keyboard navigation within the window.\n\n"
	},

	"ImGui_WindowFlags_NoResize lua": {
	"prefix": "reaper.ImGui_WindowFlags_NoResize",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_NoResize()\n\n",
	"description": "Disable user resizing with the lower-right grip.\n\n"
	},

	"ImGui_WindowFlags_NoSavedSettings lua": {
	"prefix": "reaper.ImGui_WindowFlags_NoSavedSettings",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_NoSavedSettings()\n\n",
	"description": "Never load/save settings in .ini file.\n\n"
	},

	"ImGui_WindowFlags_NoScrollWithMouse lua": {
	"prefix": "reaper.ImGui_WindowFlags_NoScrollWithMouse",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_NoScrollWithMouse()\n\n",
	"description": "Disable user vertically scrolling with mouse wheel.\nOn child window, mouse wheel will be forwarded to the parent unless\nNoScrollbar is also set.\n\n"
	},

	"ImGui_WindowFlags_NoScrollbar lua": {
	"prefix": "reaper.ImGui_WindowFlags_NoScrollbar",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_NoScrollbar()\n\n",
	"description": "Disable scrollbars (window can still scroll with mouse or programmatically).\n\n"
	},

	"ImGui_WindowFlags_NoTitleBar lua": {
	"prefix": "reaper.ImGui_WindowFlags_NoTitleBar",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_NoTitleBar()\n\n",
	"description": "Disable title-bar.\n\n"
	},

	"ImGui_WindowFlags_None lua": {
	"prefix": "reaper.ImGui_WindowFlags_None",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_None()\n\n",
	"description": "Default flag.\n\n"
	},

	"ImGui_WindowFlags_TopMost lua": {
	"prefix": "reaper.ImGui_WindowFlags_TopMost",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_TopMost()\n\n",
	"description": "Show the window above all non-topmost windows.\n\n"
	},

	"ImGui_WindowFlags_UnsavedDocument lua": {
	"prefix": "reaper.ImGui_WindowFlags_UnsavedDocument",
	"scope": "lua",
	"body": "reaper.ImGui_WindowFlags_UnsavedDocument()\n\n",
	"description": "Display a dot next to the title. When used in a tab/docking context,\ntab is selected when clicking the X + closure is not assumed\n(will wait for user to stop submitting the tab).\nOtherwise closure is assumed when pressing the X,\nso if you keep submitting the tab may reappear at end of tab bar.\n\n"
	},

	"JS_Actions_CountShortcuts lua": {
	"prefix": "reaper.JS_Actions_CountShortcuts",
	"scope": "lua",
	"body": "reaper.JS_Actions_CountShortcuts(${1:section}, ${2:cmdID})$0",
	"description": "Section:\n0 = Main, 100 = Main (alt recording), 32060 = MIDI Editor, 32061 = MIDI Event List Editor, 32062 = MIDI Inline Editor, 32063 = Media Explorer.\n\n"
	},

	"JS_Actions_DeleteShortcut lua": {
	"prefix": "reaper.JS_Actions_DeleteShortcut",
	"scope": "lua",
	"body": "reaper.JS_Actions_DeleteShortcut(${1:section}, ${2:cmdID}, ${3:shortcutidx})$0",
	"description": "Section:\n0 = Main, 100 = Main (alt recording), 32060 = MIDI Editor, 32061 = MIDI Event List Editor, 32062 = MIDI Inline Editor, 32063 = Media Explorer.\n\n"
	},

	"JS_Actions_DoShortcutDialog lua": {
	"prefix": "reaper.JS_Actions_DoShortcutDialog",
	"scope": "lua",
	"body": "reaper.JS_Actions_DoShortcutDialog(${1:section}, ${2:cmdID}, ${3:shortcutidx})$0",
	"description": "Section:\n0 = Main, 100 = Main (alt recording), 32060 = MIDI Editor, 32061 = MIDI Event List Editor, 32062 = MIDI Inline Editor, 32063 = Media Explorer.\nIf the shortcut index is higher than the current number of shortcuts, it will add a new shortcut.\n\n"
	},

	"JS_Actions_GetShortcutDesc lua": {
	"prefix": "reaper.JS_Actions_GetShortcutDesc",
	"scope": "lua",
	"body": "retval, desc = reaper.JS_Actions_GetShortcutDesc(${1:section}, ${2:cmdID}, ${3:shortcutidx})$0",
	"description": "Section:\n0 = Main, 100 = Main (alt recording), 32060 = MIDI Editor, 32061 = MIDI Event List Editor, 32062 = MIDI Inline Editor, 32063 = Media Explorer.\n\n"
	},

	"JS_Byte lua": {
	"prefix": "reaper.JS_Byte",
	"scope": "lua",
	"body": "byte = reaper.JS_Byte(${1:pointer}, ${2:offset})$0",
	"description": "Returns the unsigned byte at address[offset]. Offset is added as steps of 1 byte each.\n\n"
	},

	"JS_Composite lua": {
	"prefix": "reaper.JS_Composite",
	"scope": "lua",
	"body": "reaper.JS_Composite(${1:windowHWND}, ${2:dstx}, ${3:dsty}, ${4:dstw}, ${5:dsth}, ${6:sysBitmap}, ${7:srcx}, ${8:srcy}, ${9:srcw}, ${10:srch}, ${11:autoUpdate})$0",
	"description": "Composites a LICE bitmap with a REAPER window.  Each time that the window is re-drawn, the bitmap will be blitted over the window's client area (with per-pixel alpha blending).\n* If dstw or dsth is -1, the bitmap will be stretched to fill the width or height of the window, respectively.\n* autoUpdate is an optional parameter that is false by default. If true, JS_Composite will automatically invalidate and re-draw the part of the window that covers the current position of the bitmap, and if the bitmap is being moved, also the previous position. (If only one or a handful of bitmaps are being moved across the screen, autoUpdate should result in smoother animation on WindowsOS; if numerous bitmaps are spread over the entire window, it may be faster to disable autoUpdate and instead call JS_Window_InvalidateRect explicitly once all bitmaps have been moved.)\n* InvalidateRect should also be called whenever the contents of the bitmap contents have been changed, but not the position, to trigger a window update.\n* On WindowsOS, the key to reducing flickering is to slow down the frequency at which the window is re-drawn. InvalidateRect should only be called when absolutely necessary, preferably not more than 20 times per second.  (Also refer to the JS_Composite_Delay function.)\n* On WindowsOS, flickering can further be reduced by keeping the invalidated area as small as possible, covering only the bitmaps that have been edited or moved.  However, if numerous bitmaps are spread over the entire window, it may be faster to simply invalidate the entire client area. \n* This function should not be applied directly to top-level windows, but rather to child windows.\n* Some classes of UI elements, particularly buttons, do not take kindly to being composited, and may crash REAPER.\n* On WindowsOS, GDI blitting does not perform alpha multiplication of the source bitmap. For proper color rendering, a separate pre-multiplication step is therefore required, using either LICE_Blit or LICE_ProcessRect.\nReturns:\n1 if successful, otherwise -1 = windowHWND is not a window, -3 = Could not obtain the original window process, -4 = sysBitmap is not a LICE bitmap, -5 = sysBitmap is not a system bitmap, -6 = Could not obtain the window HDC, -7 = Error when subclassing to new window process.\n\n"
	},

	"JS_Composite_Delay lua": {
	"prefix": "reaper.JS_Composite_Delay",
	"scope": "lua",
	"body": "retval, prevMinTime, prevMaxTime, prevBitmaps = reaper.JS_Composite_Delay(${1:windowHWND}, ${2:minTime}, ${3:maxTime}, ${4:numBitmapsWhenMax})$0",
	"description": "On WindowsOS, flickering of composited images can be improved considerably by slowing the refresh rate of the window.  The optimal refresh rate may depend on the number of composited bitmaps.\nminTime is the minimum refresh delay, in seconds, when only one bitmap is composited onto the window.  The delay time will increase linearly with the number of bitmaps, up to a maximum of maxTime when numBitmapsWhenMax is reached.\nIf both minTime and maxTime are 0, all delay settings for the window are cleared.\nReturns:\n* retval = 1 if successful, 0 if arguments are invalid (i.e. if maxTime < minTime, or maxBitmaps < 1).\n* If delay times have not previously been set for this window, prev time values are 0.\n\n"
	},

	"JS_Composite_ListBitmaps lua": {
	"prefix": "reaper.JS_Composite_ListBitmaps",
	"scope": "lua",
	"body": "retval, list = reaper.JS_Composite_ListBitmaps(${1:windowHWND})$0",
	"description": "Returns all bitmaps composited to the given window.\nThe list is formatted as a comma-separated string of hexadecimal values, each representing a LICE_IBitmap* pointer.\nretval is the number of linked bitmaps found, or negative if an error occured.\n\n"
	},

	"JS_Composite_Unlink lua": {
	"prefix": "reaper.JS_Composite_Unlink",
	"scope": "lua",
	"body": "reaper.JS_Composite_Unlink(${1:windowHWND}, ${2:bitmap}, ${3:autoUpdate})$0",
	"description": "Unlinks the window and bitmap.\n* autoUpdate is an optional parameter. If unlinking a single bitmap and autoUpdate is true, the function will automatically re-draw the window to remove the blitted image.\nIf no bitmap is specified, all bitmaps composited to the window will be unlinked -- even those by other scripts.\n\n"
	},

	"JS_Dialog_BrowseForFolder lua": {
	"prefix": "reaper.JS_Dialog_BrowseForFolder",
	"scope": "lua",
	"body": "retval, folder = reaper.JS_Dialog_BrowseForFolder(${1:caption}, ${2:initialFolder})$0",
	"description": "retval is 1 if a file was selected, 0 if the user cancelled the dialog, and -1 if an error occurred.\n\n"
	},

	"JS_Dialog_BrowseForOpenFiles lua": {
	"prefix": "reaper.JS_Dialog_BrowseForOpenFiles",
	"scope": "lua",
	"body": "retval, fileNames = reaper.JS_Dialog_BrowseForOpenFiles(${1:windowTitle}, ${2:initialFolder}, ${3:initialFile}, ${4:extensionList}, ${5:allowMultiple})$0",
	"description": "If allowMultiple is true, multiple files may be selected. The returned string is \0-separated, with the first substring containing the folder path and subsequent substrings containing the file names.\n* On macOS, the first substring may be empty, and each file name will then contain its entire path.\n* This function only allows selection of existing files, and does not allow creation of new files.\nextensionList is a string containing pairs of \0-terminated substrings. The last substring must be terminated by two \0 characters. Each pair defines one filter pattern:\n* The first substring in each pair describes the filter in user-readable form (for example, 'Lua script files (*.lua)') and will be displayed in the dialog box.\n* The second substring specifies the filter that the operating system must use to search for the files (for example, '*.txt'; the wildcard should not be omitted). To specify multiple extensions for a single display string, use a semicolon to separate the patterns (for example, '*.lua;*.eel').\nAn example of an extensionList string:\n'ReaScript files\0*.lua;*.eel\0Lua files (.lua)\0*.lua\0EEL files (.eel)\0*.eel\0\0'.\nOn macOS, file dialogs do not accept empty extensionLists, nor wildcard extensions (such as 'All files\0*.*\0\0'), so each acceptable extension must be listed explicitly. On Linux and Windows, wildcard extensions are acceptable, and if the extensionList string is empty, the dialog will display a default 'All files (*.*)' filter.\nretval is 1 if one or more files were selected, 0 if the user cancelled the dialog, or negative if an error occurred.\nDisplaying \0-separated strings:\n* REAPER's IDE and ShowConsoleMsg only display strings up to the first \0 byte. If multiple files were selected, only the first substring containing the path will be displayed. This is not a problem for Lua or EEL, which can access the full string beyond the first \0 byte as usual.\n\n"
	},

	"JS_Dialog_BrowseForSaveFile lua": {
	"prefix": "reaper.JS_Dialog_BrowseForSaveFile",
	"scope": "lua",
	"body": "retval, fileName = reaper.JS_Dialog_BrowseForSaveFile(${1:windowTitle}, ${2:initialFolder}, ${3:initialFile}, ${4:extensionList})$0",
	"description": "retval is 1 if a file was selected, 0 if the user cancelled the dialog, or negative if an error occurred.\nextensionList is as described for JS_Dialog_BrowseForOpenFiles.\n\n"
	},

	"JS_Double lua": {
	"prefix": "reaper.JS_Double",
	"scope": "lua",
	"body": "double = reaper.JS_Double(${1:pointer}, ${2:offset})$0",
	"description": "Returns the 8-byte floating point value at address[offset]. Offset is added as steps of 8 bytes each.\n\n"
	},

	"JS_File_Stat lua": {
	"prefix": "reaper.JS_File_Stat",
	"scope": "lua",
	"body": "retval, size, accessedTime, modifiedTime, cTime, deviceID, deviceSpecialID, inode, mode, numLinks, ownerUserID, ownerGroupID = reaper.JS_File_Stat(${1:filePath})$0",
	"description": "Returns information about a file.\ncTime is not implemented on all systems. If it does return a time, the value may differ depending on the OS: on WindowsOS, it may refer to the time that the file was either created or copied, whereas on Linux and macOS, it may refer to the time of last status change.\nretval is 0 if successful, negative if not.\n\n"
	},

	"JS_GDI_Blit lua": {
	"prefix": "reaper.JS_GDI_Blit",
	"scope": "lua",
	"body": "reaper.JS_GDI_Blit(${1:destHDC}, ${2:dstx}, ${3:dsty}, ${4:sourceHDC}, ${5:srcx}, ${6:srxy}, ${7:width}, ${8:height}, ${9:optional_mode})$0",
	"description": "Blits between two device contexts, which may include LICE 'system bitmaps'.\nmode: Optional parameter. 'SRCCOPY' by default, or specify 'ALPHA' to enable per-pixel alpha blending.\nWARNING: On WindowsOS, GDI_Blit does not perform alpha multiplication of the source bitmap. For proper color rendering, a separate pre-multiplication step is therefore required, using either LICE_Blit or LICE_ProcessRect.\n\n"
	},

	"JS_GDI_CreateFillBrush lua": {
	"prefix": "reaper.JS_GDI_CreateFillBrush",
	"scope": "lua",
	"body": "reaper.JS_GDI_CreateFillBrush(${1:color})$0",
	"description": ""
	},

	"JS_GDI_CreateFont lua": {
	"prefix": "reaper.JS_GDI_CreateFont",
	"scope": "lua",
	"body": "reaper.JS_GDI_CreateFont(${1:height}, ${2:weight}, ${3:angle}, ${4:italic}, ${5:underline}, ${6:strike}, ${7:fontName})$0",
	"description": "Parameters:\n* weight: 0 - 1000, with 0 = auto, 400 = normal and 700 = bold.\n* angle: the angle, in tenths of degrees, between the text and the x-axis of the device.\n* fontName: If empty string '', uses first font that matches the other specified attributes.\nNote: Text color must be set separately.\n\n"
	},

	"JS_GDI_CreatePen lua": {
	"prefix": "reaper.JS_GDI_CreatePen",
	"scope": "lua",
	"body": "reaper.JS_GDI_CreatePen(${1:width}, ${2:color})$0",
	"description": ""
	},

	"JS_GDI_DeleteObject lua": {
	"prefix": "reaper.JS_GDI_DeleteObject",
	"scope": "lua",
	"body": "reaper.JS_GDI_DeleteObject(${1:GDIObject})$0",
	"description": ""
	},

	"JS_GDI_DrawText lua": {
	"prefix": "reaper.JS_GDI_DrawText",
	"scope": "lua",
	"body": "reaper.JS_GDI_DrawText(${1:deviceHDC}, ${2:text}, ${3:len}, ${4:left}, ${5:top}, ${6:right}, ${7:bottom}, ${8:align})$0",
	"description": "Parameters:\n* align: Combination of: 'TOP', 'VCENTER', 'LEFT', 'HCENTER', 'RIGHT', 'BOTTOM', 'WORDBREAK', 'SINGLELINE', 'NOCLIP', 'CALCRECT', 'NOPREFIX' or 'ELLIPSIS'\n\n"
	},

	"JS_GDI_FillEllipse lua": {
	"prefix": "reaper.JS_GDI_FillEllipse",
	"scope": "lua",
	"body": "reaper.JS_GDI_FillEllipse(${1:deviceHDC}, ${2:left}, ${3:top}, ${4:right}, ${5:bottom})$0",
	"description": ""
	},

	"JS_GDI_FillPolygon lua": {
	"prefix": "reaper.JS_GDI_FillPolygon",
	"scope": "lua",
	"body": "reaper.JS_GDI_FillPolygon(${1:deviceHDC}, ${2:packedX}, ${3:packedY}, ${4:numPoints})$0",
	"description": "packedX and packedY are strings of points, each packed as '<i4'.\n\n"
	},

	"JS_GDI_FillRect lua": {
	"prefix": "reaper.JS_GDI_FillRect",
	"scope": "lua",
	"body": "reaper.JS_GDI_FillRect(${1:deviceHDC}, ${2:left}, ${3:top}, ${4:right}, ${5:bottom})$0",
	"description": ""
	},

	"JS_GDI_FillRoundRect lua": {
	"prefix": "reaper.JS_GDI_FillRoundRect",
	"scope": "lua",
	"body": "reaper.JS_GDI_FillRoundRect(${1:deviceHDC}, ${2:left}, ${3:top}, ${4:right}, ${5:bottom}, ${6:xrnd}, ${7:yrnd})$0",
	"description": ""
	},

	"JS_GDI_GetClientDC lua": {
	"prefix": "reaper.JS_GDI_GetClientDC",
	"scope": "lua",
	"body": "reaper.JS_GDI_GetClientDC(${1:windowHWND})$0",
	"description": "Returns the device context for the client area of the specified window.\n\n"
	},

	"JS_GDI_GetScreenDC lua": {
	"prefix": "reaper.JS_GDI_GetScreenDC",
	"scope": "lua",
	"body": "reaper.JS_GDI_GetScreenDC()\n\n",
	"description": "Returns a device context for the entire screen.\nWARNING: Only available on Windows, not Linux or macOS.\n\n"
	},

	"JS_GDI_GetSysColor lua": {
	"prefix": "reaper.JS_GDI_GetSysColor",
	"scope": "lua",
	"body": "reaper.JS_GDI_GetSysColor(${1:GUIElement})$0",
	"description": ""
	},

	"JS_GDI_GetTextColor lua": {
	"prefix": "reaper.JS_GDI_GetTextColor",
	"scope": "lua",
	"body": "reaper.JS_GDI_GetTextColor(${1:deviceHDC})$0",
	"description": ""
	},

	"JS_GDI_GetWindowDC lua": {
	"prefix": "reaper.JS_GDI_GetWindowDC",
	"scope": "lua",
	"body": "reaper.JS_GDI_GetWindowDC(${1:windowHWND})$0",
	"description": "Returns the device context for the entire window, including title bar and frame.\n\n"
	},

	"JS_GDI_Line lua": {
	"prefix": "reaper.JS_GDI_Line",
	"scope": "lua",
	"body": "reaper.JS_GDI_Line(${1:deviceHDC}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2})$0",
	"description": ""
	},

	"JS_GDI_Polyline lua": {
	"prefix": "reaper.JS_GDI_Polyline",
	"scope": "lua",
	"body": "reaper.JS_GDI_Polyline(${1:deviceHDC}, ${2:packedX}, ${3:packedY}, ${4:numPoints})$0",
	"description": "packedX and packedY are strings of points, each packed as '<i4'.\n\n"
	},

	"JS_GDI_ReleaseDC lua": {
	"prefix": "reaper.JS_GDI_ReleaseDC",
	"scope": "lua",
	"body": "reaper.JS_GDI_ReleaseDC(${1:deviceHDC}, ${2:identifier_windowHWND})$0",
	"description": "To release a window HDC, both arguments must be supplied: the HWND as well as the HDC.  To release a screen DC, only the HDC needs to be supplied.  \nFor compatibility with previous versions, the HWND and HDC can be supplied in any order.\nNOTE: Any GDI HDC should be released immediately after drawing, and deferred scripts should get and release new DCs in each cycle.\n\n"
	},

	"JS_GDI_SelectObject lua": {
	"prefix": "reaper.JS_GDI_SelectObject",
	"scope": "lua",
	"body": "reaper.JS_GDI_SelectObject(${1:deviceHDC}, ${2:GDIObject})$0",
	"description": "Activates a font, pen, or fill brush for subsequent drawing in the specified device context.\n\n"
	},

	"JS_GDI_SetPixel lua": {
	"prefix": "reaper.JS_GDI_SetPixel",
	"scope": "lua",
	"body": "reaper.JS_GDI_SetPixel(${1:deviceHDC}, ${2:x}, ${3:y}, ${4:color})$0",
	"description": ""
	},

	"JS_GDI_SetTextBkColor lua": {
	"prefix": "reaper.JS_GDI_SetTextBkColor",
	"scope": "lua",
	"body": "reaper.JS_GDI_SetTextBkColor(${1:deviceHDC}, ${2:color})$0",
	"description": ""
	},

	"JS_GDI_SetTextBkMode lua": {
	"prefix": "reaper.JS_GDI_SetTextBkMode",
	"scope": "lua",
	"body": "reaper.JS_GDI_SetTextBkMode(${1:deviceHDC}, ${2:mode})$0",
	"description": ""
	},

	"JS_GDI_SetTextColor lua": {
	"prefix": "reaper.JS_GDI_SetTextColor",
	"scope": "lua",
	"body": "reaper.JS_GDI_SetTextColor(${1:deviceHDC}, ${2:color})$0",
	"description": ""
	},

	"JS_GDI_StretchBlit lua": {
	"prefix": "reaper.JS_GDI_StretchBlit",
	"scope": "lua",
	"body": "reaper.JS_GDI_StretchBlit(${1:destHDC}, ${2:dstx}, ${3:dsty}, ${4:dstw}, ${5:dsth}, ${6:sourceHDC}, ${7:srcx}, ${8:srxy}, ${9:srcw}, ${10:srch}, ${11:optional_mode})$0",
	"description": "Blits between two device contexts, which may include LICE 'system bitmaps'.\nmodeOptional: 'SRCCOPY' by default, or specify 'ALPHA' to enable per-pixel alpha blending.\nWARNING: On WindowsOS, GDI_Blit does not perform alpha multiplication of the source bitmap. For proper color rendering, a separate pre-multiplication step is therefore required, using either LICE_Blit or LICE_ProcessRect.\n\n"
	},

	"JS_Header_GetItemCount lua": {
	"prefix": "reaper.JS_Header_GetItemCount",
	"scope": "lua",
	"body": "reaper.JS_Header_GetItemCount(${1:headerHWND})$0",
	"description": ""
	},

	"JS_Int lua": {
	"prefix": "reaper.JS_Int",
	"scope": "lua",
	"body": "int = reaper.JS_Int(${1:pointer}, ${2:offset})$0",
	"description": "Returns the 4-byte signed integer at address[offset]. Offset is added as steps of 4 bytes each.\n\n"
	},

	"JS_LICE_AlterBitmapHSV lua": {
	"prefix": "reaper.JS_LICE_AlterBitmapHSV",
	"scope": "lua",
	"body": "reaper.JS_LICE_AlterBitmapHSV(${1:bitmap}, ${2:hue}, ${3:saturation}, ${4:value})$0",
	"description": "Hue is rolled over, saturation and value are clamped, all 0..1. (Alpha remains unchanged.)\n\n"
	},

	"JS_LICE_AlterRectHSV lua": {
	"prefix": "reaper.JS_LICE_AlterRectHSV",
	"scope": "lua",
	"body": "reaper.JS_LICE_AlterRectHSV(${1:bitmap}, ${2:x}, ${3:y}, ${4:w}, ${5:h}, ${6:hue}, ${7:saturation}, ${8:value})$0",
	"description": "Hue is rolled over, saturation and value are clamped, all 0..1. (Alpha remains unchanged.)\n\n"
	},

	"JS_LICE_Arc lua": {
	"prefix": "reaper.JS_LICE_Arc",
	"scope": "lua",
	"body": "reaper.JS_LICE_Arc(${1:bitmap}, ${2:cx}, ${3:cy}, ${4:r}, ${5:minAngle}, ${6:maxAngle}, ${7:color}, ${8:alpha}, ${9:mode}, ${10:antialias})$0",
	"description": "LICE modes: 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA'.\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).\n\n"
	},

	"JS_LICE_ArrayAllBitmaps lua": {
	"prefix": "reaper.JS_LICE_ArrayAllBitmaps",
	"scope": "lua",
	"body": "reaper.JS_LICE_ArrayAllBitmaps(${1:reaperarray})$0",
	"description": ""
	},

	"JS_LICE_Bezier lua": {
	"prefix": "reaper.JS_LICE_Bezier",
	"scope": "lua",
	"body": "reaper.JS_LICE_Bezier(${1:bitmap}, ${2:xstart}, ${3:ystart}, ${4:xctl1}, ${5:yctl1}, ${6:xctl2}, ${7:yctl2}, ${8:xend}, ${9:yend}, ${10:tol}, ${11:color}, ${12:alpha}, ${13:mode}, ${14:antialias})$0",
	"description": "LICE modes: 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA' to enable per-pixel alpha blending.\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).\n\n"
	},

	"JS_LICE_Blit lua": {
	"prefix": "reaper.JS_LICE_Blit",
	"scope": "lua",
	"body": "reaper.JS_LICE_Blit(${1:destBitmap}, ${2:dstx}, ${3:dsty}, ${4:sourceBitmap}, ${5:srcx}, ${6:srcy}, ${7:width}, ${8:height}, ${9:alpha}, ${10:mode})$0",
	"description": "Standard LICE modes: 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA' to enable per-pixel alpha blending.\nIn addition to the standard LICE modes, LICE_Blit also offers:\n* 'CHANCOPY_XTOY', with X and Y any of the four channels, A, R, G or B. (CHANCOPY_ATOA is similar to MASK mode.)\n* 'BLUR'\n* 'ALPHAMUL', which overwrites the destination with a per-pixel alpha-multiplied copy of the source. (Similar to first clearing the destination with 0x00000000 and then blitting with 'COPY,ALPHA'.)\n\n"
	},

	"JS_LICE_Circle lua": {
	"prefix": "reaper.JS_LICE_Circle",
	"scope": "lua",
	"body": "reaper.JS_LICE_Circle(${1:bitmap}, ${2:cx}, ${3:cy}, ${4:r}, ${5:color}, ${6:alpha}, ${7:mode}, ${8:antialias})$0",
	"description": "LICE modes: 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA'.\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).\n\n"
	},

	"JS_LICE_Clear lua": {
	"prefix": "reaper.JS_LICE_Clear",
	"scope": "lua",
	"body": "reaper.JS_LICE_Clear(${1:bitmap}, ${2:color})$0",
	"description": ""
	},

	"JS_LICE_CreateBitmap lua": {
	"prefix": "reaper.JS_LICE_CreateBitmap",
	"scope": "lua",
	"body": "reaper.JS_LICE_CreateBitmap(${1:isSysBitmap}, ${2:width}, ${3:height})$0",
	"description": ""
	},

	"JS_LICE_CreateFont lua": {
	"prefix": "reaper.JS_LICE_CreateFont",
	"scope": "lua",
	"body": "reaper.JS_LICE_CreateFont()\n\n",
	"description": ""
	},

	"JS_LICE_DestroyBitmap lua": {
	"prefix": "reaper.JS_LICE_DestroyBitmap",
	"scope": "lua",
	"body": "reaper.JS_LICE_DestroyBitmap(${1:bitmap})$0",
	"description": "Deletes the bitmap, and also unlinks bitmap from any composited window.\n\n"
	},

	"JS_LICE_DestroyFont lua": {
	"prefix": "reaper.JS_LICE_DestroyFont",
	"scope": "lua",
	"body": "reaper.JS_LICE_DestroyFont(${1:LICEFont})$0",
	"description": ""
	},

	"JS_LICE_DrawChar lua": {
	"prefix": "reaper.JS_LICE_DrawChar",
	"scope": "lua",
	"body": "reaper.JS_LICE_DrawChar(${1:bitmap}, ${2:x}, ${3:y}, ${4:c}, ${5:color}, ${6:alpha}, ${7:mode})$0",
	"description": ""
	},

	"JS_LICE_DrawText lua": {
	"prefix": "reaper.JS_LICE_DrawText",
	"scope": "lua",
	"body": "reaper.JS_LICE_DrawText(${1:bitmap}, ${2:LICEFont}, ${3:text}, ${4:textLen}, ${5:x1}, ${6:y1}, ${7:x2}, ${8:y2})$0",
	"description": ""
	},

	"JS_LICE_FillCircle lua": {
	"prefix": "reaper.JS_LICE_FillCircle",
	"scope": "lua",
	"body": "reaper.JS_LICE_FillCircle(${1:bitmap}, ${2:cx}, ${3:cy}, ${4:r}, ${5:color}, ${6:alpha}, ${7:mode}, ${8:antialias})$0",
	"description": "LICE modes: 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA'.\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).\n\n"
	},

	"JS_LICE_FillPolygon lua": {
	"prefix": "reaper.JS_LICE_FillPolygon",
	"scope": "lua",
	"body": "reaper.JS_LICE_FillPolygon(${1:bitmap}, ${2:packedX}, ${3:packedY}, ${4:numPoints}, ${5:color}, ${6:alpha}, ${7:mode})$0",
	"description": "packedX and packedY are two strings of coordinates, each packed as '<i4'.\nLICE modes : 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA' to enable per-pixel alpha blending.\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).\n\n"
	},

	"JS_LICE_FillRect lua": {
	"prefix": "reaper.JS_LICE_FillRect",
	"scope": "lua",
	"body": "reaper.JS_LICE_FillRect(${1:bitmap}, ${2:x}, ${3:y}, ${4:w}, ${5:h}, ${6:color}, ${7:alpha}, ${8:mode})$0",
	"description": "LICE modes: 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA'.\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).\n\n"
	},

	"JS_LICE_FillTriangle lua": {
	"prefix": "reaper.JS_LICE_FillTriangle",
	"scope": "lua",
	"body": "reaper.JS_LICE_FillTriangle(${1:bitmap}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2}, ${6:x3}, ${7:y3}, ${8:color}, ${9:alpha}, ${10:mode})$0",
	"description": "LICE modes: 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA'.\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).\n\n"
	},

	"JS_LICE_GetDC lua": {
	"prefix": "reaper.JS_LICE_GetDC",
	"scope": "lua",
	"body": "reaper.JS_LICE_GetDC(${1:bitmap})$0",
	"description": ""
	},

	"JS_LICE_GetHeight lua": {
	"prefix": "reaper.JS_LICE_GetHeight",
	"scope": "lua",
	"body": "reaper.JS_LICE_GetHeight(${1:bitmap})$0",
	"description": ""
	},

	"JS_LICE_GetPixel lua": {
	"prefix": "reaper.JS_LICE_GetPixel",
	"scope": "lua",
	"body": "color = reaper.JS_LICE_GetPixel(${1:bitmap}, ${2:x}, ${3:y})$0",
	"description": "Returns the color of the specified pixel.\n\n"
	},

	"JS_LICE_GetWidth lua": {
	"prefix": "reaper.JS_LICE_GetWidth",
	"scope": "lua",
	"body": "reaper.JS_LICE_GetWidth(${1:bitmap})$0",
	"description": ""
	},

	"JS_LICE_GradRect lua": {
	"prefix": "reaper.JS_LICE_GradRect",
	"scope": "lua",
	"body": "reaper.JS_LICE_GradRect(${1:bitmap}, ${2:dstx}, ${3:dsty}, ${4:dstw}, ${5:dsth}, ${6:ir}, ${7:ig}, ${8:ib}, ${9:ia}, ${10:drdx}, ${11:dgdx}, ${12:dbdx}, ${13:dadx}, ${14:drdy}, ${15:dgdy}, ${16:dbdy}, ${17:dady}, ${18:mode})$0",
	"description": ""
	},

	"JS_LICE_IsFlipped lua": {
	"prefix": "reaper.JS_LICE_IsFlipped",
	"scope": "lua",
	"body": "reaper.JS_LICE_IsFlipped(${1:bitmap})$0",
	"description": ""
	},

	"JS_LICE_Line lua": {
	"prefix": "reaper.JS_LICE_Line",
	"scope": "lua",
	"body": "reaper.JS_LICE_Line(${1:bitmap}, ${2:x1}, ${3:y1}, ${4:x2}, ${5:y2}, ${6:color}, ${7:alpha}, ${8:mode}, ${9:antialias})$0",
	"description": "LICE modes: 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA'.\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).\n\n"
	},

	"JS_LICE_ListAllBitmaps lua": {
	"prefix": "reaper.JS_LICE_ListAllBitmaps",
	"scope": "lua",
	"body": "retval, list = reaper.JS_LICE_ListAllBitmaps()\n\n",
	"description": ""
	},

	"JS_LICE_LoadJPG lua": {
	"prefix": "reaper.JS_LICE_LoadJPG",
	"scope": "lua",
	"body": "reaper.JS_LICE_LoadJPG(${1:filename})$0",
	"description": "Returns a system LICE bitmap containing the JPEG.\n\n"
	},

	"JS_LICE_LoadJPGFromMemory lua": {
	"prefix": "reaper.JS_LICE_LoadJPGFromMemory",
	"scope": "lua",
	"body": "reaper.JS_LICE_LoadJPGFromMemory(${1:buffer}, ${2:bufsize})$0",
	"description": "Returns a system LICE bitmap containing the JPEG.\n\n"
	},

	"JS_LICE_LoadPNG lua": {
	"prefix": "reaper.JS_LICE_LoadPNG",
	"scope": "lua",
	"body": "reaper.JS_LICE_LoadPNG(${1:filename})$0",
	"description": "Returns a system LICE bitmap containing the PNG.\n\n"
	},

	"JS_LICE_LoadPNGFromMemory lua": {
	"prefix": "reaper.JS_LICE_LoadPNGFromMemory",
	"scope": "lua",
	"body": "reaper.JS_LICE_LoadPNGFromMemory(${1:buffer}, ${2:bufsize})$0",
	"description": "Returns a system LICE bitmap containing the PNG.\n\n"
	},

	"JS_LICE_MeasureText lua": {
	"prefix": "reaper.JS_LICE_MeasureText",
	"scope": "lua",
	"body": "width, Height = reaper.JS_LICE_MeasureText(${1:text})$0",
	"description": ""
	},

	"JS_LICE_ProcessRect lua": {
	"prefix": "reaper.JS_LICE_ProcessRect",
	"scope": "lua",
	"body": "reaper.JS_LICE_ProcessRect(${1:bitmap}, ${2:x}, ${3:y}, ${4:w}, ${5:h}, ${6:mode}, ${7:operand})$0",
	"description": "Applies bitwise operations to each pixel in the target rectangle.\noperand: a color in 0xAARRGGBB format.\nmodes:\n* 'XOR', 'OR' or 'AND'.\n* 'SET_XYZ', with XYZ any combination of A, R, G, and B: copies the specified channels from operand to the bitmap. (Useful for setting the alpha values of a bitmap.)\n* 'ALPHAMUL': Performs alpha pre-multiplication on each pixel in the rect. operand is ignored in this mode. (On WindowsOS, GDI_Blit does not perform alpha multiplication on the fly, and a separate alpha pre-multiplication step is therefore required.)\nNOTE:\nLICE_Blit and LICE_ScaledBlit are also useful for processing bitmap colors. For example, to multiply all channel values by 1.5:\nreaper.JS_LICE_Blit(bitmap, x, y, bitmap, x, y, w, h, 0.5, 'ADD').\n\n"
	},

	"JS_LICE_PutPixel lua": {
	"prefix": "reaper.JS_LICE_PutPixel",
	"scope": "lua",
	"body": "reaper.JS_LICE_PutPixel(${1:bitmap}, ${2:x}, ${3:y}, ${4:color}, ${5:alpha}, ${6:mode})$0",
	"description": "LICE modes: 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA'.\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).\n\n"
	},

	"JS_LICE_Resize lua": {
	"prefix": "reaper.JS_LICE_Resize",
	"scope": "lua",
	"body": "reaper.JS_LICE_Resize(${1:bitmap}, ${2:width}, ${3:height})$0",
	"description": ""
	},

	"JS_LICE_RotatedBlit lua": {
	"prefix": "reaper.JS_LICE_RotatedBlit",
	"scope": "lua",
	"body": "reaper.JS_LICE_RotatedBlit(${1:destBitmap}, ${2:dstx}, ${3:dsty}, ${4:dstw}, ${5:dsth}, ${6:sourceBitmap}, ${7:srcx}, ${8:srcy}, ${9:srcw}, ${10:srch}, ${11:angle}, ${12:rotxcent}, ${13:rotycent}, ${14:cliptosourcerect}, ${15:alpha}, ${16:mode})$0",
	"description": "LICE modes: 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA' to enable per-pixel alpha blending.\n\n"
	},

	"JS_LICE_RoundRect lua": {
	"prefix": "reaper.JS_LICE_RoundRect",
	"scope": "lua",
	"body": "reaper.JS_LICE_RoundRect(${1:bitmap}, ${2:x}, ${3:y}, ${4:w}, ${5:h}, ${6:cornerradius}, ${7:color}, ${8:alpha}, ${9:mode}, ${10:antialias})$0",
	"description": "LICE modes: 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA'.\nLICE color format: 0xAARRGGBB (AA is only used in ALPHA mode).\n\n"
	},

	"JS_LICE_ScaledBlit lua": {
	"prefix": "reaper.JS_LICE_ScaledBlit",
	"scope": "lua",
	"body": "reaper.JS_LICE_ScaledBlit(${1:destBitmap}, ${2:dstx}, ${3:dsty}, ${4:dstw}, ${5:dsth}, ${6:srcBitmap}, ${7:srcx}, ${8:srcy}, ${9:srcw}, ${10:srch}, ${11:alpha}, ${12:mode})$0",
	"description": "LICE modes: 'COPY' (default if empty string), 'MASK', 'ADD', 'DODGE', 'MUL', 'OVERLAY' or 'HSVADJ', any of which may be combined with 'ALPHA' to enable per-pixel alpha blending.\n\n"
	},

	"JS_LICE_SetAlphaFromColorMask lua": {
	"prefix": "reaper.JS_LICE_SetAlphaFromColorMask",
	"scope": "lua",
	"body": "reaper.JS_LICE_SetAlphaFromColorMask(${1:bitmap}, ${2:colorRGB})$0",
	"description": "Sets all pixels that match the given color's RGB values to fully transparent, and all other pixels to fully opaque.  (All pixels' RGB values remain unchanged.)\n\n"
	},

	"JS_LICE_SetFontBkColor lua": {
	"prefix": "reaper.JS_LICE_SetFontBkColor",
	"scope": "lua",
	"body": "reaper.JS_LICE_SetFontBkColor(${1:LICEFont}, ${2:color})$0",
	"description": "Sets the color of the font background.\n\n"
	},

	"JS_LICE_SetFontColor lua": {
	"prefix": "reaper.JS_LICE_SetFontColor",
	"scope": "lua",
	"body": "reaper.JS_LICE_SetFontColor(${1:LICEFont}, ${2:color})$0",
	"description": ""
	},

	"JS_LICE_SetFontFXColor lua": {
	"prefix": "reaper.JS_LICE_SetFontFXColor",
	"scope": "lua",
	"body": "reaper.JS_LICE_SetFontFXColor(${1:LICEFont}, ${2:color})$0",
	"description": "Sets the color of font FX such as shadow.\n\n"
	},

	"JS_LICE_SetFontFromGDI lua": {
	"prefix": "reaper.JS_LICE_SetFontFromGDI",
	"scope": "lua",
	"body": "reaper.JS_LICE_SetFontFromGDI(${1:LICEFont}, ${2:GDIFont}, ${3:moreFormats})$0",
	"description": "Converts a GDI font into a LICE font.\nThe font can be modified by the following flags, in a comma-separated list:\n'VERTICAL', 'BOTTOMUP', 'NATIVE', 'BLUR', 'INVERT', 'MONO', 'SHADOW' or 'OUTLINE'.\n\n"
	},

	"JS_LICE_WriteJPG lua": {
	"prefix": "reaper.JS_LICE_WriteJPG",
	"scope": "lua",
	"body": "reaper.JS_LICE_WriteJPG(${1:filename}, ${2:bitmap}, ${3:quality}, ${4:forceBaseline})$0",
	"description": "Parameters:\n* quality is an integer in the range 1..100.\n* forceBaseline is an optional boolean parameter that ensures compatibility with all JPEG viewers by preventing too low quality, 'cubist' settings.\n\n"
	},

	"JS_LICE_WritePNG lua": {
	"prefix": "reaper.JS_LICE_WritePNG",
	"scope": "lua",
	"body": "reaper.JS_LICE_WritePNG(${1:filename}, ${2:bitmap}, ${3:wantAlpha})$0",
	"description": ""
	},

	"JS_ListView_EnsureVisible lua": {
	"prefix": "reaper.JS_ListView_EnsureVisible",
	"scope": "lua",
	"body": "reaper.JS_ListView_EnsureVisible(${1:listviewHWND}, ${2:index}, ${3:partialOK})$0",
	"description": ""
	},

	"JS_ListView_EnumSelItems lua": {
	"prefix": "reaper.JS_ListView_EnumSelItems",
	"scope": "lua",
	"body": "reaper.JS_ListView_EnumSelItems(${1:listviewHWND}, ${2:index})$0",
	"description": "Returns the index of the next selected list item with index greater that the specified number. Returns -1 if no selected items left.\n\n"
	},

	"JS_ListView_GetFocusedItem lua": {
	"prefix": "reaper.JS_ListView_GetFocusedItem",
	"scope": "lua",
	"body": "retval, text = reaper.JS_ListView_GetFocusedItem(${1:listviewHWND})$0",
	"description": "Returns the index and text of the focused item, if any.\n\n"
	},

	"JS_ListView_GetHeader lua": {
	"prefix": "reaper.JS_ListView_GetHeader",
	"scope": "lua",
	"body": "reaper.JS_ListView_GetHeader(${1:listviewHWND})$0",
	"description": ""
	},

	"JS_ListView_GetItem lua": {
	"prefix": "reaper.JS_ListView_GetItem",
	"scope": "lua",
	"body": "text, state = reaper.JS_ListView_GetItem(${1:listviewHWND}, ${2:index}, ${3:subItem})$0",
	"description": "Returns the text and state of specified item.\n\n"
	},

	"JS_ListView_GetItemCount lua": {
	"prefix": "reaper.JS_ListView_GetItemCount",
	"scope": "lua",
	"body": "reaper.JS_ListView_GetItemCount(${1:listviewHWND})$0",
	"description": ""
	},

	"JS_ListView_GetItemRect lua": {
	"prefix": "reaper.JS_ListView_GetItemRect",
	"scope": "lua",
	"body": "retval, left, top, right, bottom = reaper.JS_ListView_GetItemRect(${1:listviewHWND}, ${2:index})$0",
	"description": "Returns client coordinates of the item.\n\n"
	},

	"JS_ListView_GetItemState lua": {
	"prefix": "reaper.JS_ListView_GetItemState",
	"scope": "lua",
	"body": "reaper.JS_ListView_GetItemState(${1:listviewHWND}, ${2:index})$0",
	"description": "State is a bitmask:\n1 = focused, 2 = selected. On Windows only, cut-and-paste marked = 4, drag-and-drop highlighted = 8.\nWarning: this function uses the Win32 bitmask values, which differ from the values used by WDL/swell.\n\n"
	},

	"JS_ListView_GetItemText lua": {
	"prefix": "reaper.JS_ListView_GetItemText",
	"scope": "lua",
	"body": "text = reaper.JS_ListView_GetItemText(${1:listviewHWND}, ${2:index}, ${3:subItem})$0",
	"description": ""
	},

	"JS_ListView_GetSelectedCount lua": {
	"prefix": "reaper.JS_ListView_GetSelectedCount",
	"scope": "lua",
	"body": "reaper.JS_ListView_GetSelectedCount(${1:listviewHWND})$0",
	"description": ""
	},

	"JS_ListView_GetTopIndex lua": {
	"prefix": "reaper.JS_ListView_GetTopIndex",
	"scope": "lua",
	"body": "reaper.JS_ListView_GetTopIndex(${1:listviewHWND})$0",
	"description": ""
	},

	"JS_ListView_HitTest lua": {
	"prefix": "reaper.JS_ListView_HitTest",
	"scope": "lua",
	"body": "index, subItem, flags = reaper.JS_ListView_HitTest(${1:listviewHWND}, ${2:clientX}, ${3:clientY})$0",
	"description": ""
	},

	"JS_ListView_ListAllSelItems lua": {
	"prefix": "reaper.JS_ListView_ListAllSelItems",
	"scope": "lua",
	"body": "retval, items = reaper.JS_ListView_ListAllSelItems(${1:listviewHWND})$0",
	"description": "Returns the indices of all selected items as a comma-separated list.\n* retval: Number of selected items found; negative or zero if an error occured.\n\n"
	},

	"JS_ListView_SetItemState lua": {
	"prefix": "reaper.JS_ListView_SetItemState",
	"scope": "lua",
	"body": "reaper.JS_ListView_SetItemState(${1:listviewHWND}, ${2:index}, ${3:state}, ${4:mask})$0",
	"description": "The mask parameter specifies the state bits that must be set, and the state parameter specifies the new values for those bits.\n1 = focused, 2 = selected. On Windows only, cut-and-paste marked = 4, drag-and-drop highlighted = 8.\nWarning: this function uses the Win32 bitmask values, which differ from the values used by WDL/swell.\n\n"
	},

	"JS_ListView_SetItemText lua": {
	"prefix": "reaper.JS_ListView_SetItemText",
	"scope": "lua",
	"body": "reaper.JS_ListView_SetItemText(${1:listviewHWND}, ${2:index}, ${3:subItem}, ${4:text})$0",
	"description": "Currently, this fuction only accepts ASCII text.\n\n"
	},

	"JS_Localize lua": {
	"prefix": "reaper.JS_Localize",
	"scope": "lua",
	"body": "translation = reaper.JS_Localize(${1:USEnglish}, ${2:LangPackSection})$0",
	"description": "Returns the translation of the given US English text, according to the currently loaded Language Pack.\nParameters:\n* LangPackSection: Language Packs are divided into sections such as 'common' or 'DLG_102'.\n* In Lua, by default, text of up to 1024 chars can be returned. To increase (or reduce) the default buffer size, a string and size can be included as optional 3rd and 4th arguments.\nExample: reaper.JS_Localize('Actions', 'common', '', 20)\n\n"
	},

	"JS_MIDIEditor_ArrayAll lua": {
	"prefix": "reaper.JS_MIDIEditor_ArrayAll",
	"scope": "lua",
	"body": "reaper.JS_MIDIEditor_ArrayAll(${1:reaperarray})$0",
	"description": "Finds all open MIDI windows (whether docked or not).\n* retval: The number of MIDI editor windows found; negative if an error occurred.\n* The address of each MIDI editor window is stored in the provided reaper.array. Each address can be converted to a REAPER object (HWND) by the function JS_Window_HandleFromAddress.\n\n"
	},

	"JS_MIDIEditor_ListAll lua": {
	"prefix": "reaper.JS_MIDIEditor_ListAll",
	"scope": "lua",
	"body": "retval, list = reaper.JS_MIDIEditor_ListAll()\n\n",
	"description": "Finds all open MIDI windows (whether docked or not).\n* retval: The number of MIDI editor windows found; negative if an error occurred.\n* list: Comma-separated string of hexadecimal values. Each value is an address that can be converted to a HWND by the function Window_HandleFromAddress.\n\n"
	},

	"JS_Mem_Alloc lua": {
	"prefix": "reaper.JS_Mem_Alloc",
	"scope": "lua",
	"body": "reaper.JS_Mem_Alloc(${1:sizeBytes})$0",
	"description": "Allocates memory for general use by functions that require memory buffers.\n\n"
	},

	"JS_Mem_Free lua": {
	"prefix": "reaper.JS_Mem_Free",
	"scope": "lua",
	"body": "reaper.JS_Mem_Free(${1:mallocPointer})$0",
	"description": "Frees memory that was previously allocated by JS_Mem_Alloc.\n\n"
	},

	"JS_Mem_FromString lua": {
	"prefix": "reaper.JS_Mem_FromString",
	"scope": "lua",
	"body": "reaper.JS_Mem_FromString(${1:mallocPointer}, ${2:offset}, ${3:packedString}, ${4:stringLength})$0",
	"description": "Copies a packed string into a memory buffer.\n\n"
	},

	"JS_Mouse_GetCursor lua": {
	"prefix": "reaper.JS_Mouse_GetCursor",
	"scope": "lua",
	"body": "reaper.JS_Mouse_GetCursor()\n\n",
	"description": "On Windows, retrieves a handle to the current mouse cursor.\nOn Linux and macOS, retrieves a handle to the last cursor set by REAPER or its extensions via SWELL.\n\n"
	},

	"JS_Mouse_GetState lua": {
	"prefix": "reaper.JS_Mouse_GetState",
	"scope": "lua",
	"body": "reaper.JS_Mouse_GetState(${1:flags})$0",
	"description": "Retrieves the states of mouse buttons and modifiers keys.\nParameters:\n* flags, state: The parameter and the return value both use the same format as gfx.mouse_cap. For example, to get the states of the left mouse button and the ctrl key, use flags = 0b00000101.\n\n"
	},

	"JS_Mouse_LoadCursor lua": {
	"prefix": "reaper.JS_Mouse_LoadCursor",
	"scope": "lua",
	"body": "reaper.JS_Mouse_LoadCursor(${1:cursorNumber})$0",
	"description": "Loads a cursor by number.\ncursorNumber: Same as used for gfx.setcursor, and includes some of Windows' predefined cursors (with numbers > 32000; refer to documentation for the Win32 C++ function LoadCursor), and REAPER's own cursors (with numbers < 2000).\nIf successful, returns a handle to the cursor, which can be used in JS_Mouse_SetCursor.\n\n"
	},

	"JS_Mouse_LoadCursorFromFile lua": {
	"prefix": "reaper.JS_Mouse_LoadCursorFromFile",
	"scope": "lua",
	"body": "reaper.JS_Mouse_LoadCursorFromFile(${1:pathAndFileName}, ${2:forceNewLoad})$0",
	"description": "Loads a cursor from a .cur file.\nforceNewLoad is an optional boolean parameter:\n* If omitted or false, and if the cursor file has already been loaded previously during the REAPER session by any script, the file will not be re-loaded, and the existing handle will be returned.\n* If true, the file will be re-loaded and a new handle will be returned.\n* WARNING: Each time that a cursor file is re-loaded, the number of GDI objects increases for the entire duration of the REAPER session.\nIf successful, returns a handle to the cursor, which can be used in JS_Mouse_SetCursor.\n\n"
	},

	"JS_Mouse_SetCursor lua": {
	"prefix": "reaper.JS_Mouse_SetCursor",
	"scope": "lua",
	"body": "reaper.JS_Mouse_SetCursor(${1:cursorHandle})$0",
	"description": "Sets the mouse cursor.  (Only lasts while script is running, and for a single 'defer' cycle.)\n\n"
	},

	"JS_Mouse_SetPosition lua": {
	"prefix": "reaper.JS_Mouse_SetPosition",
	"scope": "lua",
	"body": "reaper.JS_Mouse_SetPosition(${1:x}, ${2:y})$0",
	"description": "Moves the mouse cursor to the specified screen coordinates.\nNOTES:\n* On Windows and Linux, screen coordinates are relative to *upper* left corner of the primary display, and the positive Y-axis points downward.\n* On macOS, screen coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward.\n\n"
	},

	"JS_ReaScriptAPI_Version lua": {
	"prefix": "reaper.JS_ReaScriptAPI_Version",
	"scope": "lua",
	"body": "version = reaper.JS_ReaScriptAPI_Version()\n\n",
	"description": "Returns the version of the js_ReaScriptAPI extension.\n\n"
	},

	"JS_String lua": {
	"prefix": "reaper.JS_String",
	"scope": "lua",
	"body": "retval, buf = reaper.JS_String(${1:pointer}, ${2:offset}, ${3:lengthChars})$0",
	"description": "Returns the memory contents starting at address[offset] as a packed string. Offset is added as steps of 1 byte (char) each.\n\n"
	},

	"JS_VKeys_GetDown lua": {
	"prefix": "reaper.JS_VKeys_GetDown",
	"scope": "lua",
	"body": "state = reaper.JS_VKeys_GetDown(${1:cutoffTime})$0",
	"description": "Returns a 255-byte array that specifies which virtual keys, from 0x01 to 0xFF, have sent KEYDOWN messages since cutoffTime.\nNotes:\n* Mouse buttons and modifier keys are not (currently) reliably detected, and JS_Mouse_GetState can be used instead.\n* Auto-repeated KEYDOWN messages are ignored.\n\n"
	},

	"JS_VKeys_GetState lua": {
	"prefix": "reaper.JS_VKeys_GetState",
	"scope": "lua",
	"body": "state = reaper.JS_VKeys_GetState(${1:cutoffTime})$0",
	"description": "Retrieves the current states (0 or 1) of all virtual keys, from 0x01 to 0xFF, in a 255-byte array.\ncutoffTime: A key is only regarded as down if it sent a KEYDOWN message after the cut-off time, not followed by KEYUP. (This is useful for excluding old KEYDOWN messages that weren't properly followed by KEYUP.) \nIf cutoffTime is positive, is it interpreted as absolute time in similar format as time_precise().\nIf cutoffTime is negative, it is relative to the current time.\nNotes:\n* Mouse buttons and modifier keys are not (currently) reliably detected, and JS_Mouse_GetState can be used instead.\n* Auto-repeated KEYDOWN messages are ignored.\n\n"
	},

	"JS_VKeys_GetUp lua": {
	"prefix": "reaper.JS_VKeys_GetUp",
	"scope": "lua",
	"body": "state = reaper.JS_VKeys_GetUp(${1:cutoffTime})$0",
	"description": "Return a 255-byte array that specifies which virtual keys, from 0x01 to 0xFF, have sent KEYUP messages since cutoffTime.\nNote: Mouse buttons and modifier keys are not (currently) reliably detected, and JS_Mouse_GetState can be used instead.\n\n"
	},

	"JS_VKeys_Intercept lua": {
	"prefix": "reaper.JS_VKeys_Intercept",
	"scope": "lua",
	"body": "reaper.JS_VKeys_Intercept(${1:keyCode}, ${2:intercept})$0",
	"description": "Intercepting (blocking) virtual keys work similar to the native function PreventUIRefresh:  Each key has a (non-negative) intercept state, and the key is passed through as usual if the state equals 0, or blocked if the state is greater than 0.\nkeyCode: The virtual key code of the key, or -1 to change the state of all keys.\nintercept: A script can increase the intercept state by passing +1, or lower the state by passing -1.  Multiple scripts can block the same key, and the intercept state may reach up to 255. If zero is passed, the intercept state is not changed, but the current state is returned.\nReturns: If keyCode refers to a single key, the intercept state of that key is returned.  If keyCode = -1, the state of the key that is most strongly blocked (highest intercept state) is returned.\n\n"
	},

	"JS_WindowMessage_Intercept lua": {
	"prefix": "reaper.JS_WindowMessage_Intercept",
	"scope": "lua",
	"body": "reaper.JS_WindowMessage_Intercept(${1:windowHWND}, ${2:message}, ${3:passThrough})$0",
	"description": "Begins intercepting a window message type to specified window.\nParameters:\n* message: a single message type to be intercepted, either in WM_ or hexadecimal format. For example 'WM_SETCURSOR' or '0x0020'.\n* passThrough: Whether message should be blocked (false) or passed through (true) to the window.\nFor more information on message codes, refer to the Win32 C++ API documentation.\nAll WM_ and CB_ message types listed in swell-types.h should be valid cross-platform, and the function can recognize all of these by name. Other messages can be specified by their hex code.\nReturns:\n* 1: Success.\n* 0: The message type is already being intercepted by another script.\n* -2: message string could not be parsed.\n* -3: Failure getting original window process / window not valid.\n* -6: Could not obtain the window client HDC.\nNotes:\n* Intercepted messages can be polled using JS_WindowMessage_Peek.\n* Intercepted messages can be edited, if necessary, and then forwarded to their original destination using JS_WindowMessage_Post or JS_WindowMessage_Send.\n* To check whether a message type is being blocked or passed through, Peek the message type, or retrieve the entire List of intercepts.\n* Mouse events are typically received by the child window under the mouse, not the parent window.\nKeyboard events are usually *not* received by any individual window. To intercept keyboard events, use the VKey functions.\n\n"
	},

	"JS_WindowMessage_InterceptList lua": {
	"prefix": "reaper.JS_WindowMessage_InterceptList",
	"scope": "lua",
	"body": "reaper.JS_WindowMessage_InterceptList(${1:windowHWND}, ${2:messages})$0",
	"description": "Begins intercepting window messages to specified window.\nParameters:\n* messages: comma-separated string of message types to be intercepted (either in WM_ or hexadecimal format), each with a 'block' or 'passthrough' modifier to specify whether the message should be blocked or passed through to the window. For example 'WM_SETCURSOR:block, 0x0201:passthrough'.\nFor more information on message codes, refer to the Win32 C++ API documentation.\nAll WM_ and CB_ message types listed in swell-types.h should be valid cross-platform, and the function can recognize all of these by name. Other messages can be specified by their hex code.\nReturns:\n* 1: Success.\n* 0: The message type is already being intercepted by another script.\n* -1: windowHWND is not a valid window.\n* -2: message string could not be parsed.\n* -3: Failure getting original window process.\n* -6: COuld not obtain the window client HDC.\nNotes:\n* Intercepted messages can be polled using JS_WindowMessage_Peek.\n* Intercepted messages can be edited, if necessary, and then forwarded to their original destination using JS_WindowMessage_Post or JS_WindowMessage_Send.\n* To check whether a message type is being blocked or passed through, Peek the message type, or retrieve the entire List of intercepts.\n\n"
	},

	"JS_WindowMessage_ListIntercepts lua": {
	"prefix": "reaper.JS_WindowMessage_ListIntercepts",
	"scope": "lua",
	"body": "retval, list = reaper.JS_WindowMessage_ListIntercepts(${1:windowHWND})$0",
	"description": "Returns a string with a list of all message types currently being intercepted for the specified window.\n\n"
	},

	"JS_WindowMessage_PassThrough lua": {
	"prefix": "reaper.JS_WindowMessage_PassThrough",
	"scope": "lua",
	"body": "reaper.JS_WindowMessage_PassThrough(${1:windowHWND}, ${2:message}, ${3:passThrough})$0",
	"description": "Changes the passthrough setting of a message type that is already being intercepted.\nReturns 1 if successful, 0 if the message type is not yet being intercepted, or -2 if the argument could not be parsed.\n\n"
	},

	"JS_WindowMessage_Peek lua": {
	"prefix": "reaper.JS_WindowMessage_Peek",
	"scope": "lua",
	"body": "retval, passedThrough, time, wParamLow, wParamHigh, lParamLow, lParamHigh = reaper.JS_WindowMessage_Peek(${1:windowHWND}, ${2:message})$0",
	"description": "Polls the state of an intercepted message.\nParameters:\n* message: String containing a single message name, such as 'WM_SETCURSOR', or in hexadecimal format, '0x0020'.\n(For a list of WM_ and CB_ message types that are valid cross-platform, refer to swell-types.h. Only these will be recognized by WM_ or CB_ name.)\nReturns:\n* A retval of false indicates that the message type is not being intercepted in the specified window.\n* All messages are timestamped. A time of 0 indicates that no message if this type has been intercepted yet.\n* For more information about wParam and lParam for different message types, refer to Win32 C++ documentation.\n* For example, in the case of mousewheel, returns mousewheel delta, modifier keys, x position and y position.\n* wParamHigh, lParamLow and lParamHigh are signed, whereas wParamLow is unsigned.\n\n"
	},

	"JS_WindowMessage_Post lua": {
	"prefix": "reaper.JS_WindowMessage_Post",
	"scope": "lua",
	"body": "reaper.JS_WindowMessage_Post(${1:windowHWND}, ${2:message}, ${3:wParam}, ${4:wParamHighWord}, ${5:lParam}, ${6:lParamHighWord})$0",
	"description": "If the specified window and message type are not currently being intercepted by a script, this function will post the message in the message queue of the specified window, and return without waiting.\nIf the window and message type are currently being intercepted, the message will be sent directly to the original window process, similar to WindowMessage_Send, thereby skipping any intercepts.\nParameters:\n* message: String containing a single message name, such as 'WM_SETCURSOR', or in hexadecimal format, '0x0020'.\n(For a list of WM_ and CB_ message types that are valid cross-platform, refer to swell-types.h. Only these will be recognized by WM_ or CB_ name.)\n* wParam, wParamHigh, lParam and lParamHigh: Low and high 16-bit WORDs of the WPARAM and LPARAM parameters.\n(Most window messages encode separate information into the two WORDs. However, for those rare cases in which the entire WPARAM and LPARAM must be used to post a large pointer, the script can store this address in wParam or lParam, and keep wParamHigh and lParamHigh zero.)\nNotes:\n* For more information about parameter values, refer to documentation for the Win32 C++ function PostMessage.\n* Messages should only be sent to windows that were created from the main thread.\n* Useful for simulating mouse clicks and calling mouse modifier actions from scripts.\n\n"
	},

	"JS_WindowMessage_Release lua": {
	"prefix": "reaper.JS_WindowMessage_Release",
	"scope": "lua",
	"body": "reaper.JS_WindowMessage_Release(${1:windowHWND}, ${2:messages})$0",
	"description": "Release intercepts of specified message types.\nParameters:\n* messages: 'WM_SETCURSOR,WM_MOUSEHWHEEL' or '0x0020,0x020E', for example.\n\n"
	},

	"JS_WindowMessage_ReleaseAll lua": {
	"prefix": "reaper.JS_WindowMessage_ReleaseAll",
	"scope": "lua",
	"body": "reaper.JS_WindowMessage_ReleaseAll()\n\n",
	"description": "Release script intercepts of window messages for all windows.\n\n"
	},

	"JS_WindowMessage_ReleaseWindow lua": {
	"prefix": "reaper.JS_WindowMessage_ReleaseWindow",
	"scope": "lua",
	"body": "reaper.JS_WindowMessage_ReleaseWindow(${1:windowHWND})$0",
	"description": "Release script intercepts of window messages for specified window.\n\n"
	},

	"JS_WindowMessage_Send lua": {
	"prefix": "reaper.JS_WindowMessage_Send",
	"scope": "lua",
	"body": "reaper.JS_WindowMessage_Send(${1:windowHWND}, ${2:message}, ${3:wParam}, ${4:wParamHighWord}, ${5:lParam}, ${6:lParamHighWord})$0",
	"description": "Sends a message to the specified window by calling the window process directly, and only returns after the message has been processed. Any intercepts of the message by scripts will be skipped, and the message can therefore not be blocked.\nParameters:\n* message: String containing a single message name, such as 'WM_SETCURSOR', or in hexadecimal format, '0x0020'.\n(For a list of WM_ and CB_ message types that are valid cross-platform, refer to swell-types.h. Only these will be recognized by WM_ or CB_ name.)\n* wParam, wParamHigh, lParam and lParamHigh: Low and high 16-bit WORDs of the WPARAM and LPARAM parameters.\n(Most window messages encode separate information into the two WORDs. However, for those rare cases in which the entire WPARAM and LPARAM must be used to post a large pointer, the script can store this address in wParam or lParam, and keep wParamHigh and lParamHigh zero.)\nNotes:\n* For more information about parameter and return values, refer to documentation for the Win32 C++ function SendMessage.\n* Messages should only be sent to windows that were created from the main thread.\n* Useful for simulating mouse clicks and calling mouse modifier actions from scripts.\n\n"
	},

	"JS_Window_AddressFromHandle lua": {
	"prefix": "reaper.JS_Window_AddressFromHandle",
	"scope": "lua",
	"body": "address = reaper.JS_Window_AddressFromHandle(${1:handle})$0",
	"description": ""
	},

	"JS_Window_ArrayAllChild lua": {
	"prefix": "reaper.JS_Window_ArrayAllChild",
	"scope": "lua",
	"body": "reaper.JS_Window_ArrayAllChild(${1:parentHWND}, ${2:reaperarray})$0",
	"description": "Finds all child windows of the specified parent.\nReturns:\n* retval: The number of windows found; negative if an error occurred.\n* The addresses are stored in the provided reaper.array, and can be converted to REAPER objects (HWNDs) by the function JS_Window_HandleFromAddress.\n\n"
	},

	"JS_Window_ArrayAllTop lua": {
	"prefix": "reaper.JS_Window_ArrayAllTop",
	"scope": "lua",
	"body": "reaper.JS_Window_ArrayAllTop(${1:reaperarray})$0",
	"description": "Finds all top-level windows.\nReturns:\n* retval: The number of windows found; negative if an error occurred.\n* The addresses are stored in the provided reaper.array, and can be converted to REAPER objects (HWNDs) by the function JS_Window_HandleFromAddress.\n\n"
	},

	"JS_Window_ArrayFind lua": {
	"prefix": "reaper.JS_Window_ArrayFind",
	"scope": "lua",
	"body": "reaper.JS_Window_ArrayFind(${1:title}, ${2:exact}, ${3:reaperarray})$0",
	"description": "Finds all windows, whether top-level or child, whose titles match the specified string.\nReturns:\n* retval: The number of windows found; negative if an error occurred.\n* The addresses are stored in the provided reaper.array, and can be converted to REAPER objects (HWNDs) by the function JS_Window_HandleFromAddress.\nParameters:\n* exact: Match entire title exactly, or match substring of title.\n\n"
	},

	"JS_Window_AttachResizeGrip lua": {
	"prefix": "reaper.JS_Window_AttachResizeGrip",
	"scope": "lua",
	"body": "reaper.JS_Window_AttachResizeGrip(${1:windowHWND})$0",
	"description": ""
	},

	"JS_Window_AttachTopmostPin lua": {
	"prefix": "reaper.JS_Window_AttachTopmostPin",
	"scope": "lua",
	"body": "reaper.JS_Window_AttachTopmostPin(${1:windowHWND})$0",
	"description": "Attaches a 'pin on top' button to the window frame. The button should remember its state when closing and re-opening the window.\nWARNING: This function does not yet work on Linux.\n\n"
	},

	"JS_Window_ClientToScreen lua": {
	"prefix": "reaper.JS_Window_ClientToScreen",
	"scope": "lua",
	"body": "x, y = reaper.JS_Window_ClientToScreen(${1:windowHWND}, ${2:x}, ${3:y})$0",
	"description": "Converts the client-area coordinates of a specified point to screen coordinates.\nNOTES:\n* On Windows and Linux, screen coordinates are relative to *upper* left corner of the primary display, and the positive Y-axis points downward.\n* On macOS, screen coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward.\n* On all platforms, client coordinates are relative to the upper left corner of the client area.\n\n"
	},

	"JS_Window_Create lua": {
	"prefix": "reaper.JS_Window_Create",
	"scope": "lua",
	"body": "retval, optional_style = reaper.JS_Window_Create(${1:title}, ${2:className}, ${3:x}, ${4:y}, ${5:w}, ${6:h}, ${7:optional_style}, ${8:ownerHWND})$0",
	"description": "Creates a modeless window with WS_OVERLAPPEDWINDOW style and only rudimentary features. Scripts can paint into the window using GDI or LICE/Composite functions (and JS_Window_InvalidateRect to trigger re-painting).\nstyle: An optional parameter that overrides the default style. The string may include any combination of standard window styles, such as 'POPUP' for a frameless window, or 'CAPTION,SIZEBOX,SYSMENU' for a standard framed window.\nOn Linux and macOS, 'MAXIMIZE' has not yet been implemented, and the remaining styles may appear slightly different from their WindowsOS counterparts.\nclassName: On Windows, only standard ANSI characters are supported.\nownerHWND: Optional parameter, only available on WindowsOS.  Usually either the REAPER main window or another script window, and useful for ensuring that the created window automatically closes when the owner is closed.\nNOTE: On Linux and macOS, the window contents are only updated *between* defer cycles, so the window cannot be animated by for/while loops within a single defer cycle.\n\n"
	},

	"JS_Window_Destroy lua": {
	"prefix": "reaper.JS_Window_Destroy",
	"scope": "lua",
	"body": "reaper.JS_Window_Destroy(${1:windowHWND})$0",
	"description": "Destroys the specified window.\n\n"
	},

	"JS_Window_Enable lua": {
	"prefix": "reaper.JS_Window_Enable",
	"scope": "lua",
	"body": "reaper.JS_Window_Enable(${1:windowHWND}, ${2:enable})$0",
	"description": "Enables or disables mouse and keyboard input to the specified window or control.\n\n"
	},

	"JS_Window_EnableMetal lua": {
	"prefix": "reaper.JS_Window_EnableMetal",
	"scope": "lua",
	"body": "reaper.JS_Window_EnableMetal(${1:windowHWND})$0",
	"description": "On macOS, returns the Metal graphics setting:\n2 = Metal enabled and support GetDC()/ReleaseDC() for drawing (more overhead).\n1 = Metal enabled.\n0 = N/A (Windows and Linux).\n-1 = non-metal async layered mode.\n-2 = non-metal non-async layered mode.\nWARNING: If using mode -1, any BitBlt()/StretchBlt() MUST have the source bitmap persist. If it is resized after Blit it could cause crashes.\n\n"
	},

	"JS_Window_Find lua": {
	"prefix": "reaper.JS_Window_Find",
	"scope": "lua",
	"body": "reaper.JS_Window_Find(${1:title}, ${2:exact})$0",
	"description": "Returns a HWND to a window whose title matches the specified string.\n* Unlike the Win32 function FindWindow, this function searches top-level as well as child windows, so that the target window can be found irrespective of docked state.\n* In addition, the function can optionally match substrings of the title.\n* Matching is not case sensitive.\nParameters:\n* exact: Match entire title, or match substring of title.\n\n"
	},

	"JS_Window_FindChild lua": {
	"prefix": "reaper.JS_Window_FindChild",
	"scope": "lua",
	"body": "reaper.JS_Window_FindChild(${1:parentHWND}, ${2:title}, ${3:exact})$0",
	"description": "Returns a HWND to a child window whose title matches the specified string.\nParameters:\n* exact: Match entire title length, or match substring of title. In both cases, matching is not case sensitive.\n\n"
	},

	"JS_Window_FindChildByID lua": {
	"prefix": "reaper.JS_Window_FindChildByID",
	"scope": "lua",
	"body": "reaper.JS_Window_FindChildByID(${1:parentHWND}, ${2:ID})$0",
	"description": "Similar to the C++ WIN32 function GetDlgItem, this function finds child windows by ID.\n(The ID of a window may be retrieved by JS_Window_GetLongPtr.)\n\n"
	},

	"JS_Window_FindEx lua": {
	"prefix": "reaper.JS_Window_FindEx",
	"scope": "lua",
	"body": "reaper.JS_Window_FindEx(${1:parentHWND}, ${2:childHWND}, ${3:className}, ${4:title})$0",
	"description": "Returns a handle to a child window whose class and title match the specified strings.\nParameters: * childWindow: The function searches child windows, beginning with the window *after* the specified child window. If childHWND is equal to parentHWND, the search begins with the first child window of parentHWND.\n* title: An empty string, '', will match all windows. (Search is not case sensitive.)\n\n"
	},

	"JS_Window_FindTop lua": {
	"prefix": "reaper.JS_Window_FindTop",
	"scope": "lua",
	"body": "reaper.JS_Window_FindTop(${1:title}, ${2:exact})$0",
	"description": "Returns a HWND to a top-level window whose title matches the specified string.\nParameters:\n* exact: Match entire title length, or match substring of title. In both cases, matching is not case sensitive.\n\n"
	},

	"JS_Window_FromPoint lua": {
	"prefix": "reaper.JS_Window_FromPoint",
	"scope": "lua",
	"body": "reaper.JS_Window_FromPoint(${1:x}, ${2:y})$0",
	"description": "Retrieves a HWND to the window that contains the specified point.\nNOTES:\n* On Windows and Linux, screen coordinates are relative to *upper* left corner of the primary display, and the positive Y-axis points downward.\n* On macOS, screen coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward.\n\n"
	},

	"JS_Window_GetClassName lua": {
	"prefix": "reaper.JS_Window_GetClassName",
	"scope": "lua",
	"body": "class = reaper.JS_Window_GetClassName(${1:windowHWND})$0",
	"description": "WARNING: May not be fully implemented on macOS and Linux.\n\n"
	},

	"JS_Window_GetClientRect lua": {
	"prefix": "reaper.JS_Window_GetClientRect",
	"scope": "lua",
	"body": "retval, left, top, right, bottom = reaper.JS_Window_GetClientRect(${1:windowHWND})$0",
	"description": "Retrieves the screen coordinates of the client area rectangle of the specified window.\nNOTES:\n* Unlike the C++ function GetClientRect, this function returns the screen coordinates, not the width and height. To get the client size, use GetClientSize.\n* The pixel at (right, bottom) lies immediately outside the rectangle.\n* On Windows and Linux, screen coordinates are relative to *upper* left corner of the primary display, and the positive Y-axis points downward.\n* On macOS, screen coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward.\n\n"
	},

	"JS_Window_GetClientSize lua": {
	"prefix": "reaper.JS_Window_GetClientSize",
	"scope": "lua",
	"body": "retval, width, height = reaper.JS_Window_GetClientSize(${1:windowHWND})$0",
	"description": ""
	},

	"JS_Window_GetFocus lua": {
	"prefix": "reaper.JS_Window_GetFocus",
	"scope": "lua",
	"body": "reaper.JS_Window_GetFocus()\n\n",
	"description": "Retrieves a HWND to the window that has the keyboard focus, if the window is attached to the calling thread's message queue.\n\n"
	},

	"JS_Window_GetForeground lua": {
	"prefix": "reaper.JS_Window_GetForeground",
	"scope": "lua",
	"body": "reaper.JS_Window_GetForeground()\n\n",
	"description": "Retrieves a HWND to the top-level foreground window (the window with which the user is currently working).\n\n"
	},

	"JS_Window_GetLong lua": {
	"prefix": "reaper.JS_Window_GetLong",
	"scope": "lua",
	"body": "retval = reaper.JS_Window_GetLong(${1:windowHWND}, ${2:info})$0",
	"description": "Similar to JS_Window_GetLongPtr, but returns the information as a number instead of a pointer. \nIn the case of 'DLGPROC' and 'WNDPROC', the return values can be converted to pointers by JS_Window_HandleFromAddress.\nIf the function fails, the return value is 0.\n\n"
	},

	"JS_Window_GetLongPtr lua": {
	"prefix": "reaper.JS_Window_GetLongPtr",
	"scope": "lua",
	"body": "reaper.JS_Window_GetLongPtr(${1:windowHWND}, ${2:info})$0",
	"description": "Returns information about the specified window.\ninfo: 'USERDATA', 'WNDPROC', 'DLGPROC', 'ID', 'EXSTYLE' or 'STYLE'.\nFor documentation about the types of information returned, refer to the Win32 function GetWindowLongPtr.\nThe values returned by 'DLGPROC' and 'WNDPROC' are typically used as-is, as pointers, whereas the others should first be converted to integers.\nIf the function fails, a null pointer is returned.\n\n"
	},

	"JS_Window_GetParent lua": {
	"prefix": "reaper.JS_Window_GetParent",
	"scope": "lua",
	"body": "reaper.JS_Window_GetParent(${1:windowHWND})$0",
	"description": "Retrieves a HWND to the specified window's parent or owner.\nReturns NULL if the window is unowned or if the function otherwise fails.\n\n"
	},

	"JS_Window_GetRect lua": {
	"prefix": "reaper.JS_Window_GetRect",
	"scope": "lua",
	"body": "retval, left, top, right, bottom = reaper.JS_Window_GetRect(${1:windowHWND})$0",
	"description": "Retrieves the screen coordinates of the bounding rectangle of the specified window.\nNOTES:\n* On Windows and Linux, coordinates are relative to *upper* left corner of the primary display, and the positive Y-axis points downward.\n* On macOS, coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward.\n* The pixel at (right, bottom) lies immediately outside the rectangle.\n\n"
	},

	"JS_Window_GetRelated lua": {
	"prefix": "reaper.JS_Window_GetRelated",
	"scope": "lua",
	"body": "reaper.JS_Window_GetRelated(${1:windowHWND}, ${2:relation})$0",
	"description": "Retrieves a handle to a window that has the specified relationship (Z-Order or owner) to the specified window.\nrelation: 'LAST', 'NEXT', 'PREV', 'OWNER' or 'CHILD'.\n(Refer to documentation for Win32 C++ function GetWindow.)\n\n"
	},

	"JS_Window_GetScrollInfo lua": {
	"prefix": "reaper.JS_Window_GetScrollInfo",
	"scope": "lua",
	"body": "retval, position, pageSize, min, max, trackPos = reaper.JS_Window_GetScrollInfo(${1:windowHWND}, ${2:scrollbar})$0",
	"description": "Retrieves the scroll information of a window.\nParameters:\n* windowHWND: The window that contains the scrollbar. This is usually a child window, not a top-level, framed window.\n* scrollbar: 'v' (or 'SB_VERT', or 'VERT') for vertical scroll, 'h' (or 'SB_HORZ' or 'HORZ') for horizontal.\nReturns:\n* Leftmost or topmost visible pixel position, as well as the visible page size, the range minimum and maximum, and scroll box tracking position.\n\n"
	},

	"JS_Window_GetTitle lua": {
	"prefix": "reaper.JS_Window_GetTitle",
	"scope": "lua",
	"body": "title = reaper.JS_Window_GetTitle(${1:windowHWND})$0",
	"description": "Returns the title (if any) of the specified window.\n\n"
	},

	"JS_Window_GetViewportFromRect lua": {
	"prefix": "reaper.JS_Window_GetViewportFromRect",
	"scope": "lua",
	"body": "left, top, right, bottom = reaper.JS_Window_GetViewportFromRect(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:wantWork})$0",
	"description": "Retrieves the dimensions of the display monitor that has the largest area of intersection with the specified rectangle.\nIf the monitor is not the primary display, some of the rectangle's coordinates may be negative.\nwantWork: Returns the work area of the display, which excludes the system taskbar or application desktop toolbars.\n\n"
	},

	"JS_Window_HandleFromAddress lua": {
	"prefix": "reaper.JS_Window_HandleFromAddress",
	"scope": "lua",
	"body": "reaper.JS_Window_HandleFromAddress(${1:address})$0",
	"description": "Converts an address to a handle (such as a HWND) that can be utilized by REAPER and other API functions.\n\n"
	},

	"JS_Window_InvalidateRect lua": {
	"prefix": "reaper.JS_Window_InvalidateRect",
	"scope": "lua",
	"body": "reaper.JS_Window_InvalidateRect(${1:windowHWND}, ${2:left}, ${3:top}, ${4:right}, ${5:bottom}, ${6:eraseBackground})$0",
	"description": "Similar to the Win32 function InvalidateRect.\n\n"
	},

	"JS_Window_IsChild lua": {
	"prefix": "reaper.JS_Window_IsChild",
	"scope": "lua",
	"body": "reaper.JS_Window_IsChild(${1:parentHWND}, ${2:childHWND})$0",
	"description": "Determines whether a window is a child window or descendant window of a specified parent window.\n\n"
	},

	"JS_Window_IsVisible lua": {
	"prefix": "reaper.JS_Window_IsVisible",
	"scope": "lua",
	"body": "reaper.JS_Window_IsVisible(${1:windowHWND})$0",
	"description": "Determines the visibility state of the window.\n\n"
	},

	"JS_Window_IsWindow lua": {
	"prefix": "reaper.JS_Window_IsWindow",
	"scope": "lua",
	"body": "reaper.JS_Window_IsWindow(${1:windowHWND})$0",
	"description": "Determines whether the specified window handle identifies an existing window.\nOn macOS and Linux, only windows that were created by WDL/swell will be identified (and only such windows should be acted on by scripts).\nNOTE: Since REAPER v5.974, windows can be checked using the native function ValidatePtr(windowHWND, 'HWND').\n\n"
	},

	"JS_Window_ListAllChild lua": {
	"prefix": "reaper.JS_Window_ListAllChild",
	"scope": "lua",
	"body": "retval, list = reaper.JS_Window_ListAllChild(${1:parentHWND})$0",
	"description": "Finds all child windows of the specified parent.\nReturns:\n* retval: The number of windows found; negative if an error occurred.\n* list: A comma-separated string of hexadecimal values.\nEach value is an address that can be converted to a HWND by the function Window_HandleFromAddress.\n\n"
	},

	"JS_Window_ListAllTop lua": {
	"prefix": "reaper.JS_Window_ListAllTop",
	"scope": "lua",
	"body": "retval, list = reaper.JS_Window_ListAllTop()\n\n",
	"description": "Finds all top-level windows.\nReturns:\n* retval: The number of windows found; negative if an error occurred.\n* list: A comma-separated string of hexadecimal values. Each value is an address that can be converted to a HWND by the function Window_HandleFromAddress.\n\n"
	},

	"JS_Window_ListFind lua": {
	"prefix": "reaper.JS_Window_ListFind",
	"scope": "lua",
	"body": "retval, list = reaper.JS_Window_ListFind(${1:title}, ${2:exact})$0",
	"description": "Finds all windows (whether top-level or child) whose titles match the specified string.\nReturns:\n* retval: The number of windows found; negative if an error occurred.\n* list: A comma-separated string of hexadecimal values. Each value is an address that can be converted to a HWND by the function Window_HandleFromAddress.\nParameters:\n* exact: Match entire title exactly, or match substring of title.\n\n"
	},

	"JS_Window_MonitorFromRect lua": {
	"prefix": "reaper.JS_Window_MonitorFromRect",
	"scope": "lua",
	"body": "left, top, right, bottom = reaper.JS_Window_MonitorFromRect(${1:x1}, ${2:y1}, ${3:x2}, ${4:y2}, ${5:wantWork})$0",
	"description": "Deprecated - use GetViewportFromRect instead.\n\n"
	},

	"JS_Window_Move lua": {
	"prefix": "reaper.JS_Window_Move",
	"scope": "lua",
	"body": "reaper.JS_Window_Move(${1:windowHWND}, ${2:left}, ${3:top})$0",
	"description": "Changes the position of the specified window, keeping its size constant.\nNOTES:\n* For top-level windows, position is relative to the primary display.\n* On Windows and Linux, position is calculated as the coordinates of the upper left corner of the window, relative to upper left corner of the primary display, and the positive Y-axis points downward.\n* On macOS, position is calculated as the coordinates of the bottom left corner of the window, relative to bottom left corner of the display, and the positive Y-axis points upward.\n* For a child window, on all platforms, position is relative to the upper-left corner of the parent window's client area.\n* Equivalent to calling JS_Window_SetPosition with NOSIZE, NOZORDER, NOACTIVATE and NOOWNERZORDER flags set.\n\n"
	},

	"JS_Window_OnCommand lua": {
	"prefix": "reaper.JS_Window_OnCommand",
	"scope": "lua",
	"body": "reaper.JS_Window_OnCommand(${1:windowHWND}, ${2:commandID})$0",
	"description": "Sends a 'WM_COMMAND' message to the specified window, which simulates a user selecting a command in the window menu.\nThis function is similar to Main_OnCommand and MIDIEditor_OnCommand, but can send commands to any window that has a menu.\nIn the case of windows that are listed among the Action list's contexts (such as the Media Explorer), the commandIDs of the actions in the Actions list may be used.\n\n"
	},

	"JS_Window_Resize lua": {
	"prefix": "reaper.JS_Window_Resize",
	"scope": "lua",
	"body": "reaper.JS_Window_Resize(${1:windowHWND}, ${2:width}, ${3:height})$0",
	"description": "Changes the dimensions of the specified window, keeping the top left corner position constant.\n* If resizing script GUIs, call gfx.update() after resizing.\n* Equivalent to calling JS_Window_SetPosition with NOMOVE, NOZORDER, NOACTIVATE and NOOWNERZORDER flags set.\n\n"
	},

	"JS_Window_ScreenToClient lua": {
	"prefix": "reaper.JS_Window_ScreenToClient",
	"scope": "lua",
	"body": "x, y = reaper.JS_Window_ScreenToClient(${1:windowHWND}, ${2:x}, ${3:y})$0",
	"description": "Converts the screen coordinates of a specified point on the screen to client-area coordinates.\nNOTES:\n* On Windows and Linux, screen coordinates are relative to *upper* left corner of the primary display, and the positive Y-axis points downward.\n* On macOS, screen coordinates are relative to the *bottom* left corner of the primary display, and the positive Y-axis points upward.\n* On all platforms, client coordinates are relative to the upper left corner of the client area.\n\n"
	},

	"JS_Window_SetFocus lua": {
	"prefix": "reaper.JS_Window_SetFocus",
	"scope": "lua",
	"body": "reaper.JS_Window_SetFocus(${1:windowHWND})$0",
	"description": "Sets the keyboard focus to the specified window.\n\n"
	},

	"JS_Window_SetForeground lua": {
	"prefix": "reaper.JS_Window_SetForeground",
	"scope": "lua",
	"body": "reaper.JS_Window_SetForeground(${1:windowHWND})$0",
	"description": "Brings the specified window into the foreground, activates the window, and directs keyboard input to it.\n\n"
	},

	"JS_Window_SetLong lua": {
	"prefix": "reaper.JS_Window_SetLong",
	"scope": "lua",
	"body": "retval = reaper.JS_Window_SetLong(${1:windowHWND}, ${2:info}, ${3:value})$0",
	"description": "Similar to the Win32 function SetWindowLongPtr. \ninfo: 'USERDATA', 'WNDPROC', 'DLGPROC', 'ID', 'EXSTYLE' or 'STYLE', and only on WindowOS, 'INSTANCE' and 'PARENT'.\n\n"
	},

	"JS_Window_SetOpacity lua": {
	"prefix": "reaper.JS_Window_SetOpacity",
	"scope": "lua",
	"body": "reaper.JS_Window_SetOpacity(${1:windowHWND}, ${2:mode}, ${3:value})$0",
	"description": "Sets the window opacity.\nParameters:\nmode: either 'ALPHA' or 'COLOR'. \nvalue: If ALPHA, the specified value may range from zero to one, and will apply to the entire window, frame included. \nIf COLOR, value specifies a 0xRRGGBB color, and all pixels of this color will be made transparent. (All mouse clicks over transparent pixels will pass through, too).  WARNING:\nCOLOR mode is only available in Windows, not Linux or macOS.\nTransparency can only be applied to top-level windows. If windowHWND refers to a child window, the entire top-level window that contains windowHWND will be made transparent.\n\n"
	},

	"JS_Window_SetParent lua": {
	"prefix": "reaper.JS_Window_SetParent",
	"scope": "lua",
	"body": "reaper.JS_Window_SetParent(${1:childHWND}, ${2:parentHWND})$0",
	"description": "If successful, returns a handle to the previous parent window.\nOnly on WindowsOS: If parentHWND is not specified, the desktop window becomes the new parent window.\n\n"
	},

	"JS_Window_SetPosition lua": {
	"prefix": "reaper.JS_Window_SetPosition",
	"scope": "lua",
	"body": "retval, optional_ZOrder, optional_flags = reaper.JS_Window_SetPosition(${1:windowHWND}, ${2:left}, ${3:top}, ${4:width}, ${5:height}, ${6:optional_ZOrder}, ${7:optional_flags})$0",
	"description": "Interface to the Win32/swell function SetWindowPos, with which window position, size, Z-order and visibility can be set, and new frame styles can be applied.\nZOrder and flags are optional parameters. If no arguments are supplied, the window will simply be moved and resized, as if the NOACTIVATE, NOZORDER, NOOWNERZORDER flags were set.\n* ZOrder: 'BOTTOM', 'TOPMOST', 'NOTOPMOST', 'TOP' or a window HWND converted to a string, for example by the Lua function tostring.\n* flags: Any combination of the standard flags, of which 'NOMOVE', 'NOSIZE', 'NOZORDER', 'NOACTIVATE', 'SHOWWINDOW', 'FRAMECHANGED' and 'NOCOPYBITS' should be valid cross-platform.\n\n"
	},

	"JS_Window_SetScrollPos lua": {
	"prefix": "reaper.JS_Window_SetScrollPos",
	"scope": "lua",
	"body": "reaper.JS_Window_SetScrollPos(${1:windowHWND}, ${2:scrollbar}, ${3:position})$0",
	"description": "Parameters:\n* scrollbar: 'v' (or 'SB_VERT', or 'VERT') for vertical scroll, 'h' (or 'SB_HORZ' or 'HORZ') for horizontal.\nNOTE: API functions can scroll REAPER's windows, but cannot zoom them.  Instead, use actions such as 'View: Zoom to one loop iteration'.\n\n"
	},

	"JS_Window_SetStyle lua": {
	"prefix": "reaper.JS_Window_SetStyle",
	"scope": "lua",
	"body": "retval, style = reaper.JS_Window_SetStyle(${1:windowHWND}, ${2:style})$0",
	"description": "Sets and applies a window style.\nstyle may include any combination of standard window styles, such as 'POPUP' for a frameless window, or 'CAPTION,SIZEBOX,SYSMENU' for a standard framed window.\nOn Linux and macOS, 'MAXIMIZE' has not yet been implmented, and the remaining styles may appear slightly different from their WindowsOS counterparts.\n\n"
	},

	"JS_Window_SetTitle lua": {
	"prefix": "reaper.JS_Window_SetTitle",
	"scope": "lua",
	"body": "reaper.JS_Window_SetTitle(${1:windowHWND}, ${2:title})$0",
	"description": "Changes the title of the specified window. Returns true if successful.\n\n"
	},

	"JS_Window_SetZOrder lua": {
	"prefix": "reaper.JS_Window_SetZOrder",
	"scope": "lua",
	"body": "reaper.JS_Window_SetZOrder(${1:windowHWND}, ${2:ZOrder}, ${3:insertAfterHWND})$0",
	"description": "Sets the window Z order.\n* Equivalent to calling JS_Window_SetPos with flags NOMOVE | NOSIZE.\n* Not all the Z orders have been implemented in Linux yet.\nParameters:\n* ZOrder: 'BOTTOM', 'TOPMOST', 'NOTOPMOST', 'TOP', or a window HWND converted to a string, for example by the Lua function tostring.\n* InsertAfterHWND: For compatibility with older versions, this parameter is still available, and is optional. If ZOrder is 'INSERTAFTER', insertAfterHWND must be a handle to the window behind which windowHWND will be placed in the Z order, equivalent to setting ZOrder to this HWND; otherwise, insertAfterHWND is ignored and can be left out (or it can simply be set to the same value as windowHWND).\n\n"
	},

	"JS_Window_Show lua": {
	"prefix": "reaper.JS_Window_Show",
	"scope": "lua",
	"body": "reaper.JS_Window_Show(${1:windowHWND}, ${2:state})$0",
	"description": "Sets the specified window's show state.\nParameters:\n* state: One of the following options: 'SHOW', 'SHOWNA' (or 'SHOWNOACTIVATE'), 'SHOWMINIMIZED', 'HIDE', 'NORMAL', 'SHOWNORMAL', 'SHOWMAXIMIZED', 'SHOWDEFAULT' or 'RESTORE'. On Linux and macOS, only the first four options are fully implemented.\n\n"
	},

	"JS_Window_Update lua": {
	"prefix": "reaper.JS_Window_Update",
	"scope": "lua",
	"body": "reaper.JS_Window_Update(${1:windowHWND})$0",
	"description": "Similar to the Win32 function UpdateWindow.\n\n"
	},

	"JS_Zip_Close lua": {
	"prefix": "reaper.JS_Zip_Close",
	"scope": "lua",
	"body": "reaper.JS_Zip_Close(${1:zipFile}, ${2:zipHandle})$0",
	"description": "Closes the zip archive, using either the file name or the zip handle. Finalizes entries and releases resources.\n\n"
	},

	"JS_Zip_CountEntries lua": {
	"prefix": "reaper.JS_Zip_CountEntries",
	"scope": "lua",
	"body": "reaper.JS_Zip_CountEntries(${1:zipHandle})$0",
	"description": ""
	},

	"JS_Zip_DeleteEntries lua": {
	"prefix": "reaper.JS_Zip_DeleteEntries",
	"scope": "lua",
	"body": "reaper.JS_Zip_DeleteEntries(${1:zipHandle}, ${2:entryNames}, ${3:entryNamesStrLen})$0",
	"description": "Deletes the specified entries from an existing Zip file.\nentryNames is zero-separated and double-zero-terminated.\nReturns the number of deleted entries on success, negative number (< 0) on error.\n\n"
	},

	"JS_Zip_Entry_Close lua": {
	"prefix": "reaper.JS_Zip_Entry_Close",
	"scope": "lua",
	"body": "reaper.JS_Zip_Entry_Close(${1:zipHandle})$0",
	"description": "Closes a zip entry, flushes buffer and releases resources. In WRITE mode, entries must be closed in order to apply and save changes.\nReturns 0 on success, negative number (< 0) on error.\n\n"
	},

	"JS_Zip_Entry_CompressFile lua": {
	"prefix": "reaper.JS_Zip_Entry_CompressFile",
	"scope": "lua",
	"body": "reaper.JS_Zip_Entry_CompressFile(${1:zipHandle}, ${2:inputFile})$0",
	"description": "Compresses the specified file into the zip archive's open entry.\nReturns 0 on success, negative number (< 0) on error.\n\n"
	},

	"JS_Zip_Entry_CompressMemory lua": {
	"prefix": "reaper.JS_Zip_Entry_CompressMemory",
	"scope": "lua",
	"body": "reaper.JS_Zip_Entry_CompressMemory(${1:zipHandle}, ${2:buf}, ${3:buf_size})$0",
	"description": "Compresses the specified memory buffer into the zip archive's open entry.\nReturns 0 on success, negative number (< 0) on error.\n\n"
	},

	"JS_Zip_Entry_ExtractToFile lua": {
	"prefix": "reaper.JS_Zip_Entry_ExtractToFile",
	"scope": "lua",
	"body": "reaper.JS_Zip_Entry_ExtractToFile(${1:zipHandle}, ${2:outputFile})$0",
	"description": "Extracts the zip archive's open entry.\nReturns 0 on success, negative number (< 0) on error.\n\n"
	},

	"JS_Zip_Entry_ExtractToMemory lua": {
	"prefix": "reaper.JS_Zip_Entry_ExtractToMemory",
	"scope": "lua",
	"body": "retval, contents = reaper.JS_Zip_Entry_ExtractToMemory(${1:zipHandle})$0",
	"description": "Extracts and returns the zip archive's open entry.\nReturns the number of bytes extracted on success, negative number (< 0) on error.\n\n"
	},

	"JS_Zip_Entry_Info lua": {
	"prefix": "reaper.JS_Zip_Entry_Info",
	"scope": "lua",
	"body": "retval, name, index, isFolder, size, crc32 = reaper.JS_Zip_Entry_Info(${1:zipHandle})$0",
	"description": "Returns information about the zip archive's open entry.\n\n"
	},

	"JS_Zip_Entry_OpenByIndex lua": {
	"prefix": "reaper.JS_Zip_Entry_OpenByIndex",
	"scope": "lua",
	"body": "reaper.JS_Zip_Entry_OpenByIndex(${1:zipHandle}, ${2:index})$0",
	"description": "Opens a new entry by index in the zip archive.\nThis function is only valid if zip archive was opened in 'r' (readonly) mode.\nReturns 0 on success, negative number on error.\n\n"
	},

	"JS_Zip_Entry_OpenByName lua": {
	"prefix": "reaper.JS_Zip_Entry_OpenByName",
	"scope": "lua",
	"body": "reaper.JS_Zip_Entry_OpenByName(${1:zipHandle}, ${2:entryName})$0",
	"description": "Opens an entry by name in the zip archive.\nFor zip archive opened in 'w' or 'a' mode the function will append a new entry. In readonly mode the function tries to locate an existing entry.\nReturns 0 on success, negative number (< 0) on error.\n\n"
	},

	"JS_Zip_ErrorString lua": {
	"prefix": "reaper.JS_Zip_ErrorString",
	"scope": "lua",
	"body": "errorStr = reaper.JS_Zip_ErrorString(${1:errorNum})$0",
	"description": "Returns a descriptive string for the given error code.\n\n"
	},

	"JS_Zip_Extract lua": {
	"prefix": "reaper.JS_Zip_Extract",
	"scope": "lua",
	"body": "reaper.JS_Zip_Extract(${1:zipFile}, ${2:outputFolder})$0",
	"description": "Extracts an existing Zip file to the specified folder.\nReturns the number of extracted files on success, negative number (< 0) on error.\n\n"
	},

	"JS_Zip_ListAllEntries lua": {
	"prefix": "reaper.JS_Zip_ListAllEntries",
	"scope": "lua",
	"body": "retval, list = reaper.JS_Zip_ListAllEntries(${1:zipHandle})$0",
	"description": "Returns the number of entries and a zero-separated and double-zero-terminated string of entry names.\nOn error, returns a negative number (< 0).\n\n"
	},

	"JS_Zip_Open lua": {
	"prefix": "reaper.JS_Zip_Open",
	"scope": "lua",
	"body": "retval, retval = reaper.JS_Zip_Open(${1:zipFile}, ${2:mode}, ${3:compressionLevel})$0",
	"description": "Opens a zip archive using the given mode, which can be either 'READ' or 'WRITE' (or simply 'r' or 'w').\n* READ: Opens an existing archive for reading/extracting.\n* WRITE: Opens an archive for writing/deleting. If the file doesn't exist, an empty archive will created.\ncompressionLevel is only relevant for WRITE mode, and ranges from 0 (fastest, no compression) to 9 (slowest, best compression), with a default of 6.\nIf successful, returns 0 and a handle to the Zip archive. If failed, returns a negative error code. If the file is already open -- in the given mode -- the existing handle will be returned.\nNOTES:\n* The Zip API functions support Unicode file names and entry names.\n* The original zip specification did not support Unicode. Some applications still use this outdated specification by default, or try to use the local code page. This may lead to incompatibility and incorrect retrieval of file or entry names.\n\n"
	},

	"Llm_Do lua": {
	"prefix": "reaper.Llm_Do",
	"scope": "lua",
	"body": "reaper.Llm_Do(${1:optional_paramIn})$0",
	"description": "Called with parameter value 1 executes one ReaLlm cycle. E.g. for running ReaLlm on custom timer, or deferred. 0 or nothing performs shutdown. Disarming/disabling all monitored inputs and calling with parameter value 1 equals to shutdown.\n\n"
	},

	"Llm_Get lua": {
	"prefix": "reaper.Llm_Get",
	"scope": "lua",
	"body": "buf = reaper.Llm_Get(${1:parmname}, ${2:buf}, ${3:trIn})$0",
	"description": "Get ReaLlm information string. Zero-based indices. Master track index -1. Optional MediaTrack* tr gets results relative to tr. Each line (newline '\n' separated) represents entry. Tracks are separated with ';'. FX are listed after ':' separated with ','. \nP_GRAPH: Mixer routings as network graph in format 'node;neighborhood\n' where node is track, and neighborhood is group of tracks in format 'track;tr#1;tr#2...\n'. Or as 'parent;children\n' where first field is parent and rest are children. Or as multiply linked list where first field is node and rest are links. E.g. '7;1;-1;\n' would mean '8th track is connected to 2nd track and Master track.'\nP_PDCLATENCY: Latency in samples.\nP_PDCLIMIT: Limit in samples.\nP_PDCMODECHECK: Is PDC mode check enabled? '0' or '1'.\nP_REALLM or P_STATE: Current state of ReaLlm as approach vektors with disabled FX in format: 'begin:disabled fx,...;next:fx,...;end:fx,...;\n.' E.g. '3:1,2;0;-1:0\n' would be: 4th track, fx#2 and #3 disabled => 1st track, nofx disabled => Master track, fx#1 disabled.\nP_SAFE: 'Safed' plugins as 'track#:fx#\n' pairs.\nP_VECTOR: Same as P_REALLM without FX information. Faster.\n\n"
	},

	"Llm_Set lua": {
	"prefix": "reaper.Llm_Set",
	"scope": "lua",
	"body": "reaper.Llm_Set(${1:parmname}, ${2:bufIn})$0",
	"description": "Set ReaLlm parameters.\nP_PDCLIMIT: PDC latency limit in audio blocks/buffers.\nP_PDCMODECHECK: Highly experimental. Check Track FX Chain PDC mode during Llm_Do(). '0' or '1'.\n\n"
	},

	"MRP_CalculateEnvelopeHash lua": {
	"prefix": "reaper.MRP_CalculateEnvelopeHash",
	"scope": "lua",
	"body": "reaper.MRP_CalculateEnvelopeHash(${1:env})$0",
	"description": "This function isn't really correct... it calculates a 64 bit hash but returns it as a 32 bit int. Should reimplement this. Or rather, even more confusingly : The hash will be 32 bit when building for 32 bit architecture and 64 bit when building for 64 bit architecture! It comes down to how size_t is of different size between the 32 and 64 bit architectures.\n\n"
	},

	"MRP_CastDoubleToInt lua": {
	"prefix": "reaper.MRP_CastDoubleToInt",
	"scope": "lua",
	"body": "reaper.MRP_CastDoubleToInt(${1:n1}, ${2:n2})$0",
	"description": "add two numbers\n\n"
	},

	"MRP_CreateArray lua": {
	"prefix": "reaper.MRP_CreateArray",
	"scope": "lua",
	"body": "reaper.MRP_CreateArray(${1:size})$0",
	"description": "Create an array of 64 bit floating point numbers. Note that these will leak memory if they are not later destroyed with MRP_DestroyArray!\n\n"
	},

	"MRP_CreateWindow lua": {
	"prefix": "reaper.MRP_CreateWindow",
	"scope": "lua",
	"body": "reaper.MRP_CreateWindow(${1:title})$0",
	"description": "Create window\n\n"
	},

	"MRP_DestroyArray lua": {
	"prefix": "reaper.MRP_DestroyArray",
	"scope": "lua",
	"body": "reaper.MRP_DestroyArray(${1:array})$0",
	"description": "Destroy a previously created MRP_Array\n\n"
	},

	"MRP_DestroyWindow lua": {
	"prefix": "reaper.MRP_DestroyWindow",
	"scope": "lua",
	"body": "reaper.MRP_DestroyWindow(${1:window})$0",
	"description": "Destroy window\n\n"
	},

	"MRP_DoNothing lua": {
	"prefix": "reaper.MRP_DoNothing",
	"scope": "lua",
	"body": "reaper.MRP_DoNothing()\n\n",
	"description": "do nothing, return null\n\n"
	},

	"MRP_DoublePointer lua": {
	"prefix": "reaper.MRP_DoublePointer",
	"scope": "lua",
	"body": "reaper.MRP_DoublePointer(${1:n1}, ${2:n2})$0",
	"description": "add two numbers\n\n"
	},

	"MRP_DoublePointerAsInt lua": {
	"prefix": "reaper.MRP_DoublePointerAsInt",
	"scope": "lua",
	"body": "reaper.MRP_DoublePointerAsInt(${1:n1}, ${2:n2})$0",
	"description": "add two numbers\n\n"
	},

	"MRP_GenerateSine lua": {
	"prefix": "reaper.MRP_GenerateSine",
	"scope": "lua",
	"body": "reaper.MRP_GenerateSine(${1:array}, ${2:samplerate}, ${3:frequency})$0",
	"description": "Generate a sine wave into a MRP_Array\n\n"
	},

	"MRP_GetArrayValue lua": {
	"prefix": "reaper.MRP_GetArrayValue",
	"scope": "lua",
	"body": "reaper.MRP_GetArrayValue(${1:array}, ${2:integer_index})$0",
	"description": "Get MRP_Array element value. No safety checks done for array or index validity, so use at your own peril!\n\n"
	},

	"MRP_GetControlFloatNumber lua": {
	"prefix": "reaper.MRP_GetControlFloatNumber",
	"scope": "lua",
	"body": "reaper.MRP_GetControlFloatNumber(${1:window}, ${2:controlname}, ${3:which})$0",
	"description": "Get a floating point number associated with control. Meaning of 'which' depends on the control targeted.\n\n"
	},

	"MRP_GetControlIntNumber lua": {
	"prefix": "reaper.MRP_GetControlIntNumber",
	"scope": "lua",
	"body": "reaper.MRP_GetControlIntNumber(${1:window}, ${2:controlname}, ${3:which})$0",
	"description": "Get an integer point number associated with control. Meaning of 'which' depends on the control targeted.\n\n"
	},

	"MRP_GetWindowDirty lua": {
	"prefix": "reaper.MRP_GetWindowDirty",
	"scope": "lua",
	"body": "reaper.MRP_GetWindowDirty(${1:window}, ${2:whichdirty})$0",
	"description": "Get window dirty state (ie, if something was changed in the window). which : 0 window size\n\n"
	},

	"MRP_GetWindowPosSizeValue lua": {
	"prefix": "reaper.MRP_GetWindowPosSizeValue",
	"scope": "lua",
	"body": "reaper.MRP_GetWindowPosSizeValue(${1:window}, ${2:which})$0",
	"description": "Get window geometry values. which : 0 x, 1 y, 2 w, 3 h\n\n"
	},

	"MRP_IntPointer lua": {
	"prefix": "reaper.MRP_IntPointer",
	"scope": "lua",
	"body": "reaper.MRP_IntPointer(${1:n1}, ${2:n2})$0",
	"description": "add two numbers\n\n"
	},

	"MRP_MultiplyArrays lua": {
	"prefix": "reaper.MRP_MultiplyArrays",
	"scope": "lua",
	"body": "reaper.MRP_MultiplyArrays(${1:MRP_Array array1MRP_Array  array2MRP_Array  array3})$0",
	"description": "Multiply 2 MRP_Arrays of same length. Result is written to 3rd array.\n\n"
	},

	"MRP_MultiplyArraysMT lua": {
	"prefix": "reaper.MRP_MultiplyArraysMT",
	"scope": "lua",
	"body": "reaper.MRP_MultiplyArraysMT(${1:MRP_Array array1MRP_Array  array2MRP_Array array3})$0",
	"description": "Multiply 2 MRP_Arrays of same length. Result is written to 3rd array. Uses multiple threads.\n\n"
	},

	"MRP_ReturnMediaItem lua": {
	"prefix": "reaper.MRP_ReturnMediaItem",
	"scope": "lua",
	"body": "reaper.MRP_ReturnMediaItem()\n\n",
	"description": "return media item\n\n"
	},

	"MRP_SendCommandString lua": {
	"prefix": "reaper.MRP_SendCommandString",
	"scope": "lua",
	"body": "reaper.MRP_SendCommandString(${1:window}, ${2:controlname}, ${3:commandtext})$0",
	"description": "Send a command message to control. Currently only the envelope control understands some messages.\n\n"
	},

	"MRP_SetArrayValue lua": {
	"prefix": "reaper.MRP_SetArrayValue",
	"scope": "lua",
	"body": "reaper.MRP_SetArrayValue(${1:array}, ${2:integer_index}, ${3:number_value})$0",
	"description": "Set MRP_Array element value. No safety checks done for array or index validity, so use at your own peril!\n\n"
	},

	"MRP_SetControlBounds lua": {
	"prefix": "reaper.MRP_SetControlBounds",
	"scope": "lua",
	"body": "reaper.MRP_SetControlBounds(${1:window}, ${2:name}, ${3:x}, ${4:y}, ${5:w}, ${6:h})$0",
	"description": "Set MRP control position and size\n\n"
	},

	"MRP_SetControlFloatNumber lua": {
	"prefix": "reaper.MRP_SetControlFloatNumber",
	"scope": "lua",
	"body": "reaper.MRP_SetControlFloatNumber(${1:window}, ${2:controlname}, ${3:which}, ${4:value})$0",
	"description": "Set a floating point number associated with control. Meaning of 'which' depends on the control targeted.\n\n"
	},

	"MRP_SetControlIntNumber lua": {
	"prefix": "reaper.MRP_SetControlIntNumber",
	"scope": "lua",
	"body": "reaper.MRP_SetControlIntNumber(${1:window}, ${2:controlname}, ${3:which}, ${4:value})$0",
	"description": "Set an integer point number associated with control. Meaning of 'which' depends on the control targeted.\n\n"
	},

	"MRP_SetControlString lua": {
	"prefix": "reaper.MRP_SetControlString",
	"scope": "lua",
	"body": "reaper.MRP_SetControlString(${1:window}, ${2:controlname}, ${3:which}, ${4:text})$0",
	"description": "Set a text property associated with control. Meaning of 'which' depends on the control targeted.\n\n"
	},

	"MRP_SetWindowDirty lua": {
	"prefix": "reaper.MRP_SetWindowDirty",
	"scope": "lua",
	"body": "reaper.MRP_SetWindowDirty(${1:window}, ${2:which}, ${3:state})$0",
	"description": "Set window dirty state (ie, if something was changed in the controls)\n\n"
	},

	"MRP_WindowAddControl lua": {
	"prefix": "reaper.MRP_WindowAddControl",
	"scope": "lua",
	"body": "reaper.MRP_WindowAddControl(${1:window}, ${2:controltypename}, ${3:objectname})$0",
	"description": "Add a control to window. Controltypename is the type of control to create. Objectname must be a unique id\n\n"
	},

	"MRP_WindowClearDirtyControls lua": {
	"prefix": "reaper.MRP_WindowClearDirtyControls",
	"scope": "lua",
	"body": "reaper.MRP_WindowClearDirtyControls(${1:window})$0",
	"description": "Clears the dirty states of the controls in a window.\n\n"
	},

	"MRP_WindowIsClosed lua": {
	"prefix": "reaper.MRP_WindowIsClosed",
	"scope": "lua",
	"body": "reaper.MRP_WindowIsClosed(${1:window})$0",
	"description": "Returns if the window has been closed and the ReaScript defer loop should likely be exited\n\n"
	},

	"MRP_WindowIsDirtyControl lua": {
	"prefix": "reaper.MRP_WindowIsDirtyControl",
	"scope": "lua",
	"body": "reaper.MRP_WindowIsDirtyControl(${1:window}, ${2:controlname})$0",
	"description": "Returns true if control was manipulated\n\n"
	},

	"MRP_WindowSetTitle lua": {
	"prefix": "reaper.MRP_WindowSetTitle",
	"scope": "lua",
	"body": "reaper.MRP_WindowSetTitle(${1:window}, ${2:title})$0",
	"description": "Set window title\n\n"
	},

	"MRP_WriteArrayToFile lua": {
	"prefix": "reaper.MRP_WriteArrayToFile",
	"scope": "lua",
	"body": "reaper.MRP_WriteArrayToFile(${1:array}, ${2:filename}, ${3:samplerate})$0",
	"description": "Write MRP_Array to disk as a 32 bit floating point mono wav file\n\n"
	},

	"NF_AnalyzeMediaItemPeakAndRMS lua": {
	"prefix": "reaper.NF_AnalyzeMediaItemPeakAndRMS",
	"scope": "lua",
	"body": "reaper.NF_AnalyzeMediaItemPeakAndRMS(${1:item}, ${2:windowSize}, ${3:reaper.array_peaks}, ${4:reaper.array_peakpositions}, ${5:reaper.array_RMSs}, ${6:reaper.array_RMSpositions})$0",
	"description": "This function combines all other NF_Peak/RMS functions in a single one and additionally returns peak RMS positions. Lua example code here. Note: It's recommended to use this function with ReaScript/Lua as it provides reaper.array objects. If using this function with other scripting languages, you must provide arrays in the reaper.array format.\n\n"
	},

	"NF_AnalyzeTakeLoudness lua": {
	"prefix": "reaper.NF_AnalyzeTakeLoudness",
	"scope": "lua",
	"body": "retval, lufsIntegrated, range, number_truePeak, truePeakPos, shortTermMax, momentaryMax = reaper.NF_AnalyzeTakeLoudness(${1:take}, ${2:analyzeTruePeak})$0",
	"description": "Full loudness analysis. retval: returns true on successful analysis, false on MIDI take or when analysis failed for some reason. analyzeTruePeak=true: Also do true peak analysis. Returns true peak value in dBTP and true peak position (relative to item position). Considerably slower than without true peak analysis (since it uses oversampling). Note: Short term uses a time window of 3 sec. for calculation. So for items shorter than this shortTermMaxOut can't be calculated correctly. Momentary uses a time window of 0.4 sec. \n\n"
	},

	"NF_AnalyzeTakeLoudness2 lua": {
	"prefix": "reaper.NF_AnalyzeTakeLoudness2",
	"scope": "lua",
	"body": "retval, lufsIntegrated, range, number_truePeak, truePeakPos, shortTermMax, momentaryMax, shortTermMaxPos, momentaryMaxPos = reaper.NF_AnalyzeTakeLoudness2(${1:take}, ${2:analyzeTruePeak})$0",
	"description": "Same as NF_AnalyzeTakeLoudness but additionally returns shortTermMaxPos and momentaryMaxPos (in absolute project time). Note: shortTermMaxPos and momentaryMaxPos indicate the beginning of time intervalls, (3 sec. and 0.4 sec. resp.). \n\n"
	},

	"NF_AnalyzeTakeLoudness_IntegratedOnly lua": {
	"prefix": "reaper.NF_AnalyzeTakeLoudness_IntegratedOnly",
	"scope": "lua",
	"body": "retval, lufsIntegrated = reaper.NF_AnalyzeTakeLoudness_IntegratedOnly(${1:take})$0",
	"description": "Does LUFS integrated analysis only. Faster than full loudness analysis (NF_AnalyzeTakeLoudness) . Use this if only LUFS integrated is required. Take vol. env. is taken into account. See: Signal flow\n\n"
	},

	"NF_Base64_Decode lua": {
	"prefix": "reaper.NF_Base64_Decode",
	"scope": "lua",
	"body": "retval, decodedStr = reaper.NF_Base64_Decode(${1:base64Str})$0",
	"description": "Returns true on success.\n\n"
	},

	"NF_Base64_Encode lua": {
	"prefix": "reaper.NF_Base64_Encode",
	"scope": "lua",
	"body": "encodedStr = reaper.NF_Base64_Encode(${1:str}, ${2:usePadding})$0",
	"description": "Input string may contain null bytes in REAPER 6.44 or newer. Note: Doesn't allow padding in the middle (e.g. concatenated encoded strings), doesn't allow newlines.\n\n"
	},

	"NF_ClearGlobalStartupAction lua": {
	"prefix": "reaper.NF_ClearGlobalStartupAction",
	"scope": "lua",
	"body": "reaper.NF_ClearGlobalStartupAction()\n\n",
	"description": "Returns true if global startup action was cleared successfully.\n\n"
	},

	"NF_ClearProjectStartupAction lua": {
	"prefix": "reaper.NF_ClearProjectStartupAction",
	"scope": "lua",
	"body": "reaper.NF_ClearProjectStartupAction()\n\n",
	"description": "Returns true if project startup action was cleared successfully.\n\n"
	},

	"NF_ClearProjectTrackSelectionAction lua": {
	"prefix": "reaper.NF_ClearProjectTrackSelectionAction",
	"scope": "lua",
	"body": "reaper.NF_ClearProjectTrackSelectionAction()\n\n",
	"description": "Returns true if project track selection action was cleared successfully.\n\n"
	},

	"NF_DeleteTakeFromItem lua": {
	"prefix": "reaper.NF_DeleteTakeFromItem",
	"scope": "lua",
	"body": "reaper.NF_DeleteTakeFromItem(${1:item}, ${2:takeIdx})$0",
	"description": "Deletes a take from an item. takeIdx is zero-based. Returns true on success.\n\n"
	},

	"NF_GetGlobalStartupAction lua": {
	"prefix": "reaper.NF_GetGlobalStartupAction",
	"scope": "lua",
	"body": "retval, desc, cmdId = reaper.NF_GetGlobalStartupAction()\n\n",
	"description": "Gets action description and command ID number (for native actions) or named command IDs / identifier strings (for extension actions /ReaScripts) if global startup action is set, otherwise empty string. Returns false on failure.\n\n"
	},

	"NF_GetMediaItemAverageRMS lua": {
	"prefix": "reaper.NF_GetMediaItemAverageRMS",
	"scope": "lua",
	"body": "reaper.NF_GetMediaItemAverageRMS(${1:item})$0",
	"description": "Returns the average overall (non-windowed) dB RMS level of active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. \nReturns -150.0 if MIDI take or empty item.\n\n"
	},

	"NF_GetMediaItemMaxPeak lua": {
	"prefix": "reaper.NF_GetMediaItemMaxPeak",
	"scope": "lua",
	"body": "reaper.NF_GetMediaItemMaxPeak(${1:item})$0",
	"description": "Returns the greatest max. peak value in dBFS of all active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. \nReturns -150.0 if MIDI take or empty item.\n\n"
	},

	"NF_GetMediaItemMaxPeakAndMaxPeakPos lua": {
	"prefix": "reaper.NF_GetMediaItemMaxPeakAndMaxPeakPos",
	"scope": "lua",
	"body": "retval, maxPeakPos = reaper.NF_GetMediaItemMaxPeakAndMaxPeakPos(${1:item})$0",
	"description": "See NF_GetMediaItemMaxPeak, additionally returns maxPeakPos (relative to item position).\n\n"
	},

	"NF_GetMediaItemPeakRMS_NonWindowed lua": {
	"prefix": "reaper.NF_GetMediaItemPeakRMS_NonWindowed",
	"scope": "lua",
	"body": "reaper.NF_GetMediaItemPeakRMS_NonWindowed(${1:item})$0",
	"description": "Returns the greatest overall (non-windowed) dB RMS peak level of all active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. \nReturns -150.0 if MIDI take or empty item.\n\n"
	},

	"NF_GetMediaItemPeakRMS_Windowed lua": {
	"prefix": "reaper.NF_GetMediaItemPeakRMS_Windowed",
	"scope": "lua",
	"body": "reaper.NF_GetMediaItemPeakRMS_Windowed(${1:item})$0",
	"description": "Returns the average dB RMS peak level of all active channels of an audio item active take, post item gain, post take volume envelope, post-fade, pre fader, pre item FX. \nObeys 'Window size for peak RMS' setting in 'SWS: Set RMS analysis/normalize options' for calculation. Returns -150.0 if MIDI take or empty item.\n\n"
	},

	"NF_GetProjectStartupAction lua": {
	"prefix": "reaper.NF_GetProjectStartupAction",
	"scope": "lua",
	"body": "retval, desc, cmdId = reaper.NF_GetProjectStartupAction()\n\n",
	"description": "Gets action description and command ID number (for native actions) or named command IDs / identifier strings (for extension actions /ReaScripts) if project startup action is set, otherwise empty string. Returns false on failure.\n\n"
	},

	"NF_GetProjectTrackSelectionAction lua": {
	"prefix": "reaper.NF_GetProjectTrackSelectionAction",
	"scope": "lua",
	"body": "retval, desc, cmdId = reaper.NF_GetProjectTrackSelectionAction()\n\n",
	"description": "Gets action description and command ID number (for native actions) or named command IDs / identifier strings (for extension actions /ReaScripts) if project track selection action is set, otherwise empty string. Returns false on failure.\n\n"
	},

	"NF_GetSWSMarkerRegionSub lua": {
	"prefix": "reaper.NF_GetSWSMarkerRegionSub",
	"scope": "lua",
	"body": "reaper.NF_GetSWSMarkerRegionSub(${1:markerRegionIdx})$0",
	"description": "Returns SWS/S&M marker/region subtitle. markerRegionIdx: Refers to index that can be passed to EnumProjectMarkers (not displayed marker/region index). Returns empty string if marker/region with specified index not found or marker/region subtitle not set. Lua code example here.\n\n"
	},

	"NF_GetSWSTrackNotes lua": {
	"prefix": "reaper.NF_GetSWSTrackNotes",
	"scope": "lua",
	"body": "reaper.NF_GetSWSTrackNotes(${1:track})$0",
	"description": ""
	},

	"NF_GetSWS_RMSoptions lua": {
	"prefix": "reaper.NF_GetSWS_RMSoptions",
	"scope": "lua",
	"body": "target, windowSize = reaper.NF_GetSWS_RMSoptions()\n\n",
	"description": "Get SWS analysis/normalize options. See NF_SetSWS_RMSoptions.\n\n"
	},

	"NF_ReadAudioFileBitrate lua": {
	"prefix": "reaper.NF_ReadAudioFileBitrate",
	"scope": "lua",
	"body": "reaper.NF_ReadAudioFileBitrate(${1:fn})$0",
	"description": "Returns the bitrate of an audio file in kb/s if available (0 otherwise). For supported filetypes see TagLib::AudioProperties::bitrate.\n\n"
	},

	"NF_ScrollHorizontallyByPercentage lua": {
	"prefix": "reaper.NF_ScrollHorizontallyByPercentage",
	"scope": "lua",
	"body": "reaper.NF_ScrollHorizontallyByPercentage(${1:amount})$0",
	"description": "100 means scroll one page. Negative values scroll left.\n\n"
	},

	"NF_SetGlobalStartupAction lua": {
	"prefix": "reaper.NF_SetGlobalStartupAction",
	"scope": "lua",
	"body": "reaper.NF_SetGlobalStartupAction(${1:str})$0",
	"description": "Returns true if global startup action was set successfully (i.e. valid action ID). Note: For SWS / S&M actions and macros / scripts, you must use identifier strings (e.g. '_SWS_ABOUT', '_f506bc780a0ab34b8fdedb67ed5d3649'), not command IDs (e.g. '47145').\nTip: to copy such identifiers, right-click the action in the Actions window > Copy selected action cmdID / identifier string.\nNOnly works for actions / scripts from Main action section.\n\n"
	},

	"NF_SetProjectStartupAction lua": {
	"prefix": "reaper.NF_SetProjectStartupAction",
	"scope": "lua",
	"body": "reaper.NF_SetProjectStartupAction(${1:str})$0",
	"description": "Returns true if project startup action was set successfully (i.e. valid action ID). Note: For SWS / S&M actions and macros / scripts, you must use identifier strings (e.g. '_SWS_ABOUT', '_f506bc780a0ab34b8fdedb67ed5d3649'), not command IDs (e.g. '47145').\nTip: to copy such identifiers, right-click the action in the Actions window > Copy selected action cmdID / identifier string.\nOnly works for actions / scripts from Main action section. Project must be saved after setting project startup action to be persistent.\n\n"
	},

	"NF_SetProjectTrackSelectionAction lua": {
	"prefix": "reaper.NF_SetProjectTrackSelectionAction",
	"scope": "lua",
	"body": "reaper.NF_SetProjectTrackSelectionAction(${1:str})$0",
	"description": "Returns true if project track selection action was set successfully (i.e. valid action ID). Note: For SWS / S&M actions and macros / scripts, you must use identifier strings (e.g. '_SWS_ABOUT', '_f506bc780a0ab34b8fdedb67ed5d3649'), not command IDs (e.g. '47145').\nTip: to copy such identifiers, right-click the action in the Actions window > Copy selected action cmdID / identifier string.\nOnly works for actions / scripts from Main action section. Project must be saved after setting project track selection action to be persistent.\n\n"
	},

	"NF_SetSWSMarkerRegionSub lua": {
	"prefix": "reaper.NF_SetSWSMarkerRegionSub",
	"scope": "lua",
	"body": "reaper.NF_SetSWSMarkerRegionSub(${1:markerRegionSub}, ${2:markerRegionIdx})$0",
	"description": "Set SWS/S&M marker/region subtitle. markerRegionIdx: Refers to index that can be passed to EnumProjectMarkers (not displayed marker/region index). Returns true if subtitle is set successfully (i.e. marker/region with specified index is present in project). Lua code example here.\n\n"
	},

	"NF_SetSWSTrackNotes lua": {
	"prefix": "reaper.NF_SetSWSTrackNotes",
	"scope": "lua",
	"body": "reaper.NF_SetSWSTrackNotes(${1:track}, ${2:str})$0",
	"description": ""
	},

	"NF_SetSWS_RMSoptions lua": {
	"prefix": "reaper.NF_SetSWS_RMSoptions",
	"scope": "lua",
	"body": "reaper.NF_SetSWS_RMSoptions(${1:targetLevel}, ${2:windowSize})$0",
	"description": "Set SWS analysis/normalize options (same as running action 'SWS: Set RMS analysis/normalize options'). targetLevel: target RMS normalize level (dB), windowSize: window size for peak RMS (sec.)\n\n"
	},

	"NF_TakeFX_GetFXModuleName lua": {
	"prefix": "reaper.NF_TakeFX_GetFXModuleName",
	"scope": "lua",
	"body": "retval, name = reaper.NF_TakeFX_GetFXModuleName(${1:item}, ${2:fx})$0",
	"description": "Deprecated, see TakeFX_GetNamedConfigParm/'fx_ident' (v6.37+). See BR_TrackFX_GetFXModuleName. fx: counted consecutively across all takes (zero-based).\n\n"
	},

	"NF_UpdateSWSMarkerRegionSubWindow lua": {
	"prefix": "reaper.NF_UpdateSWSMarkerRegionSubWindow",
	"scope": "lua",
	"body": "reaper.NF_UpdateSWSMarkerRegionSubWindow()\n\n",
	"description": "Redraw the Notes window (call if you've changed a subtitle via NF_SetSWSMarkerRegionSub which is currently displayed in the Notes window and you want to appear the new subtitle immediately.)\n\n"
	},

	"NF_Win32_GetSystemMetrics lua": {
	"prefix": "reaper.NF_Win32_GetSystemMetrics",
	"scope": "lua",
	"body": "reaper.NF_Win32_GetSystemMetrics(${1:nIndex})$0",
	"description": "Equivalent to win32 API GetSystemMetrics(). Note: Only SM_C[XY]SCREEN, SM_C[XY][HV]SCROLL and SM_CYMENU are currently supported on macOS and Linux as of REAPER 6.68. Check the SWELL source code for up-to-date support information (swell-wnd.mm, swell-wnd-generic.cpp).\n\n"
	},

	"RDNA_GetMediaSourceMetadata lua": {
	"prefix": "reaper.RDNA_GetMediaSourceMetadata",
	"scope": "lua",
	"body": "retval, buf = reaper.RDNA_GetMediaSourceMetadata(${1:src}, ${2:metaType}, ${3:key}, ${4:buf}, ${5:bufSize})$0",
	"description": "Get the value of metadata from media source(.wav only). metaType=BWF,IXML,INFO,CART, key=MetadataID(eg.INAM,IART,... of INFO)\n\n"
	},

	"ReaPack_AboutInstalledPackage lua": {
	"prefix": "reaper.ReaPack_AboutInstalledPackage",
	"scope": "lua",
	"body": "reaper.ReaPack_AboutInstalledPackage(${1:entry})$0",
	"description": "Show the about dialog of the given package entry.\nThe repository index is downloaded asynchronously if the cached copy doesn't exist or is older than one week.\n\n"
	},

	"ReaPack_AboutRepository lua": {
	"prefix": "reaper.ReaPack_AboutRepository",
	"scope": "lua",
	"body": "reaper.ReaPack_AboutRepository(${1:repoName})$0",
	"description": "Show the about dialog of the given repository. Returns true if the repository exists in the user configuration.\nThe repository index is downloaded asynchronously if the cached copy doesn't exist or is older than one week.\n\n"
	},

	"ReaPack_AddSetRepository lua": {
	"prefix": "reaper.ReaPack_AddSetRepository",
	"scope": "lua",
	"body": "retval, error = reaper.ReaPack_AddSetRepository(${1:name}, ${2:url}, ${3:enable}, ${4:autoInstall})$0",
	"description": "Add or modify a repository. Set url to nullptr (or empty string in Lua) to keep the existing URL. Call ReaPack_ProcessQueue(true) when done to process the new list and update the GUI.\nautoInstall: usually set to 2 (obey user setting).\n\n"
	},

	"ReaPack_BrowsePackages lua": {
	"prefix": "reaper.ReaPack_BrowsePackages",
	"scope": "lua",
	"body": "reaper.ReaPack_BrowsePackages(${1:filter})$0",
	"description": "Opens the package browser with the given filter string.\n\n"
	},

	"ReaPack_CompareVersions lua": {
	"prefix": "reaper.ReaPack_CompareVersions",
	"scope": "lua",
	"body": "retval, error = reaper.ReaPack_CompareVersions(${1:ver1}, ${2:ver2})$0",
	"description": "Returns 0 if both versions are equal, a positive value if ver1 is higher than ver2 and a negative value otherwise.\n\n"
	},

	"ReaPack_EnumOwnedFiles lua": {
	"prefix": "reaper.ReaPack_EnumOwnedFiles",
	"scope": "lua",
	"body": "retval, path, sections, type = reaper.ReaPack_EnumOwnedFiles(${1:entry}, ${2:index})$0",
	"description": "Enumerate the files owned by the given package. Returns false when there is no more data.\nsections: 0=not in action list, &1=main, &2=midi editor, &4=midi inline editor\ntype: see ReaPack_GetEntryInfo.\n\n"
	},

	"ReaPack_FreeEntry lua": {
	"prefix": "reaper.ReaPack_FreeEntry",
	"scope": "lua",
	"body": "reaper.ReaPack_FreeEntry(${1:entry})$0",
	"description": "Free resources allocated for the given package entry.\n\n"
	},

	"ReaPack_GetEntryInfo lua": {
	"prefix": "reaper.ReaPack_GetEntryInfo",
	"scope": "lua",
	"body": "retval, repo, cat, pkg, desc, type, ver, author, flags, fileCount = reaper.ReaPack_GetEntryInfo(${1:entry})$0",
	"description": "Get the repository name, category, package name, package description, package type, the currently installed version, author name, flags (&1=Pinned, &2=BleedingEdge) and how many files are owned by the given package entry.\ntype: 1=script, 2=extension, 3=effect, 4=data, 5=theme, 6=langpack, 7=webinterface\n\n"
	},

	"ReaPack_GetOwner lua": {
	"prefix": "reaper.ReaPack_GetOwner",
	"scope": "lua",
	"body": "retval, error = reaper.ReaPack_GetOwner(${1:fn})$0",
	"description": "Returns the package entry owning the given file.\nDelete the returned object from memory after use with ReaPack_FreeEntry.\n\n"
	},

	"ReaPack_GetRepositoryInfo lua": {
	"prefix": "reaper.ReaPack_GetRepositoryInfo",
	"scope": "lua",
	"body": "retval, url, enabled, autoInstall = reaper.ReaPack_GetRepositoryInfo(${1:name})$0",
	"description": "Get the infos of the given repository.\nautoInstall: 0=manual, 1=when sychronizing, 2=obey user setting\n\n"
	},

	"ReaPack_ProcessQueue lua": {
	"prefix": "reaper.ReaPack_ProcessQueue",
	"scope": "lua",
	"body": "reaper.ReaPack_ProcessQueue(${1:refreshUI})$0",
	"description": "Run pending operations and save the configuration file. If refreshUI is true the browser and manager windows are guaranteed to be refreshed (otherwise it depends on which operations are in the queue).\n\n"
	},

	"SNM_AddReceive lua": {
	"prefix": "reaper.SNM_AddReceive",
	"scope": "lua",
	"body": "reaper.SNM_AddReceive(${1:src}, ${2:dest}, ${3:type})$0",
	"description": "[S&M] Deprecated, see CreateTrackSend (v5.15pre1+). Adds a receive. Returns false if nothing updated.\ntype -1=Default type (user preferences), 0=Post-Fader (Post-Pan), 1=Pre-FX, 2=deprecated, 3=Pre-Fader (Post-FX).\nNote: obeys default sends preferences, supports frozen tracks, etc..\n\n"
	},

	"SNM_AddTCPFXParm lua": {
	"prefix": "reaper.SNM_AddTCPFXParm",
	"scope": "lua",
	"body": "reaper.SNM_AddTCPFXParm(${1:tr}, ${2:fxId}, ${3:prmId})$0",
	"description": "[S&M] Add an FX parameter knob in the TCP. Returns false if nothing updated (invalid parameters, knob already present, etc..)\n\n"
	},

	"SNM_CreateFastString lua": {
	"prefix": "reaper.SNM_CreateFastString",
	"scope": "lua",
	"body": "reaper.SNM_CreateFastString(${1:str})$0",
	"description": "[S&M] Instantiates a new 'fast string'. You must delete this string, see SNM_DeleteFastString.\n\n"
	},

	"SNM_DeleteFastString lua": {
	"prefix": "reaper.SNM_DeleteFastString",
	"scope": "lua",
	"body": "reaper.SNM_DeleteFastString(${1:str})$0",
	"description": "[S&M] Deletes a 'fast string' instance.\n\n"
	},

	"SNM_GetDoubleConfigVar lua": {
	"prefix": "reaper.SNM_GetDoubleConfigVar",
	"scope": "lua",
	"body": "reaper.SNM_GetDoubleConfigVar(${1:varname}, ${2:errvalue})$0",
	"description": "[S&M] Returns a floating-point preference (look in project prefs first, then in general prefs). Returns errvalue if failed (e.g. varname not found).\n\n"
	},

	"SNM_GetFastString lua": {
	"prefix": "reaper.SNM_GetFastString",
	"scope": "lua",
	"body": "reaper.SNM_GetFastString(${1:str})$0",
	"description": "[S&M] Gets the 'fast string' content.\n\n"
	},

	"SNM_GetFastStringLength lua": {
	"prefix": "reaper.SNM_GetFastStringLength",
	"scope": "lua",
	"body": "reaper.SNM_GetFastStringLength(${1:str})$0",
	"description": "[S&M] Gets the 'fast string' length.\n\n"
	},

	"SNM_GetIntConfigVar lua": {
	"prefix": "reaper.SNM_GetIntConfigVar",
	"scope": "lua",
	"body": "reaper.SNM_GetIntConfigVar(${1:varname}, ${2:errvalue})$0",
	"description": "[S&M] Returns an integer preference (look in project prefs first, then in general prefs). Returns errvalue if failed (e.g. varname not found).\n\n"
	},

	"SNM_GetLongConfigVar lua": {
	"prefix": "reaper.SNM_GetLongConfigVar",
	"scope": "lua",
	"body": "retval, high, low = reaper.SNM_GetLongConfigVar(${1:varname})$0",
	"description": "[S&M] Reads a 64-bit integer preference split in two 32-bit integers (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found).\n\n"
	},

	"SNM_GetMediaItemTakeByGUID lua": {
	"prefix": "reaper.SNM_GetMediaItemTakeByGUID",
	"scope": "lua",
	"body": "reaper.SNM_GetMediaItemTakeByGUID(${1:project}, ${2:guid})$0",
	"description": "[S&M] Gets a take by GUID as string. The GUID must be enclosed in braces {}. To get take GUID as string, see BR_GetMediaItemTakeGUID\n\n"
	},

	"SNM_GetProjectMarkerName lua": {
	"prefix": "reaper.SNM_GetProjectMarkerName",
	"scope": "lua",
	"body": "reaper.SNM_GetProjectMarkerName(${1:proj}, ${2:num}, ${3:boolean_name})$0",
	"description": "[S&M] Gets a marker/region name. Returns true if marker/region found.\n\n"
	},

	"SNM_GetSetObjectState lua": {
	"prefix": "reaper.SNM_GetSetObjectState",
	"scope": "lua",
	"body": "reaper.SNM_GetSetObjectState(${1:identifier_state}, ${2:setnewvalue}, ${3:wantminimalstate})$0",
	"description": "[S&M] Gets or sets the state of a track, an item or an envelope. The state chunk size is unlimited. Returns false if failed.\nWhen getting a track state (and when you are not interested in FX data), you can use wantminimalstate=true to radically reduce the length of the state. Do not set such minimal states back though, this is for read-only applications!\nNote: unlike the native GetSetObjectState, calling to FreeHeapPtr() is not required.\n\n"
	},

	"SNM_GetSetSourceState lua": {
	"prefix": "reaper.SNM_GetSetSourceState",
	"scope": "lua",
	"body": "reaper.SNM_GetSetSourceState(${1:item}, ${2:integer_state}, ${3:setnewvalue})$0",
	"description": "[S&M] Gets or sets a take source state. Returns false if failed. Use takeidx=-1 to get/alter the active take.\nNote: this function does not use a MediaItem_Take* param in order to manage empty takes (i.e. takes with MediaItem_Take*==NULL), see SNM_GetSetSourceState2.\n\n"
	},

	"SNM_GetSetSourceState2 lua": {
	"prefix": "reaper.SNM_GetSetSourceState2",
	"scope": "lua",
	"body": "reaper.SNM_GetSetSourceState2(${1:MediaItem_Take_state}, ${2:setnewvalue})$0",
	"description": "[S&M] Gets or sets a take source state. Returns false if failed.\nNote: this function cannot deal with empty takes, see SNM_GetSetSourceState.\n\n"
	},

	"SNM_GetSourceType lua": {
	"prefix": "reaper.SNM_GetSourceType",
	"scope": "lua",
	"body": "reaper.SNM_GetSourceType(${1:MediaItem_Take_type})$0",
	"description": "[S&M] Deprecated, see GetMediaSourceType. Gets the source type of a take. Returns false if failed (e.g. take with empty source, etc..)\n\n"
	},

	"SNM_MoveOrRemoveTrackFX lua": {
	"prefix": "reaper.SNM_MoveOrRemoveTrackFX",
	"scope": "lua",
	"body": "reaper.SNM_MoveOrRemoveTrackFX(${1:tr}, ${2:fxId}, ${3:what})$0",
	"description": "[S&M] Deprecated, see TakeFX_/TrackFX_ CopyToTrack/Take, TrackFX/TakeFX _Delete (v5.95pre2+). Move or removes a track FX. Returns true if tr has been updated.\nfxId: fx index in chain or -1 for the selected fx. what: 0 to remove, -1 to move fx up in chain, 1 to move fx down in chain.\n\n"
	},

	"SNM_ReadMediaFileTag lua": {
	"prefix": "reaper.SNM_ReadMediaFileTag",
	"scope": "lua",
	"body": "retval, tagval = reaper.SNM_ReadMediaFileTag(${1:fn}, ${2:tag})$0",
	"description": "[S&M] Reads a media file tag. Supported tags: 'artist', 'album', 'genre', 'comment', 'title', 'track' (track number) or 'year'. Returns false if tag was not found. See SNM_TagMediaFile.\n\n"
	},

	"SNM_RemoveReceive lua": {
	"prefix": "reaper.SNM_RemoveReceive",
	"scope": "lua",
	"body": "reaper.SNM_RemoveReceive(${1:tr}, ${2:rcvidx})$0",
	"description": "[S&M] Deprecated, see RemoveTrackSend (v5.15pre1+). Removes a receive. Returns false if nothing updated.\n\n"
	},

	"SNM_RemoveReceivesFrom lua": {
	"prefix": "reaper.SNM_RemoveReceivesFrom",
	"scope": "lua",
	"body": "reaper.SNM_RemoveReceivesFrom(${1:tr}, ${2:srctr})$0",
	"description": "[S&M] Removes all receives from srctr. Returns false if nothing updated.\n\n"
	},

	"SNM_SelectResourceBookmark lua": {
	"prefix": "reaper.SNM_SelectResourceBookmark",
	"scope": "lua",
	"body": "reaper.SNM_SelectResourceBookmark(${1:name})$0",
	"description": "[S&M] Select a bookmark of the Resources window. Returns the related bookmark id (or -1 if failed).\n\n"
	},

	"SNM_SetDoubleConfigVar lua": {
	"prefix": "reaper.SNM_SetDoubleConfigVar",
	"scope": "lua",
	"body": "reaper.SNM_SetDoubleConfigVar(${1:varname}, ${2:newvalue})$0",
	"description": "[S&M] Sets a floating-point preference (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found or newvalue out of range).\n\n"
	},

	"SNM_SetFastString lua": {
	"prefix": "reaper.SNM_SetFastString",
	"scope": "lua",
	"body": "reaper.SNM_SetFastString(${1:str}, ${2:newstr})$0",
	"description": "[S&M] Sets the 'fast string' content. Returns str for facility.\n\n"
	},

	"SNM_SetIntConfigVar lua": {
	"prefix": "reaper.SNM_SetIntConfigVar",
	"scope": "lua",
	"body": "reaper.SNM_SetIntConfigVar(${1:varname}, ${2:newvalue})$0",
	"description": "[S&M] Sets an integer preference (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found or newvalue out of range).\n\n"
	},

	"SNM_SetLongConfigVar lua": {
	"prefix": "reaper.SNM_SetLongConfigVar",
	"scope": "lua",
	"body": "reaper.SNM_SetLongConfigVar(${1:varname}, ${2:newHighValue}, ${3:newLowValue})$0",
	"description": "[S&M] Sets a 64-bit integer preference from two 32-bit integers (look in project prefs first, then in general prefs). Returns false if failed (e.g. varname not found).\n\n"
	},

	"SNM_SetProjectMarker lua": {
	"prefix": "reaper.SNM_SetProjectMarker",
	"scope": "lua",
	"body": "reaper.SNM_SetProjectMarker(${1:proj}, ${2:num}, ${3:isrgn}, ${4:pos}, ${5:rgnend}, ${6:name}, ${7:color})$0",
	"description": "[S&M] Deprecated, see SetProjectMarker4 -- Same function as SetProjectMarker3() except it can set empty names ''.\n\n"
	},

	"SNM_SetStringConfigVar lua": {
	"prefix": "reaper.SNM_SetStringConfigVar",
	"scope": "lua",
	"body": "reaper.SNM_SetStringConfigVar(${1:varname}, ${2:newvalue})$0",
	"description": "[S&M] Sets a string preference (general prefs only). Returns false if failed (e.g. varname not found or value too long). See get_config_var_string.\n\n"
	},

	"SNM_TagMediaFile lua": {
	"prefix": "reaper.SNM_TagMediaFile",
	"scope": "lua",
	"body": "reaper.SNM_TagMediaFile(${1:fn}, ${2:tag}, ${3:tagval})$0",
	"description": "[S&M] Tags a media file thanks to TagLib. Supported tags: 'artist', 'album', 'genre', 'comment', 'title', 'track' (track number) or 'year'. Use an empty tagval to clear a tag. When a file is opened in REAPER, turn it offline before using this function. Returns false if nothing updated. See SNM_ReadMediaFileTag.\n\n"
	},

	"SNM_TieResourceSlotActions lua": {
	"prefix": "reaper.SNM_TieResourceSlotActions",
	"scope": "lua",
	"body": "reaper.SNM_TieResourceSlotActions(${1:bookmarkId})$0",
	"description": "[S&M] Attach Resources slot actions to a given bookmark.\n\n"
	},

	"SN_FocusMIDIEditor lua": {
	"prefix": "reaper.SN_FocusMIDIEditor",
	"scope": "lua",
	"body": "reaper.SN_FocusMIDIEditor()\n\n",
	"description": "Focuses the active/open MIDI editor.\n\n"
	},

	"ULT_GetMediaItemNote lua": {
	"prefix": "reaper.ULT_GetMediaItemNote",
	"scope": "lua",
	"body": "reaper.ULT_GetMediaItemNote(${1:item})$0",
	"description": "[ULT] Deprecated, see GetSetMediaItemInfo_String (v5.95+). Get item notes.\n\n"
	},

	"ULT_SetMediaItemNote lua": {
	"prefix": "reaper.ULT_SetMediaItemNote",
	"scope": "lua",
	"body": "reaper.ULT_SetMediaItemNote(${1:item}, ${2:note})$0",
	"description": "[ULT] Deprecated, see GetSetMediaItemInfo_String (v5.95+). Set item notes.\n\n"
	},

	"Xen_AudioWriter_Create lua": {
	"prefix": "reaper.Xen_AudioWriter_Create",
	"scope": "lua",
	"body": "reaper.Xen_AudioWriter_Create(${1:filename}, ${2:numchans}, ${3:samplerate})$0",
	"description": "Creates writer for 32 bit floating point WAV\n\n"
	},

	"Xen_AudioWriter_Destroy lua": {
	"prefix": "reaper.Xen_AudioWriter_Destroy",
	"scope": "lua",
	"body": "reaper.Xen_AudioWriter_Destroy(${1:writer})$0",
	"description": "Destroys writer\n\n"
	},

	"Xen_AudioWriter_Write lua": {
	"prefix": "reaper.Xen_AudioWriter_Write",
	"scope": "lua",
	"body": "reaper.Xen_AudioWriter_Write(${1:writer}, ${2:numframes}, ${3:data}, ${4:offset})$0",
	"description": "Write interleaved audio data to disk\n\n"
	},

	"Xen_GetMediaSourceSamples lua": {
	"prefix": "reaper.Xen_GetMediaSourceSamples",
	"scope": "lua",
	"body": "reaper.Xen_GetMediaSourceSamples(${1:src}, ${2:destbuf}, ${3:destbufoffset}, ${4:numframes}, ${5:numchans}, ${6:samplerate}, ${7:sourceposition})$0",
	"description": "Get interleaved audio data from media source\n\n"
	},

	"Xen_StartSourcePreview lua": {
	"prefix": "reaper.Xen_StartSourcePreview",
	"scope": "lua",
	"body": "reaper.Xen_StartSourcePreview(${1:source}, ${2:gain}, ${3:loop}, ${4:optional_outputchanindexIn})$0",
	"description": "Start audio preview of a PCM_source. Returns id of a preview handle that can be provided to Xen_StopSourcePreview.\nIf the given PCM_source does not belong to an existing MediaItem/Take, it will be deleted by the preview system when the preview is stopped.\n\n"
	},

	"Xen_StopSourcePreview lua": {
	"prefix": "reaper.Xen_StopSourcePreview",
	"scope": "lua",
	"body": "reaper.Xen_StopSourcePreview(${1:preview_id})$0",
	"description": "Stop audio preview. id -1 stops all.\n\n"a
	},


}
